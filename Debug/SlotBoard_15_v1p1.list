
SlotBoard_15_v1p1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd58  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b4  0800be18  0800be18  0001be18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4cc  0800c4cc  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4cc  0800c4cc  0001c4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4d4  0800c4d4  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4d4  0800c4d4  0001c4d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c4d8  0800c4d8  0001c4d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800c4dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  20000204  0800c6e0  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000204  200006a4  0800c6e0  000206a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013dcc  00000000  00000000  0002026f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ff5  00000000  00000000  0003403b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d0  00000000  00000000  00037030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d1b  00000000  00000000  00038100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004128  00000000  00000000  00038e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000155cb  00000000  00000000  0003cf43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000958b4  00000000  00000000  0005250e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004bcc  00000000  00000000  000e7dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000ec990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000204 	.word	0x20000204
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800bdfc 	.word	0x0800bdfc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000208 	.word	0x20000208
 8000100:	0800bdfc 	.word	0x0800bdfc

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f815 	bl	8001468 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ff65 	bl	8001318 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f807 	bl	8001468 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 fffd 	bl	8001468 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ff8d 	bl	800139c <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 ff83 	bl	800139c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f806 	bl	80004e4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__udivmoddi4>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	4657      	mov	r7, sl
 80004e8:	464e      	mov	r6, r9
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	b5e0      	push	{r5, r6, r7, lr}
 80004f0:	0004      	movs	r4, r0
 80004f2:	000d      	movs	r5, r1
 80004f4:	4692      	mov	sl, r2
 80004f6:	4699      	mov	r9, r3
 80004f8:	b083      	sub	sp, #12
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d830      	bhi.n	8000560 <__udivmoddi4+0x7c>
 80004fe:	d02d      	beq.n	800055c <__udivmoddi4+0x78>
 8000500:	4649      	mov	r1, r9
 8000502:	4650      	mov	r0, sl
 8000504:	f001 ff20 	bl	8002348 <__clzdi2>
 8000508:	0029      	movs	r1, r5
 800050a:	0006      	movs	r6, r0
 800050c:	0020      	movs	r0, r4
 800050e:	f001 ff1b 	bl	8002348 <__clzdi2>
 8000512:	1a33      	subs	r3, r6, r0
 8000514:	4698      	mov	r8, r3
 8000516:	3b20      	subs	r3, #32
 8000518:	d434      	bmi.n	8000584 <__udivmoddi4+0xa0>
 800051a:	469b      	mov	fp, r3
 800051c:	4653      	mov	r3, sl
 800051e:	465a      	mov	r2, fp
 8000520:	4093      	lsls	r3, r2
 8000522:	4642      	mov	r2, r8
 8000524:	001f      	movs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d83b      	bhi.n	80005a8 <__udivmoddi4+0xc4>
 8000530:	42af      	cmp	r7, r5
 8000532:	d100      	bne.n	8000536 <__udivmoddi4+0x52>
 8000534:	e079      	b.n	800062a <__udivmoddi4+0x146>
 8000536:	465b      	mov	r3, fp
 8000538:	1ba4      	subs	r4, r4, r6
 800053a:	41bd      	sbcs	r5, r7
 800053c:	2b00      	cmp	r3, #0
 800053e:	da00      	bge.n	8000542 <__udivmoddi4+0x5e>
 8000540:	e076      	b.n	8000630 <__udivmoddi4+0x14c>
 8000542:	2200      	movs	r2, #0
 8000544:	2300      	movs	r3, #0
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	465a      	mov	r2, fp
 800054e:	4093      	lsls	r3, r2
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	4642      	mov	r2, r8
 8000556:	4093      	lsls	r3, r2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	e029      	b.n	80005b0 <__udivmoddi4+0xcc>
 800055c:	4282      	cmp	r2, r0
 800055e:	d9cf      	bls.n	8000500 <__udivmoddi4+0x1c>
 8000560:	2200      	movs	r2, #0
 8000562:	2300      	movs	r3, #0
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <__udivmoddi4+0x8e>
 800056e:	601c      	str	r4, [r3, #0]
 8000570:	605d      	str	r5, [r3, #4]
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	b003      	add	sp, #12
 8000578:	bcf0      	pop	{r4, r5, r6, r7}
 800057a:	46bb      	mov	fp, r7
 800057c:	46b2      	mov	sl, r6
 800057e:	46a9      	mov	r9, r5
 8000580:	46a0      	mov	r8, r4
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000584:	4642      	mov	r2, r8
 8000586:	469b      	mov	fp, r3
 8000588:	2320      	movs	r3, #32
 800058a:	1a9b      	subs	r3, r3, r2
 800058c:	4652      	mov	r2, sl
 800058e:	40da      	lsrs	r2, r3
 8000590:	4641      	mov	r1, r8
 8000592:	0013      	movs	r3, r2
 8000594:	464a      	mov	r2, r9
 8000596:	408a      	lsls	r2, r1
 8000598:	0017      	movs	r7, r2
 800059a:	4642      	mov	r2, r8
 800059c:	431f      	orrs	r7, r3
 800059e:	4653      	mov	r3, sl
 80005a0:	4093      	lsls	r3, r2
 80005a2:	001e      	movs	r6, r3
 80005a4:	42af      	cmp	r7, r5
 80005a6:	d9c3      	bls.n	8000530 <__udivmoddi4+0x4c>
 80005a8:	2200      	movs	r2, #0
 80005aa:	2300      	movs	r3, #0
 80005ac:	9200      	str	r2, [sp, #0]
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	4643      	mov	r3, r8
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0d8      	beq.n	8000568 <__udivmoddi4+0x84>
 80005b6:	07fb      	lsls	r3, r7, #31
 80005b8:	0872      	lsrs	r2, r6, #1
 80005ba:	431a      	orrs	r2, r3
 80005bc:	4646      	mov	r6, r8
 80005be:	087b      	lsrs	r3, r7, #1
 80005c0:	e00e      	b.n	80005e0 <__udivmoddi4+0xfc>
 80005c2:	42ab      	cmp	r3, r5
 80005c4:	d101      	bne.n	80005ca <__udivmoddi4+0xe6>
 80005c6:	42a2      	cmp	r2, r4
 80005c8:	d80c      	bhi.n	80005e4 <__udivmoddi4+0x100>
 80005ca:	1aa4      	subs	r4, r4, r2
 80005cc:	419d      	sbcs	r5, r3
 80005ce:	2001      	movs	r0, #1
 80005d0:	1924      	adds	r4, r4, r4
 80005d2:	416d      	adcs	r5, r5
 80005d4:	2100      	movs	r1, #0
 80005d6:	3e01      	subs	r6, #1
 80005d8:	1824      	adds	r4, r4, r0
 80005da:	414d      	adcs	r5, r1
 80005dc:	2e00      	cmp	r6, #0
 80005de:	d006      	beq.n	80005ee <__udivmoddi4+0x10a>
 80005e0:	42ab      	cmp	r3, r5
 80005e2:	d9ee      	bls.n	80005c2 <__udivmoddi4+0xde>
 80005e4:	3e01      	subs	r6, #1
 80005e6:	1924      	adds	r4, r4, r4
 80005e8:	416d      	adcs	r5, r5
 80005ea:	2e00      	cmp	r6, #0
 80005ec:	d1f8      	bne.n	80005e0 <__udivmoddi4+0xfc>
 80005ee:	9800      	ldr	r0, [sp, #0]
 80005f0:	9901      	ldr	r1, [sp, #4]
 80005f2:	465b      	mov	r3, fp
 80005f4:	1900      	adds	r0, r0, r4
 80005f6:	4169      	adcs	r1, r5
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	db24      	blt.n	8000646 <__udivmoddi4+0x162>
 80005fc:	002b      	movs	r3, r5
 80005fe:	465a      	mov	r2, fp
 8000600:	4644      	mov	r4, r8
 8000602:	40d3      	lsrs	r3, r2
 8000604:	002a      	movs	r2, r5
 8000606:	40e2      	lsrs	r2, r4
 8000608:	001c      	movs	r4, r3
 800060a:	465b      	mov	r3, fp
 800060c:	0015      	movs	r5, r2
 800060e:	2b00      	cmp	r3, #0
 8000610:	db2a      	blt.n	8000668 <__udivmoddi4+0x184>
 8000612:	0026      	movs	r6, r4
 8000614:	409e      	lsls	r6, r3
 8000616:	0033      	movs	r3, r6
 8000618:	0026      	movs	r6, r4
 800061a:	4647      	mov	r7, r8
 800061c:	40be      	lsls	r6, r7
 800061e:	0032      	movs	r2, r6
 8000620:	1a80      	subs	r0, r0, r2
 8000622:	4199      	sbcs	r1, r3
 8000624:	9000      	str	r0, [sp, #0]
 8000626:	9101      	str	r1, [sp, #4]
 8000628:	e79e      	b.n	8000568 <__udivmoddi4+0x84>
 800062a:	42a3      	cmp	r3, r4
 800062c:	d8bc      	bhi.n	80005a8 <__udivmoddi4+0xc4>
 800062e:	e782      	b.n	8000536 <__udivmoddi4+0x52>
 8000630:	4642      	mov	r2, r8
 8000632:	2320      	movs	r3, #32
 8000634:	2100      	movs	r1, #0
 8000636:	1a9b      	subs	r3, r3, r2
 8000638:	2200      	movs	r2, #0
 800063a:	9100      	str	r1, [sp, #0]
 800063c:	9201      	str	r2, [sp, #4]
 800063e:	2201      	movs	r2, #1
 8000640:	40da      	lsrs	r2, r3
 8000642:	9201      	str	r2, [sp, #4]
 8000644:	e785      	b.n	8000552 <__udivmoddi4+0x6e>
 8000646:	4642      	mov	r2, r8
 8000648:	2320      	movs	r3, #32
 800064a:	1a9b      	subs	r3, r3, r2
 800064c:	002a      	movs	r2, r5
 800064e:	4646      	mov	r6, r8
 8000650:	409a      	lsls	r2, r3
 8000652:	0023      	movs	r3, r4
 8000654:	40f3      	lsrs	r3, r6
 8000656:	4644      	mov	r4, r8
 8000658:	4313      	orrs	r3, r2
 800065a:	002a      	movs	r2, r5
 800065c:	40e2      	lsrs	r2, r4
 800065e:	001c      	movs	r4, r3
 8000660:	465b      	mov	r3, fp
 8000662:	0015      	movs	r5, r2
 8000664:	2b00      	cmp	r3, #0
 8000666:	dad4      	bge.n	8000612 <__udivmoddi4+0x12e>
 8000668:	4642      	mov	r2, r8
 800066a:	002f      	movs	r7, r5
 800066c:	2320      	movs	r3, #32
 800066e:	0026      	movs	r6, r4
 8000670:	4097      	lsls	r7, r2
 8000672:	1a9b      	subs	r3, r3, r2
 8000674:	40de      	lsrs	r6, r3
 8000676:	003b      	movs	r3, r7
 8000678:	4333      	orrs	r3, r6
 800067a:	e7cd      	b.n	8000618 <__udivmoddi4+0x134>

0800067c <__aeabi_dadd>:
 800067c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067e:	464f      	mov	r7, r9
 8000680:	4646      	mov	r6, r8
 8000682:	46d6      	mov	lr, sl
 8000684:	0004      	movs	r4, r0
 8000686:	b5c0      	push	{r6, r7, lr}
 8000688:	001f      	movs	r7, r3
 800068a:	030b      	lsls	r3, r1, #12
 800068c:	0010      	movs	r0, r2
 800068e:	004e      	lsls	r6, r1, #1
 8000690:	0a5b      	lsrs	r3, r3, #9
 8000692:	0fcd      	lsrs	r5, r1, #31
 8000694:	0f61      	lsrs	r1, r4, #29
 8000696:	007a      	lsls	r2, r7, #1
 8000698:	4319      	orrs	r1, r3
 800069a:	00e3      	lsls	r3, r4, #3
 800069c:	033c      	lsls	r4, r7, #12
 800069e:	0fff      	lsrs	r7, r7, #31
 80006a0:	46bc      	mov	ip, r7
 80006a2:	0a64      	lsrs	r4, r4, #9
 80006a4:	0f47      	lsrs	r7, r0, #29
 80006a6:	4327      	orrs	r7, r4
 80006a8:	0d76      	lsrs	r6, r6, #21
 80006aa:	0d52      	lsrs	r2, r2, #21
 80006ac:	00c0      	lsls	r0, r0, #3
 80006ae:	46b9      	mov	r9, r7
 80006b0:	4680      	mov	r8, r0
 80006b2:	1ab7      	subs	r7, r6, r2
 80006b4:	4565      	cmp	r5, ip
 80006b6:	d100      	bne.n	80006ba <__aeabi_dadd+0x3e>
 80006b8:	e09b      	b.n	80007f2 <__aeabi_dadd+0x176>
 80006ba:	2f00      	cmp	r7, #0
 80006bc:	dc00      	bgt.n	80006c0 <__aeabi_dadd+0x44>
 80006be:	e084      	b.n	80007ca <__aeabi_dadd+0x14e>
 80006c0:	2a00      	cmp	r2, #0
 80006c2:	d100      	bne.n	80006c6 <__aeabi_dadd+0x4a>
 80006c4:	e0be      	b.n	8000844 <__aeabi_dadd+0x1c8>
 80006c6:	4ac8      	ldr	r2, [pc, #800]	; (80009e8 <__aeabi_dadd+0x36c>)
 80006c8:	4296      	cmp	r6, r2
 80006ca:	d100      	bne.n	80006ce <__aeabi_dadd+0x52>
 80006cc:	e124      	b.n	8000918 <__aeabi_dadd+0x29c>
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	464c      	mov	r4, r9
 80006d2:	0412      	lsls	r2, r2, #16
 80006d4:	4314      	orrs	r4, r2
 80006d6:	46a1      	mov	r9, r4
 80006d8:	2f38      	cmp	r7, #56	; 0x38
 80006da:	dd00      	ble.n	80006de <__aeabi_dadd+0x62>
 80006dc:	e167      	b.n	80009ae <__aeabi_dadd+0x332>
 80006de:	2f1f      	cmp	r7, #31
 80006e0:	dd00      	ble.n	80006e4 <__aeabi_dadd+0x68>
 80006e2:	e1d6      	b.n	8000a92 <__aeabi_dadd+0x416>
 80006e4:	2220      	movs	r2, #32
 80006e6:	464c      	mov	r4, r9
 80006e8:	1bd2      	subs	r2, r2, r7
 80006ea:	4094      	lsls	r4, r2
 80006ec:	46a2      	mov	sl, r4
 80006ee:	4644      	mov	r4, r8
 80006f0:	40fc      	lsrs	r4, r7
 80006f2:	0020      	movs	r0, r4
 80006f4:	4654      	mov	r4, sl
 80006f6:	4304      	orrs	r4, r0
 80006f8:	4640      	mov	r0, r8
 80006fa:	4090      	lsls	r0, r2
 80006fc:	1e42      	subs	r2, r0, #1
 80006fe:	4190      	sbcs	r0, r2
 8000700:	464a      	mov	r2, r9
 8000702:	40fa      	lsrs	r2, r7
 8000704:	4304      	orrs	r4, r0
 8000706:	1a89      	subs	r1, r1, r2
 8000708:	1b1c      	subs	r4, r3, r4
 800070a:	42a3      	cmp	r3, r4
 800070c:	4192      	sbcs	r2, r2
 800070e:	4252      	negs	r2, r2
 8000710:	1a8b      	subs	r3, r1, r2
 8000712:	469a      	mov	sl, r3
 8000714:	4653      	mov	r3, sl
 8000716:	021b      	lsls	r3, r3, #8
 8000718:	d400      	bmi.n	800071c <__aeabi_dadd+0xa0>
 800071a:	e0d4      	b.n	80008c6 <__aeabi_dadd+0x24a>
 800071c:	4653      	mov	r3, sl
 800071e:	025a      	lsls	r2, r3, #9
 8000720:	0a53      	lsrs	r3, r2, #9
 8000722:	469a      	mov	sl, r3
 8000724:	4653      	mov	r3, sl
 8000726:	2b00      	cmp	r3, #0
 8000728:	d100      	bne.n	800072c <__aeabi_dadd+0xb0>
 800072a:	e104      	b.n	8000936 <__aeabi_dadd+0x2ba>
 800072c:	4650      	mov	r0, sl
 800072e:	f001 fded 	bl	800230c <__clzsi2>
 8000732:	0003      	movs	r3, r0
 8000734:	3b08      	subs	r3, #8
 8000736:	2220      	movs	r2, #32
 8000738:	0020      	movs	r0, r4
 800073a:	1ad2      	subs	r2, r2, r3
 800073c:	4651      	mov	r1, sl
 800073e:	40d0      	lsrs	r0, r2
 8000740:	4099      	lsls	r1, r3
 8000742:	0002      	movs	r2, r0
 8000744:	409c      	lsls	r4, r3
 8000746:	430a      	orrs	r2, r1
 8000748:	42b3      	cmp	r3, r6
 800074a:	da00      	bge.n	800074e <__aeabi_dadd+0xd2>
 800074c:	e102      	b.n	8000954 <__aeabi_dadd+0x2d8>
 800074e:	1b9b      	subs	r3, r3, r6
 8000750:	1c59      	adds	r1, r3, #1
 8000752:	291f      	cmp	r1, #31
 8000754:	dd00      	ble.n	8000758 <__aeabi_dadd+0xdc>
 8000756:	e0a7      	b.n	80008a8 <__aeabi_dadd+0x22c>
 8000758:	2320      	movs	r3, #32
 800075a:	0010      	movs	r0, r2
 800075c:	0026      	movs	r6, r4
 800075e:	1a5b      	subs	r3, r3, r1
 8000760:	409c      	lsls	r4, r3
 8000762:	4098      	lsls	r0, r3
 8000764:	40ce      	lsrs	r6, r1
 8000766:	40ca      	lsrs	r2, r1
 8000768:	1e63      	subs	r3, r4, #1
 800076a:	419c      	sbcs	r4, r3
 800076c:	4330      	orrs	r0, r6
 800076e:	4692      	mov	sl, r2
 8000770:	2600      	movs	r6, #0
 8000772:	4304      	orrs	r4, r0
 8000774:	0763      	lsls	r3, r4, #29
 8000776:	d009      	beq.n	800078c <__aeabi_dadd+0x110>
 8000778:	230f      	movs	r3, #15
 800077a:	4023      	ands	r3, r4
 800077c:	2b04      	cmp	r3, #4
 800077e:	d005      	beq.n	800078c <__aeabi_dadd+0x110>
 8000780:	1d23      	adds	r3, r4, #4
 8000782:	42a3      	cmp	r3, r4
 8000784:	41a4      	sbcs	r4, r4
 8000786:	4264      	negs	r4, r4
 8000788:	44a2      	add	sl, r4
 800078a:	001c      	movs	r4, r3
 800078c:	4653      	mov	r3, sl
 800078e:	021b      	lsls	r3, r3, #8
 8000790:	d400      	bmi.n	8000794 <__aeabi_dadd+0x118>
 8000792:	e09b      	b.n	80008cc <__aeabi_dadd+0x250>
 8000794:	4b94      	ldr	r3, [pc, #592]	; (80009e8 <__aeabi_dadd+0x36c>)
 8000796:	3601      	adds	r6, #1
 8000798:	429e      	cmp	r6, r3
 800079a:	d100      	bne.n	800079e <__aeabi_dadd+0x122>
 800079c:	e0b8      	b.n	8000910 <__aeabi_dadd+0x294>
 800079e:	4653      	mov	r3, sl
 80007a0:	4992      	ldr	r1, [pc, #584]	; (80009ec <__aeabi_dadd+0x370>)
 80007a2:	08e4      	lsrs	r4, r4, #3
 80007a4:	400b      	ands	r3, r1
 80007a6:	0019      	movs	r1, r3
 80007a8:	075b      	lsls	r3, r3, #29
 80007aa:	4323      	orrs	r3, r4
 80007ac:	0572      	lsls	r2, r6, #21
 80007ae:	024c      	lsls	r4, r1, #9
 80007b0:	0b24      	lsrs	r4, r4, #12
 80007b2:	0d52      	lsrs	r2, r2, #21
 80007b4:	0512      	lsls	r2, r2, #20
 80007b6:	07ed      	lsls	r5, r5, #31
 80007b8:	4322      	orrs	r2, r4
 80007ba:	432a      	orrs	r2, r5
 80007bc:	0018      	movs	r0, r3
 80007be:	0011      	movs	r1, r2
 80007c0:	bce0      	pop	{r5, r6, r7}
 80007c2:	46ba      	mov	sl, r7
 80007c4:	46b1      	mov	r9, r6
 80007c6:	46a8      	mov	r8, r5
 80007c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ca:	2f00      	cmp	r7, #0
 80007cc:	d048      	beq.n	8000860 <__aeabi_dadd+0x1e4>
 80007ce:	1b97      	subs	r7, r2, r6
 80007d0:	2e00      	cmp	r6, #0
 80007d2:	d000      	beq.n	80007d6 <__aeabi_dadd+0x15a>
 80007d4:	e10e      	b.n	80009f4 <__aeabi_dadd+0x378>
 80007d6:	000c      	movs	r4, r1
 80007d8:	431c      	orrs	r4, r3
 80007da:	d100      	bne.n	80007de <__aeabi_dadd+0x162>
 80007dc:	e1b7      	b.n	8000b4e <__aeabi_dadd+0x4d2>
 80007de:	1e7c      	subs	r4, r7, #1
 80007e0:	2f01      	cmp	r7, #1
 80007e2:	d100      	bne.n	80007e6 <__aeabi_dadd+0x16a>
 80007e4:	e226      	b.n	8000c34 <__aeabi_dadd+0x5b8>
 80007e6:	4d80      	ldr	r5, [pc, #512]	; (80009e8 <__aeabi_dadd+0x36c>)
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d100      	bne.n	80007ee <__aeabi_dadd+0x172>
 80007ec:	e1d5      	b.n	8000b9a <__aeabi_dadd+0x51e>
 80007ee:	0027      	movs	r7, r4
 80007f0:	e107      	b.n	8000a02 <__aeabi_dadd+0x386>
 80007f2:	2f00      	cmp	r7, #0
 80007f4:	dc00      	bgt.n	80007f8 <__aeabi_dadd+0x17c>
 80007f6:	e0b2      	b.n	800095e <__aeabi_dadd+0x2e2>
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	d047      	beq.n	800088c <__aeabi_dadd+0x210>
 80007fc:	4a7a      	ldr	r2, [pc, #488]	; (80009e8 <__aeabi_dadd+0x36c>)
 80007fe:	4296      	cmp	r6, r2
 8000800:	d100      	bne.n	8000804 <__aeabi_dadd+0x188>
 8000802:	e089      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000804:	2280      	movs	r2, #128	; 0x80
 8000806:	464c      	mov	r4, r9
 8000808:	0412      	lsls	r2, r2, #16
 800080a:	4314      	orrs	r4, r2
 800080c:	46a1      	mov	r9, r4
 800080e:	2f38      	cmp	r7, #56	; 0x38
 8000810:	dc6b      	bgt.n	80008ea <__aeabi_dadd+0x26e>
 8000812:	2f1f      	cmp	r7, #31
 8000814:	dc00      	bgt.n	8000818 <__aeabi_dadd+0x19c>
 8000816:	e16e      	b.n	8000af6 <__aeabi_dadd+0x47a>
 8000818:	003a      	movs	r2, r7
 800081a:	4648      	mov	r0, r9
 800081c:	3a20      	subs	r2, #32
 800081e:	40d0      	lsrs	r0, r2
 8000820:	4684      	mov	ip, r0
 8000822:	2f20      	cmp	r7, #32
 8000824:	d007      	beq.n	8000836 <__aeabi_dadd+0x1ba>
 8000826:	2240      	movs	r2, #64	; 0x40
 8000828:	4648      	mov	r0, r9
 800082a:	1bd2      	subs	r2, r2, r7
 800082c:	4090      	lsls	r0, r2
 800082e:	0002      	movs	r2, r0
 8000830:	4640      	mov	r0, r8
 8000832:	4310      	orrs	r0, r2
 8000834:	4680      	mov	r8, r0
 8000836:	4640      	mov	r0, r8
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	4662      	mov	r2, ip
 800083e:	0004      	movs	r4, r0
 8000840:	4314      	orrs	r4, r2
 8000842:	e057      	b.n	80008f4 <__aeabi_dadd+0x278>
 8000844:	464a      	mov	r2, r9
 8000846:	4302      	orrs	r2, r0
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x1d0>
 800084a:	e103      	b.n	8000a54 <__aeabi_dadd+0x3d8>
 800084c:	1e7a      	subs	r2, r7, #1
 800084e:	2f01      	cmp	r7, #1
 8000850:	d100      	bne.n	8000854 <__aeabi_dadd+0x1d8>
 8000852:	e193      	b.n	8000b7c <__aeabi_dadd+0x500>
 8000854:	4c64      	ldr	r4, [pc, #400]	; (80009e8 <__aeabi_dadd+0x36c>)
 8000856:	42a7      	cmp	r7, r4
 8000858:	d100      	bne.n	800085c <__aeabi_dadd+0x1e0>
 800085a:	e18a      	b.n	8000b72 <__aeabi_dadd+0x4f6>
 800085c:	0017      	movs	r7, r2
 800085e:	e73b      	b.n	80006d8 <__aeabi_dadd+0x5c>
 8000860:	4c63      	ldr	r4, [pc, #396]	; (80009f0 <__aeabi_dadd+0x374>)
 8000862:	1c72      	adds	r2, r6, #1
 8000864:	4222      	tst	r2, r4
 8000866:	d000      	beq.n	800086a <__aeabi_dadd+0x1ee>
 8000868:	e0e0      	b.n	8000a2c <__aeabi_dadd+0x3b0>
 800086a:	000a      	movs	r2, r1
 800086c:	431a      	orrs	r2, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d000      	beq.n	8000874 <__aeabi_dadd+0x1f8>
 8000872:	e174      	b.n	8000b5e <__aeabi_dadd+0x4e2>
 8000874:	2a00      	cmp	r2, #0
 8000876:	d100      	bne.n	800087a <__aeabi_dadd+0x1fe>
 8000878:	e1d0      	b.n	8000c1c <__aeabi_dadd+0x5a0>
 800087a:	464a      	mov	r2, r9
 800087c:	4302      	orrs	r2, r0
 800087e:	d000      	beq.n	8000882 <__aeabi_dadd+0x206>
 8000880:	e1e3      	b.n	8000c4a <__aeabi_dadd+0x5ce>
 8000882:	074a      	lsls	r2, r1, #29
 8000884:	08db      	lsrs	r3, r3, #3
 8000886:	4313      	orrs	r3, r2
 8000888:	08c9      	lsrs	r1, r1, #3
 800088a:	e029      	b.n	80008e0 <__aeabi_dadd+0x264>
 800088c:	464a      	mov	r2, r9
 800088e:	4302      	orrs	r2, r0
 8000890:	d100      	bne.n	8000894 <__aeabi_dadd+0x218>
 8000892:	e17d      	b.n	8000b90 <__aeabi_dadd+0x514>
 8000894:	1e7a      	subs	r2, r7, #1
 8000896:	2f01      	cmp	r7, #1
 8000898:	d100      	bne.n	800089c <__aeabi_dadd+0x220>
 800089a:	e0e0      	b.n	8000a5e <__aeabi_dadd+0x3e2>
 800089c:	4c52      	ldr	r4, [pc, #328]	; (80009e8 <__aeabi_dadd+0x36c>)
 800089e:	42a7      	cmp	r7, r4
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dadd+0x228>
 80008a2:	e166      	b.n	8000b72 <__aeabi_dadd+0x4f6>
 80008a4:	0017      	movs	r7, r2
 80008a6:	e7b2      	b.n	800080e <__aeabi_dadd+0x192>
 80008a8:	0010      	movs	r0, r2
 80008aa:	3b1f      	subs	r3, #31
 80008ac:	40d8      	lsrs	r0, r3
 80008ae:	2920      	cmp	r1, #32
 80008b0:	d003      	beq.n	80008ba <__aeabi_dadd+0x23e>
 80008b2:	2340      	movs	r3, #64	; 0x40
 80008b4:	1a5b      	subs	r3, r3, r1
 80008b6:	409a      	lsls	r2, r3
 80008b8:	4314      	orrs	r4, r2
 80008ba:	1e63      	subs	r3, r4, #1
 80008bc:	419c      	sbcs	r4, r3
 80008be:	2300      	movs	r3, #0
 80008c0:	2600      	movs	r6, #0
 80008c2:	469a      	mov	sl, r3
 80008c4:	4304      	orrs	r4, r0
 80008c6:	0763      	lsls	r3, r4, #29
 80008c8:	d000      	beq.n	80008cc <__aeabi_dadd+0x250>
 80008ca:	e755      	b.n	8000778 <__aeabi_dadd+0xfc>
 80008cc:	4652      	mov	r2, sl
 80008ce:	08e3      	lsrs	r3, r4, #3
 80008d0:	0752      	lsls	r2, r2, #29
 80008d2:	4313      	orrs	r3, r2
 80008d4:	4652      	mov	r2, sl
 80008d6:	0037      	movs	r7, r6
 80008d8:	08d1      	lsrs	r1, r2, #3
 80008da:	4a43      	ldr	r2, [pc, #268]	; (80009e8 <__aeabi_dadd+0x36c>)
 80008dc:	4297      	cmp	r7, r2
 80008de:	d01f      	beq.n	8000920 <__aeabi_dadd+0x2a4>
 80008e0:	0309      	lsls	r1, r1, #12
 80008e2:	057a      	lsls	r2, r7, #21
 80008e4:	0b0c      	lsrs	r4, r1, #12
 80008e6:	0d52      	lsrs	r2, r2, #21
 80008e8:	e764      	b.n	80007b4 <__aeabi_dadd+0x138>
 80008ea:	4642      	mov	r2, r8
 80008ec:	464c      	mov	r4, r9
 80008ee:	4314      	orrs	r4, r2
 80008f0:	1e62      	subs	r2, r4, #1
 80008f2:	4194      	sbcs	r4, r2
 80008f4:	18e4      	adds	r4, r4, r3
 80008f6:	429c      	cmp	r4, r3
 80008f8:	4192      	sbcs	r2, r2
 80008fa:	4252      	negs	r2, r2
 80008fc:	4692      	mov	sl, r2
 80008fe:	448a      	add	sl, r1
 8000900:	4653      	mov	r3, sl
 8000902:	021b      	lsls	r3, r3, #8
 8000904:	d5df      	bpl.n	80008c6 <__aeabi_dadd+0x24a>
 8000906:	4b38      	ldr	r3, [pc, #224]	; (80009e8 <__aeabi_dadd+0x36c>)
 8000908:	3601      	adds	r6, #1
 800090a:	429e      	cmp	r6, r3
 800090c:	d000      	beq.n	8000910 <__aeabi_dadd+0x294>
 800090e:	e0b3      	b.n	8000a78 <__aeabi_dadd+0x3fc>
 8000910:	0032      	movs	r2, r6
 8000912:	2400      	movs	r4, #0
 8000914:	2300      	movs	r3, #0
 8000916:	e74d      	b.n	80007b4 <__aeabi_dadd+0x138>
 8000918:	074a      	lsls	r2, r1, #29
 800091a:	08db      	lsrs	r3, r3, #3
 800091c:	4313      	orrs	r3, r2
 800091e:	08c9      	lsrs	r1, r1, #3
 8000920:	001a      	movs	r2, r3
 8000922:	430a      	orrs	r2, r1
 8000924:	d100      	bne.n	8000928 <__aeabi_dadd+0x2ac>
 8000926:	e200      	b.n	8000d2a <__aeabi_dadd+0x6ae>
 8000928:	2480      	movs	r4, #128	; 0x80
 800092a:	0324      	lsls	r4, r4, #12
 800092c:	430c      	orrs	r4, r1
 800092e:	0324      	lsls	r4, r4, #12
 8000930:	4a2d      	ldr	r2, [pc, #180]	; (80009e8 <__aeabi_dadd+0x36c>)
 8000932:	0b24      	lsrs	r4, r4, #12
 8000934:	e73e      	b.n	80007b4 <__aeabi_dadd+0x138>
 8000936:	0020      	movs	r0, r4
 8000938:	f001 fce8 	bl	800230c <__clzsi2>
 800093c:	0003      	movs	r3, r0
 800093e:	3318      	adds	r3, #24
 8000940:	2b1f      	cmp	r3, #31
 8000942:	dc00      	bgt.n	8000946 <__aeabi_dadd+0x2ca>
 8000944:	e6f7      	b.n	8000736 <__aeabi_dadd+0xba>
 8000946:	0022      	movs	r2, r4
 8000948:	3808      	subs	r0, #8
 800094a:	4082      	lsls	r2, r0
 800094c:	2400      	movs	r4, #0
 800094e:	42b3      	cmp	r3, r6
 8000950:	db00      	blt.n	8000954 <__aeabi_dadd+0x2d8>
 8000952:	e6fc      	b.n	800074e <__aeabi_dadd+0xd2>
 8000954:	1af6      	subs	r6, r6, r3
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <__aeabi_dadd+0x370>)
 8000958:	401a      	ands	r2, r3
 800095a:	4692      	mov	sl, r2
 800095c:	e70a      	b.n	8000774 <__aeabi_dadd+0xf8>
 800095e:	2f00      	cmp	r7, #0
 8000960:	d02b      	beq.n	80009ba <__aeabi_dadd+0x33e>
 8000962:	1b97      	subs	r7, r2, r6
 8000964:	2e00      	cmp	r6, #0
 8000966:	d100      	bne.n	800096a <__aeabi_dadd+0x2ee>
 8000968:	e0b8      	b.n	8000adc <__aeabi_dadd+0x460>
 800096a:	4c1f      	ldr	r4, [pc, #124]	; (80009e8 <__aeabi_dadd+0x36c>)
 800096c:	42a2      	cmp	r2, r4
 800096e:	d100      	bne.n	8000972 <__aeabi_dadd+0x2f6>
 8000970:	e11c      	b.n	8000bac <__aeabi_dadd+0x530>
 8000972:	2480      	movs	r4, #128	; 0x80
 8000974:	0424      	lsls	r4, r4, #16
 8000976:	4321      	orrs	r1, r4
 8000978:	2f38      	cmp	r7, #56	; 0x38
 800097a:	dd00      	ble.n	800097e <__aeabi_dadd+0x302>
 800097c:	e11e      	b.n	8000bbc <__aeabi_dadd+0x540>
 800097e:	2f1f      	cmp	r7, #31
 8000980:	dd00      	ble.n	8000984 <__aeabi_dadd+0x308>
 8000982:	e19e      	b.n	8000cc2 <__aeabi_dadd+0x646>
 8000984:	2620      	movs	r6, #32
 8000986:	000c      	movs	r4, r1
 8000988:	1bf6      	subs	r6, r6, r7
 800098a:	0018      	movs	r0, r3
 800098c:	40b3      	lsls	r3, r6
 800098e:	40b4      	lsls	r4, r6
 8000990:	40f8      	lsrs	r0, r7
 8000992:	1e5e      	subs	r6, r3, #1
 8000994:	41b3      	sbcs	r3, r6
 8000996:	40f9      	lsrs	r1, r7
 8000998:	4304      	orrs	r4, r0
 800099a:	431c      	orrs	r4, r3
 800099c:	4489      	add	r9, r1
 800099e:	4444      	add	r4, r8
 80009a0:	4544      	cmp	r4, r8
 80009a2:	419b      	sbcs	r3, r3
 80009a4:	425b      	negs	r3, r3
 80009a6:	444b      	add	r3, r9
 80009a8:	469a      	mov	sl, r3
 80009aa:	0016      	movs	r6, r2
 80009ac:	e7a8      	b.n	8000900 <__aeabi_dadd+0x284>
 80009ae:	4642      	mov	r2, r8
 80009b0:	464c      	mov	r4, r9
 80009b2:	4314      	orrs	r4, r2
 80009b4:	1e62      	subs	r2, r4, #1
 80009b6:	4194      	sbcs	r4, r2
 80009b8:	e6a6      	b.n	8000708 <__aeabi_dadd+0x8c>
 80009ba:	4c0d      	ldr	r4, [pc, #52]	; (80009f0 <__aeabi_dadd+0x374>)
 80009bc:	1c72      	adds	r2, r6, #1
 80009be:	4222      	tst	r2, r4
 80009c0:	d000      	beq.n	80009c4 <__aeabi_dadd+0x348>
 80009c2:	e0a8      	b.n	8000b16 <__aeabi_dadd+0x49a>
 80009c4:	000a      	movs	r2, r1
 80009c6:	431a      	orrs	r2, r3
 80009c8:	2e00      	cmp	r6, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_dadd+0x352>
 80009cc:	e10a      	b.n	8000be4 <__aeabi_dadd+0x568>
 80009ce:	2a00      	cmp	r2, #0
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x358>
 80009d2:	e15e      	b.n	8000c92 <__aeabi_dadd+0x616>
 80009d4:	464a      	mov	r2, r9
 80009d6:	4302      	orrs	r2, r0
 80009d8:	d000      	beq.n	80009dc <__aeabi_dadd+0x360>
 80009da:	e161      	b.n	8000ca0 <__aeabi_dadd+0x624>
 80009dc:	074a      	lsls	r2, r1, #29
 80009de:	08db      	lsrs	r3, r3, #3
 80009e0:	4313      	orrs	r3, r2
 80009e2:	08c9      	lsrs	r1, r1, #3
 80009e4:	e77c      	b.n	80008e0 <__aeabi_dadd+0x264>
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	000007ff 	.word	0x000007ff
 80009ec:	ff7fffff 	.word	0xff7fffff
 80009f0:	000007fe 	.word	0x000007fe
 80009f4:	4ccf      	ldr	r4, [pc, #828]	; (8000d34 <__aeabi_dadd+0x6b8>)
 80009f6:	42a2      	cmp	r2, r4
 80009f8:	d100      	bne.n	80009fc <__aeabi_dadd+0x380>
 80009fa:	e0ce      	b.n	8000b9a <__aeabi_dadd+0x51e>
 80009fc:	2480      	movs	r4, #128	; 0x80
 80009fe:	0424      	lsls	r4, r4, #16
 8000a00:	4321      	orrs	r1, r4
 8000a02:	2f38      	cmp	r7, #56	; 0x38
 8000a04:	dc5b      	bgt.n	8000abe <__aeabi_dadd+0x442>
 8000a06:	2f1f      	cmp	r7, #31
 8000a08:	dd00      	ble.n	8000a0c <__aeabi_dadd+0x390>
 8000a0a:	e0dc      	b.n	8000bc6 <__aeabi_dadd+0x54a>
 8000a0c:	2520      	movs	r5, #32
 8000a0e:	000c      	movs	r4, r1
 8000a10:	1bed      	subs	r5, r5, r7
 8000a12:	001e      	movs	r6, r3
 8000a14:	40ab      	lsls	r3, r5
 8000a16:	40ac      	lsls	r4, r5
 8000a18:	40fe      	lsrs	r6, r7
 8000a1a:	1e5d      	subs	r5, r3, #1
 8000a1c:	41ab      	sbcs	r3, r5
 8000a1e:	4334      	orrs	r4, r6
 8000a20:	40f9      	lsrs	r1, r7
 8000a22:	431c      	orrs	r4, r3
 8000a24:	464b      	mov	r3, r9
 8000a26:	1a5b      	subs	r3, r3, r1
 8000a28:	4699      	mov	r9, r3
 8000a2a:	e04c      	b.n	8000ac6 <__aeabi_dadd+0x44a>
 8000a2c:	464a      	mov	r2, r9
 8000a2e:	1a1c      	subs	r4, r3, r0
 8000a30:	1a88      	subs	r0, r1, r2
 8000a32:	42a3      	cmp	r3, r4
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	0002      	movs	r2, r0
 8000a3c:	4650      	mov	r0, sl
 8000a3e:	1a12      	subs	r2, r2, r0
 8000a40:	4692      	mov	sl, r2
 8000a42:	0212      	lsls	r2, r2, #8
 8000a44:	d478      	bmi.n	8000b38 <__aeabi_dadd+0x4bc>
 8000a46:	4653      	mov	r3, sl
 8000a48:	4323      	orrs	r3, r4
 8000a4a:	d000      	beq.n	8000a4e <__aeabi_dadd+0x3d2>
 8000a4c:	e66a      	b.n	8000724 <__aeabi_dadd+0xa8>
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2500      	movs	r5, #0
 8000a52:	e745      	b.n	80008e0 <__aeabi_dadd+0x264>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	e73d      	b.n	80008da <__aeabi_dadd+0x25e>
 8000a5e:	181c      	adds	r4, r3, r0
 8000a60:	429c      	cmp	r4, r3
 8000a62:	419b      	sbcs	r3, r3
 8000a64:	4449      	add	r1, r9
 8000a66:	468a      	mov	sl, r1
 8000a68:	425b      	negs	r3, r3
 8000a6a:	449a      	add	sl, r3
 8000a6c:	4653      	mov	r3, sl
 8000a6e:	2601      	movs	r6, #1
 8000a70:	021b      	lsls	r3, r3, #8
 8000a72:	d400      	bmi.n	8000a76 <__aeabi_dadd+0x3fa>
 8000a74:	e727      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000a76:	2602      	movs	r6, #2
 8000a78:	4652      	mov	r2, sl
 8000a7a:	4baf      	ldr	r3, [pc, #700]	; (8000d38 <__aeabi_dadd+0x6bc>)
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	401a      	ands	r2, r3
 8000a80:	0013      	movs	r3, r2
 8000a82:	4021      	ands	r1, r4
 8000a84:	0862      	lsrs	r2, r4, #1
 8000a86:	430a      	orrs	r2, r1
 8000a88:	07dc      	lsls	r4, r3, #31
 8000a8a:	085b      	lsrs	r3, r3, #1
 8000a8c:	469a      	mov	sl, r3
 8000a8e:	4314      	orrs	r4, r2
 8000a90:	e670      	b.n	8000774 <__aeabi_dadd+0xf8>
 8000a92:	003a      	movs	r2, r7
 8000a94:	464c      	mov	r4, r9
 8000a96:	3a20      	subs	r2, #32
 8000a98:	40d4      	lsrs	r4, r2
 8000a9a:	46a4      	mov	ip, r4
 8000a9c:	2f20      	cmp	r7, #32
 8000a9e:	d007      	beq.n	8000ab0 <__aeabi_dadd+0x434>
 8000aa0:	2240      	movs	r2, #64	; 0x40
 8000aa2:	4648      	mov	r0, r9
 8000aa4:	1bd2      	subs	r2, r2, r7
 8000aa6:	4090      	lsls	r0, r2
 8000aa8:	0002      	movs	r2, r0
 8000aaa:	4640      	mov	r0, r8
 8000aac:	4310      	orrs	r0, r2
 8000aae:	4680      	mov	r8, r0
 8000ab0:	4640      	mov	r0, r8
 8000ab2:	1e42      	subs	r2, r0, #1
 8000ab4:	4190      	sbcs	r0, r2
 8000ab6:	4662      	mov	r2, ip
 8000ab8:	0004      	movs	r4, r0
 8000aba:	4314      	orrs	r4, r2
 8000abc:	e624      	b.n	8000708 <__aeabi_dadd+0x8c>
 8000abe:	4319      	orrs	r1, r3
 8000ac0:	000c      	movs	r4, r1
 8000ac2:	1e63      	subs	r3, r4, #1
 8000ac4:	419c      	sbcs	r4, r3
 8000ac6:	4643      	mov	r3, r8
 8000ac8:	1b1c      	subs	r4, r3, r4
 8000aca:	45a0      	cmp	r8, r4
 8000acc:	419b      	sbcs	r3, r3
 8000ace:	4649      	mov	r1, r9
 8000ad0:	425b      	negs	r3, r3
 8000ad2:	1acb      	subs	r3, r1, r3
 8000ad4:	469a      	mov	sl, r3
 8000ad6:	4665      	mov	r5, ip
 8000ad8:	0016      	movs	r6, r2
 8000ada:	e61b      	b.n	8000714 <__aeabi_dadd+0x98>
 8000adc:	000c      	movs	r4, r1
 8000ade:	431c      	orrs	r4, r3
 8000ae0:	d100      	bne.n	8000ae4 <__aeabi_dadd+0x468>
 8000ae2:	e0c7      	b.n	8000c74 <__aeabi_dadd+0x5f8>
 8000ae4:	1e7c      	subs	r4, r7, #1
 8000ae6:	2f01      	cmp	r7, #1
 8000ae8:	d100      	bne.n	8000aec <__aeabi_dadd+0x470>
 8000aea:	e0f9      	b.n	8000ce0 <__aeabi_dadd+0x664>
 8000aec:	4e91      	ldr	r6, [pc, #580]	; (8000d34 <__aeabi_dadd+0x6b8>)
 8000aee:	42b7      	cmp	r7, r6
 8000af0:	d05c      	beq.n	8000bac <__aeabi_dadd+0x530>
 8000af2:	0027      	movs	r7, r4
 8000af4:	e740      	b.n	8000978 <__aeabi_dadd+0x2fc>
 8000af6:	2220      	movs	r2, #32
 8000af8:	464c      	mov	r4, r9
 8000afa:	4640      	mov	r0, r8
 8000afc:	1bd2      	subs	r2, r2, r7
 8000afe:	4094      	lsls	r4, r2
 8000b00:	40f8      	lsrs	r0, r7
 8000b02:	4304      	orrs	r4, r0
 8000b04:	4640      	mov	r0, r8
 8000b06:	4090      	lsls	r0, r2
 8000b08:	1e42      	subs	r2, r0, #1
 8000b0a:	4190      	sbcs	r0, r2
 8000b0c:	464a      	mov	r2, r9
 8000b0e:	40fa      	lsrs	r2, r7
 8000b10:	4304      	orrs	r4, r0
 8000b12:	1889      	adds	r1, r1, r2
 8000b14:	e6ee      	b.n	80008f4 <__aeabi_dadd+0x278>
 8000b16:	4c87      	ldr	r4, [pc, #540]	; (8000d34 <__aeabi_dadd+0x6b8>)
 8000b18:	42a2      	cmp	r2, r4
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_dadd+0x4a2>
 8000b1c:	e6f9      	b.n	8000912 <__aeabi_dadd+0x296>
 8000b1e:	1818      	adds	r0, r3, r0
 8000b20:	4298      	cmp	r0, r3
 8000b22:	419b      	sbcs	r3, r3
 8000b24:	4449      	add	r1, r9
 8000b26:	425b      	negs	r3, r3
 8000b28:	18cb      	adds	r3, r1, r3
 8000b2a:	07dc      	lsls	r4, r3, #31
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	085b      	lsrs	r3, r3, #1
 8000b30:	469a      	mov	sl, r3
 8000b32:	0016      	movs	r6, r2
 8000b34:	4304      	orrs	r4, r0
 8000b36:	e6c6      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000b38:	4642      	mov	r2, r8
 8000b3a:	1ad4      	subs	r4, r2, r3
 8000b3c:	45a0      	cmp	r8, r4
 8000b3e:	4180      	sbcs	r0, r0
 8000b40:	464b      	mov	r3, r9
 8000b42:	4240      	negs	r0, r0
 8000b44:	1a59      	subs	r1, r3, r1
 8000b46:	1a0b      	subs	r3, r1, r0
 8000b48:	469a      	mov	sl, r3
 8000b4a:	4665      	mov	r5, ip
 8000b4c:	e5ea      	b.n	8000724 <__aeabi_dadd+0xa8>
 8000b4e:	464b      	mov	r3, r9
 8000b50:	464a      	mov	r2, r9
 8000b52:	08c0      	lsrs	r0, r0, #3
 8000b54:	075b      	lsls	r3, r3, #29
 8000b56:	4665      	mov	r5, ip
 8000b58:	4303      	orrs	r3, r0
 8000b5a:	08d1      	lsrs	r1, r2, #3
 8000b5c:	e6bd      	b.n	80008da <__aeabi_dadd+0x25e>
 8000b5e:	2a00      	cmp	r2, #0
 8000b60:	d000      	beq.n	8000b64 <__aeabi_dadd+0x4e8>
 8000b62:	e08e      	b.n	8000c82 <__aeabi_dadd+0x606>
 8000b64:	464b      	mov	r3, r9
 8000b66:	4303      	orrs	r3, r0
 8000b68:	d117      	bne.n	8000b9a <__aeabi_dadd+0x51e>
 8000b6a:	2180      	movs	r1, #128	; 0x80
 8000b6c:	2500      	movs	r5, #0
 8000b6e:	0309      	lsls	r1, r1, #12
 8000b70:	e6da      	b.n	8000928 <__aeabi_dadd+0x2ac>
 8000b72:	074a      	lsls	r2, r1, #29
 8000b74:	08db      	lsrs	r3, r3, #3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	08c9      	lsrs	r1, r1, #3
 8000b7a:	e6d1      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000b7c:	1a1c      	subs	r4, r3, r0
 8000b7e:	464a      	mov	r2, r9
 8000b80:	42a3      	cmp	r3, r4
 8000b82:	419b      	sbcs	r3, r3
 8000b84:	1a89      	subs	r1, r1, r2
 8000b86:	425b      	negs	r3, r3
 8000b88:	1acb      	subs	r3, r1, r3
 8000b8a:	469a      	mov	sl, r3
 8000b8c:	2601      	movs	r6, #1
 8000b8e:	e5c1      	b.n	8000714 <__aeabi_dadd+0x98>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e69f      	b.n	80008da <__aeabi_dadd+0x25e>
 8000b9a:	4643      	mov	r3, r8
 8000b9c:	08d8      	lsrs	r0, r3, #3
 8000b9e:	464b      	mov	r3, r9
 8000ba0:	464a      	mov	r2, r9
 8000ba2:	075b      	lsls	r3, r3, #29
 8000ba4:	4665      	mov	r5, ip
 8000ba6:	4303      	orrs	r3, r0
 8000ba8:	08d1      	lsrs	r1, r2, #3
 8000baa:	e6b9      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000bac:	4643      	mov	r3, r8
 8000bae:	08d8      	lsrs	r0, r3, #3
 8000bb0:	464b      	mov	r3, r9
 8000bb2:	464a      	mov	r2, r9
 8000bb4:	075b      	lsls	r3, r3, #29
 8000bb6:	4303      	orrs	r3, r0
 8000bb8:	08d1      	lsrs	r1, r2, #3
 8000bba:	e6b1      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	000c      	movs	r4, r1
 8000bc0:	1e63      	subs	r3, r4, #1
 8000bc2:	419c      	sbcs	r4, r3
 8000bc4:	e6eb      	b.n	800099e <__aeabi_dadd+0x322>
 8000bc6:	003c      	movs	r4, r7
 8000bc8:	000d      	movs	r5, r1
 8000bca:	3c20      	subs	r4, #32
 8000bcc:	40e5      	lsrs	r5, r4
 8000bce:	2f20      	cmp	r7, #32
 8000bd0:	d003      	beq.n	8000bda <__aeabi_dadd+0x55e>
 8000bd2:	2440      	movs	r4, #64	; 0x40
 8000bd4:	1be4      	subs	r4, r4, r7
 8000bd6:	40a1      	lsls	r1, r4
 8000bd8:	430b      	orrs	r3, r1
 8000bda:	001c      	movs	r4, r3
 8000bdc:	1e63      	subs	r3, r4, #1
 8000bde:	419c      	sbcs	r4, r3
 8000be0:	432c      	orrs	r4, r5
 8000be2:	e770      	b.n	8000ac6 <__aeabi_dadd+0x44a>
 8000be4:	2a00      	cmp	r2, #0
 8000be6:	d0e1      	beq.n	8000bac <__aeabi_dadd+0x530>
 8000be8:	464a      	mov	r2, r9
 8000bea:	4302      	orrs	r2, r0
 8000bec:	d0c1      	beq.n	8000b72 <__aeabi_dadd+0x4f6>
 8000bee:	074a      	lsls	r2, r1, #29
 8000bf0:	08db      	lsrs	r3, r3, #3
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	2280      	movs	r2, #128	; 0x80
 8000bf6:	08c9      	lsrs	r1, r1, #3
 8000bf8:	0312      	lsls	r2, r2, #12
 8000bfa:	4211      	tst	r1, r2
 8000bfc:	d008      	beq.n	8000c10 <__aeabi_dadd+0x594>
 8000bfe:	4648      	mov	r0, r9
 8000c00:	08c4      	lsrs	r4, r0, #3
 8000c02:	4214      	tst	r4, r2
 8000c04:	d104      	bne.n	8000c10 <__aeabi_dadd+0x594>
 8000c06:	4643      	mov	r3, r8
 8000c08:	0021      	movs	r1, r4
 8000c0a:	08db      	lsrs	r3, r3, #3
 8000c0c:	0742      	lsls	r2, r0, #29
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	0f5a      	lsrs	r2, r3, #29
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	0752      	lsls	r2, r2, #29
 8000c16:	08db      	lsrs	r3, r3, #3
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	e681      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000c1c:	464b      	mov	r3, r9
 8000c1e:	4303      	orrs	r3, r0
 8000c20:	d100      	bne.n	8000c24 <__aeabi_dadd+0x5a8>
 8000c22:	e714      	b.n	8000a4e <__aeabi_dadd+0x3d2>
 8000c24:	464b      	mov	r3, r9
 8000c26:	464a      	mov	r2, r9
 8000c28:	08c0      	lsrs	r0, r0, #3
 8000c2a:	075b      	lsls	r3, r3, #29
 8000c2c:	4665      	mov	r5, ip
 8000c2e:	4303      	orrs	r3, r0
 8000c30:	08d1      	lsrs	r1, r2, #3
 8000c32:	e655      	b.n	80008e0 <__aeabi_dadd+0x264>
 8000c34:	1ac4      	subs	r4, r0, r3
 8000c36:	45a0      	cmp	r8, r4
 8000c38:	4180      	sbcs	r0, r0
 8000c3a:	464b      	mov	r3, r9
 8000c3c:	4240      	negs	r0, r0
 8000c3e:	1a59      	subs	r1, r3, r1
 8000c40:	1a0b      	subs	r3, r1, r0
 8000c42:	469a      	mov	sl, r3
 8000c44:	4665      	mov	r5, ip
 8000c46:	2601      	movs	r6, #1
 8000c48:	e564      	b.n	8000714 <__aeabi_dadd+0x98>
 8000c4a:	1a1c      	subs	r4, r3, r0
 8000c4c:	464a      	mov	r2, r9
 8000c4e:	42a3      	cmp	r3, r4
 8000c50:	4180      	sbcs	r0, r0
 8000c52:	1a8a      	subs	r2, r1, r2
 8000c54:	4240      	negs	r0, r0
 8000c56:	1a12      	subs	r2, r2, r0
 8000c58:	4692      	mov	sl, r2
 8000c5a:	0212      	lsls	r2, r2, #8
 8000c5c:	d549      	bpl.n	8000cf2 <__aeabi_dadd+0x676>
 8000c5e:	4642      	mov	r2, r8
 8000c60:	1ad4      	subs	r4, r2, r3
 8000c62:	45a0      	cmp	r8, r4
 8000c64:	4180      	sbcs	r0, r0
 8000c66:	464b      	mov	r3, r9
 8000c68:	4240      	negs	r0, r0
 8000c6a:	1a59      	subs	r1, r3, r1
 8000c6c:	1a0b      	subs	r3, r1, r0
 8000c6e:	469a      	mov	sl, r3
 8000c70:	4665      	mov	r5, ip
 8000c72:	e57f      	b.n	8000774 <__aeabi_dadd+0xf8>
 8000c74:	464b      	mov	r3, r9
 8000c76:	464a      	mov	r2, r9
 8000c78:	08c0      	lsrs	r0, r0, #3
 8000c7a:	075b      	lsls	r3, r3, #29
 8000c7c:	4303      	orrs	r3, r0
 8000c7e:	08d1      	lsrs	r1, r2, #3
 8000c80:	e62b      	b.n	80008da <__aeabi_dadd+0x25e>
 8000c82:	464a      	mov	r2, r9
 8000c84:	08db      	lsrs	r3, r3, #3
 8000c86:	4302      	orrs	r2, r0
 8000c88:	d138      	bne.n	8000cfc <__aeabi_dadd+0x680>
 8000c8a:	074a      	lsls	r2, r1, #29
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	08c9      	lsrs	r1, r1, #3
 8000c90:	e646      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000c92:	464b      	mov	r3, r9
 8000c94:	464a      	mov	r2, r9
 8000c96:	08c0      	lsrs	r0, r0, #3
 8000c98:	075b      	lsls	r3, r3, #29
 8000c9a:	4303      	orrs	r3, r0
 8000c9c:	08d1      	lsrs	r1, r2, #3
 8000c9e:	e61f      	b.n	80008e0 <__aeabi_dadd+0x264>
 8000ca0:	181c      	adds	r4, r3, r0
 8000ca2:	429c      	cmp	r4, r3
 8000ca4:	419b      	sbcs	r3, r3
 8000ca6:	4449      	add	r1, r9
 8000ca8:	468a      	mov	sl, r1
 8000caa:	425b      	negs	r3, r3
 8000cac:	449a      	add	sl, r3
 8000cae:	4653      	mov	r3, sl
 8000cb0:	021b      	lsls	r3, r3, #8
 8000cb2:	d400      	bmi.n	8000cb6 <__aeabi_dadd+0x63a>
 8000cb4:	e607      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000cb6:	4652      	mov	r2, sl
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <__aeabi_dadd+0x6bc>)
 8000cba:	2601      	movs	r6, #1
 8000cbc:	401a      	ands	r2, r3
 8000cbe:	4692      	mov	sl, r2
 8000cc0:	e601      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000cc2:	003c      	movs	r4, r7
 8000cc4:	000e      	movs	r6, r1
 8000cc6:	3c20      	subs	r4, #32
 8000cc8:	40e6      	lsrs	r6, r4
 8000cca:	2f20      	cmp	r7, #32
 8000ccc:	d003      	beq.n	8000cd6 <__aeabi_dadd+0x65a>
 8000cce:	2440      	movs	r4, #64	; 0x40
 8000cd0:	1be4      	subs	r4, r4, r7
 8000cd2:	40a1      	lsls	r1, r4
 8000cd4:	430b      	orrs	r3, r1
 8000cd6:	001c      	movs	r4, r3
 8000cd8:	1e63      	subs	r3, r4, #1
 8000cda:	419c      	sbcs	r4, r3
 8000cdc:	4334      	orrs	r4, r6
 8000cde:	e65e      	b.n	800099e <__aeabi_dadd+0x322>
 8000ce0:	4443      	add	r3, r8
 8000ce2:	4283      	cmp	r3, r0
 8000ce4:	4180      	sbcs	r0, r0
 8000ce6:	4449      	add	r1, r9
 8000ce8:	468a      	mov	sl, r1
 8000cea:	4240      	negs	r0, r0
 8000cec:	001c      	movs	r4, r3
 8000cee:	4482      	add	sl, r0
 8000cf0:	e6bc      	b.n	8000a6c <__aeabi_dadd+0x3f0>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	4323      	orrs	r3, r4
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_dadd+0x67e>
 8000cf8:	e6a9      	b.n	8000a4e <__aeabi_dadd+0x3d2>
 8000cfa:	e5e4      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000cfc:	074a      	lsls	r2, r1, #29
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	2280      	movs	r2, #128	; 0x80
 8000d02:	08c9      	lsrs	r1, r1, #3
 8000d04:	0312      	lsls	r2, r2, #12
 8000d06:	4211      	tst	r1, r2
 8000d08:	d009      	beq.n	8000d1e <__aeabi_dadd+0x6a2>
 8000d0a:	4648      	mov	r0, r9
 8000d0c:	08c4      	lsrs	r4, r0, #3
 8000d0e:	4214      	tst	r4, r2
 8000d10:	d105      	bne.n	8000d1e <__aeabi_dadd+0x6a2>
 8000d12:	4643      	mov	r3, r8
 8000d14:	4665      	mov	r5, ip
 8000d16:	0021      	movs	r1, r4
 8000d18:	08db      	lsrs	r3, r3, #3
 8000d1a:	0742      	lsls	r2, r0, #29
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	0f5a      	lsrs	r2, r3, #29
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	08db      	lsrs	r3, r3, #3
 8000d24:	0752      	lsls	r2, r2, #29
 8000d26:	4313      	orrs	r3, r2
 8000d28:	e5fa      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	4a01      	ldr	r2, [pc, #4]	; (8000d34 <__aeabi_dadd+0x6b8>)
 8000d2e:	001c      	movs	r4, r3
 8000d30:	e540      	b.n	80007b4 <__aeabi_dadd+0x138>
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	000007ff 	.word	0x000007ff
 8000d38:	ff7fffff 	.word	0xff7fffff

08000d3c <__aeabi_ddiv>:
 8000d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d3e:	4657      	mov	r7, sl
 8000d40:	464e      	mov	r6, r9
 8000d42:	4645      	mov	r5, r8
 8000d44:	46de      	mov	lr, fp
 8000d46:	b5e0      	push	{r5, r6, r7, lr}
 8000d48:	030c      	lsls	r4, r1, #12
 8000d4a:	001f      	movs	r7, r3
 8000d4c:	004b      	lsls	r3, r1, #1
 8000d4e:	4681      	mov	r9, r0
 8000d50:	4692      	mov	sl, r2
 8000d52:	0005      	movs	r5, r0
 8000d54:	b085      	sub	sp, #20
 8000d56:	0b24      	lsrs	r4, r4, #12
 8000d58:	0d5b      	lsrs	r3, r3, #21
 8000d5a:	0fce      	lsrs	r6, r1, #31
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d100      	bne.n	8000d62 <__aeabi_ddiv+0x26>
 8000d60:	e152      	b.n	8001008 <__aeabi_ddiv+0x2cc>
 8000d62:	4ad2      	ldr	r2, [pc, #840]	; (80010ac <__aeabi_ddiv+0x370>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d100      	bne.n	8000d6a <__aeabi_ddiv+0x2e>
 8000d68:	e16e      	b.n	8001048 <__aeabi_ddiv+0x30c>
 8000d6a:	0f42      	lsrs	r2, r0, #29
 8000d6c:	00e4      	lsls	r4, r4, #3
 8000d6e:	4314      	orrs	r4, r2
 8000d70:	2280      	movs	r2, #128	; 0x80
 8000d72:	0412      	lsls	r2, r2, #16
 8000d74:	4322      	orrs	r2, r4
 8000d76:	4690      	mov	r8, r2
 8000d78:	4acd      	ldr	r2, [pc, #820]	; (80010b0 <__aeabi_ddiv+0x374>)
 8000d7a:	00c5      	lsls	r5, r0, #3
 8000d7c:	4693      	mov	fp, r2
 8000d7e:	449b      	add	fp, r3
 8000d80:	2300      	movs	r3, #0
 8000d82:	4699      	mov	r9, r3
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	033c      	lsls	r4, r7, #12
 8000d88:	007b      	lsls	r3, r7, #1
 8000d8a:	4650      	mov	r0, sl
 8000d8c:	0b24      	lsrs	r4, r4, #12
 8000d8e:	0d5b      	lsrs	r3, r3, #21
 8000d90:	0fff      	lsrs	r7, r7, #31
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d100      	bne.n	8000d98 <__aeabi_ddiv+0x5c>
 8000d96:	e11a      	b.n	8000fce <__aeabi_ddiv+0x292>
 8000d98:	4ac4      	ldr	r2, [pc, #784]	; (80010ac <__aeabi_ddiv+0x370>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d100      	bne.n	8000da0 <__aeabi_ddiv+0x64>
 8000d9e:	e15e      	b.n	800105e <__aeabi_ddiv+0x322>
 8000da0:	0f42      	lsrs	r2, r0, #29
 8000da2:	00e4      	lsls	r4, r4, #3
 8000da4:	4322      	orrs	r2, r4
 8000da6:	2480      	movs	r4, #128	; 0x80
 8000da8:	0424      	lsls	r4, r4, #16
 8000daa:	4314      	orrs	r4, r2
 8000dac:	4ac0      	ldr	r2, [pc, #768]	; (80010b0 <__aeabi_ddiv+0x374>)
 8000dae:	00c1      	lsls	r1, r0, #3
 8000db0:	4694      	mov	ip, r2
 8000db2:	465a      	mov	r2, fp
 8000db4:	4463      	add	r3, ip
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	469b      	mov	fp, r3
 8000dba:	2000      	movs	r0, #0
 8000dbc:	0033      	movs	r3, r6
 8000dbe:	407b      	eors	r3, r7
 8000dc0:	469a      	mov	sl, r3
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d827      	bhi.n	8000e18 <__aeabi_ddiv+0xdc>
 8000dc8:	4aba      	ldr	r2, [pc, #744]	; (80010b4 <__aeabi_ddiv+0x378>)
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	58d3      	ldr	r3, [r2, r3]
 8000dce:	469f      	mov	pc, r3
 8000dd0:	46b2      	mov	sl, r6
 8000dd2:	9b00      	ldr	r3, [sp, #0]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d016      	beq.n	8000e06 <__aeabi_ddiv+0xca>
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d100      	bne.n	8000dde <__aeabi_ddiv+0xa2>
 8000ddc:	e287      	b.n	80012ee <__aeabi_ddiv+0x5b2>
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d000      	beq.n	8000de4 <__aeabi_ddiv+0xa8>
 8000de2:	e0d5      	b.n	8000f90 <__aeabi_ddiv+0x254>
 8000de4:	2300      	movs	r3, #0
 8000de6:	2200      	movs	r2, #0
 8000de8:	2500      	movs	r5, #0
 8000dea:	051b      	lsls	r3, r3, #20
 8000dec:	4313      	orrs	r3, r2
 8000dee:	4652      	mov	r2, sl
 8000df0:	07d2      	lsls	r2, r2, #31
 8000df2:	4313      	orrs	r3, r2
 8000df4:	0028      	movs	r0, r5
 8000df6:	0019      	movs	r1, r3
 8000df8:	b005      	add	sp, #20
 8000dfa:	bcf0      	pop	{r4, r5, r6, r7}
 8000dfc:	46bb      	mov	fp, r7
 8000dfe:	46b2      	mov	sl, r6
 8000e00:	46a9      	mov	r9, r5
 8000e02:	46a0      	mov	r8, r4
 8000e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e06:	2200      	movs	r2, #0
 8000e08:	2500      	movs	r5, #0
 8000e0a:	4ba8      	ldr	r3, [pc, #672]	; (80010ac <__aeabi_ddiv+0x370>)
 8000e0c:	e7ed      	b.n	8000dea <__aeabi_ddiv+0xae>
 8000e0e:	46ba      	mov	sl, r7
 8000e10:	46a0      	mov	r8, r4
 8000e12:	000d      	movs	r5, r1
 8000e14:	9000      	str	r0, [sp, #0]
 8000e16:	e7dc      	b.n	8000dd2 <__aeabi_ddiv+0x96>
 8000e18:	4544      	cmp	r4, r8
 8000e1a:	d200      	bcs.n	8000e1e <__aeabi_ddiv+0xe2>
 8000e1c:	e1c4      	b.n	80011a8 <__aeabi_ddiv+0x46c>
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_ddiv+0xe6>
 8000e20:	e1bf      	b.n	80011a2 <__aeabi_ddiv+0x466>
 8000e22:	2301      	movs	r3, #1
 8000e24:	425b      	negs	r3, r3
 8000e26:	469c      	mov	ip, r3
 8000e28:	002e      	movs	r6, r5
 8000e2a:	4640      	mov	r0, r8
 8000e2c:	2500      	movs	r5, #0
 8000e2e:	44e3      	add	fp, ip
 8000e30:	0223      	lsls	r3, r4, #8
 8000e32:	0e0c      	lsrs	r4, r1, #24
 8000e34:	431c      	orrs	r4, r3
 8000e36:	0c1b      	lsrs	r3, r3, #16
 8000e38:	4699      	mov	r9, r3
 8000e3a:	0423      	lsls	r3, r4, #16
 8000e3c:	020a      	lsls	r2, r1, #8
 8000e3e:	0c1f      	lsrs	r7, r3, #16
 8000e40:	4649      	mov	r1, r9
 8000e42:	9200      	str	r2, [sp, #0]
 8000e44:	9701      	str	r7, [sp, #4]
 8000e46:	f7ff f9ff 	bl	8000248 <__aeabi_uidivmod>
 8000e4a:	0002      	movs	r2, r0
 8000e4c:	437a      	muls	r2, r7
 8000e4e:	040b      	lsls	r3, r1, #16
 8000e50:	0c31      	lsrs	r1, r6, #16
 8000e52:	4680      	mov	r8, r0
 8000e54:	4319      	orrs	r1, r3
 8000e56:	428a      	cmp	r2, r1
 8000e58:	d907      	bls.n	8000e6a <__aeabi_ddiv+0x12e>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	425b      	negs	r3, r3
 8000e5e:	469c      	mov	ip, r3
 8000e60:	1909      	adds	r1, r1, r4
 8000e62:	44e0      	add	r8, ip
 8000e64:	428c      	cmp	r4, r1
 8000e66:	d800      	bhi.n	8000e6a <__aeabi_ddiv+0x12e>
 8000e68:	e201      	b.n	800126e <__aeabi_ddiv+0x532>
 8000e6a:	1a88      	subs	r0, r1, r2
 8000e6c:	4649      	mov	r1, r9
 8000e6e:	f7ff f9eb 	bl	8000248 <__aeabi_uidivmod>
 8000e72:	9a01      	ldr	r2, [sp, #4]
 8000e74:	0436      	lsls	r6, r6, #16
 8000e76:	4342      	muls	r2, r0
 8000e78:	0409      	lsls	r1, r1, #16
 8000e7a:	0c36      	lsrs	r6, r6, #16
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	430e      	orrs	r6, r1
 8000e80:	42b2      	cmp	r2, r6
 8000e82:	d904      	bls.n	8000e8e <__aeabi_ddiv+0x152>
 8000e84:	1936      	adds	r6, r6, r4
 8000e86:	3b01      	subs	r3, #1
 8000e88:	42b4      	cmp	r4, r6
 8000e8a:	d800      	bhi.n	8000e8e <__aeabi_ddiv+0x152>
 8000e8c:	e1e9      	b.n	8001262 <__aeabi_ddiv+0x526>
 8000e8e:	1ab0      	subs	r0, r6, r2
 8000e90:	4642      	mov	r2, r8
 8000e92:	9e00      	ldr	r6, [sp, #0]
 8000e94:	0412      	lsls	r2, r2, #16
 8000e96:	431a      	orrs	r2, r3
 8000e98:	0c33      	lsrs	r3, r6, #16
 8000e9a:	001f      	movs	r7, r3
 8000e9c:	0c11      	lsrs	r1, r2, #16
 8000e9e:	4690      	mov	r8, r2
 8000ea0:	9302      	str	r3, [sp, #8]
 8000ea2:	0413      	lsls	r3, r2, #16
 8000ea4:	0432      	lsls	r2, r6, #16
 8000ea6:	0c16      	lsrs	r6, r2, #16
 8000ea8:	0032      	movs	r2, r6
 8000eaa:	0c1b      	lsrs	r3, r3, #16
 8000eac:	435a      	muls	r2, r3
 8000eae:	9603      	str	r6, [sp, #12]
 8000eb0:	437b      	muls	r3, r7
 8000eb2:	434e      	muls	r6, r1
 8000eb4:	4379      	muls	r1, r7
 8000eb6:	0c17      	lsrs	r7, r2, #16
 8000eb8:	46bc      	mov	ip, r7
 8000eba:	199b      	adds	r3, r3, r6
 8000ebc:	4463      	add	r3, ip
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	d903      	bls.n	8000eca <__aeabi_ddiv+0x18e>
 8000ec2:	2680      	movs	r6, #128	; 0x80
 8000ec4:	0276      	lsls	r6, r6, #9
 8000ec6:	46b4      	mov	ip, r6
 8000ec8:	4461      	add	r1, ip
 8000eca:	0c1e      	lsrs	r6, r3, #16
 8000ecc:	1871      	adds	r1, r6, r1
 8000ece:	0416      	lsls	r6, r2, #16
 8000ed0:	041b      	lsls	r3, r3, #16
 8000ed2:	0c36      	lsrs	r6, r6, #16
 8000ed4:	199e      	adds	r6, r3, r6
 8000ed6:	4288      	cmp	r0, r1
 8000ed8:	d302      	bcc.n	8000ee0 <__aeabi_ddiv+0x1a4>
 8000eda:	d112      	bne.n	8000f02 <__aeabi_ddiv+0x1c6>
 8000edc:	42b5      	cmp	r5, r6
 8000ede:	d210      	bcs.n	8000f02 <__aeabi_ddiv+0x1c6>
 8000ee0:	4643      	mov	r3, r8
 8000ee2:	1e5a      	subs	r2, r3, #1
 8000ee4:	9b00      	ldr	r3, [sp, #0]
 8000ee6:	469c      	mov	ip, r3
 8000ee8:	4465      	add	r5, ip
 8000eea:	001f      	movs	r7, r3
 8000eec:	429d      	cmp	r5, r3
 8000eee:	419b      	sbcs	r3, r3
 8000ef0:	425b      	negs	r3, r3
 8000ef2:	191b      	adds	r3, r3, r4
 8000ef4:	18c0      	adds	r0, r0, r3
 8000ef6:	4284      	cmp	r4, r0
 8000ef8:	d200      	bcs.n	8000efc <__aeabi_ddiv+0x1c0>
 8000efa:	e19e      	b.n	800123a <__aeabi_ddiv+0x4fe>
 8000efc:	d100      	bne.n	8000f00 <__aeabi_ddiv+0x1c4>
 8000efe:	e199      	b.n	8001234 <__aeabi_ddiv+0x4f8>
 8000f00:	4690      	mov	r8, r2
 8000f02:	1bae      	subs	r6, r5, r6
 8000f04:	42b5      	cmp	r5, r6
 8000f06:	41ad      	sbcs	r5, r5
 8000f08:	1a40      	subs	r0, r0, r1
 8000f0a:	426d      	negs	r5, r5
 8000f0c:	1b40      	subs	r0, r0, r5
 8000f0e:	4284      	cmp	r4, r0
 8000f10:	d100      	bne.n	8000f14 <__aeabi_ddiv+0x1d8>
 8000f12:	e1d2      	b.n	80012ba <__aeabi_ddiv+0x57e>
 8000f14:	4649      	mov	r1, r9
 8000f16:	f7ff f997 	bl	8000248 <__aeabi_uidivmod>
 8000f1a:	9a01      	ldr	r2, [sp, #4]
 8000f1c:	040b      	lsls	r3, r1, #16
 8000f1e:	4342      	muls	r2, r0
 8000f20:	0c31      	lsrs	r1, r6, #16
 8000f22:	0005      	movs	r5, r0
 8000f24:	4319      	orrs	r1, r3
 8000f26:	428a      	cmp	r2, r1
 8000f28:	d900      	bls.n	8000f2c <__aeabi_ddiv+0x1f0>
 8000f2a:	e16c      	b.n	8001206 <__aeabi_ddiv+0x4ca>
 8000f2c:	1a88      	subs	r0, r1, r2
 8000f2e:	4649      	mov	r1, r9
 8000f30:	f7ff f98a 	bl	8000248 <__aeabi_uidivmod>
 8000f34:	9a01      	ldr	r2, [sp, #4]
 8000f36:	0436      	lsls	r6, r6, #16
 8000f38:	4342      	muls	r2, r0
 8000f3a:	0409      	lsls	r1, r1, #16
 8000f3c:	0c36      	lsrs	r6, r6, #16
 8000f3e:	0003      	movs	r3, r0
 8000f40:	430e      	orrs	r6, r1
 8000f42:	42b2      	cmp	r2, r6
 8000f44:	d900      	bls.n	8000f48 <__aeabi_ddiv+0x20c>
 8000f46:	e153      	b.n	80011f0 <__aeabi_ddiv+0x4b4>
 8000f48:	9803      	ldr	r0, [sp, #12]
 8000f4a:	1ab6      	subs	r6, r6, r2
 8000f4c:	0002      	movs	r2, r0
 8000f4e:	042d      	lsls	r5, r5, #16
 8000f50:	431d      	orrs	r5, r3
 8000f52:	9f02      	ldr	r7, [sp, #8]
 8000f54:	042b      	lsls	r3, r5, #16
 8000f56:	0c1b      	lsrs	r3, r3, #16
 8000f58:	435a      	muls	r2, r3
 8000f5a:	437b      	muls	r3, r7
 8000f5c:	469c      	mov	ip, r3
 8000f5e:	0c29      	lsrs	r1, r5, #16
 8000f60:	4348      	muls	r0, r1
 8000f62:	0c13      	lsrs	r3, r2, #16
 8000f64:	4484      	add	ip, r0
 8000f66:	4463      	add	r3, ip
 8000f68:	4379      	muls	r1, r7
 8000f6a:	4298      	cmp	r0, r3
 8000f6c:	d903      	bls.n	8000f76 <__aeabi_ddiv+0x23a>
 8000f6e:	2080      	movs	r0, #128	; 0x80
 8000f70:	0240      	lsls	r0, r0, #9
 8000f72:	4684      	mov	ip, r0
 8000f74:	4461      	add	r1, ip
 8000f76:	0c18      	lsrs	r0, r3, #16
 8000f78:	0412      	lsls	r2, r2, #16
 8000f7a:	041b      	lsls	r3, r3, #16
 8000f7c:	0c12      	lsrs	r2, r2, #16
 8000f7e:	1840      	adds	r0, r0, r1
 8000f80:	189b      	adds	r3, r3, r2
 8000f82:	4286      	cmp	r6, r0
 8000f84:	d200      	bcs.n	8000f88 <__aeabi_ddiv+0x24c>
 8000f86:	e100      	b.n	800118a <__aeabi_ddiv+0x44e>
 8000f88:	d100      	bne.n	8000f8c <__aeabi_ddiv+0x250>
 8000f8a:	e0fb      	b.n	8001184 <__aeabi_ddiv+0x448>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	431d      	orrs	r5, r3
 8000f90:	4b49      	ldr	r3, [pc, #292]	; (80010b8 <__aeabi_ddiv+0x37c>)
 8000f92:	445b      	add	r3, fp
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	dc00      	bgt.n	8000f9a <__aeabi_ddiv+0x25e>
 8000f98:	e0aa      	b.n	80010f0 <__aeabi_ddiv+0x3b4>
 8000f9a:	076a      	lsls	r2, r5, #29
 8000f9c:	d000      	beq.n	8000fa0 <__aeabi_ddiv+0x264>
 8000f9e:	e13d      	b.n	800121c <__aeabi_ddiv+0x4e0>
 8000fa0:	08e9      	lsrs	r1, r5, #3
 8000fa2:	4642      	mov	r2, r8
 8000fa4:	01d2      	lsls	r2, r2, #7
 8000fa6:	d506      	bpl.n	8000fb6 <__aeabi_ddiv+0x27a>
 8000fa8:	4642      	mov	r2, r8
 8000faa:	4b44      	ldr	r3, [pc, #272]	; (80010bc <__aeabi_ddiv+0x380>)
 8000fac:	401a      	ands	r2, r3
 8000fae:	2380      	movs	r3, #128	; 0x80
 8000fb0:	4690      	mov	r8, r2
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	445b      	add	r3, fp
 8000fb6:	4a42      	ldr	r2, [pc, #264]	; (80010c0 <__aeabi_ddiv+0x384>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	dd00      	ble.n	8000fbe <__aeabi_ddiv+0x282>
 8000fbc:	e723      	b.n	8000e06 <__aeabi_ddiv+0xca>
 8000fbe:	4642      	mov	r2, r8
 8000fc0:	055b      	lsls	r3, r3, #21
 8000fc2:	0755      	lsls	r5, r2, #29
 8000fc4:	0252      	lsls	r2, r2, #9
 8000fc6:	430d      	orrs	r5, r1
 8000fc8:	0b12      	lsrs	r2, r2, #12
 8000fca:	0d5b      	lsrs	r3, r3, #21
 8000fcc:	e70d      	b.n	8000dea <__aeabi_ddiv+0xae>
 8000fce:	4651      	mov	r1, sl
 8000fd0:	4321      	orrs	r1, r4
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_ddiv+0x29a>
 8000fd4:	e07c      	b.n	80010d0 <__aeabi_ddiv+0x394>
 8000fd6:	2c00      	cmp	r4, #0
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_ddiv+0x2a0>
 8000fda:	e0fb      	b.n	80011d4 <__aeabi_ddiv+0x498>
 8000fdc:	0020      	movs	r0, r4
 8000fde:	f001 f995 	bl	800230c <__clzsi2>
 8000fe2:	0002      	movs	r2, r0
 8000fe4:	3a0b      	subs	r2, #11
 8000fe6:	231d      	movs	r3, #29
 8000fe8:	1a9b      	subs	r3, r3, r2
 8000fea:	4652      	mov	r2, sl
 8000fec:	0001      	movs	r1, r0
 8000fee:	40da      	lsrs	r2, r3
 8000ff0:	4653      	mov	r3, sl
 8000ff2:	3908      	subs	r1, #8
 8000ff4:	408b      	lsls	r3, r1
 8000ff6:	408c      	lsls	r4, r1
 8000ff8:	0019      	movs	r1, r3
 8000ffa:	4314      	orrs	r4, r2
 8000ffc:	4b31      	ldr	r3, [pc, #196]	; (80010c4 <__aeabi_ddiv+0x388>)
 8000ffe:	4458      	add	r0, fp
 8001000:	469b      	mov	fp, r3
 8001002:	4483      	add	fp, r0
 8001004:	2000      	movs	r0, #0
 8001006:	e6d9      	b.n	8000dbc <__aeabi_ddiv+0x80>
 8001008:	0003      	movs	r3, r0
 800100a:	4323      	orrs	r3, r4
 800100c:	4698      	mov	r8, r3
 800100e:	d044      	beq.n	800109a <__aeabi_ddiv+0x35e>
 8001010:	2c00      	cmp	r4, #0
 8001012:	d100      	bne.n	8001016 <__aeabi_ddiv+0x2da>
 8001014:	e0cf      	b.n	80011b6 <__aeabi_ddiv+0x47a>
 8001016:	0020      	movs	r0, r4
 8001018:	f001 f978 	bl	800230c <__clzsi2>
 800101c:	0001      	movs	r1, r0
 800101e:	0002      	movs	r2, r0
 8001020:	390b      	subs	r1, #11
 8001022:	231d      	movs	r3, #29
 8001024:	1a5b      	subs	r3, r3, r1
 8001026:	4649      	mov	r1, r9
 8001028:	0010      	movs	r0, r2
 800102a:	40d9      	lsrs	r1, r3
 800102c:	3808      	subs	r0, #8
 800102e:	4084      	lsls	r4, r0
 8001030:	000b      	movs	r3, r1
 8001032:	464d      	mov	r5, r9
 8001034:	4323      	orrs	r3, r4
 8001036:	4698      	mov	r8, r3
 8001038:	4085      	lsls	r5, r0
 800103a:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <__aeabi_ddiv+0x38c>)
 800103c:	1a9b      	subs	r3, r3, r2
 800103e:	469b      	mov	fp, r3
 8001040:	2300      	movs	r3, #0
 8001042:	4699      	mov	r9, r3
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	e69e      	b.n	8000d86 <__aeabi_ddiv+0x4a>
 8001048:	0002      	movs	r2, r0
 800104a:	4322      	orrs	r2, r4
 800104c:	4690      	mov	r8, r2
 800104e:	d11d      	bne.n	800108c <__aeabi_ddiv+0x350>
 8001050:	2208      	movs	r2, #8
 8001052:	469b      	mov	fp, r3
 8001054:	2302      	movs	r3, #2
 8001056:	2500      	movs	r5, #0
 8001058:	4691      	mov	r9, r2
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	e693      	b.n	8000d86 <__aeabi_ddiv+0x4a>
 800105e:	4651      	mov	r1, sl
 8001060:	4321      	orrs	r1, r4
 8001062:	d109      	bne.n	8001078 <__aeabi_ddiv+0x33c>
 8001064:	2302      	movs	r3, #2
 8001066:	464a      	mov	r2, r9
 8001068:	431a      	orrs	r2, r3
 800106a:	4b18      	ldr	r3, [pc, #96]	; (80010cc <__aeabi_ddiv+0x390>)
 800106c:	4691      	mov	r9, r2
 800106e:	469c      	mov	ip, r3
 8001070:	2400      	movs	r4, #0
 8001072:	2002      	movs	r0, #2
 8001074:	44e3      	add	fp, ip
 8001076:	e6a1      	b.n	8000dbc <__aeabi_ddiv+0x80>
 8001078:	2303      	movs	r3, #3
 800107a:	464a      	mov	r2, r9
 800107c:	431a      	orrs	r2, r3
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <__aeabi_ddiv+0x390>)
 8001080:	4691      	mov	r9, r2
 8001082:	469c      	mov	ip, r3
 8001084:	4651      	mov	r1, sl
 8001086:	2003      	movs	r0, #3
 8001088:	44e3      	add	fp, ip
 800108a:	e697      	b.n	8000dbc <__aeabi_ddiv+0x80>
 800108c:	220c      	movs	r2, #12
 800108e:	469b      	mov	fp, r3
 8001090:	2303      	movs	r3, #3
 8001092:	46a0      	mov	r8, r4
 8001094:	4691      	mov	r9, r2
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	e675      	b.n	8000d86 <__aeabi_ddiv+0x4a>
 800109a:	2304      	movs	r3, #4
 800109c:	4699      	mov	r9, r3
 800109e:	2300      	movs	r3, #0
 80010a0:	469b      	mov	fp, r3
 80010a2:	3301      	adds	r3, #1
 80010a4:	2500      	movs	r5, #0
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	e66d      	b.n	8000d86 <__aeabi_ddiv+0x4a>
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	000007ff 	.word	0x000007ff
 80010b0:	fffffc01 	.word	0xfffffc01
 80010b4:	0800be1c 	.word	0x0800be1c
 80010b8:	000003ff 	.word	0x000003ff
 80010bc:	feffffff 	.word	0xfeffffff
 80010c0:	000007fe 	.word	0x000007fe
 80010c4:	000003f3 	.word	0x000003f3
 80010c8:	fffffc0d 	.word	0xfffffc0d
 80010cc:	fffff801 	.word	0xfffff801
 80010d0:	464a      	mov	r2, r9
 80010d2:	2301      	movs	r3, #1
 80010d4:	431a      	orrs	r2, r3
 80010d6:	4691      	mov	r9, r2
 80010d8:	2400      	movs	r4, #0
 80010da:	2001      	movs	r0, #1
 80010dc:	e66e      	b.n	8000dbc <__aeabi_ddiv+0x80>
 80010de:	2300      	movs	r3, #0
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	469a      	mov	sl, r3
 80010e4:	2500      	movs	r5, #0
 80010e6:	4b88      	ldr	r3, [pc, #544]	; (8001308 <__aeabi_ddiv+0x5cc>)
 80010e8:	0312      	lsls	r2, r2, #12
 80010ea:	e67e      	b.n	8000dea <__aeabi_ddiv+0xae>
 80010ec:	2501      	movs	r5, #1
 80010ee:	426d      	negs	r5, r5
 80010f0:	2201      	movs	r2, #1
 80010f2:	1ad2      	subs	r2, r2, r3
 80010f4:	2a38      	cmp	r2, #56	; 0x38
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x3be>
 80010f8:	e674      	b.n	8000de4 <__aeabi_ddiv+0xa8>
 80010fa:	2a1f      	cmp	r2, #31
 80010fc:	dc00      	bgt.n	8001100 <__aeabi_ddiv+0x3c4>
 80010fe:	e0bd      	b.n	800127c <__aeabi_ddiv+0x540>
 8001100:	211f      	movs	r1, #31
 8001102:	4249      	negs	r1, r1
 8001104:	1acb      	subs	r3, r1, r3
 8001106:	4641      	mov	r1, r8
 8001108:	40d9      	lsrs	r1, r3
 800110a:	000b      	movs	r3, r1
 800110c:	2a20      	cmp	r2, #32
 800110e:	d004      	beq.n	800111a <__aeabi_ddiv+0x3de>
 8001110:	4641      	mov	r1, r8
 8001112:	4a7e      	ldr	r2, [pc, #504]	; (800130c <__aeabi_ddiv+0x5d0>)
 8001114:	445a      	add	r2, fp
 8001116:	4091      	lsls	r1, r2
 8001118:	430d      	orrs	r5, r1
 800111a:	0029      	movs	r1, r5
 800111c:	1e4a      	subs	r2, r1, #1
 800111e:	4191      	sbcs	r1, r2
 8001120:	4319      	orrs	r1, r3
 8001122:	2307      	movs	r3, #7
 8001124:	001d      	movs	r5, r3
 8001126:	2200      	movs	r2, #0
 8001128:	400d      	ands	r5, r1
 800112a:	420b      	tst	r3, r1
 800112c:	d100      	bne.n	8001130 <__aeabi_ddiv+0x3f4>
 800112e:	e0d0      	b.n	80012d2 <__aeabi_ddiv+0x596>
 8001130:	220f      	movs	r2, #15
 8001132:	2300      	movs	r3, #0
 8001134:	400a      	ands	r2, r1
 8001136:	2a04      	cmp	r2, #4
 8001138:	d100      	bne.n	800113c <__aeabi_ddiv+0x400>
 800113a:	e0c7      	b.n	80012cc <__aeabi_ddiv+0x590>
 800113c:	1d0a      	adds	r2, r1, #4
 800113e:	428a      	cmp	r2, r1
 8001140:	4189      	sbcs	r1, r1
 8001142:	4249      	negs	r1, r1
 8001144:	185b      	adds	r3, r3, r1
 8001146:	0011      	movs	r1, r2
 8001148:	021a      	lsls	r2, r3, #8
 800114a:	d400      	bmi.n	800114e <__aeabi_ddiv+0x412>
 800114c:	e0be      	b.n	80012cc <__aeabi_ddiv+0x590>
 800114e:	2301      	movs	r3, #1
 8001150:	2200      	movs	r2, #0
 8001152:	2500      	movs	r5, #0
 8001154:	e649      	b.n	8000dea <__aeabi_ddiv+0xae>
 8001156:	2280      	movs	r2, #128	; 0x80
 8001158:	4643      	mov	r3, r8
 800115a:	0312      	lsls	r2, r2, #12
 800115c:	4213      	tst	r3, r2
 800115e:	d008      	beq.n	8001172 <__aeabi_ddiv+0x436>
 8001160:	4214      	tst	r4, r2
 8001162:	d106      	bne.n	8001172 <__aeabi_ddiv+0x436>
 8001164:	4322      	orrs	r2, r4
 8001166:	0312      	lsls	r2, r2, #12
 8001168:	46ba      	mov	sl, r7
 800116a:	000d      	movs	r5, r1
 800116c:	4b66      	ldr	r3, [pc, #408]	; (8001308 <__aeabi_ddiv+0x5cc>)
 800116e:	0b12      	lsrs	r2, r2, #12
 8001170:	e63b      	b.n	8000dea <__aeabi_ddiv+0xae>
 8001172:	2280      	movs	r2, #128	; 0x80
 8001174:	4643      	mov	r3, r8
 8001176:	0312      	lsls	r2, r2, #12
 8001178:	431a      	orrs	r2, r3
 800117a:	0312      	lsls	r2, r2, #12
 800117c:	46b2      	mov	sl, r6
 800117e:	4b62      	ldr	r3, [pc, #392]	; (8001308 <__aeabi_ddiv+0x5cc>)
 8001180:	0b12      	lsrs	r2, r2, #12
 8001182:	e632      	b.n	8000dea <__aeabi_ddiv+0xae>
 8001184:	2b00      	cmp	r3, #0
 8001186:	d100      	bne.n	800118a <__aeabi_ddiv+0x44e>
 8001188:	e702      	b.n	8000f90 <__aeabi_ddiv+0x254>
 800118a:	19a6      	adds	r6, r4, r6
 800118c:	1e6a      	subs	r2, r5, #1
 800118e:	42a6      	cmp	r6, r4
 8001190:	d200      	bcs.n	8001194 <__aeabi_ddiv+0x458>
 8001192:	e089      	b.n	80012a8 <__aeabi_ddiv+0x56c>
 8001194:	4286      	cmp	r6, r0
 8001196:	d200      	bcs.n	800119a <__aeabi_ddiv+0x45e>
 8001198:	e09f      	b.n	80012da <__aeabi_ddiv+0x59e>
 800119a:	d100      	bne.n	800119e <__aeabi_ddiv+0x462>
 800119c:	e0af      	b.n	80012fe <__aeabi_ddiv+0x5c2>
 800119e:	0015      	movs	r5, r2
 80011a0:	e6f4      	b.n	8000f8c <__aeabi_ddiv+0x250>
 80011a2:	42a9      	cmp	r1, r5
 80011a4:	d900      	bls.n	80011a8 <__aeabi_ddiv+0x46c>
 80011a6:	e63c      	b.n	8000e22 <__aeabi_ddiv+0xe6>
 80011a8:	4643      	mov	r3, r8
 80011aa:	07de      	lsls	r6, r3, #31
 80011ac:	0858      	lsrs	r0, r3, #1
 80011ae:	086b      	lsrs	r3, r5, #1
 80011b0:	431e      	orrs	r6, r3
 80011b2:	07ed      	lsls	r5, r5, #31
 80011b4:	e63c      	b.n	8000e30 <__aeabi_ddiv+0xf4>
 80011b6:	f001 f8a9 	bl	800230c <__clzsi2>
 80011ba:	0001      	movs	r1, r0
 80011bc:	0002      	movs	r2, r0
 80011be:	3115      	adds	r1, #21
 80011c0:	3220      	adds	r2, #32
 80011c2:	291c      	cmp	r1, #28
 80011c4:	dc00      	bgt.n	80011c8 <__aeabi_ddiv+0x48c>
 80011c6:	e72c      	b.n	8001022 <__aeabi_ddiv+0x2e6>
 80011c8:	464b      	mov	r3, r9
 80011ca:	3808      	subs	r0, #8
 80011cc:	4083      	lsls	r3, r0
 80011ce:	2500      	movs	r5, #0
 80011d0:	4698      	mov	r8, r3
 80011d2:	e732      	b.n	800103a <__aeabi_ddiv+0x2fe>
 80011d4:	f001 f89a 	bl	800230c <__clzsi2>
 80011d8:	0003      	movs	r3, r0
 80011da:	001a      	movs	r2, r3
 80011dc:	3215      	adds	r2, #21
 80011de:	3020      	adds	r0, #32
 80011e0:	2a1c      	cmp	r2, #28
 80011e2:	dc00      	bgt.n	80011e6 <__aeabi_ddiv+0x4aa>
 80011e4:	e6ff      	b.n	8000fe6 <__aeabi_ddiv+0x2aa>
 80011e6:	4654      	mov	r4, sl
 80011e8:	3b08      	subs	r3, #8
 80011ea:	2100      	movs	r1, #0
 80011ec:	409c      	lsls	r4, r3
 80011ee:	e705      	b.n	8000ffc <__aeabi_ddiv+0x2c0>
 80011f0:	1936      	adds	r6, r6, r4
 80011f2:	3b01      	subs	r3, #1
 80011f4:	42b4      	cmp	r4, r6
 80011f6:	d900      	bls.n	80011fa <__aeabi_ddiv+0x4be>
 80011f8:	e6a6      	b.n	8000f48 <__aeabi_ddiv+0x20c>
 80011fa:	42b2      	cmp	r2, r6
 80011fc:	d800      	bhi.n	8001200 <__aeabi_ddiv+0x4c4>
 80011fe:	e6a3      	b.n	8000f48 <__aeabi_ddiv+0x20c>
 8001200:	1e83      	subs	r3, r0, #2
 8001202:	1936      	adds	r6, r6, r4
 8001204:	e6a0      	b.n	8000f48 <__aeabi_ddiv+0x20c>
 8001206:	1909      	adds	r1, r1, r4
 8001208:	3d01      	subs	r5, #1
 800120a:	428c      	cmp	r4, r1
 800120c:	d900      	bls.n	8001210 <__aeabi_ddiv+0x4d4>
 800120e:	e68d      	b.n	8000f2c <__aeabi_ddiv+0x1f0>
 8001210:	428a      	cmp	r2, r1
 8001212:	d800      	bhi.n	8001216 <__aeabi_ddiv+0x4da>
 8001214:	e68a      	b.n	8000f2c <__aeabi_ddiv+0x1f0>
 8001216:	1e85      	subs	r5, r0, #2
 8001218:	1909      	adds	r1, r1, r4
 800121a:	e687      	b.n	8000f2c <__aeabi_ddiv+0x1f0>
 800121c:	220f      	movs	r2, #15
 800121e:	402a      	ands	r2, r5
 8001220:	2a04      	cmp	r2, #4
 8001222:	d100      	bne.n	8001226 <__aeabi_ddiv+0x4ea>
 8001224:	e6bc      	b.n	8000fa0 <__aeabi_ddiv+0x264>
 8001226:	1d29      	adds	r1, r5, #4
 8001228:	42a9      	cmp	r1, r5
 800122a:	41ad      	sbcs	r5, r5
 800122c:	426d      	negs	r5, r5
 800122e:	08c9      	lsrs	r1, r1, #3
 8001230:	44a8      	add	r8, r5
 8001232:	e6b6      	b.n	8000fa2 <__aeabi_ddiv+0x266>
 8001234:	42af      	cmp	r7, r5
 8001236:	d900      	bls.n	800123a <__aeabi_ddiv+0x4fe>
 8001238:	e662      	b.n	8000f00 <__aeabi_ddiv+0x1c4>
 800123a:	4281      	cmp	r1, r0
 800123c:	d804      	bhi.n	8001248 <__aeabi_ddiv+0x50c>
 800123e:	d000      	beq.n	8001242 <__aeabi_ddiv+0x506>
 8001240:	e65e      	b.n	8000f00 <__aeabi_ddiv+0x1c4>
 8001242:	42ae      	cmp	r6, r5
 8001244:	d800      	bhi.n	8001248 <__aeabi_ddiv+0x50c>
 8001246:	e65b      	b.n	8000f00 <__aeabi_ddiv+0x1c4>
 8001248:	2302      	movs	r3, #2
 800124a:	425b      	negs	r3, r3
 800124c:	469c      	mov	ip, r3
 800124e:	9b00      	ldr	r3, [sp, #0]
 8001250:	44e0      	add	r8, ip
 8001252:	469c      	mov	ip, r3
 8001254:	4465      	add	r5, ip
 8001256:	429d      	cmp	r5, r3
 8001258:	419b      	sbcs	r3, r3
 800125a:	425b      	negs	r3, r3
 800125c:	191b      	adds	r3, r3, r4
 800125e:	18c0      	adds	r0, r0, r3
 8001260:	e64f      	b.n	8000f02 <__aeabi_ddiv+0x1c6>
 8001262:	42b2      	cmp	r2, r6
 8001264:	d800      	bhi.n	8001268 <__aeabi_ddiv+0x52c>
 8001266:	e612      	b.n	8000e8e <__aeabi_ddiv+0x152>
 8001268:	1e83      	subs	r3, r0, #2
 800126a:	1936      	adds	r6, r6, r4
 800126c:	e60f      	b.n	8000e8e <__aeabi_ddiv+0x152>
 800126e:	428a      	cmp	r2, r1
 8001270:	d800      	bhi.n	8001274 <__aeabi_ddiv+0x538>
 8001272:	e5fa      	b.n	8000e6a <__aeabi_ddiv+0x12e>
 8001274:	1e83      	subs	r3, r0, #2
 8001276:	4698      	mov	r8, r3
 8001278:	1909      	adds	r1, r1, r4
 800127a:	e5f6      	b.n	8000e6a <__aeabi_ddiv+0x12e>
 800127c:	4b24      	ldr	r3, [pc, #144]	; (8001310 <__aeabi_ddiv+0x5d4>)
 800127e:	0028      	movs	r0, r5
 8001280:	445b      	add	r3, fp
 8001282:	4641      	mov	r1, r8
 8001284:	409d      	lsls	r5, r3
 8001286:	4099      	lsls	r1, r3
 8001288:	40d0      	lsrs	r0, r2
 800128a:	1e6b      	subs	r3, r5, #1
 800128c:	419d      	sbcs	r5, r3
 800128e:	4643      	mov	r3, r8
 8001290:	4301      	orrs	r1, r0
 8001292:	4329      	orrs	r1, r5
 8001294:	40d3      	lsrs	r3, r2
 8001296:	074a      	lsls	r2, r1, #29
 8001298:	d100      	bne.n	800129c <__aeabi_ddiv+0x560>
 800129a:	e755      	b.n	8001148 <__aeabi_ddiv+0x40c>
 800129c:	220f      	movs	r2, #15
 800129e:	400a      	ands	r2, r1
 80012a0:	2a04      	cmp	r2, #4
 80012a2:	d000      	beq.n	80012a6 <__aeabi_ddiv+0x56a>
 80012a4:	e74a      	b.n	800113c <__aeabi_ddiv+0x400>
 80012a6:	e74f      	b.n	8001148 <__aeabi_ddiv+0x40c>
 80012a8:	0015      	movs	r5, r2
 80012aa:	4286      	cmp	r6, r0
 80012ac:	d000      	beq.n	80012b0 <__aeabi_ddiv+0x574>
 80012ae:	e66d      	b.n	8000f8c <__aeabi_ddiv+0x250>
 80012b0:	9a00      	ldr	r2, [sp, #0]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d000      	beq.n	80012b8 <__aeabi_ddiv+0x57c>
 80012b6:	e669      	b.n	8000f8c <__aeabi_ddiv+0x250>
 80012b8:	e66a      	b.n	8000f90 <__aeabi_ddiv+0x254>
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <__aeabi_ddiv+0x5d8>)
 80012bc:	445b      	add	r3, fp
 80012be:	2b00      	cmp	r3, #0
 80012c0:	dc00      	bgt.n	80012c4 <__aeabi_ddiv+0x588>
 80012c2:	e713      	b.n	80010ec <__aeabi_ddiv+0x3b0>
 80012c4:	2501      	movs	r5, #1
 80012c6:	2100      	movs	r1, #0
 80012c8:	44a8      	add	r8, r5
 80012ca:	e66a      	b.n	8000fa2 <__aeabi_ddiv+0x266>
 80012cc:	075d      	lsls	r5, r3, #29
 80012ce:	025b      	lsls	r3, r3, #9
 80012d0:	0b1a      	lsrs	r2, r3, #12
 80012d2:	08c9      	lsrs	r1, r1, #3
 80012d4:	2300      	movs	r3, #0
 80012d6:	430d      	orrs	r5, r1
 80012d8:	e587      	b.n	8000dea <__aeabi_ddiv+0xae>
 80012da:	9900      	ldr	r1, [sp, #0]
 80012dc:	3d02      	subs	r5, #2
 80012de:	004a      	lsls	r2, r1, #1
 80012e0:	428a      	cmp	r2, r1
 80012e2:	41bf      	sbcs	r7, r7
 80012e4:	427f      	negs	r7, r7
 80012e6:	193f      	adds	r7, r7, r4
 80012e8:	19f6      	adds	r6, r6, r7
 80012ea:	9200      	str	r2, [sp, #0]
 80012ec:	e7dd      	b.n	80012aa <__aeabi_ddiv+0x56e>
 80012ee:	2280      	movs	r2, #128	; 0x80
 80012f0:	4643      	mov	r3, r8
 80012f2:	0312      	lsls	r2, r2, #12
 80012f4:	431a      	orrs	r2, r3
 80012f6:	0312      	lsls	r2, r2, #12
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <__aeabi_ddiv+0x5cc>)
 80012fa:	0b12      	lsrs	r2, r2, #12
 80012fc:	e575      	b.n	8000dea <__aeabi_ddiv+0xae>
 80012fe:	9900      	ldr	r1, [sp, #0]
 8001300:	4299      	cmp	r1, r3
 8001302:	d3ea      	bcc.n	80012da <__aeabi_ddiv+0x59e>
 8001304:	0015      	movs	r5, r2
 8001306:	e7d3      	b.n	80012b0 <__aeabi_ddiv+0x574>
 8001308:	000007ff 	.word	0x000007ff
 800130c:	0000043e 	.word	0x0000043e
 8001310:	0000041e 	.word	0x0000041e
 8001314:	000003ff 	.word	0x000003ff

08001318 <__eqdf2>:
 8001318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131a:	464e      	mov	r6, r9
 800131c:	4645      	mov	r5, r8
 800131e:	46de      	mov	lr, fp
 8001320:	4657      	mov	r7, sl
 8001322:	4690      	mov	r8, r2
 8001324:	b5e0      	push	{r5, r6, r7, lr}
 8001326:	0017      	movs	r7, r2
 8001328:	031a      	lsls	r2, r3, #12
 800132a:	0b12      	lsrs	r2, r2, #12
 800132c:	0005      	movs	r5, r0
 800132e:	4684      	mov	ip, r0
 8001330:	4819      	ldr	r0, [pc, #100]	; (8001398 <__eqdf2+0x80>)
 8001332:	030e      	lsls	r6, r1, #12
 8001334:	004c      	lsls	r4, r1, #1
 8001336:	4691      	mov	r9, r2
 8001338:	005a      	lsls	r2, r3, #1
 800133a:	0fdb      	lsrs	r3, r3, #31
 800133c:	469b      	mov	fp, r3
 800133e:	0b36      	lsrs	r6, r6, #12
 8001340:	0d64      	lsrs	r4, r4, #21
 8001342:	0fc9      	lsrs	r1, r1, #31
 8001344:	0d52      	lsrs	r2, r2, #21
 8001346:	4284      	cmp	r4, r0
 8001348:	d019      	beq.n	800137e <__eqdf2+0x66>
 800134a:	4282      	cmp	r2, r0
 800134c:	d010      	beq.n	8001370 <__eqdf2+0x58>
 800134e:	2001      	movs	r0, #1
 8001350:	4294      	cmp	r4, r2
 8001352:	d10e      	bne.n	8001372 <__eqdf2+0x5a>
 8001354:	454e      	cmp	r6, r9
 8001356:	d10c      	bne.n	8001372 <__eqdf2+0x5a>
 8001358:	2001      	movs	r0, #1
 800135a:	45c4      	cmp	ip, r8
 800135c:	d109      	bne.n	8001372 <__eqdf2+0x5a>
 800135e:	4559      	cmp	r1, fp
 8001360:	d017      	beq.n	8001392 <__eqdf2+0x7a>
 8001362:	2c00      	cmp	r4, #0
 8001364:	d105      	bne.n	8001372 <__eqdf2+0x5a>
 8001366:	0030      	movs	r0, r6
 8001368:	4328      	orrs	r0, r5
 800136a:	1e43      	subs	r3, r0, #1
 800136c:	4198      	sbcs	r0, r3
 800136e:	e000      	b.n	8001372 <__eqdf2+0x5a>
 8001370:	2001      	movs	r0, #1
 8001372:	bcf0      	pop	{r4, r5, r6, r7}
 8001374:	46bb      	mov	fp, r7
 8001376:	46b2      	mov	sl, r6
 8001378:	46a9      	mov	r9, r5
 800137a:	46a0      	mov	r8, r4
 800137c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800137e:	0033      	movs	r3, r6
 8001380:	2001      	movs	r0, #1
 8001382:	432b      	orrs	r3, r5
 8001384:	d1f5      	bne.n	8001372 <__eqdf2+0x5a>
 8001386:	42a2      	cmp	r2, r4
 8001388:	d1f3      	bne.n	8001372 <__eqdf2+0x5a>
 800138a:	464b      	mov	r3, r9
 800138c:	433b      	orrs	r3, r7
 800138e:	d1f0      	bne.n	8001372 <__eqdf2+0x5a>
 8001390:	e7e2      	b.n	8001358 <__eqdf2+0x40>
 8001392:	2000      	movs	r0, #0
 8001394:	e7ed      	b.n	8001372 <__eqdf2+0x5a>
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	000007ff 	.word	0x000007ff

0800139c <__gedf2>:
 800139c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139e:	4647      	mov	r7, r8
 80013a0:	46ce      	mov	lr, r9
 80013a2:	0004      	movs	r4, r0
 80013a4:	0018      	movs	r0, r3
 80013a6:	0016      	movs	r6, r2
 80013a8:	031b      	lsls	r3, r3, #12
 80013aa:	0b1b      	lsrs	r3, r3, #12
 80013ac:	4d2d      	ldr	r5, [pc, #180]	; (8001464 <__gedf2+0xc8>)
 80013ae:	004a      	lsls	r2, r1, #1
 80013b0:	4699      	mov	r9, r3
 80013b2:	b580      	push	{r7, lr}
 80013b4:	0043      	lsls	r3, r0, #1
 80013b6:	030f      	lsls	r7, r1, #12
 80013b8:	46a4      	mov	ip, r4
 80013ba:	46b0      	mov	r8, r6
 80013bc:	0b3f      	lsrs	r7, r7, #12
 80013be:	0d52      	lsrs	r2, r2, #21
 80013c0:	0fc9      	lsrs	r1, r1, #31
 80013c2:	0d5b      	lsrs	r3, r3, #21
 80013c4:	0fc0      	lsrs	r0, r0, #31
 80013c6:	42aa      	cmp	r2, r5
 80013c8:	d021      	beq.n	800140e <__gedf2+0x72>
 80013ca:	42ab      	cmp	r3, r5
 80013cc:	d013      	beq.n	80013f6 <__gedf2+0x5a>
 80013ce:	2a00      	cmp	r2, #0
 80013d0:	d122      	bne.n	8001418 <__gedf2+0x7c>
 80013d2:	433c      	orrs	r4, r7
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <__gedf2+0x42>
 80013d8:	464d      	mov	r5, r9
 80013da:	432e      	orrs	r6, r5
 80013dc:	d022      	beq.n	8001424 <__gedf2+0x88>
 80013de:	2c00      	cmp	r4, #0
 80013e0:	d010      	beq.n	8001404 <__gedf2+0x68>
 80013e2:	4281      	cmp	r1, r0
 80013e4:	d022      	beq.n	800142c <__gedf2+0x90>
 80013e6:	2002      	movs	r0, #2
 80013e8:	3901      	subs	r1, #1
 80013ea:	4008      	ands	r0, r1
 80013ec:	3801      	subs	r0, #1
 80013ee:	bcc0      	pop	{r6, r7}
 80013f0:	46b9      	mov	r9, r7
 80013f2:	46b0      	mov	r8, r6
 80013f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f6:	464d      	mov	r5, r9
 80013f8:	432e      	orrs	r6, r5
 80013fa:	d129      	bne.n	8001450 <__gedf2+0xb4>
 80013fc:	2a00      	cmp	r2, #0
 80013fe:	d1f0      	bne.n	80013e2 <__gedf2+0x46>
 8001400:	433c      	orrs	r4, r7
 8001402:	d1ee      	bne.n	80013e2 <__gedf2+0x46>
 8001404:	2800      	cmp	r0, #0
 8001406:	d1f2      	bne.n	80013ee <__gedf2+0x52>
 8001408:	2001      	movs	r0, #1
 800140a:	4240      	negs	r0, r0
 800140c:	e7ef      	b.n	80013ee <__gedf2+0x52>
 800140e:	003d      	movs	r5, r7
 8001410:	4325      	orrs	r5, r4
 8001412:	d11d      	bne.n	8001450 <__gedf2+0xb4>
 8001414:	4293      	cmp	r3, r2
 8001416:	d0ee      	beq.n	80013f6 <__gedf2+0x5a>
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1e2      	bne.n	80013e2 <__gedf2+0x46>
 800141c:	464c      	mov	r4, r9
 800141e:	4326      	orrs	r6, r4
 8001420:	d1df      	bne.n	80013e2 <__gedf2+0x46>
 8001422:	e7e0      	b.n	80013e6 <__gedf2+0x4a>
 8001424:	2000      	movs	r0, #0
 8001426:	2c00      	cmp	r4, #0
 8001428:	d0e1      	beq.n	80013ee <__gedf2+0x52>
 800142a:	e7dc      	b.n	80013e6 <__gedf2+0x4a>
 800142c:	429a      	cmp	r2, r3
 800142e:	dc0a      	bgt.n	8001446 <__gedf2+0xaa>
 8001430:	dbe8      	blt.n	8001404 <__gedf2+0x68>
 8001432:	454f      	cmp	r7, r9
 8001434:	d8d7      	bhi.n	80013e6 <__gedf2+0x4a>
 8001436:	d00e      	beq.n	8001456 <__gedf2+0xba>
 8001438:	2000      	movs	r0, #0
 800143a:	454f      	cmp	r7, r9
 800143c:	d2d7      	bcs.n	80013ee <__gedf2+0x52>
 800143e:	2900      	cmp	r1, #0
 8001440:	d0e2      	beq.n	8001408 <__gedf2+0x6c>
 8001442:	0008      	movs	r0, r1
 8001444:	e7d3      	b.n	80013ee <__gedf2+0x52>
 8001446:	4243      	negs	r3, r0
 8001448:	4158      	adcs	r0, r3
 800144a:	0040      	lsls	r0, r0, #1
 800144c:	3801      	subs	r0, #1
 800144e:	e7ce      	b.n	80013ee <__gedf2+0x52>
 8001450:	2002      	movs	r0, #2
 8001452:	4240      	negs	r0, r0
 8001454:	e7cb      	b.n	80013ee <__gedf2+0x52>
 8001456:	45c4      	cmp	ip, r8
 8001458:	d8c5      	bhi.n	80013e6 <__gedf2+0x4a>
 800145a:	2000      	movs	r0, #0
 800145c:	45c4      	cmp	ip, r8
 800145e:	d2c6      	bcs.n	80013ee <__gedf2+0x52>
 8001460:	e7ed      	b.n	800143e <__gedf2+0xa2>
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	000007ff 	.word	0x000007ff

08001468 <__ledf2>:
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146a:	4647      	mov	r7, r8
 800146c:	46ce      	mov	lr, r9
 800146e:	0004      	movs	r4, r0
 8001470:	0018      	movs	r0, r3
 8001472:	0016      	movs	r6, r2
 8001474:	031b      	lsls	r3, r3, #12
 8001476:	0b1b      	lsrs	r3, r3, #12
 8001478:	4d2c      	ldr	r5, [pc, #176]	; (800152c <__ledf2+0xc4>)
 800147a:	004a      	lsls	r2, r1, #1
 800147c:	4699      	mov	r9, r3
 800147e:	b580      	push	{r7, lr}
 8001480:	0043      	lsls	r3, r0, #1
 8001482:	030f      	lsls	r7, r1, #12
 8001484:	46a4      	mov	ip, r4
 8001486:	46b0      	mov	r8, r6
 8001488:	0b3f      	lsrs	r7, r7, #12
 800148a:	0d52      	lsrs	r2, r2, #21
 800148c:	0fc9      	lsrs	r1, r1, #31
 800148e:	0d5b      	lsrs	r3, r3, #21
 8001490:	0fc0      	lsrs	r0, r0, #31
 8001492:	42aa      	cmp	r2, r5
 8001494:	d00d      	beq.n	80014b2 <__ledf2+0x4a>
 8001496:	42ab      	cmp	r3, r5
 8001498:	d010      	beq.n	80014bc <__ledf2+0x54>
 800149a:	2a00      	cmp	r2, #0
 800149c:	d127      	bne.n	80014ee <__ledf2+0x86>
 800149e:	433c      	orrs	r4, r7
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d111      	bne.n	80014c8 <__ledf2+0x60>
 80014a4:	464d      	mov	r5, r9
 80014a6:	432e      	orrs	r6, r5
 80014a8:	d10e      	bne.n	80014c8 <__ledf2+0x60>
 80014aa:	2000      	movs	r0, #0
 80014ac:	2c00      	cmp	r4, #0
 80014ae:	d015      	beq.n	80014dc <__ledf2+0x74>
 80014b0:	e00e      	b.n	80014d0 <__ledf2+0x68>
 80014b2:	003d      	movs	r5, r7
 80014b4:	4325      	orrs	r5, r4
 80014b6:	d110      	bne.n	80014da <__ledf2+0x72>
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d118      	bne.n	80014ee <__ledf2+0x86>
 80014bc:	464d      	mov	r5, r9
 80014be:	432e      	orrs	r6, r5
 80014c0:	d10b      	bne.n	80014da <__ledf2+0x72>
 80014c2:	2a00      	cmp	r2, #0
 80014c4:	d102      	bne.n	80014cc <__ledf2+0x64>
 80014c6:	433c      	orrs	r4, r7
 80014c8:	2c00      	cmp	r4, #0
 80014ca:	d00b      	beq.n	80014e4 <__ledf2+0x7c>
 80014cc:	4281      	cmp	r1, r0
 80014ce:	d014      	beq.n	80014fa <__ledf2+0x92>
 80014d0:	2002      	movs	r0, #2
 80014d2:	3901      	subs	r1, #1
 80014d4:	4008      	ands	r0, r1
 80014d6:	3801      	subs	r0, #1
 80014d8:	e000      	b.n	80014dc <__ledf2+0x74>
 80014da:	2002      	movs	r0, #2
 80014dc:	bcc0      	pop	{r6, r7}
 80014de:	46b9      	mov	r9, r7
 80014e0:	46b0      	mov	r8, r6
 80014e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e4:	2800      	cmp	r0, #0
 80014e6:	d1f9      	bne.n	80014dc <__ledf2+0x74>
 80014e8:	2001      	movs	r0, #1
 80014ea:	4240      	negs	r0, r0
 80014ec:	e7f6      	b.n	80014dc <__ledf2+0x74>
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1ec      	bne.n	80014cc <__ledf2+0x64>
 80014f2:	464c      	mov	r4, r9
 80014f4:	4326      	orrs	r6, r4
 80014f6:	d1e9      	bne.n	80014cc <__ledf2+0x64>
 80014f8:	e7ea      	b.n	80014d0 <__ledf2+0x68>
 80014fa:	429a      	cmp	r2, r3
 80014fc:	dd04      	ble.n	8001508 <__ledf2+0xa0>
 80014fe:	4243      	negs	r3, r0
 8001500:	4158      	adcs	r0, r3
 8001502:	0040      	lsls	r0, r0, #1
 8001504:	3801      	subs	r0, #1
 8001506:	e7e9      	b.n	80014dc <__ledf2+0x74>
 8001508:	429a      	cmp	r2, r3
 800150a:	dbeb      	blt.n	80014e4 <__ledf2+0x7c>
 800150c:	454f      	cmp	r7, r9
 800150e:	d8df      	bhi.n	80014d0 <__ledf2+0x68>
 8001510:	d006      	beq.n	8001520 <__ledf2+0xb8>
 8001512:	2000      	movs	r0, #0
 8001514:	454f      	cmp	r7, r9
 8001516:	d2e1      	bcs.n	80014dc <__ledf2+0x74>
 8001518:	2900      	cmp	r1, #0
 800151a:	d0e5      	beq.n	80014e8 <__ledf2+0x80>
 800151c:	0008      	movs	r0, r1
 800151e:	e7dd      	b.n	80014dc <__ledf2+0x74>
 8001520:	45c4      	cmp	ip, r8
 8001522:	d8d5      	bhi.n	80014d0 <__ledf2+0x68>
 8001524:	2000      	movs	r0, #0
 8001526:	45c4      	cmp	ip, r8
 8001528:	d2d8      	bcs.n	80014dc <__ledf2+0x74>
 800152a:	e7f5      	b.n	8001518 <__ledf2+0xb0>
 800152c:	000007ff 	.word	0x000007ff

08001530 <__aeabi_dmul>:
 8001530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001532:	4645      	mov	r5, r8
 8001534:	46de      	mov	lr, fp
 8001536:	4657      	mov	r7, sl
 8001538:	464e      	mov	r6, r9
 800153a:	b5e0      	push	{r5, r6, r7, lr}
 800153c:	001f      	movs	r7, r3
 800153e:	030b      	lsls	r3, r1, #12
 8001540:	0b1b      	lsrs	r3, r3, #12
 8001542:	469b      	mov	fp, r3
 8001544:	004d      	lsls	r5, r1, #1
 8001546:	0fcb      	lsrs	r3, r1, #31
 8001548:	0004      	movs	r4, r0
 800154a:	4691      	mov	r9, r2
 800154c:	4698      	mov	r8, r3
 800154e:	b087      	sub	sp, #28
 8001550:	0d6d      	lsrs	r5, r5, #21
 8001552:	d100      	bne.n	8001556 <__aeabi_dmul+0x26>
 8001554:	e1cd      	b.n	80018f2 <__aeabi_dmul+0x3c2>
 8001556:	4bce      	ldr	r3, [pc, #824]	; (8001890 <__aeabi_dmul+0x360>)
 8001558:	429d      	cmp	r5, r3
 800155a:	d100      	bne.n	800155e <__aeabi_dmul+0x2e>
 800155c:	e1e9      	b.n	8001932 <__aeabi_dmul+0x402>
 800155e:	465a      	mov	r2, fp
 8001560:	0f43      	lsrs	r3, r0, #29
 8001562:	00d2      	lsls	r2, r2, #3
 8001564:	4313      	orrs	r3, r2
 8001566:	2280      	movs	r2, #128	; 0x80
 8001568:	0412      	lsls	r2, r2, #16
 800156a:	431a      	orrs	r2, r3
 800156c:	00c3      	lsls	r3, r0, #3
 800156e:	469a      	mov	sl, r3
 8001570:	4bc8      	ldr	r3, [pc, #800]	; (8001894 <__aeabi_dmul+0x364>)
 8001572:	4693      	mov	fp, r2
 8001574:	469c      	mov	ip, r3
 8001576:	2300      	movs	r3, #0
 8001578:	2600      	movs	r6, #0
 800157a:	4465      	add	r5, ip
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	033c      	lsls	r4, r7, #12
 8001580:	007b      	lsls	r3, r7, #1
 8001582:	4648      	mov	r0, r9
 8001584:	0b24      	lsrs	r4, r4, #12
 8001586:	0d5b      	lsrs	r3, r3, #21
 8001588:	0fff      	lsrs	r7, r7, #31
 800158a:	2b00      	cmp	r3, #0
 800158c:	d100      	bne.n	8001590 <__aeabi_dmul+0x60>
 800158e:	e189      	b.n	80018a4 <__aeabi_dmul+0x374>
 8001590:	4abf      	ldr	r2, [pc, #764]	; (8001890 <__aeabi_dmul+0x360>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d019      	beq.n	80015ca <__aeabi_dmul+0x9a>
 8001596:	0f42      	lsrs	r2, r0, #29
 8001598:	00e4      	lsls	r4, r4, #3
 800159a:	4322      	orrs	r2, r4
 800159c:	2480      	movs	r4, #128	; 0x80
 800159e:	0424      	lsls	r4, r4, #16
 80015a0:	4314      	orrs	r4, r2
 80015a2:	4abc      	ldr	r2, [pc, #752]	; (8001894 <__aeabi_dmul+0x364>)
 80015a4:	2100      	movs	r1, #0
 80015a6:	4694      	mov	ip, r2
 80015a8:	4642      	mov	r2, r8
 80015aa:	4463      	add	r3, ip
 80015ac:	195b      	adds	r3, r3, r5
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	9b01      	ldr	r3, [sp, #4]
 80015b2:	407a      	eors	r2, r7
 80015b4:	3301      	adds	r3, #1
 80015b6:	00c0      	lsls	r0, r0, #3
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	9302      	str	r3, [sp, #8]
 80015bc:	2e0a      	cmp	r6, #10
 80015be:	dd1c      	ble.n	80015fa <__aeabi_dmul+0xca>
 80015c0:	003a      	movs	r2, r7
 80015c2:	2e0b      	cmp	r6, #11
 80015c4:	d05e      	beq.n	8001684 <__aeabi_dmul+0x154>
 80015c6:	4647      	mov	r7, r8
 80015c8:	e056      	b.n	8001678 <__aeabi_dmul+0x148>
 80015ca:	4649      	mov	r1, r9
 80015cc:	4bb0      	ldr	r3, [pc, #704]	; (8001890 <__aeabi_dmul+0x360>)
 80015ce:	4321      	orrs	r1, r4
 80015d0:	18eb      	adds	r3, r5, r3
 80015d2:	9301      	str	r3, [sp, #4]
 80015d4:	2900      	cmp	r1, #0
 80015d6:	d12a      	bne.n	800162e <__aeabi_dmul+0xfe>
 80015d8:	2080      	movs	r0, #128	; 0x80
 80015da:	2202      	movs	r2, #2
 80015dc:	0100      	lsls	r0, r0, #4
 80015de:	002b      	movs	r3, r5
 80015e0:	4684      	mov	ip, r0
 80015e2:	4316      	orrs	r6, r2
 80015e4:	4642      	mov	r2, r8
 80015e6:	4463      	add	r3, ip
 80015e8:	407a      	eors	r2, r7
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	9302      	str	r3, [sp, #8]
 80015ee:	2e0a      	cmp	r6, #10
 80015f0:	dd00      	ble.n	80015f4 <__aeabi_dmul+0xc4>
 80015f2:	e231      	b.n	8001a58 <__aeabi_dmul+0x528>
 80015f4:	2000      	movs	r0, #0
 80015f6:	2400      	movs	r4, #0
 80015f8:	2102      	movs	r1, #2
 80015fa:	2e02      	cmp	r6, #2
 80015fc:	dc26      	bgt.n	800164c <__aeabi_dmul+0x11c>
 80015fe:	3e01      	subs	r6, #1
 8001600:	2e01      	cmp	r6, #1
 8001602:	d852      	bhi.n	80016aa <__aeabi_dmul+0x17a>
 8001604:	2902      	cmp	r1, #2
 8001606:	d04c      	beq.n	80016a2 <__aeabi_dmul+0x172>
 8001608:	2901      	cmp	r1, #1
 800160a:	d000      	beq.n	800160e <__aeabi_dmul+0xde>
 800160c:	e118      	b.n	8001840 <__aeabi_dmul+0x310>
 800160e:	2300      	movs	r3, #0
 8001610:	2400      	movs	r4, #0
 8001612:	2500      	movs	r5, #0
 8001614:	051b      	lsls	r3, r3, #20
 8001616:	4323      	orrs	r3, r4
 8001618:	07d2      	lsls	r2, r2, #31
 800161a:	4313      	orrs	r3, r2
 800161c:	0028      	movs	r0, r5
 800161e:	0019      	movs	r1, r3
 8001620:	b007      	add	sp, #28
 8001622:	bcf0      	pop	{r4, r5, r6, r7}
 8001624:	46bb      	mov	fp, r7
 8001626:	46b2      	mov	sl, r6
 8001628:	46a9      	mov	r9, r5
 800162a:	46a0      	mov	r8, r4
 800162c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800162e:	2180      	movs	r1, #128	; 0x80
 8001630:	2203      	movs	r2, #3
 8001632:	0109      	lsls	r1, r1, #4
 8001634:	002b      	movs	r3, r5
 8001636:	468c      	mov	ip, r1
 8001638:	4316      	orrs	r6, r2
 800163a:	4642      	mov	r2, r8
 800163c:	4463      	add	r3, ip
 800163e:	407a      	eors	r2, r7
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	9302      	str	r3, [sp, #8]
 8001644:	2e0a      	cmp	r6, #10
 8001646:	dd00      	ble.n	800164a <__aeabi_dmul+0x11a>
 8001648:	e228      	b.n	8001a9c <__aeabi_dmul+0x56c>
 800164a:	2103      	movs	r1, #3
 800164c:	2501      	movs	r5, #1
 800164e:	40b5      	lsls	r5, r6
 8001650:	46ac      	mov	ip, r5
 8001652:	26a6      	movs	r6, #166	; 0xa6
 8001654:	4663      	mov	r3, ip
 8001656:	00f6      	lsls	r6, r6, #3
 8001658:	4035      	ands	r5, r6
 800165a:	4233      	tst	r3, r6
 800165c:	d10b      	bne.n	8001676 <__aeabi_dmul+0x146>
 800165e:	2690      	movs	r6, #144	; 0x90
 8001660:	00b6      	lsls	r6, r6, #2
 8001662:	4233      	tst	r3, r6
 8001664:	d118      	bne.n	8001698 <__aeabi_dmul+0x168>
 8001666:	3eb9      	subs	r6, #185	; 0xb9
 8001668:	3eff      	subs	r6, #255	; 0xff
 800166a:	421e      	tst	r6, r3
 800166c:	d01d      	beq.n	80016aa <__aeabi_dmul+0x17a>
 800166e:	46a3      	mov	fp, r4
 8001670:	4682      	mov	sl, r0
 8001672:	9100      	str	r1, [sp, #0]
 8001674:	e000      	b.n	8001678 <__aeabi_dmul+0x148>
 8001676:	0017      	movs	r7, r2
 8001678:	9900      	ldr	r1, [sp, #0]
 800167a:	003a      	movs	r2, r7
 800167c:	2902      	cmp	r1, #2
 800167e:	d010      	beq.n	80016a2 <__aeabi_dmul+0x172>
 8001680:	465c      	mov	r4, fp
 8001682:	4650      	mov	r0, sl
 8001684:	2903      	cmp	r1, #3
 8001686:	d1bf      	bne.n	8001608 <__aeabi_dmul+0xd8>
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	031b      	lsls	r3, r3, #12
 800168c:	431c      	orrs	r4, r3
 800168e:	0324      	lsls	r4, r4, #12
 8001690:	0005      	movs	r5, r0
 8001692:	4b7f      	ldr	r3, [pc, #508]	; (8001890 <__aeabi_dmul+0x360>)
 8001694:	0b24      	lsrs	r4, r4, #12
 8001696:	e7bd      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001698:	2480      	movs	r4, #128	; 0x80
 800169a:	2200      	movs	r2, #0
 800169c:	4b7c      	ldr	r3, [pc, #496]	; (8001890 <__aeabi_dmul+0x360>)
 800169e:	0324      	lsls	r4, r4, #12
 80016a0:	e7b8      	b.n	8001614 <__aeabi_dmul+0xe4>
 80016a2:	2400      	movs	r4, #0
 80016a4:	2500      	movs	r5, #0
 80016a6:	4b7a      	ldr	r3, [pc, #488]	; (8001890 <__aeabi_dmul+0x360>)
 80016a8:	e7b4      	b.n	8001614 <__aeabi_dmul+0xe4>
 80016aa:	4653      	mov	r3, sl
 80016ac:	041e      	lsls	r6, r3, #16
 80016ae:	0c36      	lsrs	r6, r6, #16
 80016b0:	0c1f      	lsrs	r7, r3, #16
 80016b2:	0033      	movs	r3, r6
 80016b4:	0c01      	lsrs	r1, r0, #16
 80016b6:	0400      	lsls	r0, r0, #16
 80016b8:	0c00      	lsrs	r0, r0, #16
 80016ba:	4343      	muls	r3, r0
 80016bc:	4698      	mov	r8, r3
 80016be:	0003      	movs	r3, r0
 80016c0:	437b      	muls	r3, r7
 80016c2:	4699      	mov	r9, r3
 80016c4:	0033      	movs	r3, r6
 80016c6:	434b      	muls	r3, r1
 80016c8:	469c      	mov	ip, r3
 80016ca:	4643      	mov	r3, r8
 80016cc:	000d      	movs	r5, r1
 80016ce:	0c1b      	lsrs	r3, r3, #16
 80016d0:	469a      	mov	sl, r3
 80016d2:	437d      	muls	r5, r7
 80016d4:	44cc      	add	ip, r9
 80016d6:	44d4      	add	ip, sl
 80016d8:	9500      	str	r5, [sp, #0]
 80016da:	45e1      	cmp	r9, ip
 80016dc:	d904      	bls.n	80016e8 <__aeabi_dmul+0x1b8>
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	025b      	lsls	r3, r3, #9
 80016e2:	4699      	mov	r9, r3
 80016e4:	444d      	add	r5, r9
 80016e6:	9500      	str	r5, [sp, #0]
 80016e8:	4663      	mov	r3, ip
 80016ea:	0c1b      	lsrs	r3, r3, #16
 80016ec:	001d      	movs	r5, r3
 80016ee:	4663      	mov	r3, ip
 80016f0:	041b      	lsls	r3, r3, #16
 80016f2:	469c      	mov	ip, r3
 80016f4:	4643      	mov	r3, r8
 80016f6:	041b      	lsls	r3, r3, #16
 80016f8:	0c1b      	lsrs	r3, r3, #16
 80016fa:	4698      	mov	r8, r3
 80016fc:	4663      	mov	r3, ip
 80016fe:	4443      	add	r3, r8
 8001700:	9303      	str	r3, [sp, #12]
 8001702:	0c23      	lsrs	r3, r4, #16
 8001704:	4698      	mov	r8, r3
 8001706:	0033      	movs	r3, r6
 8001708:	0424      	lsls	r4, r4, #16
 800170a:	0c24      	lsrs	r4, r4, #16
 800170c:	4363      	muls	r3, r4
 800170e:	469c      	mov	ip, r3
 8001710:	0023      	movs	r3, r4
 8001712:	437b      	muls	r3, r7
 8001714:	4699      	mov	r9, r3
 8001716:	4643      	mov	r3, r8
 8001718:	435e      	muls	r6, r3
 800171a:	435f      	muls	r7, r3
 800171c:	444e      	add	r6, r9
 800171e:	4663      	mov	r3, ip
 8001720:	46b2      	mov	sl, r6
 8001722:	0c1e      	lsrs	r6, r3, #16
 8001724:	4456      	add	r6, sl
 8001726:	45b1      	cmp	r9, r6
 8001728:	d903      	bls.n	8001732 <__aeabi_dmul+0x202>
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	4699      	mov	r9, r3
 8001730:	444f      	add	r7, r9
 8001732:	0c33      	lsrs	r3, r6, #16
 8001734:	4699      	mov	r9, r3
 8001736:	003b      	movs	r3, r7
 8001738:	444b      	add	r3, r9
 800173a:	9305      	str	r3, [sp, #20]
 800173c:	4663      	mov	r3, ip
 800173e:	46ac      	mov	ip, r5
 8001740:	041f      	lsls	r7, r3, #16
 8001742:	0c3f      	lsrs	r7, r7, #16
 8001744:	0436      	lsls	r6, r6, #16
 8001746:	19f6      	adds	r6, r6, r7
 8001748:	44b4      	add	ip, r6
 800174a:	4663      	mov	r3, ip
 800174c:	9304      	str	r3, [sp, #16]
 800174e:	465b      	mov	r3, fp
 8001750:	0c1b      	lsrs	r3, r3, #16
 8001752:	469c      	mov	ip, r3
 8001754:	465b      	mov	r3, fp
 8001756:	041f      	lsls	r7, r3, #16
 8001758:	0c3f      	lsrs	r7, r7, #16
 800175a:	003b      	movs	r3, r7
 800175c:	4343      	muls	r3, r0
 800175e:	4699      	mov	r9, r3
 8001760:	4663      	mov	r3, ip
 8001762:	4343      	muls	r3, r0
 8001764:	469a      	mov	sl, r3
 8001766:	464b      	mov	r3, r9
 8001768:	4660      	mov	r0, ip
 800176a:	0c1b      	lsrs	r3, r3, #16
 800176c:	469b      	mov	fp, r3
 800176e:	4348      	muls	r0, r1
 8001770:	4379      	muls	r1, r7
 8001772:	4451      	add	r1, sl
 8001774:	4459      	add	r1, fp
 8001776:	458a      	cmp	sl, r1
 8001778:	d903      	bls.n	8001782 <__aeabi_dmul+0x252>
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	025b      	lsls	r3, r3, #9
 800177e:	469a      	mov	sl, r3
 8001780:	4450      	add	r0, sl
 8001782:	0c0b      	lsrs	r3, r1, #16
 8001784:	469a      	mov	sl, r3
 8001786:	464b      	mov	r3, r9
 8001788:	041b      	lsls	r3, r3, #16
 800178a:	0c1b      	lsrs	r3, r3, #16
 800178c:	4699      	mov	r9, r3
 800178e:	003b      	movs	r3, r7
 8001790:	4363      	muls	r3, r4
 8001792:	0409      	lsls	r1, r1, #16
 8001794:	4645      	mov	r5, r8
 8001796:	4449      	add	r1, r9
 8001798:	4699      	mov	r9, r3
 800179a:	4663      	mov	r3, ip
 800179c:	435c      	muls	r4, r3
 800179e:	436b      	muls	r3, r5
 80017a0:	469c      	mov	ip, r3
 80017a2:	464b      	mov	r3, r9
 80017a4:	0c1b      	lsrs	r3, r3, #16
 80017a6:	4698      	mov	r8, r3
 80017a8:	436f      	muls	r7, r5
 80017aa:	193f      	adds	r7, r7, r4
 80017ac:	4447      	add	r7, r8
 80017ae:	4450      	add	r0, sl
 80017b0:	42bc      	cmp	r4, r7
 80017b2:	d903      	bls.n	80017bc <__aeabi_dmul+0x28c>
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	025b      	lsls	r3, r3, #9
 80017b8:	4698      	mov	r8, r3
 80017ba:	44c4      	add	ip, r8
 80017bc:	9b04      	ldr	r3, [sp, #16]
 80017be:	9d00      	ldr	r5, [sp, #0]
 80017c0:	4698      	mov	r8, r3
 80017c2:	4445      	add	r5, r8
 80017c4:	42b5      	cmp	r5, r6
 80017c6:	41b6      	sbcs	r6, r6
 80017c8:	4273      	negs	r3, r6
 80017ca:	4698      	mov	r8, r3
 80017cc:	464b      	mov	r3, r9
 80017ce:	041e      	lsls	r6, r3, #16
 80017d0:	9b05      	ldr	r3, [sp, #20]
 80017d2:	043c      	lsls	r4, r7, #16
 80017d4:	4699      	mov	r9, r3
 80017d6:	0c36      	lsrs	r6, r6, #16
 80017d8:	19a4      	adds	r4, r4, r6
 80017da:	444c      	add	r4, r9
 80017dc:	46a1      	mov	r9, r4
 80017de:	4683      	mov	fp, r0
 80017e0:	186e      	adds	r6, r5, r1
 80017e2:	44c1      	add	r9, r8
 80017e4:	428e      	cmp	r6, r1
 80017e6:	4189      	sbcs	r1, r1
 80017e8:	44cb      	add	fp, r9
 80017ea:	465d      	mov	r5, fp
 80017ec:	4249      	negs	r1, r1
 80017ee:	186d      	adds	r5, r5, r1
 80017f0:	429c      	cmp	r4, r3
 80017f2:	41a4      	sbcs	r4, r4
 80017f4:	45c1      	cmp	r9, r8
 80017f6:	419b      	sbcs	r3, r3
 80017f8:	4583      	cmp	fp, r0
 80017fa:	4180      	sbcs	r0, r0
 80017fc:	428d      	cmp	r5, r1
 80017fe:	4189      	sbcs	r1, r1
 8001800:	425b      	negs	r3, r3
 8001802:	4264      	negs	r4, r4
 8001804:	431c      	orrs	r4, r3
 8001806:	4240      	negs	r0, r0
 8001808:	9b03      	ldr	r3, [sp, #12]
 800180a:	4249      	negs	r1, r1
 800180c:	4301      	orrs	r1, r0
 800180e:	0270      	lsls	r0, r6, #9
 8001810:	0c3f      	lsrs	r7, r7, #16
 8001812:	4318      	orrs	r0, r3
 8001814:	19e4      	adds	r4, r4, r7
 8001816:	1e47      	subs	r7, r0, #1
 8001818:	41b8      	sbcs	r0, r7
 800181a:	1864      	adds	r4, r4, r1
 800181c:	4464      	add	r4, ip
 800181e:	0df6      	lsrs	r6, r6, #23
 8001820:	0261      	lsls	r1, r4, #9
 8001822:	4330      	orrs	r0, r6
 8001824:	0dec      	lsrs	r4, r5, #23
 8001826:	026e      	lsls	r6, r5, #9
 8001828:	430c      	orrs	r4, r1
 800182a:	4330      	orrs	r0, r6
 800182c:	01c9      	lsls	r1, r1, #7
 800182e:	d400      	bmi.n	8001832 <__aeabi_dmul+0x302>
 8001830:	e0f1      	b.n	8001a16 <__aeabi_dmul+0x4e6>
 8001832:	2101      	movs	r1, #1
 8001834:	0843      	lsrs	r3, r0, #1
 8001836:	4001      	ands	r1, r0
 8001838:	430b      	orrs	r3, r1
 800183a:	07e0      	lsls	r0, r4, #31
 800183c:	4318      	orrs	r0, r3
 800183e:	0864      	lsrs	r4, r4, #1
 8001840:	4915      	ldr	r1, [pc, #84]	; (8001898 <__aeabi_dmul+0x368>)
 8001842:	9b02      	ldr	r3, [sp, #8]
 8001844:	468c      	mov	ip, r1
 8001846:	4463      	add	r3, ip
 8001848:	2b00      	cmp	r3, #0
 800184a:	dc00      	bgt.n	800184e <__aeabi_dmul+0x31e>
 800184c:	e097      	b.n	800197e <__aeabi_dmul+0x44e>
 800184e:	0741      	lsls	r1, r0, #29
 8001850:	d009      	beq.n	8001866 <__aeabi_dmul+0x336>
 8001852:	210f      	movs	r1, #15
 8001854:	4001      	ands	r1, r0
 8001856:	2904      	cmp	r1, #4
 8001858:	d005      	beq.n	8001866 <__aeabi_dmul+0x336>
 800185a:	1d01      	adds	r1, r0, #4
 800185c:	4281      	cmp	r1, r0
 800185e:	4180      	sbcs	r0, r0
 8001860:	4240      	negs	r0, r0
 8001862:	1824      	adds	r4, r4, r0
 8001864:	0008      	movs	r0, r1
 8001866:	01e1      	lsls	r1, r4, #7
 8001868:	d506      	bpl.n	8001878 <__aeabi_dmul+0x348>
 800186a:	2180      	movs	r1, #128	; 0x80
 800186c:	00c9      	lsls	r1, r1, #3
 800186e:	468c      	mov	ip, r1
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <__aeabi_dmul+0x36c>)
 8001872:	401c      	ands	r4, r3
 8001874:	9b02      	ldr	r3, [sp, #8]
 8001876:	4463      	add	r3, ip
 8001878:	4909      	ldr	r1, [pc, #36]	; (80018a0 <__aeabi_dmul+0x370>)
 800187a:	428b      	cmp	r3, r1
 800187c:	dd00      	ble.n	8001880 <__aeabi_dmul+0x350>
 800187e:	e710      	b.n	80016a2 <__aeabi_dmul+0x172>
 8001880:	0761      	lsls	r1, r4, #29
 8001882:	08c5      	lsrs	r5, r0, #3
 8001884:	0264      	lsls	r4, r4, #9
 8001886:	055b      	lsls	r3, r3, #21
 8001888:	430d      	orrs	r5, r1
 800188a:	0b24      	lsrs	r4, r4, #12
 800188c:	0d5b      	lsrs	r3, r3, #21
 800188e:	e6c1      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001890:	000007ff 	.word	0x000007ff
 8001894:	fffffc01 	.word	0xfffffc01
 8001898:	000003ff 	.word	0x000003ff
 800189c:	feffffff 	.word	0xfeffffff
 80018a0:	000007fe 	.word	0x000007fe
 80018a4:	464b      	mov	r3, r9
 80018a6:	4323      	orrs	r3, r4
 80018a8:	d059      	beq.n	800195e <__aeabi_dmul+0x42e>
 80018aa:	2c00      	cmp	r4, #0
 80018ac:	d100      	bne.n	80018b0 <__aeabi_dmul+0x380>
 80018ae:	e0a3      	b.n	80019f8 <__aeabi_dmul+0x4c8>
 80018b0:	0020      	movs	r0, r4
 80018b2:	f000 fd2b 	bl	800230c <__clzsi2>
 80018b6:	0001      	movs	r1, r0
 80018b8:	0003      	movs	r3, r0
 80018ba:	390b      	subs	r1, #11
 80018bc:	221d      	movs	r2, #29
 80018be:	1a52      	subs	r2, r2, r1
 80018c0:	4649      	mov	r1, r9
 80018c2:	0018      	movs	r0, r3
 80018c4:	40d1      	lsrs	r1, r2
 80018c6:	464a      	mov	r2, r9
 80018c8:	3808      	subs	r0, #8
 80018ca:	4082      	lsls	r2, r0
 80018cc:	4084      	lsls	r4, r0
 80018ce:	0010      	movs	r0, r2
 80018d0:	430c      	orrs	r4, r1
 80018d2:	4a74      	ldr	r2, [pc, #464]	; (8001aa4 <__aeabi_dmul+0x574>)
 80018d4:	1aeb      	subs	r3, r5, r3
 80018d6:	4694      	mov	ip, r2
 80018d8:	4642      	mov	r2, r8
 80018da:	4463      	add	r3, ip
 80018dc:	9301      	str	r3, [sp, #4]
 80018de:	9b01      	ldr	r3, [sp, #4]
 80018e0:	407a      	eors	r2, r7
 80018e2:	3301      	adds	r3, #1
 80018e4:	2100      	movs	r1, #0
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	9302      	str	r3, [sp, #8]
 80018ea:	2e0a      	cmp	r6, #10
 80018ec:	dd00      	ble.n	80018f0 <__aeabi_dmul+0x3c0>
 80018ee:	e667      	b.n	80015c0 <__aeabi_dmul+0x90>
 80018f0:	e683      	b.n	80015fa <__aeabi_dmul+0xca>
 80018f2:	465b      	mov	r3, fp
 80018f4:	4303      	orrs	r3, r0
 80018f6:	469a      	mov	sl, r3
 80018f8:	d02a      	beq.n	8001950 <__aeabi_dmul+0x420>
 80018fa:	465b      	mov	r3, fp
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d06d      	beq.n	80019dc <__aeabi_dmul+0x4ac>
 8001900:	4658      	mov	r0, fp
 8001902:	f000 fd03 	bl	800230c <__clzsi2>
 8001906:	0001      	movs	r1, r0
 8001908:	0003      	movs	r3, r0
 800190a:	390b      	subs	r1, #11
 800190c:	221d      	movs	r2, #29
 800190e:	1a52      	subs	r2, r2, r1
 8001910:	0021      	movs	r1, r4
 8001912:	0018      	movs	r0, r3
 8001914:	465d      	mov	r5, fp
 8001916:	40d1      	lsrs	r1, r2
 8001918:	3808      	subs	r0, #8
 800191a:	4085      	lsls	r5, r0
 800191c:	000a      	movs	r2, r1
 800191e:	4084      	lsls	r4, r0
 8001920:	432a      	orrs	r2, r5
 8001922:	4693      	mov	fp, r2
 8001924:	46a2      	mov	sl, r4
 8001926:	4d5f      	ldr	r5, [pc, #380]	; (8001aa4 <__aeabi_dmul+0x574>)
 8001928:	2600      	movs	r6, #0
 800192a:	1aed      	subs	r5, r5, r3
 800192c:	2300      	movs	r3, #0
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	e625      	b.n	800157e <__aeabi_dmul+0x4e>
 8001932:	465b      	mov	r3, fp
 8001934:	4303      	orrs	r3, r0
 8001936:	469a      	mov	sl, r3
 8001938:	d105      	bne.n	8001946 <__aeabi_dmul+0x416>
 800193a:	2300      	movs	r3, #0
 800193c:	469b      	mov	fp, r3
 800193e:	3302      	adds	r3, #2
 8001940:	2608      	movs	r6, #8
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	e61b      	b.n	800157e <__aeabi_dmul+0x4e>
 8001946:	2303      	movs	r3, #3
 8001948:	4682      	mov	sl, r0
 800194a:	260c      	movs	r6, #12
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	e616      	b.n	800157e <__aeabi_dmul+0x4e>
 8001950:	2300      	movs	r3, #0
 8001952:	469b      	mov	fp, r3
 8001954:	3301      	adds	r3, #1
 8001956:	2604      	movs	r6, #4
 8001958:	2500      	movs	r5, #0
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	e60f      	b.n	800157e <__aeabi_dmul+0x4e>
 800195e:	4642      	mov	r2, r8
 8001960:	3301      	adds	r3, #1
 8001962:	9501      	str	r5, [sp, #4]
 8001964:	431e      	orrs	r6, r3
 8001966:	9b01      	ldr	r3, [sp, #4]
 8001968:	407a      	eors	r2, r7
 800196a:	3301      	adds	r3, #1
 800196c:	2400      	movs	r4, #0
 800196e:	2000      	movs	r0, #0
 8001970:	2101      	movs	r1, #1
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	9302      	str	r3, [sp, #8]
 8001976:	2e0a      	cmp	r6, #10
 8001978:	dd00      	ble.n	800197c <__aeabi_dmul+0x44c>
 800197a:	e621      	b.n	80015c0 <__aeabi_dmul+0x90>
 800197c:	e63d      	b.n	80015fa <__aeabi_dmul+0xca>
 800197e:	2101      	movs	r1, #1
 8001980:	1ac9      	subs	r1, r1, r3
 8001982:	2938      	cmp	r1, #56	; 0x38
 8001984:	dd00      	ble.n	8001988 <__aeabi_dmul+0x458>
 8001986:	e642      	b.n	800160e <__aeabi_dmul+0xde>
 8001988:	291f      	cmp	r1, #31
 800198a:	dd47      	ble.n	8001a1c <__aeabi_dmul+0x4ec>
 800198c:	261f      	movs	r6, #31
 800198e:	0025      	movs	r5, r4
 8001990:	4276      	negs	r6, r6
 8001992:	1af3      	subs	r3, r6, r3
 8001994:	40dd      	lsrs	r5, r3
 8001996:	002b      	movs	r3, r5
 8001998:	2920      	cmp	r1, #32
 800199a:	d005      	beq.n	80019a8 <__aeabi_dmul+0x478>
 800199c:	4942      	ldr	r1, [pc, #264]	; (8001aa8 <__aeabi_dmul+0x578>)
 800199e:	9d02      	ldr	r5, [sp, #8]
 80019a0:	468c      	mov	ip, r1
 80019a2:	4465      	add	r5, ip
 80019a4:	40ac      	lsls	r4, r5
 80019a6:	4320      	orrs	r0, r4
 80019a8:	1e41      	subs	r1, r0, #1
 80019aa:	4188      	sbcs	r0, r1
 80019ac:	4318      	orrs	r0, r3
 80019ae:	2307      	movs	r3, #7
 80019b0:	001d      	movs	r5, r3
 80019b2:	2400      	movs	r4, #0
 80019b4:	4005      	ands	r5, r0
 80019b6:	4203      	tst	r3, r0
 80019b8:	d04a      	beq.n	8001a50 <__aeabi_dmul+0x520>
 80019ba:	230f      	movs	r3, #15
 80019bc:	2400      	movs	r4, #0
 80019be:	4003      	ands	r3, r0
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d042      	beq.n	8001a4a <__aeabi_dmul+0x51a>
 80019c4:	1d03      	adds	r3, r0, #4
 80019c6:	4283      	cmp	r3, r0
 80019c8:	4180      	sbcs	r0, r0
 80019ca:	4240      	negs	r0, r0
 80019cc:	1824      	adds	r4, r4, r0
 80019ce:	0018      	movs	r0, r3
 80019d0:	0223      	lsls	r3, r4, #8
 80019d2:	d53a      	bpl.n	8001a4a <__aeabi_dmul+0x51a>
 80019d4:	2301      	movs	r3, #1
 80019d6:	2400      	movs	r4, #0
 80019d8:	2500      	movs	r5, #0
 80019da:	e61b      	b.n	8001614 <__aeabi_dmul+0xe4>
 80019dc:	f000 fc96 	bl	800230c <__clzsi2>
 80019e0:	0001      	movs	r1, r0
 80019e2:	0003      	movs	r3, r0
 80019e4:	3115      	adds	r1, #21
 80019e6:	3320      	adds	r3, #32
 80019e8:	291c      	cmp	r1, #28
 80019ea:	dd8f      	ble.n	800190c <__aeabi_dmul+0x3dc>
 80019ec:	3808      	subs	r0, #8
 80019ee:	2200      	movs	r2, #0
 80019f0:	4084      	lsls	r4, r0
 80019f2:	4692      	mov	sl, r2
 80019f4:	46a3      	mov	fp, r4
 80019f6:	e796      	b.n	8001926 <__aeabi_dmul+0x3f6>
 80019f8:	f000 fc88 	bl	800230c <__clzsi2>
 80019fc:	0001      	movs	r1, r0
 80019fe:	0003      	movs	r3, r0
 8001a00:	3115      	adds	r1, #21
 8001a02:	3320      	adds	r3, #32
 8001a04:	291c      	cmp	r1, #28
 8001a06:	dc00      	bgt.n	8001a0a <__aeabi_dmul+0x4da>
 8001a08:	e758      	b.n	80018bc <__aeabi_dmul+0x38c>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	464c      	mov	r4, r9
 8001a0e:	3a08      	subs	r2, #8
 8001a10:	2000      	movs	r0, #0
 8001a12:	4094      	lsls	r4, r2
 8001a14:	e75d      	b.n	80018d2 <__aeabi_dmul+0x3a2>
 8001a16:	9b01      	ldr	r3, [sp, #4]
 8001a18:	9302      	str	r3, [sp, #8]
 8001a1a:	e711      	b.n	8001840 <__aeabi_dmul+0x310>
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <__aeabi_dmul+0x57c>)
 8001a1e:	0026      	movs	r6, r4
 8001a20:	469c      	mov	ip, r3
 8001a22:	0003      	movs	r3, r0
 8001a24:	9d02      	ldr	r5, [sp, #8]
 8001a26:	40cb      	lsrs	r3, r1
 8001a28:	4465      	add	r5, ip
 8001a2a:	40ae      	lsls	r6, r5
 8001a2c:	431e      	orrs	r6, r3
 8001a2e:	0003      	movs	r3, r0
 8001a30:	40ab      	lsls	r3, r5
 8001a32:	1e58      	subs	r0, r3, #1
 8001a34:	4183      	sbcs	r3, r0
 8001a36:	0030      	movs	r0, r6
 8001a38:	4318      	orrs	r0, r3
 8001a3a:	40cc      	lsrs	r4, r1
 8001a3c:	0743      	lsls	r3, r0, #29
 8001a3e:	d0c7      	beq.n	80019d0 <__aeabi_dmul+0x4a0>
 8001a40:	230f      	movs	r3, #15
 8001a42:	4003      	ands	r3, r0
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d1bd      	bne.n	80019c4 <__aeabi_dmul+0x494>
 8001a48:	e7c2      	b.n	80019d0 <__aeabi_dmul+0x4a0>
 8001a4a:	0765      	lsls	r5, r4, #29
 8001a4c:	0264      	lsls	r4, r4, #9
 8001a4e:	0b24      	lsrs	r4, r4, #12
 8001a50:	08c0      	lsrs	r0, r0, #3
 8001a52:	2300      	movs	r3, #0
 8001a54:	4305      	orrs	r5, r0
 8001a56:	e5dd      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001a58:	2500      	movs	r5, #0
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	2e0f      	cmp	r6, #15
 8001a5e:	d10c      	bne.n	8001a7a <__aeabi_dmul+0x54a>
 8001a60:	2480      	movs	r4, #128	; 0x80
 8001a62:	465b      	mov	r3, fp
 8001a64:	0324      	lsls	r4, r4, #12
 8001a66:	4223      	tst	r3, r4
 8001a68:	d00e      	beq.n	8001a88 <__aeabi_dmul+0x558>
 8001a6a:	4221      	tst	r1, r4
 8001a6c:	d10c      	bne.n	8001a88 <__aeabi_dmul+0x558>
 8001a6e:	430c      	orrs	r4, r1
 8001a70:	0324      	lsls	r4, r4, #12
 8001a72:	003a      	movs	r2, r7
 8001a74:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <__aeabi_dmul+0x580>)
 8001a76:	0b24      	lsrs	r4, r4, #12
 8001a78:	e5cc      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001a7a:	2e0b      	cmp	r6, #11
 8001a7c:	d000      	beq.n	8001a80 <__aeabi_dmul+0x550>
 8001a7e:	e5a2      	b.n	80015c6 <__aeabi_dmul+0x96>
 8001a80:	468b      	mov	fp, r1
 8001a82:	46aa      	mov	sl, r5
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	e5f7      	b.n	8001678 <__aeabi_dmul+0x148>
 8001a88:	2480      	movs	r4, #128	; 0x80
 8001a8a:	465b      	mov	r3, fp
 8001a8c:	0324      	lsls	r4, r4, #12
 8001a8e:	431c      	orrs	r4, r3
 8001a90:	0324      	lsls	r4, r4, #12
 8001a92:	4642      	mov	r2, r8
 8001a94:	4655      	mov	r5, sl
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <__aeabi_dmul+0x580>)
 8001a98:	0b24      	lsrs	r4, r4, #12
 8001a9a:	e5bb      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001a9c:	464d      	mov	r5, r9
 8001a9e:	0021      	movs	r1, r4
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e7db      	b.n	8001a5c <__aeabi_dmul+0x52c>
 8001aa4:	fffffc0d 	.word	0xfffffc0d
 8001aa8:	0000043e 	.word	0x0000043e
 8001aac:	0000041e 	.word	0x0000041e
 8001ab0:	000007ff 	.word	0x000007ff

08001ab4 <__aeabi_dsub>:
 8001ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ab6:	4657      	mov	r7, sl
 8001ab8:	464e      	mov	r6, r9
 8001aba:	4645      	mov	r5, r8
 8001abc:	46de      	mov	lr, fp
 8001abe:	b5e0      	push	{r5, r6, r7, lr}
 8001ac0:	000d      	movs	r5, r1
 8001ac2:	0004      	movs	r4, r0
 8001ac4:	0019      	movs	r1, r3
 8001ac6:	0010      	movs	r0, r2
 8001ac8:	032b      	lsls	r3, r5, #12
 8001aca:	0a5b      	lsrs	r3, r3, #9
 8001acc:	0f62      	lsrs	r2, r4, #29
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	00e3      	lsls	r3, r4, #3
 8001ad2:	030c      	lsls	r4, r1, #12
 8001ad4:	0a64      	lsrs	r4, r4, #9
 8001ad6:	0f47      	lsrs	r7, r0, #29
 8001ad8:	4327      	orrs	r7, r4
 8001ada:	4cd0      	ldr	r4, [pc, #832]	; (8001e1c <__aeabi_dsub+0x368>)
 8001adc:	006e      	lsls	r6, r5, #1
 8001ade:	4691      	mov	r9, r2
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	004a      	lsls	r2, r1, #1
 8001ae4:	00c0      	lsls	r0, r0, #3
 8001ae6:	4698      	mov	r8, r3
 8001ae8:	46a2      	mov	sl, r4
 8001aea:	0d76      	lsrs	r6, r6, #21
 8001aec:	0fed      	lsrs	r5, r5, #31
 8001aee:	0d52      	lsrs	r2, r2, #21
 8001af0:	0fc9      	lsrs	r1, r1, #31
 8001af2:	9001      	str	r0, [sp, #4]
 8001af4:	42a2      	cmp	r2, r4
 8001af6:	d100      	bne.n	8001afa <__aeabi_dsub+0x46>
 8001af8:	e0b9      	b.n	8001c6e <__aeabi_dsub+0x1ba>
 8001afa:	2401      	movs	r4, #1
 8001afc:	4061      	eors	r1, r4
 8001afe:	468b      	mov	fp, r1
 8001b00:	428d      	cmp	r5, r1
 8001b02:	d100      	bne.n	8001b06 <__aeabi_dsub+0x52>
 8001b04:	e08d      	b.n	8001c22 <__aeabi_dsub+0x16e>
 8001b06:	1ab4      	subs	r4, r6, r2
 8001b08:	46a4      	mov	ip, r4
 8001b0a:	2c00      	cmp	r4, #0
 8001b0c:	dc00      	bgt.n	8001b10 <__aeabi_dsub+0x5c>
 8001b0e:	e0b7      	b.n	8001c80 <__aeabi_dsub+0x1cc>
 8001b10:	2a00      	cmp	r2, #0
 8001b12:	d100      	bne.n	8001b16 <__aeabi_dsub+0x62>
 8001b14:	e0cb      	b.n	8001cae <__aeabi_dsub+0x1fa>
 8001b16:	4ac1      	ldr	r2, [pc, #772]	; (8001e1c <__aeabi_dsub+0x368>)
 8001b18:	4296      	cmp	r6, r2
 8001b1a:	d100      	bne.n	8001b1e <__aeabi_dsub+0x6a>
 8001b1c:	e186      	b.n	8001e2c <__aeabi_dsub+0x378>
 8001b1e:	2280      	movs	r2, #128	; 0x80
 8001b20:	0412      	lsls	r2, r2, #16
 8001b22:	4317      	orrs	r7, r2
 8001b24:	4662      	mov	r2, ip
 8001b26:	2a38      	cmp	r2, #56	; 0x38
 8001b28:	dd00      	ble.n	8001b2c <__aeabi_dsub+0x78>
 8001b2a:	e1a4      	b.n	8001e76 <__aeabi_dsub+0x3c2>
 8001b2c:	2a1f      	cmp	r2, #31
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dsub+0x7e>
 8001b30:	e21d      	b.n	8001f6e <__aeabi_dsub+0x4ba>
 8001b32:	4661      	mov	r1, ip
 8001b34:	2220      	movs	r2, #32
 8001b36:	003c      	movs	r4, r7
 8001b38:	1a52      	subs	r2, r2, r1
 8001b3a:	0001      	movs	r1, r0
 8001b3c:	4090      	lsls	r0, r2
 8001b3e:	4094      	lsls	r4, r2
 8001b40:	1e42      	subs	r2, r0, #1
 8001b42:	4190      	sbcs	r0, r2
 8001b44:	4662      	mov	r2, ip
 8001b46:	46a0      	mov	r8, r4
 8001b48:	4664      	mov	r4, ip
 8001b4a:	40d7      	lsrs	r7, r2
 8001b4c:	464a      	mov	r2, r9
 8001b4e:	40e1      	lsrs	r1, r4
 8001b50:	4644      	mov	r4, r8
 8001b52:	1bd2      	subs	r2, r2, r7
 8001b54:	4691      	mov	r9, r2
 8001b56:	430c      	orrs	r4, r1
 8001b58:	4304      	orrs	r4, r0
 8001b5a:	1b1c      	subs	r4, r3, r4
 8001b5c:	42a3      	cmp	r3, r4
 8001b5e:	4192      	sbcs	r2, r2
 8001b60:	464b      	mov	r3, r9
 8001b62:	4252      	negs	r2, r2
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	469a      	mov	sl, r3
 8001b68:	4653      	mov	r3, sl
 8001b6a:	021b      	lsls	r3, r3, #8
 8001b6c:	d400      	bmi.n	8001b70 <__aeabi_dsub+0xbc>
 8001b6e:	e12b      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001b70:	4653      	mov	r3, sl
 8001b72:	025a      	lsls	r2, r3, #9
 8001b74:	0a53      	lsrs	r3, r2, #9
 8001b76:	469a      	mov	sl, r3
 8001b78:	4653      	mov	r3, sl
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d100      	bne.n	8001b80 <__aeabi_dsub+0xcc>
 8001b7e:	e166      	b.n	8001e4e <__aeabi_dsub+0x39a>
 8001b80:	4650      	mov	r0, sl
 8001b82:	f000 fbc3 	bl	800230c <__clzsi2>
 8001b86:	0003      	movs	r3, r0
 8001b88:	3b08      	subs	r3, #8
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	0020      	movs	r0, r4
 8001b8e:	1ad2      	subs	r2, r2, r3
 8001b90:	4651      	mov	r1, sl
 8001b92:	40d0      	lsrs	r0, r2
 8001b94:	4099      	lsls	r1, r3
 8001b96:	0002      	movs	r2, r0
 8001b98:	409c      	lsls	r4, r3
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	429e      	cmp	r6, r3
 8001b9e:	dd00      	ble.n	8001ba2 <__aeabi_dsub+0xee>
 8001ba0:	e164      	b.n	8001e6c <__aeabi_dsub+0x3b8>
 8001ba2:	1b9b      	subs	r3, r3, r6
 8001ba4:	1c59      	adds	r1, r3, #1
 8001ba6:	291f      	cmp	r1, #31
 8001ba8:	dd00      	ble.n	8001bac <__aeabi_dsub+0xf8>
 8001baa:	e0fe      	b.n	8001daa <__aeabi_dsub+0x2f6>
 8001bac:	2320      	movs	r3, #32
 8001bae:	0010      	movs	r0, r2
 8001bb0:	0026      	movs	r6, r4
 8001bb2:	1a5b      	subs	r3, r3, r1
 8001bb4:	409c      	lsls	r4, r3
 8001bb6:	4098      	lsls	r0, r3
 8001bb8:	40ce      	lsrs	r6, r1
 8001bba:	40ca      	lsrs	r2, r1
 8001bbc:	1e63      	subs	r3, r4, #1
 8001bbe:	419c      	sbcs	r4, r3
 8001bc0:	4330      	orrs	r0, r6
 8001bc2:	4692      	mov	sl, r2
 8001bc4:	2600      	movs	r6, #0
 8001bc6:	4304      	orrs	r4, r0
 8001bc8:	0763      	lsls	r3, r4, #29
 8001bca:	d009      	beq.n	8001be0 <__aeabi_dsub+0x12c>
 8001bcc:	230f      	movs	r3, #15
 8001bce:	4023      	ands	r3, r4
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d005      	beq.n	8001be0 <__aeabi_dsub+0x12c>
 8001bd4:	1d23      	adds	r3, r4, #4
 8001bd6:	42a3      	cmp	r3, r4
 8001bd8:	41a4      	sbcs	r4, r4
 8001bda:	4264      	negs	r4, r4
 8001bdc:	44a2      	add	sl, r4
 8001bde:	001c      	movs	r4, r3
 8001be0:	4653      	mov	r3, sl
 8001be2:	021b      	lsls	r3, r3, #8
 8001be4:	d400      	bmi.n	8001be8 <__aeabi_dsub+0x134>
 8001be6:	e0f2      	b.n	8001dce <__aeabi_dsub+0x31a>
 8001be8:	4b8c      	ldr	r3, [pc, #560]	; (8001e1c <__aeabi_dsub+0x368>)
 8001bea:	3601      	adds	r6, #1
 8001bec:	429e      	cmp	r6, r3
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dsub+0x13e>
 8001bf0:	e10f      	b.n	8001e12 <__aeabi_dsub+0x35e>
 8001bf2:	4653      	mov	r3, sl
 8001bf4:	498a      	ldr	r1, [pc, #552]	; (8001e20 <__aeabi_dsub+0x36c>)
 8001bf6:	08e4      	lsrs	r4, r4, #3
 8001bf8:	400b      	ands	r3, r1
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	075b      	lsls	r3, r3, #29
 8001bfe:	4323      	orrs	r3, r4
 8001c00:	0572      	lsls	r2, r6, #21
 8001c02:	024c      	lsls	r4, r1, #9
 8001c04:	0b24      	lsrs	r4, r4, #12
 8001c06:	0d52      	lsrs	r2, r2, #21
 8001c08:	0512      	lsls	r2, r2, #20
 8001c0a:	4322      	orrs	r2, r4
 8001c0c:	07ed      	lsls	r5, r5, #31
 8001c0e:	432a      	orrs	r2, r5
 8001c10:	0018      	movs	r0, r3
 8001c12:	0011      	movs	r1, r2
 8001c14:	b003      	add	sp, #12
 8001c16:	bcf0      	pop	{r4, r5, r6, r7}
 8001c18:	46bb      	mov	fp, r7
 8001c1a:	46b2      	mov	sl, r6
 8001c1c:	46a9      	mov	r9, r5
 8001c1e:	46a0      	mov	r8, r4
 8001c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c22:	1ab4      	subs	r4, r6, r2
 8001c24:	46a4      	mov	ip, r4
 8001c26:	2c00      	cmp	r4, #0
 8001c28:	dd59      	ble.n	8001cde <__aeabi_dsub+0x22a>
 8001c2a:	2a00      	cmp	r2, #0
 8001c2c:	d100      	bne.n	8001c30 <__aeabi_dsub+0x17c>
 8001c2e:	e0b0      	b.n	8001d92 <__aeabi_dsub+0x2de>
 8001c30:	4556      	cmp	r6, sl
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x182>
 8001c34:	e0fa      	b.n	8001e2c <__aeabi_dsub+0x378>
 8001c36:	2280      	movs	r2, #128	; 0x80
 8001c38:	0412      	lsls	r2, r2, #16
 8001c3a:	4317      	orrs	r7, r2
 8001c3c:	4662      	mov	r2, ip
 8001c3e:	2a38      	cmp	r2, #56	; 0x38
 8001c40:	dd00      	ble.n	8001c44 <__aeabi_dsub+0x190>
 8001c42:	e0d4      	b.n	8001dee <__aeabi_dsub+0x33a>
 8001c44:	2a1f      	cmp	r2, #31
 8001c46:	dc00      	bgt.n	8001c4a <__aeabi_dsub+0x196>
 8001c48:	e1c0      	b.n	8001fcc <__aeabi_dsub+0x518>
 8001c4a:	0039      	movs	r1, r7
 8001c4c:	3a20      	subs	r2, #32
 8001c4e:	40d1      	lsrs	r1, r2
 8001c50:	4662      	mov	r2, ip
 8001c52:	2a20      	cmp	r2, #32
 8001c54:	d006      	beq.n	8001c64 <__aeabi_dsub+0x1b0>
 8001c56:	4664      	mov	r4, ip
 8001c58:	2240      	movs	r2, #64	; 0x40
 8001c5a:	1b12      	subs	r2, r2, r4
 8001c5c:	003c      	movs	r4, r7
 8001c5e:	4094      	lsls	r4, r2
 8001c60:	4304      	orrs	r4, r0
 8001c62:	9401      	str	r4, [sp, #4]
 8001c64:	9c01      	ldr	r4, [sp, #4]
 8001c66:	1e62      	subs	r2, r4, #1
 8001c68:	4194      	sbcs	r4, r2
 8001c6a:	430c      	orrs	r4, r1
 8001c6c:	e0c3      	b.n	8001df6 <__aeabi_dsub+0x342>
 8001c6e:	003c      	movs	r4, r7
 8001c70:	4304      	orrs	r4, r0
 8001c72:	d02b      	beq.n	8001ccc <__aeabi_dsub+0x218>
 8001c74:	468b      	mov	fp, r1
 8001c76:	428d      	cmp	r5, r1
 8001c78:	d02e      	beq.n	8001cd8 <__aeabi_dsub+0x224>
 8001c7a:	4c6a      	ldr	r4, [pc, #424]	; (8001e24 <__aeabi_dsub+0x370>)
 8001c7c:	46a4      	mov	ip, r4
 8001c7e:	44b4      	add	ip, r6
 8001c80:	4664      	mov	r4, ip
 8001c82:	2c00      	cmp	r4, #0
 8001c84:	d05f      	beq.n	8001d46 <__aeabi_dsub+0x292>
 8001c86:	1b94      	subs	r4, r2, r6
 8001c88:	46a4      	mov	ip, r4
 8001c8a:	2e00      	cmp	r6, #0
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dsub+0x1dc>
 8001c8e:	e120      	b.n	8001ed2 <__aeabi_dsub+0x41e>
 8001c90:	464c      	mov	r4, r9
 8001c92:	431c      	orrs	r4, r3
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x1e4>
 8001c96:	e1c7      	b.n	8002028 <__aeabi_dsub+0x574>
 8001c98:	4661      	mov	r1, ip
 8001c9a:	1e4c      	subs	r4, r1, #1
 8001c9c:	2901      	cmp	r1, #1
 8001c9e:	d100      	bne.n	8001ca2 <__aeabi_dsub+0x1ee>
 8001ca0:	e223      	b.n	80020ea <__aeabi_dsub+0x636>
 8001ca2:	4d5e      	ldr	r5, [pc, #376]	; (8001e1c <__aeabi_dsub+0x368>)
 8001ca4:	45ac      	cmp	ip, r5
 8001ca6:	d100      	bne.n	8001caa <__aeabi_dsub+0x1f6>
 8001ca8:	e1d8      	b.n	800205c <__aeabi_dsub+0x5a8>
 8001caa:	46a4      	mov	ip, r4
 8001cac:	e11a      	b.n	8001ee4 <__aeabi_dsub+0x430>
 8001cae:	003a      	movs	r2, r7
 8001cb0:	4302      	orrs	r2, r0
 8001cb2:	d100      	bne.n	8001cb6 <__aeabi_dsub+0x202>
 8001cb4:	e0e4      	b.n	8001e80 <__aeabi_dsub+0x3cc>
 8001cb6:	0022      	movs	r2, r4
 8001cb8:	3a01      	subs	r2, #1
 8001cba:	2c01      	cmp	r4, #1
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x20c>
 8001cbe:	e1c3      	b.n	8002048 <__aeabi_dsub+0x594>
 8001cc0:	4956      	ldr	r1, [pc, #344]	; (8001e1c <__aeabi_dsub+0x368>)
 8001cc2:	428c      	cmp	r4, r1
 8001cc4:	d100      	bne.n	8001cc8 <__aeabi_dsub+0x214>
 8001cc6:	e0b1      	b.n	8001e2c <__aeabi_dsub+0x378>
 8001cc8:	4694      	mov	ip, r2
 8001cca:	e72b      	b.n	8001b24 <__aeabi_dsub+0x70>
 8001ccc:	2401      	movs	r4, #1
 8001cce:	4061      	eors	r1, r4
 8001cd0:	468b      	mov	fp, r1
 8001cd2:	428d      	cmp	r5, r1
 8001cd4:	d000      	beq.n	8001cd8 <__aeabi_dsub+0x224>
 8001cd6:	e716      	b.n	8001b06 <__aeabi_dsub+0x52>
 8001cd8:	4952      	ldr	r1, [pc, #328]	; (8001e24 <__aeabi_dsub+0x370>)
 8001cda:	468c      	mov	ip, r1
 8001cdc:	44b4      	add	ip, r6
 8001cde:	4664      	mov	r4, ip
 8001ce0:	2c00      	cmp	r4, #0
 8001ce2:	d100      	bne.n	8001ce6 <__aeabi_dsub+0x232>
 8001ce4:	e0d3      	b.n	8001e8e <__aeabi_dsub+0x3da>
 8001ce6:	1b91      	subs	r1, r2, r6
 8001ce8:	468c      	mov	ip, r1
 8001cea:	2e00      	cmp	r6, #0
 8001cec:	d100      	bne.n	8001cf0 <__aeabi_dsub+0x23c>
 8001cee:	e15e      	b.n	8001fae <__aeabi_dsub+0x4fa>
 8001cf0:	494a      	ldr	r1, [pc, #296]	; (8001e1c <__aeabi_dsub+0x368>)
 8001cf2:	428a      	cmp	r2, r1
 8001cf4:	d100      	bne.n	8001cf8 <__aeabi_dsub+0x244>
 8001cf6:	e1be      	b.n	8002076 <__aeabi_dsub+0x5c2>
 8001cf8:	2180      	movs	r1, #128	; 0x80
 8001cfa:	464c      	mov	r4, r9
 8001cfc:	0409      	lsls	r1, r1, #16
 8001cfe:	430c      	orrs	r4, r1
 8001d00:	46a1      	mov	r9, r4
 8001d02:	4661      	mov	r1, ip
 8001d04:	2938      	cmp	r1, #56	; 0x38
 8001d06:	dd00      	ble.n	8001d0a <__aeabi_dsub+0x256>
 8001d08:	e1ba      	b.n	8002080 <__aeabi_dsub+0x5cc>
 8001d0a:	291f      	cmp	r1, #31
 8001d0c:	dd00      	ble.n	8001d10 <__aeabi_dsub+0x25c>
 8001d0e:	e227      	b.n	8002160 <__aeabi_dsub+0x6ac>
 8001d10:	2420      	movs	r4, #32
 8001d12:	1a64      	subs	r4, r4, r1
 8001d14:	4649      	mov	r1, r9
 8001d16:	40a1      	lsls	r1, r4
 8001d18:	001e      	movs	r6, r3
 8001d1a:	4688      	mov	r8, r1
 8001d1c:	4661      	mov	r1, ip
 8001d1e:	40a3      	lsls	r3, r4
 8001d20:	40ce      	lsrs	r6, r1
 8001d22:	4641      	mov	r1, r8
 8001d24:	1e5c      	subs	r4, r3, #1
 8001d26:	41a3      	sbcs	r3, r4
 8001d28:	4331      	orrs	r1, r6
 8001d2a:	4319      	orrs	r1, r3
 8001d2c:	000c      	movs	r4, r1
 8001d2e:	4663      	mov	r3, ip
 8001d30:	4649      	mov	r1, r9
 8001d32:	40d9      	lsrs	r1, r3
 8001d34:	187f      	adds	r7, r7, r1
 8001d36:	1824      	adds	r4, r4, r0
 8001d38:	4284      	cmp	r4, r0
 8001d3a:	419b      	sbcs	r3, r3
 8001d3c:	425b      	negs	r3, r3
 8001d3e:	469a      	mov	sl, r3
 8001d40:	0016      	movs	r6, r2
 8001d42:	44ba      	add	sl, r7
 8001d44:	e05d      	b.n	8001e02 <__aeabi_dsub+0x34e>
 8001d46:	4c38      	ldr	r4, [pc, #224]	; (8001e28 <__aeabi_dsub+0x374>)
 8001d48:	1c72      	adds	r2, r6, #1
 8001d4a:	4222      	tst	r2, r4
 8001d4c:	d000      	beq.n	8001d50 <__aeabi_dsub+0x29c>
 8001d4e:	e0df      	b.n	8001f10 <__aeabi_dsub+0x45c>
 8001d50:	464a      	mov	r2, r9
 8001d52:	431a      	orrs	r2, r3
 8001d54:	2e00      	cmp	r6, #0
 8001d56:	d000      	beq.n	8001d5a <__aeabi_dsub+0x2a6>
 8001d58:	e15c      	b.n	8002014 <__aeabi_dsub+0x560>
 8001d5a:	2a00      	cmp	r2, #0
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_dsub+0x2ac>
 8001d5e:	e1cf      	b.n	8002100 <__aeabi_dsub+0x64c>
 8001d60:	003a      	movs	r2, r7
 8001d62:	4302      	orrs	r2, r0
 8001d64:	d100      	bne.n	8001d68 <__aeabi_dsub+0x2b4>
 8001d66:	e17f      	b.n	8002068 <__aeabi_dsub+0x5b4>
 8001d68:	1a1c      	subs	r4, r3, r0
 8001d6a:	464a      	mov	r2, r9
 8001d6c:	42a3      	cmp	r3, r4
 8001d6e:	4189      	sbcs	r1, r1
 8001d70:	1bd2      	subs	r2, r2, r7
 8001d72:	4249      	negs	r1, r1
 8001d74:	1a52      	subs	r2, r2, r1
 8001d76:	4692      	mov	sl, r2
 8001d78:	0212      	lsls	r2, r2, #8
 8001d7a:	d400      	bmi.n	8001d7e <__aeabi_dsub+0x2ca>
 8001d7c:	e20a      	b.n	8002194 <__aeabi_dsub+0x6e0>
 8001d7e:	1ac4      	subs	r4, r0, r3
 8001d80:	42a0      	cmp	r0, r4
 8001d82:	4180      	sbcs	r0, r0
 8001d84:	464b      	mov	r3, r9
 8001d86:	4240      	negs	r0, r0
 8001d88:	1aff      	subs	r7, r7, r3
 8001d8a:	1a3b      	subs	r3, r7, r0
 8001d8c:	469a      	mov	sl, r3
 8001d8e:	465d      	mov	r5, fp
 8001d90:	e71a      	b.n	8001bc8 <__aeabi_dsub+0x114>
 8001d92:	003a      	movs	r2, r7
 8001d94:	4302      	orrs	r2, r0
 8001d96:	d073      	beq.n	8001e80 <__aeabi_dsub+0x3cc>
 8001d98:	0022      	movs	r2, r4
 8001d9a:	3a01      	subs	r2, #1
 8001d9c:	2c01      	cmp	r4, #1
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_dsub+0x2ee>
 8001da0:	e0cb      	b.n	8001f3a <__aeabi_dsub+0x486>
 8001da2:	4554      	cmp	r4, sl
 8001da4:	d042      	beq.n	8001e2c <__aeabi_dsub+0x378>
 8001da6:	4694      	mov	ip, r2
 8001da8:	e748      	b.n	8001c3c <__aeabi_dsub+0x188>
 8001daa:	0010      	movs	r0, r2
 8001dac:	3b1f      	subs	r3, #31
 8001dae:	40d8      	lsrs	r0, r3
 8001db0:	2920      	cmp	r1, #32
 8001db2:	d003      	beq.n	8001dbc <__aeabi_dsub+0x308>
 8001db4:	2340      	movs	r3, #64	; 0x40
 8001db6:	1a5b      	subs	r3, r3, r1
 8001db8:	409a      	lsls	r2, r3
 8001dba:	4314      	orrs	r4, r2
 8001dbc:	1e63      	subs	r3, r4, #1
 8001dbe:	419c      	sbcs	r4, r3
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	2600      	movs	r6, #0
 8001dc4:	469a      	mov	sl, r3
 8001dc6:	4304      	orrs	r4, r0
 8001dc8:	0763      	lsls	r3, r4, #29
 8001dca:	d000      	beq.n	8001dce <__aeabi_dsub+0x31a>
 8001dcc:	e6fe      	b.n	8001bcc <__aeabi_dsub+0x118>
 8001dce:	4652      	mov	r2, sl
 8001dd0:	08e3      	lsrs	r3, r4, #3
 8001dd2:	0752      	lsls	r2, r2, #29
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	4652      	mov	r2, sl
 8001dd8:	46b4      	mov	ip, r6
 8001dda:	08d2      	lsrs	r2, r2, #3
 8001ddc:	490f      	ldr	r1, [pc, #60]	; (8001e1c <__aeabi_dsub+0x368>)
 8001dde:	458c      	cmp	ip, r1
 8001de0:	d02a      	beq.n	8001e38 <__aeabi_dsub+0x384>
 8001de2:	0312      	lsls	r2, r2, #12
 8001de4:	0b14      	lsrs	r4, r2, #12
 8001de6:	4662      	mov	r2, ip
 8001de8:	0552      	lsls	r2, r2, #21
 8001dea:	0d52      	lsrs	r2, r2, #21
 8001dec:	e70c      	b.n	8001c08 <__aeabi_dsub+0x154>
 8001dee:	003c      	movs	r4, r7
 8001df0:	4304      	orrs	r4, r0
 8001df2:	1e62      	subs	r2, r4, #1
 8001df4:	4194      	sbcs	r4, r2
 8001df6:	18e4      	adds	r4, r4, r3
 8001df8:	429c      	cmp	r4, r3
 8001dfa:	4192      	sbcs	r2, r2
 8001dfc:	4252      	negs	r2, r2
 8001dfe:	444a      	add	r2, r9
 8001e00:	4692      	mov	sl, r2
 8001e02:	4653      	mov	r3, sl
 8001e04:	021b      	lsls	r3, r3, #8
 8001e06:	d5df      	bpl.n	8001dc8 <__aeabi_dsub+0x314>
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <__aeabi_dsub+0x368>)
 8001e0a:	3601      	adds	r6, #1
 8001e0c:	429e      	cmp	r6, r3
 8001e0e:	d000      	beq.n	8001e12 <__aeabi_dsub+0x35e>
 8001e10:	e0a0      	b.n	8001f54 <__aeabi_dsub+0x4a0>
 8001e12:	0032      	movs	r2, r6
 8001e14:	2400      	movs	r4, #0
 8001e16:	2300      	movs	r3, #0
 8001e18:	e6f6      	b.n	8001c08 <__aeabi_dsub+0x154>
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	000007ff 	.word	0x000007ff
 8001e20:	ff7fffff 	.word	0xff7fffff
 8001e24:	fffff801 	.word	0xfffff801
 8001e28:	000007fe 	.word	0x000007fe
 8001e2c:	08db      	lsrs	r3, r3, #3
 8001e2e:	464a      	mov	r2, r9
 8001e30:	0752      	lsls	r2, r2, #29
 8001e32:	4313      	orrs	r3, r2
 8001e34:	464a      	mov	r2, r9
 8001e36:	08d2      	lsrs	r2, r2, #3
 8001e38:	0019      	movs	r1, r3
 8001e3a:	4311      	orrs	r1, r2
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_dsub+0x38c>
 8001e3e:	e1b5      	b.n	80021ac <__aeabi_dsub+0x6f8>
 8001e40:	2480      	movs	r4, #128	; 0x80
 8001e42:	0324      	lsls	r4, r4, #12
 8001e44:	4314      	orrs	r4, r2
 8001e46:	0324      	lsls	r4, r4, #12
 8001e48:	4ad5      	ldr	r2, [pc, #852]	; (80021a0 <__aeabi_dsub+0x6ec>)
 8001e4a:	0b24      	lsrs	r4, r4, #12
 8001e4c:	e6dc      	b.n	8001c08 <__aeabi_dsub+0x154>
 8001e4e:	0020      	movs	r0, r4
 8001e50:	f000 fa5c 	bl	800230c <__clzsi2>
 8001e54:	0003      	movs	r3, r0
 8001e56:	3318      	adds	r3, #24
 8001e58:	2b1f      	cmp	r3, #31
 8001e5a:	dc00      	bgt.n	8001e5e <__aeabi_dsub+0x3aa>
 8001e5c:	e695      	b.n	8001b8a <__aeabi_dsub+0xd6>
 8001e5e:	0022      	movs	r2, r4
 8001e60:	3808      	subs	r0, #8
 8001e62:	4082      	lsls	r2, r0
 8001e64:	2400      	movs	r4, #0
 8001e66:	429e      	cmp	r6, r3
 8001e68:	dc00      	bgt.n	8001e6c <__aeabi_dsub+0x3b8>
 8001e6a:	e69a      	b.n	8001ba2 <__aeabi_dsub+0xee>
 8001e6c:	1af6      	subs	r6, r6, r3
 8001e6e:	4bcd      	ldr	r3, [pc, #820]	; (80021a4 <__aeabi_dsub+0x6f0>)
 8001e70:	401a      	ands	r2, r3
 8001e72:	4692      	mov	sl, r2
 8001e74:	e6a8      	b.n	8001bc8 <__aeabi_dsub+0x114>
 8001e76:	003c      	movs	r4, r7
 8001e78:	4304      	orrs	r4, r0
 8001e7a:	1e62      	subs	r2, r4, #1
 8001e7c:	4194      	sbcs	r4, r2
 8001e7e:	e66c      	b.n	8001b5a <__aeabi_dsub+0xa6>
 8001e80:	464a      	mov	r2, r9
 8001e82:	08db      	lsrs	r3, r3, #3
 8001e84:	0752      	lsls	r2, r2, #29
 8001e86:	4313      	orrs	r3, r2
 8001e88:	464a      	mov	r2, r9
 8001e8a:	08d2      	lsrs	r2, r2, #3
 8001e8c:	e7a6      	b.n	8001ddc <__aeabi_dsub+0x328>
 8001e8e:	4cc6      	ldr	r4, [pc, #792]	; (80021a8 <__aeabi_dsub+0x6f4>)
 8001e90:	1c72      	adds	r2, r6, #1
 8001e92:	4222      	tst	r2, r4
 8001e94:	d000      	beq.n	8001e98 <__aeabi_dsub+0x3e4>
 8001e96:	e0ac      	b.n	8001ff2 <__aeabi_dsub+0x53e>
 8001e98:	464a      	mov	r2, r9
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	2e00      	cmp	r6, #0
 8001e9e:	d000      	beq.n	8001ea2 <__aeabi_dsub+0x3ee>
 8001ea0:	e105      	b.n	80020ae <__aeabi_dsub+0x5fa>
 8001ea2:	2a00      	cmp	r2, #0
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x3f4>
 8001ea6:	e156      	b.n	8002156 <__aeabi_dsub+0x6a2>
 8001ea8:	003a      	movs	r2, r7
 8001eaa:	4302      	orrs	r2, r0
 8001eac:	d100      	bne.n	8001eb0 <__aeabi_dsub+0x3fc>
 8001eae:	e0db      	b.n	8002068 <__aeabi_dsub+0x5b4>
 8001eb0:	181c      	adds	r4, r3, r0
 8001eb2:	429c      	cmp	r4, r3
 8001eb4:	419b      	sbcs	r3, r3
 8001eb6:	444f      	add	r7, r9
 8001eb8:	46ba      	mov	sl, r7
 8001eba:	425b      	negs	r3, r3
 8001ebc:	449a      	add	sl, r3
 8001ebe:	4653      	mov	r3, sl
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	d400      	bmi.n	8001ec6 <__aeabi_dsub+0x412>
 8001ec4:	e780      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001ec6:	4652      	mov	r2, sl
 8001ec8:	4bb6      	ldr	r3, [pc, #728]	; (80021a4 <__aeabi_dsub+0x6f0>)
 8001eca:	2601      	movs	r6, #1
 8001ecc:	401a      	ands	r2, r3
 8001ece:	4692      	mov	sl, r2
 8001ed0:	e77a      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001ed2:	4cb3      	ldr	r4, [pc, #716]	; (80021a0 <__aeabi_dsub+0x6ec>)
 8001ed4:	42a2      	cmp	r2, r4
 8001ed6:	d100      	bne.n	8001eda <__aeabi_dsub+0x426>
 8001ed8:	e0c0      	b.n	800205c <__aeabi_dsub+0x5a8>
 8001eda:	2480      	movs	r4, #128	; 0x80
 8001edc:	464d      	mov	r5, r9
 8001ede:	0424      	lsls	r4, r4, #16
 8001ee0:	4325      	orrs	r5, r4
 8001ee2:	46a9      	mov	r9, r5
 8001ee4:	4664      	mov	r4, ip
 8001ee6:	2c38      	cmp	r4, #56	; 0x38
 8001ee8:	dc53      	bgt.n	8001f92 <__aeabi_dsub+0x4de>
 8001eea:	4661      	mov	r1, ip
 8001eec:	2c1f      	cmp	r4, #31
 8001eee:	dd00      	ble.n	8001ef2 <__aeabi_dsub+0x43e>
 8001ef0:	e0cd      	b.n	800208e <__aeabi_dsub+0x5da>
 8001ef2:	2520      	movs	r5, #32
 8001ef4:	001e      	movs	r6, r3
 8001ef6:	1b2d      	subs	r5, r5, r4
 8001ef8:	464c      	mov	r4, r9
 8001efa:	40ab      	lsls	r3, r5
 8001efc:	40ac      	lsls	r4, r5
 8001efe:	40ce      	lsrs	r6, r1
 8001f00:	1e5d      	subs	r5, r3, #1
 8001f02:	41ab      	sbcs	r3, r5
 8001f04:	4334      	orrs	r4, r6
 8001f06:	4323      	orrs	r3, r4
 8001f08:	464c      	mov	r4, r9
 8001f0a:	40cc      	lsrs	r4, r1
 8001f0c:	1b3f      	subs	r7, r7, r4
 8001f0e:	e045      	b.n	8001f9c <__aeabi_dsub+0x4e8>
 8001f10:	464a      	mov	r2, r9
 8001f12:	1a1c      	subs	r4, r3, r0
 8001f14:	1bd1      	subs	r1, r2, r7
 8001f16:	42a3      	cmp	r3, r4
 8001f18:	4192      	sbcs	r2, r2
 8001f1a:	4252      	negs	r2, r2
 8001f1c:	4692      	mov	sl, r2
 8001f1e:	000a      	movs	r2, r1
 8001f20:	4651      	mov	r1, sl
 8001f22:	1a52      	subs	r2, r2, r1
 8001f24:	4692      	mov	sl, r2
 8001f26:	0212      	lsls	r2, r2, #8
 8001f28:	d500      	bpl.n	8001f2c <__aeabi_dsub+0x478>
 8001f2a:	e083      	b.n	8002034 <__aeabi_dsub+0x580>
 8001f2c:	4653      	mov	r3, sl
 8001f2e:	4323      	orrs	r3, r4
 8001f30:	d000      	beq.n	8001f34 <__aeabi_dsub+0x480>
 8001f32:	e621      	b.n	8001b78 <__aeabi_dsub+0xc4>
 8001f34:	2200      	movs	r2, #0
 8001f36:	2500      	movs	r5, #0
 8001f38:	e753      	b.n	8001de2 <__aeabi_dsub+0x32e>
 8001f3a:	181c      	adds	r4, r3, r0
 8001f3c:	429c      	cmp	r4, r3
 8001f3e:	419b      	sbcs	r3, r3
 8001f40:	444f      	add	r7, r9
 8001f42:	46ba      	mov	sl, r7
 8001f44:	425b      	negs	r3, r3
 8001f46:	449a      	add	sl, r3
 8001f48:	4653      	mov	r3, sl
 8001f4a:	2601      	movs	r6, #1
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	d400      	bmi.n	8001f52 <__aeabi_dsub+0x49e>
 8001f50:	e73a      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001f52:	2602      	movs	r6, #2
 8001f54:	4652      	mov	r2, sl
 8001f56:	4b93      	ldr	r3, [pc, #588]	; (80021a4 <__aeabi_dsub+0x6f0>)
 8001f58:	2101      	movs	r1, #1
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	0013      	movs	r3, r2
 8001f5e:	4021      	ands	r1, r4
 8001f60:	0862      	lsrs	r2, r4, #1
 8001f62:	430a      	orrs	r2, r1
 8001f64:	07dc      	lsls	r4, r3, #31
 8001f66:	085b      	lsrs	r3, r3, #1
 8001f68:	469a      	mov	sl, r3
 8001f6a:	4314      	orrs	r4, r2
 8001f6c:	e62c      	b.n	8001bc8 <__aeabi_dsub+0x114>
 8001f6e:	0039      	movs	r1, r7
 8001f70:	3a20      	subs	r2, #32
 8001f72:	40d1      	lsrs	r1, r2
 8001f74:	4662      	mov	r2, ip
 8001f76:	2a20      	cmp	r2, #32
 8001f78:	d006      	beq.n	8001f88 <__aeabi_dsub+0x4d4>
 8001f7a:	4664      	mov	r4, ip
 8001f7c:	2240      	movs	r2, #64	; 0x40
 8001f7e:	1b12      	subs	r2, r2, r4
 8001f80:	003c      	movs	r4, r7
 8001f82:	4094      	lsls	r4, r2
 8001f84:	4304      	orrs	r4, r0
 8001f86:	9401      	str	r4, [sp, #4]
 8001f88:	9c01      	ldr	r4, [sp, #4]
 8001f8a:	1e62      	subs	r2, r4, #1
 8001f8c:	4194      	sbcs	r4, r2
 8001f8e:	430c      	orrs	r4, r1
 8001f90:	e5e3      	b.n	8001b5a <__aeabi_dsub+0xa6>
 8001f92:	4649      	mov	r1, r9
 8001f94:	4319      	orrs	r1, r3
 8001f96:	000b      	movs	r3, r1
 8001f98:	1e5c      	subs	r4, r3, #1
 8001f9a:	41a3      	sbcs	r3, r4
 8001f9c:	1ac4      	subs	r4, r0, r3
 8001f9e:	42a0      	cmp	r0, r4
 8001fa0:	419b      	sbcs	r3, r3
 8001fa2:	425b      	negs	r3, r3
 8001fa4:	1afb      	subs	r3, r7, r3
 8001fa6:	469a      	mov	sl, r3
 8001fa8:	465d      	mov	r5, fp
 8001faa:	0016      	movs	r6, r2
 8001fac:	e5dc      	b.n	8001b68 <__aeabi_dsub+0xb4>
 8001fae:	4649      	mov	r1, r9
 8001fb0:	4319      	orrs	r1, r3
 8001fb2:	d100      	bne.n	8001fb6 <__aeabi_dsub+0x502>
 8001fb4:	e0ae      	b.n	8002114 <__aeabi_dsub+0x660>
 8001fb6:	4661      	mov	r1, ip
 8001fb8:	4664      	mov	r4, ip
 8001fba:	3901      	subs	r1, #1
 8001fbc:	2c01      	cmp	r4, #1
 8001fbe:	d100      	bne.n	8001fc2 <__aeabi_dsub+0x50e>
 8001fc0:	e0e0      	b.n	8002184 <__aeabi_dsub+0x6d0>
 8001fc2:	4c77      	ldr	r4, [pc, #476]	; (80021a0 <__aeabi_dsub+0x6ec>)
 8001fc4:	45a4      	cmp	ip, r4
 8001fc6:	d056      	beq.n	8002076 <__aeabi_dsub+0x5c2>
 8001fc8:	468c      	mov	ip, r1
 8001fca:	e69a      	b.n	8001d02 <__aeabi_dsub+0x24e>
 8001fcc:	4661      	mov	r1, ip
 8001fce:	2220      	movs	r2, #32
 8001fd0:	003c      	movs	r4, r7
 8001fd2:	1a52      	subs	r2, r2, r1
 8001fd4:	4094      	lsls	r4, r2
 8001fd6:	0001      	movs	r1, r0
 8001fd8:	4090      	lsls	r0, r2
 8001fda:	46a0      	mov	r8, r4
 8001fdc:	4664      	mov	r4, ip
 8001fde:	1e42      	subs	r2, r0, #1
 8001fe0:	4190      	sbcs	r0, r2
 8001fe2:	4662      	mov	r2, ip
 8001fe4:	40e1      	lsrs	r1, r4
 8001fe6:	4644      	mov	r4, r8
 8001fe8:	40d7      	lsrs	r7, r2
 8001fea:	430c      	orrs	r4, r1
 8001fec:	4304      	orrs	r4, r0
 8001fee:	44b9      	add	r9, r7
 8001ff0:	e701      	b.n	8001df6 <__aeabi_dsub+0x342>
 8001ff2:	496b      	ldr	r1, [pc, #428]	; (80021a0 <__aeabi_dsub+0x6ec>)
 8001ff4:	428a      	cmp	r2, r1
 8001ff6:	d100      	bne.n	8001ffa <__aeabi_dsub+0x546>
 8001ff8:	e70c      	b.n	8001e14 <__aeabi_dsub+0x360>
 8001ffa:	1818      	adds	r0, r3, r0
 8001ffc:	4298      	cmp	r0, r3
 8001ffe:	419b      	sbcs	r3, r3
 8002000:	444f      	add	r7, r9
 8002002:	425b      	negs	r3, r3
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	07dc      	lsls	r4, r3, #31
 8002008:	0840      	lsrs	r0, r0, #1
 800200a:	085b      	lsrs	r3, r3, #1
 800200c:	469a      	mov	sl, r3
 800200e:	0016      	movs	r6, r2
 8002010:	4304      	orrs	r4, r0
 8002012:	e6d9      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8002014:	2a00      	cmp	r2, #0
 8002016:	d000      	beq.n	800201a <__aeabi_dsub+0x566>
 8002018:	e081      	b.n	800211e <__aeabi_dsub+0x66a>
 800201a:	003b      	movs	r3, r7
 800201c:	4303      	orrs	r3, r0
 800201e:	d11d      	bne.n	800205c <__aeabi_dsub+0x5a8>
 8002020:	2280      	movs	r2, #128	; 0x80
 8002022:	2500      	movs	r5, #0
 8002024:	0312      	lsls	r2, r2, #12
 8002026:	e70b      	b.n	8001e40 <__aeabi_dsub+0x38c>
 8002028:	08c0      	lsrs	r0, r0, #3
 800202a:	077b      	lsls	r3, r7, #29
 800202c:	465d      	mov	r5, fp
 800202e:	4303      	orrs	r3, r0
 8002030:	08fa      	lsrs	r2, r7, #3
 8002032:	e6d3      	b.n	8001ddc <__aeabi_dsub+0x328>
 8002034:	1ac4      	subs	r4, r0, r3
 8002036:	42a0      	cmp	r0, r4
 8002038:	4180      	sbcs	r0, r0
 800203a:	464b      	mov	r3, r9
 800203c:	4240      	negs	r0, r0
 800203e:	1aff      	subs	r7, r7, r3
 8002040:	1a3b      	subs	r3, r7, r0
 8002042:	469a      	mov	sl, r3
 8002044:	465d      	mov	r5, fp
 8002046:	e597      	b.n	8001b78 <__aeabi_dsub+0xc4>
 8002048:	1a1c      	subs	r4, r3, r0
 800204a:	464a      	mov	r2, r9
 800204c:	42a3      	cmp	r3, r4
 800204e:	419b      	sbcs	r3, r3
 8002050:	1bd7      	subs	r7, r2, r7
 8002052:	425b      	negs	r3, r3
 8002054:	1afb      	subs	r3, r7, r3
 8002056:	469a      	mov	sl, r3
 8002058:	2601      	movs	r6, #1
 800205a:	e585      	b.n	8001b68 <__aeabi_dsub+0xb4>
 800205c:	08c0      	lsrs	r0, r0, #3
 800205e:	077b      	lsls	r3, r7, #29
 8002060:	465d      	mov	r5, fp
 8002062:	4303      	orrs	r3, r0
 8002064:	08fa      	lsrs	r2, r7, #3
 8002066:	e6e7      	b.n	8001e38 <__aeabi_dsub+0x384>
 8002068:	464a      	mov	r2, r9
 800206a:	08db      	lsrs	r3, r3, #3
 800206c:	0752      	lsls	r2, r2, #29
 800206e:	4313      	orrs	r3, r2
 8002070:	464a      	mov	r2, r9
 8002072:	08d2      	lsrs	r2, r2, #3
 8002074:	e6b5      	b.n	8001de2 <__aeabi_dsub+0x32e>
 8002076:	08c0      	lsrs	r0, r0, #3
 8002078:	077b      	lsls	r3, r7, #29
 800207a:	4303      	orrs	r3, r0
 800207c:	08fa      	lsrs	r2, r7, #3
 800207e:	e6db      	b.n	8001e38 <__aeabi_dsub+0x384>
 8002080:	4649      	mov	r1, r9
 8002082:	4319      	orrs	r1, r3
 8002084:	000b      	movs	r3, r1
 8002086:	1e59      	subs	r1, r3, #1
 8002088:	418b      	sbcs	r3, r1
 800208a:	001c      	movs	r4, r3
 800208c:	e653      	b.n	8001d36 <__aeabi_dsub+0x282>
 800208e:	464d      	mov	r5, r9
 8002090:	3c20      	subs	r4, #32
 8002092:	40e5      	lsrs	r5, r4
 8002094:	2920      	cmp	r1, #32
 8002096:	d005      	beq.n	80020a4 <__aeabi_dsub+0x5f0>
 8002098:	2440      	movs	r4, #64	; 0x40
 800209a:	1a64      	subs	r4, r4, r1
 800209c:	4649      	mov	r1, r9
 800209e:	40a1      	lsls	r1, r4
 80020a0:	430b      	orrs	r3, r1
 80020a2:	4698      	mov	r8, r3
 80020a4:	4643      	mov	r3, r8
 80020a6:	1e5c      	subs	r4, r3, #1
 80020a8:	41a3      	sbcs	r3, r4
 80020aa:	432b      	orrs	r3, r5
 80020ac:	e776      	b.n	8001f9c <__aeabi_dsub+0x4e8>
 80020ae:	2a00      	cmp	r2, #0
 80020b0:	d0e1      	beq.n	8002076 <__aeabi_dsub+0x5c2>
 80020b2:	003a      	movs	r2, r7
 80020b4:	08db      	lsrs	r3, r3, #3
 80020b6:	4302      	orrs	r2, r0
 80020b8:	d100      	bne.n	80020bc <__aeabi_dsub+0x608>
 80020ba:	e6b8      	b.n	8001e2e <__aeabi_dsub+0x37a>
 80020bc:	464a      	mov	r2, r9
 80020be:	0752      	lsls	r2, r2, #29
 80020c0:	2480      	movs	r4, #128	; 0x80
 80020c2:	4313      	orrs	r3, r2
 80020c4:	464a      	mov	r2, r9
 80020c6:	0324      	lsls	r4, r4, #12
 80020c8:	08d2      	lsrs	r2, r2, #3
 80020ca:	4222      	tst	r2, r4
 80020cc:	d007      	beq.n	80020de <__aeabi_dsub+0x62a>
 80020ce:	08fe      	lsrs	r6, r7, #3
 80020d0:	4226      	tst	r6, r4
 80020d2:	d104      	bne.n	80020de <__aeabi_dsub+0x62a>
 80020d4:	465d      	mov	r5, fp
 80020d6:	0032      	movs	r2, r6
 80020d8:	08c3      	lsrs	r3, r0, #3
 80020da:	077f      	lsls	r7, r7, #29
 80020dc:	433b      	orrs	r3, r7
 80020de:	0f59      	lsrs	r1, r3, #29
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	0749      	lsls	r1, r1, #29
 80020e4:	08db      	lsrs	r3, r3, #3
 80020e6:	430b      	orrs	r3, r1
 80020e8:	e6a6      	b.n	8001e38 <__aeabi_dsub+0x384>
 80020ea:	1ac4      	subs	r4, r0, r3
 80020ec:	42a0      	cmp	r0, r4
 80020ee:	4180      	sbcs	r0, r0
 80020f0:	464b      	mov	r3, r9
 80020f2:	4240      	negs	r0, r0
 80020f4:	1aff      	subs	r7, r7, r3
 80020f6:	1a3b      	subs	r3, r7, r0
 80020f8:	469a      	mov	sl, r3
 80020fa:	465d      	mov	r5, fp
 80020fc:	2601      	movs	r6, #1
 80020fe:	e533      	b.n	8001b68 <__aeabi_dsub+0xb4>
 8002100:	003b      	movs	r3, r7
 8002102:	4303      	orrs	r3, r0
 8002104:	d100      	bne.n	8002108 <__aeabi_dsub+0x654>
 8002106:	e715      	b.n	8001f34 <__aeabi_dsub+0x480>
 8002108:	08c0      	lsrs	r0, r0, #3
 800210a:	077b      	lsls	r3, r7, #29
 800210c:	465d      	mov	r5, fp
 800210e:	4303      	orrs	r3, r0
 8002110:	08fa      	lsrs	r2, r7, #3
 8002112:	e666      	b.n	8001de2 <__aeabi_dsub+0x32e>
 8002114:	08c0      	lsrs	r0, r0, #3
 8002116:	077b      	lsls	r3, r7, #29
 8002118:	4303      	orrs	r3, r0
 800211a:	08fa      	lsrs	r2, r7, #3
 800211c:	e65e      	b.n	8001ddc <__aeabi_dsub+0x328>
 800211e:	003a      	movs	r2, r7
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	4302      	orrs	r2, r0
 8002124:	d100      	bne.n	8002128 <__aeabi_dsub+0x674>
 8002126:	e682      	b.n	8001e2e <__aeabi_dsub+0x37a>
 8002128:	464a      	mov	r2, r9
 800212a:	0752      	lsls	r2, r2, #29
 800212c:	2480      	movs	r4, #128	; 0x80
 800212e:	4313      	orrs	r3, r2
 8002130:	464a      	mov	r2, r9
 8002132:	0324      	lsls	r4, r4, #12
 8002134:	08d2      	lsrs	r2, r2, #3
 8002136:	4222      	tst	r2, r4
 8002138:	d007      	beq.n	800214a <__aeabi_dsub+0x696>
 800213a:	08fe      	lsrs	r6, r7, #3
 800213c:	4226      	tst	r6, r4
 800213e:	d104      	bne.n	800214a <__aeabi_dsub+0x696>
 8002140:	465d      	mov	r5, fp
 8002142:	0032      	movs	r2, r6
 8002144:	08c3      	lsrs	r3, r0, #3
 8002146:	077f      	lsls	r7, r7, #29
 8002148:	433b      	orrs	r3, r7
 800214a:	0f59      	lsrs	r1, r3, #29
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	08db      	lsrs	r3, r3, #3
 8002150:	0749      	lsls	r1, r1, #29
 8002152:	430b      	orrs	r3, r1
 8002154:	e670      	b.n	8001e38 <__aeabi_dsub+0x384>
 8002156:	08c0      	lsrs	r0, r0, #3
 8002158:	077b      	lsls	r3, r7, #29
 800215a:	4303      	orrs	r3, r0
 800215c:	08fa      	lsrs	r2, r7, #3
 800215e:	e640      	b.n	8001de2 <__aeabi_dsub+0x32e>
 8002160:	464c      	mov	r4, r9
 8002162:	3920      	subs	r1, #32
 8002164:	40cc      	lsrs	r4, r1
 8002166:	4661      	mov	r1, ip
 8002168:	2920      	cmp	r1, #32
 800216a:	d006      	beq.n	800217a <__aeabi_dsub+0x6c6>
 800216c:	4666      	mov	r6, ip
 800216e:	2140      	movs	r1, #64	; 0x40
 8002170:	1b89      	subs	r1, r1, r6
 8002172:	464e      	mov	r6, r9
 8002174:	408e      	lsls	r6, r1
 8002176:	4333      	orrs	r3, r6
 8002178:	4698      	mov	r8, r3
 800217a:	4643      	mov	r3, r8
 800217c:	1e59      	subs	r1, r3, #1
 800217e:	418b      	sbcs	r3, r1
 8002180:	431c      	orrs	r4, r3
 8002182:	e5d8      	b.n	8001d36 <__aeabi_dsub+0x282>
 8002184:	181c      	adds	r4, r3, r0
 8002186:	4284      	cmp	r4, r0
 8002188:	4180      	sbcs	r0, r0
 800218a:	444f      	add	r7, r9
 800218c:	46ba      	mov	sl, r7
 800218e:	4240      	negs	r0, r0
 8002190:	4482      	add	sl, r0
 8002192:	e6d9      	b.n	8001f48 <__aeabi_dsub+0x494>
 8002194:	4653      	mov	r3, sl
 8002196:	4323      	orrs	r3, r4
 8002198:	d100      	bne.n	800219c <__aeabi_dsub+0x6e8>
 800219a:	e6cb      	b.n	8001f34 <__aeabi_dsub+0x480>
 800219c:	e614      	b.n	8001dc8 <__aeabi_dsub+0x314>
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	000007ff 	.word	0x000007ff
 80021a4:	ff7fffff 	.word	0xff7fffff
 80021a8:	000007fe 	.word	0x000007fe
 80021ac:	2300      	movs	r3, #0
 80021ae:	4a01      	ldr	r2, [pc, #4]	; (80021b4 <__aeabi_dsub+0x700>)
 80021b0:	001c      	movs	r4, r3
 80021b2:	e529      	b.n	8001c08 <__aeabi_dsub+0x154>
 80021b4:	000007ff 	.word	0x000007ff

080021b8 <__aeabi_dcmpun>:
 80021b8:	b570      	push	{r4, r5, r6, lr}
 80021ba:	0005      	movs	r5, r0
 80021bc:	480c      	ldr	r0, [pc, #48]	; (80021f0 <__aeabi_dcmpun+0x38>)
 80021be:	031c      	lsls	r4, r3, #12
 80021c0:	0016      	movs	r6, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	030a      	lsls	r2, r1, #12
 80021c6:	0049      	lsls	r1, r1, #1
 80021c8:	0b12      	lsrs	r2, r2, #12
 80021ca:	0d49      	lsrs	r1, r1, #21
 80021cc:	0b24      	lsrs	r4, r4, #12
 80021ce:	0d5b      	lsrs	r3, r3, #21
 80021d0:	4281      	cmp	r1, r0
 80021d2:	d008      	beq.n	80021e6 <__aeabi_dcmpun+0x2e>
 80021d4:	4a06      	ldr	r2, [pc, #24]	; (80021f0 <__aeabi_dcmpun+0x38>)
 80021d6:	2000      	movs	r0, #0
 80021d8:	4293      	cmp	r3, r2
 80021da:	d103      	bne.n	80021e4 <__aeabi_dcmpun+0x2c>
 80021dc:	0020      	movs	r0, r4
 80021de:	4330      	orrs	r0, r6
 80021e0:	1e43      	subs	r3, r0, #1
 80021e2:	4198      	sbcs	r0, r3
 80021e4:	bd70      	pop	{r4, r5, r6, pc}
 80021e6:	2001      	movs	r0, #1
 80021e8:	432a      	orrs	r2, r5
 80021ea:	d1fb      	bne.n	80021e4 <__aeabi_dcmpun+0x2c>
 80021ec:	e7f2      	b.n	80021d4 <__aeabi_dcmpun+0x1c>
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	000007ff 	.word	0x000007ff

080021f4 <__aeabi_d2iz>:
 80021f4:	000a      	movs	r2, r1
 80021f6:	b530      	push	{r4, r5, lr}
 80021f8:	4c13      	ldr	r4, [pc, #76]	; (8002248 <__aeabi_d2iz+0x54>)
 80021fa:	0053      	lsls	r3, r2, #1
 80021fc:	0309      	lsls	r1, r1, #12
 80021fe:	0005      	movs	r5, r0
 8002200:	0b09      	lsrs	r1, r1, #12
 8002202:	2000      	movs	r0, #0
 8002204:	0d5b      	lsrs	r3, r3, #21
 8002206:	0fd2      	lsrs	r2, r2, #31
 8002208:	42a3      	cmp	r3, r4
 800220a:	dd04      	ble.n	8002216 <__aeabi_d2iz+0x22>
 800220c:	480f      	ldr	r0, [pc, #60]	; (800224c <__aeabi_d2iz+0x58>)
 800220e:	4283      	cmp	r3, r0
 8002210:	dd02      	ble.n	8002218 <__aeabi_d2iz+0x24>
 8002212:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <__aeabi_d2iz+0x5c>)
 8002214:	18d0      	adds	r0, r2, r3
 8002216:	bd30      	pop	{r4, r5, pc}
 8002218:	2080      	movs	r0, #128	; 0x80
 800221a:	0340      	lsls	r0, r0, #13
 800221c:	4301      	orrs	r1, r0
 800221e:	480d      	ldr	r0, [pc, #52]	; (8002254 <__aeabi_d2iz+0x60>)
 8002220:	1ac0      	subs	r0, r0, r3
 8002222:	281f      	cmp	r0, #31
 8002224:	dd08      	ble.n	8002238 <__aeabi_d2iz+0x44>
 8002226:	480c      	ldr	r0, [pc, #48]	; (8002258 <__aeabi_d2iz+0x64>)
 8002228:	1ac3      	subs	r3, r0, r3
 800222a:	40d9      	lsrs	r1, r3
 800222c:	000b      	movs	r3, r1
 800222e:	4258      	negs	r0, r3
 8002230:	2a00      	cmp	r2, #0
 8002232:	d1f0      	bne.n	8002216 <__aeabi_d2iz+0x22>
 8002234:	0018      	movs	r0, r3
 8002236:	e7ee      	b.n	8002216 <__aeabi_d2iz+0x22>
 8002238:	4c08      	ldr	r4, [pc, #32]	; (800225c <__aeabi_d2iz+0x68>)
 800223a:	40c5      	lsrs	r5, r0
 800223c:	46a4      	mov	ip, r4
 800223e:	4463      	add	r3, ip
 8002240:	4099      	lsls	r1, r3
 8002242:	000b      	movs	r3, r1
 8002244:	432b      	orrs	r3, r5
 8002246:	e7f2      	b.n	800222e <__aeabi_d2iz+0x3a>
 8002248:	000003fe 	.word	0x000003fe
 800224c:	0000041d 	.word	0x0000041d
 8002250:	7fffffff 	.word	0x7fffffff
 8002254:	00000433 	.word	0x00000433
 8002258:	00000413 	.word	0x00000413
 800225c:	fffffbed 	.word	0xfffffbed

08002260 <__aeabi_i2d>:
 8002260:	b570      	push	{r4, r5, r6, lr}
 8002262:	2800      	cmp	r0, #0
 8002264:	d016      	beq.n	8002294 <__aeabi_i2d+0x34>
 8002266:	17c3      	asrs	r3, r0, #31
 8002268:	18c5      	adds	r5, r0, r3
 800226a:	405d      	eors	r5, r3
 800226c:	0fc4      	lsrs	r4, r0, #31
 800226e:	0028      	movs	r0, r5
 8002270:	f000 f84c 	bl	800230c <__clzsi2>
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <__aeabi_i2d+0x5c>)
 8002276:	1a1b      	subs	r3, r3, r0
 8002278:	280a      	cmp	r0, #10
 800227a:	dc16      	bgt.n	80022aa <__aeabi_i2d+0x4a>
 800227c:	0002      	movs	r2, r0
 800227e:	002e      	movs	r6, r5
 8002280:	3215      	adds	r2, #21
 8002282:	4096      	lsls	r6, r2
 8002284:	220b      	movs	r2, #11
 8002286:	1a12      	subs	r2, r2, r0
 8002288:	40d5      	lsrs	r5, r2
 800228a:	055b      	lsls	r3, r3, #21
 800228c:	032d      	lsls	r5, r5, #12
 800228e:	0b2d      	lsrs	r5, r5, #12
 8002290:	0d5b      	lsrs	r3, r3, #21
 8002292:	e003      	b.n	800229c <__aeabi_i2d+0x3c>
 8002294:	2400      	movs	r4, #0
 8002296:	2300      	movs	r3, #0
 8002298:	2500      	movs	r5, #0
 800229a:	2600      	movs	r6, #0
 800229c:	051b      	lsls	r3, r3, #20
 800229e:	432b      	orrs	r3, r5
 80022a0:	07e4      	lsls	r4, r4, #31
 80022a2:	4323      	orrs	r3, r4
 80022a4:	0030      	movs	r0, r6
 80022a6:	0019      	movs	r1, r3
 80022a8:	bd70      	pop	{r4, r5, r6, pc}
 80022aa:	380b      	subs	r0, #11
 80022ac:	4085      	lsls	r5, r0
 80022ae:	055b      	lsls	r3, r3, #21
 80022b0:	032d      	lsls	r5, r5, #12
 80022b2:	2600      	movs	r6, #0
 80022b4:	0b2d      	lsrs	r5, r5, #12
 80022b6:	0d5b      	lsrs	r3, r3, #21
 80022b8:	e7f0      	b.n	800229c <__aeabi_i2d+0x3c>
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	0000041e 	.word	0x0000041e

080022c0 <__aeabi_ui2d>:
 80022c0:	b510      	push	{r4, lr}
 80022c2:	1e04      	subs	r4, r0, #0
 80022c4:	d010      	beq.n	80022e8 <__aeabi_ui2d+0x28>
 80022c6:	f000 f821 	bl	800230c <__clzsi2>
 80022ca:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <__aeabi_ui2d+0x48>)
 80022cc:	1a1b      	subs	r3, r3, r0
 80022ce:	280a      	cmp	r0, #10
 80022d0:	dc11      	bgt.n	80022f6 <__aeabi_ui2d+0x36>
 80022d2:	220b      	movs	r2, #11
 80022d4:	0021      	movs	r1, r4
 80022d6:	1a12      	subs	r2, r2, r0
 80022d8:	40d1      	lsrs	r1, r2
 80022da:	3015      	adds	r0, #21
 80022dc:	030a      	lsls	r2, r1, #12
 80022de:	055b      	lsls	r3, r3, #21
 80022e0:	4084      	lsls	r4, r0
 80022e2:	0b12      	lsrs	r2, r2, #12
 80022e4:	0d5b      	lsrs	r3, r3, #21
 80022e6:	e001      	b.n	80022ec <__aeabi_ui2d+0x2c>
 80022e8:	2300      	movs	r3, #0
 80022ea:	2200      	movs	r2, #0
 80022ec:	051b      	lsls	r3, r3, #20
 80022ee:	4313      	orrs	r3, r2
 80022f0:	0020      	movs	r0, r4
 80022f2:	0019      	movs	r1, r3
 80022f4:	bd10      	pop	{r4, pc}
 80022f6:	0022      	movs	r2, r4
 80022f8:	380b      	subs	r0, #11
 80022fa:	4082      	lsls	r2, r0
 80022fc:	055b      	lsls	r3, r3, #21
 80022fe:	0312      	lsls	r2, r2, #12
 8002300:	2400      	movs	r4, #0
 8002302:	0b12      	lsrs	r2, r2, #12
 8002304:	0d5b      	lsrs	r3, r3, #21
 8002306:	e7f1      	b.n	80022ec <__aeabi_ui2d+0x2c>
 8002308:	0000041e 	.word	0x0000041e

0800230c <__clzsi2>:
 800230c:	211c      	movs	r1, #28
 800230e:	2301      	movs	r3, #1
 8002310:	041b      	lsls	r3, r3, #16
 8002312:	4298      	cmp	r0, r3
 8002314:	d301      	bcc.n	800231a <__clzsi2+0xe>
 8002316:	0c00      	lsrs	r0, r0, #16
 8002318:	3910      	subs	r1, #16
 800231a:	0a1b      	lsrs	r3, r3, #8
 800231c:	4298      	cmp	r0, r3
 800231e:	d301      	bcc.n	8002324 <__clzsi2+0x18>
 8002320:	0a00      	lsrs	r0, r0, #8
 8002322:	3908      	subs	r1, #8
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	4298      	cmp	r0, r3
 8002328:	d301      	bcc.n	800232e <__clzsi2+0x22>
 800232a:	0900      	lsrs	r0, r0, #4
 800232c:	3904      	subs	r1, #4
 800232e:	a202      	add	r2, pc, #8	; (adr r2, 8002338 <__clzsi2+0x2c>)
 8002330:	5c10      	ldrb	r0, [r2, r0]
 8002332:	1840      	adds	r0, r0, r1
 8002334:	4770      	bx	lr
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	02020304 	.word	0x02020304
 800233c:	01010101 	.word	0x01010101
	...

08002348 <__clzdi2>:
 8002348:	b510      	push	{r4, lr}
 800234a:	2900      	cmp	r1, #0
 800234c:	d103      	bne.n	8002356 <__clzdi2+0xe>
 800234e:	f7ff ffdd 	bl	800230c <__clzsi2>
 8002352:	3020      	adds	r0, #32
 8002354:	e002      	b.n	800235c <__clzdi2+0x14>
 8002356:	0008      	movs	r0, r1
 8002358:	f7ff ffd8 	bl	800230c <__clzsi2>
 800235c:	bd10      	pop	{r4, pc}
 800235e:	46c0      	nop			; (mov r8, r8)

08002360 <RGBInit>:
//uint8_t greenPin[]  = {1, 4, 7, 10,13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43};  //Green LED connected Pins
//uint8_t bluePin[] =   {2, 5, 8, 11,14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44};//Blue LED connected Pins
uint8_t bluePin[]  = {1, 4, 7, 10,13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43};  //Green LED connected Pins New Board
uint8_t greenPin[] =   {2, 5, 8, 11,14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44};//Blue LED connected Pins New Board
void RGBInit(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0

  for (int i = 45 - 1; i >=  0; i--) {
 8002366:	232c      	movs	r3, #44	; 0x2c
 8002368:	607b      	str	r3, [r7, #4]
 800236a:	e007      	b.n	800237c <RGBInit+0x1c>
    registers[i] = 0xFF;
 800236c:	4a07      	ldr	r2, [pc, #28]	; (800238c <RGBInit+0x2c>)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	18d3      	adds	r3, r2, r3
 8002372:	22ff      	movs	r2, #255	; 0xff
 8002374:	701a      	strb	r2, [r3, #0]
  for (int i = 45 - 1; i >=  0; i--) {
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3b01      	subs	r3, #1
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	daf4      	bge.n	800236c <RGBInit+0xc>
  }

}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	46c0      	nop			; (mov r8, r8)
 8002386:	46bd      	mov	sp, r7
 8002388:	b002      	add	sp, #8
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000220 	.word	0x20000220

08002390 <registersWrite>:

void registersWrite(int index, int value) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  HAL_GPIO_WritePin(RGB_CS_GPIO_Port, RGB_CS_Pin, GPIO_PIN_RESET);
 800239a:	23a0      	movs	r3, #160	; 0xa0
 800239c:	05db      	lsls	r3, r3, #23
 800239e:	2200      	movs	r2, #0
 80023a0:	2110      	movs	r1, #16
 80023a2:	0018      	movs	r0, r3
 80023a4:	f002 fe81 	bl	80050aa <HAL_GPIO_WritePin>
  for (int i = 45 - 1; i >=  0; i--) {
 80023a8:	232c      	movs	r3, #44	; 0x2c
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	e01d      	b.n	80023ea <registersWrite+0x5a>
    HAL_GPIO_WritePin(BB_CLK_GPIO_Port, BB_CLK_Pin, GPIO_PIN_RESET);
 80023ae:	23a0      	movs	r3, #160	; 0xa0
 80023b0:	05db      	lsls	r3, r3, #23
 80023b2:	2200      	movs	r2, #0
 80023b4:	2120      	movs	r1, #32
 80023b6:	0018      	movs	r0, r3
 80023b8:	f002 fe77 	bl	80050aa <HAL_GPIO_WritePin>
    int val = registers[i];
 80023bc:	4a15      	ldr	r2, [pc, #84]	; (8002414 <registersWrite+0x84>)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	18d3      	adds	r3, r2, r3
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_WritePin(BB_MOSI_GPIO_Port, BB_MOSI_Pin, val);
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	23a0      	movs	r3, #160	; 0xa0
 80023cc:	05db      	lsls	r3, r3, #23
 80023ce:	2180      	movs	r1, #128	; 0x80
 80023d0:	0018      	movs	r0, r3
 80023d2:	f002 fe6a 	bl	80050aa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BB_CLK_GPIO_Port, BB_CLK_Pin, GPIO_PIN_SET);
 80023d6:	23a0      	movs	r3, #160	; 0xa0
 80023d8:	05db      	lsls	r3, r3, #23
 80023da:	2201      	movs	r2, #1
 80023dc:	2120      	movs	r1, #32
 80023de:	0018      	movs	r0, r3
 80023e0:	f002 fe63 	bl	80050aa <HAL_GPIO_WritePin>
  for (int i = 45 - 1; i >=  0; i--) {
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	dade      	bge.n	80023ae <registersWrite+0x1e>
  }
  HAL_GPIO_WritePin(RGB_CS_GPIO_Port, RGB_CS_Pin, GPIO_PIN_SET);
 80023f0:	23a0      	movs	r3, #160	; 0xa0
 80023f2:	05db      	lsls	r3, r3, #23
 80023f4:	2201      	movs	r2, #1
 80023f6:	2110      	movs	r1, #16
 80023f8:	0018      	movs	r0, r3
 80023fa:	f002 fe56 	bl	80050aa <HAL_GPIO_WritePin>
  registers[index] = value;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	b2d9      	uxtb	r1, r3
 8002402:	4a04      	ldr	r2, [pc, #16]	; (8002414 <registersWrite+0x84>)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	18d3      	adds	r3, r2, r3
 8002408:	1c0a      	adds	r2, r1, #0
 800240a:	701a      	strb	r2, [r3, #0]
}
 800240c:	46c0      	nop			; (mov r8, r8)
 800240e:	46bd      	mov	sp, r7
 8002410:	b004      	add	sp, #16
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20000220 	.word	0x20000220

08002418 <Red>:

void Red(int startPin, int endPin, int ledBT) {
 8002418:	b590      	push	{r4, r7, lr}
 800241a:	b087      	sub	sp, #28
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  for (uint8_t count = startPin; count <= endPin; count++) {
 8002424:	2317      	movs	r3, #23
 8002426:	18fb      	adds	r3, r7, r3
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	701a      	strb	r2, [r3, #0]
 800242c:	e01d      	b.n	800246a <Red+0x52>
    registersWrite(bluePin[count], 0x01);     //Green
 800242e:	2417      	movs	r4, #23
 8002430:	193b      	adds	r3, r7, r4
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	4a12      	ldr	r2, [pc, #72]	; (8002480 <Red+0x68>)
 8002436:	5cd3      	ldrb	r3, [r2, r3]
 8002438:	2101      	movs	r1, #1
 800243a:	0018      	movs	r0, r3
 800243c:	f7ff ffa8 	bl	8002390 <registersWrite>
    registersWrite(greenPin[count], 0x01);    //Blue
 8002440:	193b      	adds	r3, r7, r4
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	4a0f      	ldr	r2, [pc, #60]	; (8002484 <Red+0x6c>)
 8002446:	5cd3      	ldrb	r3, [r2, r3]
 8002448:	2101      	movs	r1, #1
 800244a:	0018      	movs	r0, r3
 800244c:	f7ff ffa0 	bl	8002390 <registersWrite>
    registersWrite(redPin[count], 0x00);
 8002450:	193b      	adds	r3, r7, r4
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	4a0c      	ldr	r2, [pc, #48]	; (8002488 <Red+0x70>)
 8002456:	5cd3      	ldrb	r3, [r2, r3]
 8002458:	2100      	movs	r1, #0
 800245a:	0018      	movs	r0, r3
 800245c:	f7ff ff98 	bl	8002390 <registersWrite>
  for (uint8_t count = startPin; count <= endPin; count++) {
 8002460:	193b      	adds	r3, r7, r4
 8002462:	781a      	ldrb	r2, [r3, #0]
 8002464:	193b      	adds	r3, r7, r4
 8002466:	3201      	adds	r2, #1
 8002468:	701a      	strb	r2, [r3, #0]
 800246a:	2317      	movs	r3, #23
 800246c:	18fb      	adds	r3, r7, r3
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	429a      	cmp	r2, r3
 8002474:	dadb      	bge.n	800242e <Red+0x16>
  }
}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	46c0      	nop			; (mov r8, r8)
 800247a:	46bd      	mov	sp, r7
 800247c:	b007      	add	sp, #28
 800247e:	bd90      	pop	{r4, r7, pc}
 8002480:	20000010 	.word	0x20000010
 8002484:	20000020 	.word	0x20000020
 8002488:	20000000 	.word	0x20000000

0800248c <Green>:
void Green(int startPin, int endPin, int ledBT) {
 800248c:	b590      	push	{r4, r7, lr}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  for (uint8_t count = startPin; count <= endPin; count++) {
 8002498:	2317      	movs	r3, #23
 800249a:	18fb      	adds	r3, r7, r3
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	701a      	strb	r2, [r3, #0]
 80024a0:	e01d      	b.n	80024de <Green+0x52>
   registersWrite(redPin[count], 0x01);
 80024a2:	2417      	movs	r4, #23
 80024a4:	193b      	adds	r3, r7, r4
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	4a12      	ldr	r2, [pc, #72]	; (80024f4 <Green+0x68>)
 80024aa:	5cd3      	ldrb	r3, [r2, r3]
 80024ac:	2101      	movs	r1, #1
 80024ae:	0018      	movs	r0, r3
 80024b0:	f7ff ff6e 	bl	8002390 <registersWrite>
	registersWrite(bluePin[count], 0x01);     //Green
 80024b4:	193b      	adds	r3, r7, r4
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	4a0f      	ldr	r2, [pc, #60]	; (80024f8 <Green+0x6c>)
 80024ba:	5cd3      	ldrb	r3, [r2, r3]
 80024bc:	2101      	movs	r1, #1
 80024be:	0018      	movs	r0, r3
 80024c0:	f7ff ff66 	bl	8002390 <registersWrite>
	registersWrite(greenPin[count], 0x00);    //Blue
 80024c4:	193b      	adds	r3, r7, r4
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	4a0c      	ldr	r2, [pc, #48]	; (80024fc <Green+0x70>)
 80024ca:	5cd3      	ldrb	r3, [r2, r3]
 80024cc:	2100      	movs	r1, #0
 80024ce:	0018      	movs	r0, r3
 80024d0:	f7ff ff5e 	bl	8002390 <registersWrite>
  for (uint8_t count = startPin; count <= endPin; count++) {
 80024d4:	193b      	adds	r3, r7, r4
 80024d6:	781a      	ldrb	r2, [r3, #0]
 80024d8:	193b      	adds	r3, r7, r4
 80024da:	3201      	adds	r2, #1
 80024dc:	701a      	strb	r2, [r3, #0]
 80024de:	2317      	movs	r3, #23
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	dadb      	bge.n	80024a2 <Green+0x16>
//    delay(ledBT);
  }
}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	46c0      	nop			; (mov r8, r8)
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b007      	add	sp, #28
 80024f2:	bd90      	pop	{r4, r7, pc}
 80024f4:	20000000 	.word	0x20000000
 80024f8:	20000010 	.word	0x20000010
 80024fc:	20000020 	.word	0x20000020

08002500 <Blue>:

void Blue(int startPin, int endPin, int ledBT) {
 8002500:	b590      	push	{r4, r7, lr}
 8002502:	b087      	sub	sp, #28
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  for (uint8_t count = startPin; count <= endPin; count++) {
 800250c:	2317      	movs	r3, #23
 800250e:	18fb      	adds	r3, r7, r3
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	701a      	strb	r2, [r3, #0]
 8002514:	e01d      	b.n	8002552 <Blue+0x52>
	registersWrite(bluePin[count], 0x00);     //Green
 8002516:	2417      	movs	r4, #23
 8002518:	193b      	adds	r3, r7, r4
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	4a12      	ldr	r2, [pc, #72]	; (8002568 <Blue+0x68>)
 800251e:	5cd3      	ldrb	r3, [r2, r3]
 8002520:	2100      	movs	r1, #0
 8002522:	0018      	movs	r0, r3
 8002524:	f7ff ff34 	bl	8002390 <registersWrite>
	registersWrite(redPin[count], 0x01);
 8002528:	193b      	adds	r3, r7, r4
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	4a0f      	ldr	r2, [pc, #60]	; (800256c <Blue+0x6c>)
 800252e:	5cd3      	ldrb	r3, [r2, r3]
 8002530:	2101      	movs	r1, #1
 8002532:	0018      	movs	r0, r3
 8002534:	f7ff ff2c 	bl	8002390 <registersWrite>
	registersWrite(greenPin[count], 0x01);    //Blue
 8002538:	193b      	adds	r3, r7, r4
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	4a0c      	ldr	r2, [pc, #48]	; (8002570 <Blue+0x70>)
 800253e:	5cd3      	ldrb	r3, [r2, r3]
 8002540:	2101      	movs	r1, #1
 8002542:	0018      	movs	r0, r3
 8002544:	f7ff ff24 	bl	8002390 <registersWrite>
  for (uint8_t count = startPin; count <= endPin; count++) {
 8002548:	193b      	adds	r3, r7, r4
 800254a:	781a      	ldrb	r2, [r3, #0]
 800254c:	193b      	adds	r3, r7, r4
 800254e:	3201      	adds	r2, #1
 8002550:	701a      	strb	r2, [r3, #0]
 8002552:	2317      	movs	r3, #23
 8002554:	18fb      	adds	r3, r7, r3
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	429a      	cmp	r2, r3
 800255c:	dadb      	bge.n	8002516 <Blue+0x16>
//    delay(ledBT);
  }
}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	46c0      	nop			; (mov r8, r8)
 8002562:	46bd      	mov	sp, r7
 8002564:	b007      	add	sp, #28
 8002566:	bd90      	pop	{r4, r7, pc}
 8002568:	20000010 	.word	0x20000010
 800256c:	20000000 	.word	0x20000000
 8002570:	20000020 	.word	0x20000020

08002574 <Yellow>:

void Yellow(int startPin, int endPin, int ledBT) {
 8002574:	b590      	push	{r4, r7, lr}
 8002576:	b087      	sub	sp, #28
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  for (uint8_t count = startPin; count <= endPin; count++) {
 8002580:	2317      	movs	r3, #23
 8002582:	18fb      	adds	r3, r7, r3
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	701a      	strb	r2, [r3, #0]
 8002588:	e01d      	b.n	80025c6 <Yellow+0x52>
	registersWrite(bluePin[count], 0x01);     //Green
 800258a:	2417      	movs	r4, #23
 800258c:	193b      	adds	r3, r7, r4
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	4a12      	ldr	r2, [pc, #72]	; (80025dc <Yellow+0x68>)
 8002592:	5cd3      	ldrb	r3, [r2, r3]
 8002594:	2101      	movs	r1, #1
 8002596:	0018      	movs	r0, r3
 8002598:	f7ff fefa 	bl	8002390 <registersWrite>
	registersWrite(redPin[count], 0x00);
 800259c:	193b      	adds	r3, r7, r4
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	4a0f      	ldr	r2, [pc, #60]	; (80025e0 <Yellow+0x6c>)
 80025a2:	5cd3      	ldrb	r3, [r2, r3]
 80025a4:	2100      	movs	r1, #0
 80025a6:	0018      	movs	r0, r3
 80025a8:	f7ff fef2 	bl	8002390 <registersWrite>
	registersWrite(greenPin[count], 0x00);    //Blue
 80025ac:	193b      	adds	r3, r7, r4
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	4a0c      	ldr	r2, [pc, #48]	; (80025e4 <Yellow+0x70>)
 80025b2:	5cd3      	ldrb	r3, [r2, r3]
 80025b4:	2100      	movs	r1, #0
 80025b6:	0018      	movs	r0, r3
 80025b8:	f7ff feea 	bl	8002390 <registersWrite>
  for (uint8_t count = startPin; count <= endPin; count++) {
 80025bc:	193b      	adds	r3, r7, r4
 80025be:	781a      	ldrb	r2, [r3, #0]
 80025c0:	193b      	adds	r3, r7, r4
 80025c2:	3201      	adds	r2, #1
 80025c4:	701a      	strb	r2, [r3, #0]
 80025c6:	2317      	movs	r3, #23
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	dadb      	bge.n	800258a <Yellow+0x16>
//    delay(ledBT);
  }
}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	46c0      	nop			; (mov r8, r8)
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b007      	add	sp, #28
 80025da:	bd90      	pop	{r4, r7, pc}
 80025dc:	20000010 	.word	0x20000010
 80025e0:	20000000 	.word	0x20000000
 80025e4:	20000020 	.word	0x20000020

080025e8 <White>:

void White(int startPin, int endPin, int ledBT) {
 80025e8:	b590      	push	{r4, r7, lr}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  for (uint8_t count = startPin; count <= endPin; count++) {
 80025f4:	2317      	movs	r3, #23
 80025f6:	18fb      	adds	r3, r7, r3
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	701a      	strb	r2, [r3, #0]
 80025fc:	e01d      	b.n	800263a <White+0x52>
	registersWrite(bluePin[count], 0x00);     //Green
 80025fe:	2417      	movs	r4, #23
 8002600:	193b      	adds	r3, r7, r4
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	4a12      	ldr	r2, [pc, #72]	; (8002650 <White+0x68>)
 8002606:	5cd3      	ldrb	r3, [r2, r3]
 8002608:	2100      	movs	r1, #0
 800260a:	0018      	movs	r0, r3
 800260c:	f7ff fec0 	bl	8002390 <registersWrite>
	registersWrite(redPin[count], 0x00);
 8002610:	193b      	adds	r3, r7, r4
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	4a0f      	ldr	r2, [pc, #60]	; (8002654 <White+0x6c>)
 8002616:	5cd3      	ldrb	r3, [r2, r3]
 8002618:	2100      	movs	r1, #0
 800261a:	0018      	movs	r0, r3
 800261c:	f7ff feb8 	bl	8002390 <registersWrite>
	registersWrite(greenPin[count], 0x00);    //Blue
 8002620:	193b      	adds	r3, r7, r4
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	4a0c      	ldr	r2, [pc, #48]	; (8002658 <White+0x70>)
 8002626:	5cd3      	ldrb	r3, [r2, r3]
 8002628:	2100      	movs	r1, #0
 800262a:	0018      	movs	r0, r3
 800262c:	f7ff feb0 	bl	8002390 <registersWrite>
  for (uint8_t count = startPin; count <= endPin; count++) {
 8002630:	193b      	adds	r3, r7, r4
 8002632:	781a      	ldrb	r2, [r3, #0]
 8002634:	193b      	adds	r3, r7, r4
 8002636:	3201      	adds	r2, #1
 8002638:	701a      	strb	r2, [r3, #0]
 800263a:	2317      	movs	r3, #23
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	429a      	cmp	r2, r3
 8002644:	dadb      	bge.n	80025fe <White+0x16>
//    delay(ledBT);
  }
}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	46c0      	nop			; (mov r8, r8)
 800264a:	46bd      	mov	sp, r7
 800264c:	b007      	add	sp, #28
 800264e:	bd90      	pop	{r4, r7, pc}
 8002650:	20000010 	.word	0x20000010
 8002654:	20000000 	.word	0x20000000
 8002658:	20000020 	.word	0x20000020

0800265c <Cyan>:

void Cyan(int startPin, int endPin, int ledBT) {
 800265c:	b590      	push	{r4, r7, lr}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  for (uint8_t count = startPin; count <= endPin; count++) {
 8002668:	2317      	movs	r3, #23
 800266a:	18fb      	adds	r3, r7, r3
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	701a      	strb	r2, [r3, #0]
 8002670:	e01d      	b.n	80026ae <Cyan+0x52>
	registersWrite(redPin[count], 0x01);
 8002672:	2417      	movs	r4, #23
 8002674:	193b      	adds	r3, r7, r4
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	4a12      	ldr	r2, [pc, #72]	; (80026c4 <Cyan+0x68>)
 800267a:	5cd3      	ldrb	r3, [r2, r3]
 800267c:	2101      	movs	r1, #1
 800267e:	0018      	movs	r0, r3
 8002680:	f7ff fe86 	bl	8002390 <registersWrite>
	registersWrite(greenPin[count], 0x00);    //Blue
 8002684:	193b      	adds	r3, r7, r4
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	4a0f      	ldr	r2, [pc, #60]	; (80026c8 <Cyan+0x6c>)
 800268a:	5cd3      	ldrb	r3, [r2, r3]
 800268c:	2100      	movs	r1, #0
 800268e:	0018      	movs	r0, r3
 8002690:	f7ff fe7e 	bl	8002390 <registersWrite>
	registersWrite(bluePin[count], 0x00);     //Green
 8002694:	193b      	adds	r3, r7, r4
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	4a0c      	ldr	r2, [pc, #48]	; (80026cc <Cyan+0x70>)
 800269a:	5cd3      	ldrb	r3, [r2, r3]
 800269c:	2100      	movs	r1, #0
 800269e:	0018      	movs	r0, r3
 80026a0:	f7ff fe76 	bl	8002390 <registersWrite>
  for (uint8_t count = startPin; count <= endPin; count++) {
 80026a4:	193b      	adds	r3, r7, r4
 80026a6:	781a      	ldrb	r2, [r3, #0]
 80026a8:	193b      	adds	r3, r7, r4
 80026aa:	3201      	adds	r2, #1
 80026ac:	701a      	strb	r2, [r3, #0]
 80026ae:	2317      	movs	r3, #23
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	dadb      	bge.n	8002672 <Cyan+0x16>
//    delay(ledBT);
  }
}
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	46c0      	nop			; (mov r8, r8)
 80026be:	46bd      	mov	sp, r7
 80026c0:	b007      	add	sp, #28
 80026c2:	bd90      	pop	{r4, r7, pc}
 80026c4:	20000000 	.word	0x20000000
 80026c8:	20000020 	.word	0x20000020
 80026cc:	20000010 	.word	0x20000010

080026d0 <Pink>:

void Pink(int startPin, int endPin, int ledBT) {
 80026d0:	b590      	push	{r4, r7, lr}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  for (uint8_t count = startPin; count <= endPin; count++) {
 80026dc:	2317      	movs	r3, #23
 80026de:	18fb      	adds	r3, r7, r3
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	701a      	strb	r2, [r3, #0]
 80026e4:	e01d      	b.n	8002722 <Pink+0x52>

	registersWrite(redPin[count], 0x00);
 80026e6:	2417      	movs	r4, #23
 80026e8:	193b      	adds	r3, r7, r4
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	4a12      	ldr	r2, [pc, #72]	; (8002738 <Pink+0x68>)
 80026ee:	5cd3      	ldrb	r3, [r2, r3]
 80026f0:	2100      	movs	r1, #0
 80026f2:	0018      	movs	r0, r3
 80026f4:	f7ff fe4c 	bl	8002390 <registersWrite>
	registersWrite(bluePin[count], 0x00);     //Green
 80026f8:	193b      	adds	r3, r7, r4
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	4a0f      	ldr	r2, [pc, #60]	; (800273c <Pink+0x6c>)
 80026fe:	5cd3      	ldrb	r3, [r2, r3]
 8002700:	2100      	movs	r1, #0
 8002702:	0018      	movs	r0, r3
 8002704:	f7ff fe44 	bl	8002390 <registersWrite>
	registersWrite(greenPin[count], 0x01);    //Blue
 8002708:	193b      	adds	r3, r7, r4
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	4a0c      	ldr	r2, [pc, #48]	; (8002740 <Pink+0x70>)
 800270e:	5cd3      	ldrb	r3, [r2, r3]
 8002710:	2101      	movs	r1, #1
 8002712:	0018      	movs	r0, r3
 8002714:	f7ff fe3c 	bl	8002390 <registersWrite>
  for (uint8_t count = startPin; count <= endPin; count++) {
 8002718:	193b      	adds	r3, r7, r4
 800271a:	781a      	ldrb	r2, [r3, #0]
 800271c:	193b      	adds	r3, r7, r4
 800271e:	3201      	adds	r2, #1
 8002720:	701a      	strb	r2, [r3, #0]
 8002722:	2317      	movs	r3, #23
 8002724:	18fb      	adds	r3, r7, r3
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	429a      	cmp	r2, r3
 800272c:	dadb      	bge.n	80026e6 <Pink+0x16>
//    delay(ledBT);
  }
}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	46c0      	nop			; (mov r8, r8)
 8002732:	46bd      	mov	sp, r7
 8002734:	b007      	add	sp, #28
 8002736:	bd90      	pop	{r4, r7, pc}
 8002738:	20000000 	.word	0x20000000
 800273c:	20000010 	.word	0x20000010
 8002740:	20000020 	.word	0x20000020

08002744 <LedOff>:
void LedOff(int startPin, int endPin, int ledBT) {
 8002744:	b590      	push	{r4, r7, lr}
 8002746:	b087      	sub	sp, #28
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  for (uint8_t count = startPin; count <= endPin; count++) {
 8002750:	2317      	movs	r3, #23
 8002752:	18fb      	adds	r3, r7, r3
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	701a      	strb	r2, [r3, #0]
 8002758:	e01d      	b.n	8002796 <LedOff+0x52>

	registersWrite(redPin[count], 0x01);
 800275a:	2417      	movs	r4, #23
 800275c:	193b      	adds	r3, r7, r4
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	4a12      	ldr	r2, [pc, #72]	; (80027ac <LedOff+0x68>)
 8002762:	5cd3      	ldrb	r3, [r2, r3]
 8002764:	2101      	movs	r1, #1
 8002766:	0018      	movs	r0, r3
 8002768:	f7ff fe12 	bl	8002390 <registersWrite>
	registersWrite(bluePin[count], 0x01);     //Green
 800276c:	193b      	adds	r3, r7, r4
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	4a0f      	ldr	r2, [pc, #60]	; (80027b0 <LedOff+0x6c>)
 8002772:	5cd3      	ldrb	r3, [r2, r3]
 8002774:	2101      	movs	r1, #1
 8002776:	0018      	movs	r0, r3
 8002778:	f7ff fe0a 	bl	8002390 <registersWrite>
	registersWrite(greenPin[count], 0x01);    //Blue
 800277c:	193b      	adds	r3, r7, r4
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	4a0c      	ldr	r2, [pc, #48]	; (80027b4 <LedOff+0x70>)
 8002782:	5cd3      	ldrb	r3, [r2, r3]
 8002784:	2101      	movs	r1, #1
 8002786:	0018      	movs	r0, r3
 8002788:	f7ff fe02 	bl	8002390 <registersWrite>
  for (uint8_t count = startPin; count <= endPin; count++) {
 800278c:	193b      	adds	r3, r7, r4
 800278e:	781a      	ldrb	r2, [r3, #0]
 8002790:	193b      	adds	r3, r7, r4
 8002792:	3201      	adds	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
 8002796:	2317      	movs	r3, #23
 8002798:	18fb      	adds	r3, r7, r3
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	429a      	cmp	r2, r3
 80027a0:	dadb      	bge.n	800275a <LedOff+0x16>
//    delay(ledBT);
  }
}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	46c0      	nop			; (mov r8, r8)
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b007      	add	sp, #28
 80027aa:	bd90      	pop	{r4, r7, pc}
 80027ac:	20000000 	.word	0x20000000
 80027b0:	20000010 	.word	0x20000010
 80027b4:	20000020 	.word	0x20000020

080027b8 <AllLedOff>:
void AllLedOff(int clearSpeed) {
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  for (int i = 0; i <= 44; i++) {
 80027c0:	2300      	movs	r3, #0
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	e00b      	b.n	80027de <AllLedOff+0x26>
    registersWrite(i, 0xFF);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	21ff      	movs	r1, #255	; 0xff
 80027ca:	0018      	movs	r0, r3
 80027cc:	f7ff fde0 	bl	8002390 <registersWrite>
    delay(clearSpeed);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	0018      	movs	r0, r3
 80027d4:	f000 fd23 	bl	800321e <delay>
  for (int i = 0; i <= 44; i++) {
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	3301      	adds	r3, #1
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2b2c      	cmp	r3, #44	; 0x2c
 80027e2:	ddf0      	ble.n	80027c6 <AllLedOff+0xe>
  }
}
 80027e4:	46c0      	nop			; (mov r8, r8)
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	46bd      	mov	sp, r7
 80027ea:	b004      	add	sp, #16
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <SetLed>:

 void SetLed(uint8_t Slotnum,LedColour_t Colour)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	0002      	movs	r2, r0
 80027f8:	1dfb      	adds	r3, r7, #7
 80027fa:	701a      	strb	r2, [r3, #0]
 80027fc:	1dbb      	adds	r3, r7, #6
 80027fe:	1c0a      	adds	r2, r1, #0
 8002800:	701a      	strb	r2, [r3, #0]
	switch(Colour)
 8002802:	1dbb      	adds	r3, r7, #6
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b07      	cmp	r3, #7
 8002808:	d900      	bls.n	800280c <SetLed+0x1c>
 800280a:	e084      	b.n	8002916 <SetLed+0x126>
 800280c:	009a      	lsls	r2, r3, #2
 800280e:	4b44      	ldr	r3, [pc, #272]	; (8002920 <SetLed+0x130>)
 8002810:	18d3      	adds	r3, r2, r3
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	469f      	mov	pc, r3
	{
	case RGBLedOff:
					LedOff(Slotnum, Slotnum,0x00);
 8002816:	1dfb      	adds	r3, r7, #7
 8002818:	7818      	ldrb	r0, [r3, #0]
 800281a:	1dfb      	adds	r3, r7, #7
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2200      	movs	r2, #0
 8002820:	0019      	movs	r1, r3
 8002822:	f7ff ff8f 	bl	8002744 <LedOff>
					LedOff(Slotnum, Slotnum,0x00);
 8002826:	1dfb      	adds	r3, r7, #7
 8002828:	7818      	ldrb	r0, [r3, #0]
 800282a:	1dfb      	adds	r3, r7, #7
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2200      	movs	r2, #0
 8002830:	0019      	movs	r1, r3
 8002832:	f7ff ff87 	bl	8002744 <LedOff>
					break;
 8002836:	e06f      	b.n	8002918 <SetLed+0x128>
	case RGBRed:
					Red(Slotnum, Slotnum,0x00);
 8002838:	1dfb      	adds	r3, r7, #7
 800283a:	7818      	ldrb	r0, [r3, #0]
 800283c:	1dfb      	adds	r3, r7, #7
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2200      	movs	r2, #0
 8002842:	0019      	movs	r1, r3
 8002844:	f7ff fde8 	bl	8002418 <Red>
					Red(Slotnum, Slotnum,0x00);
 8002848:	1dfb      	adds	r3, r7, #7
 800284a:	7818      	ldrb	r0, [r3, #0]
 800284c:	1dfb      	adds	r3, r7, #7
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2200      	movs	r2, #0
 8002852:	0019      	movs	r1, r3
 8002854:	f7ff fde0 	bl	8002418 <Red>
					break;
 8002858:	e05e      	b.n	8002918 <SetLed+0x128>
	case RGBGreen:
					Green(Slotnum, Slotnum,0x00);
 800285a:	1dfb      	adds	r3, r7, #7
 800285c:	7818      	ldrb	r0, [r3, #0]
 800285e:	1dfb      	adds	r3, r7, #7
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2200      	movs	r2, #0
 8002864:	0019      	movs	r1, r3
 8002866:	f7ff fe11 	bl	800248c <Green>
					Green(Slotnum, Slotnum,0x00);
 800286a:	1dfb      	adds	r3, r7, #7
 800286c:	7818      	ldrb	r0, [r3, #0]
 800286e:	1dfb      	adds	r3, r7, #7
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2200      	movs	r2, #0
 8002874:	0019      	movs	r1, r3
 8002876:	f7ff fe09 	bl	800248c <Green>
					break;
 800287a:	e04d      	b.n	8002918 <SetLed+0x128>
	case RGBBlue:
					Blue(Slotnum, Slotnum,0x00);
 800287c:	1dfb      	adds	r3, r7, #7
 800287e:	7818      	ldrb	r0, [r3, #0]
 8002880:	1dfb      	adds	r3, r7, #7
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2200      	movs	r2, #0
 8002886:	0019      	movs	r1, r3
 8002888:	f7ff fe3a 	bl	8002500 <Blue>
					break;
 800288c:	e044      	b.n	8002918 <SetLed+0x128>
	case RGBYellow:
					Yellow(Slotnum, Slotnum,0x00);
 800288e:	1dfb      	adds	r3, r7, #7
 8002890:	7818      	ldrb	r0, [r3, #0]
 8002892:	1dfb      	adds	r3, r7, #7
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2200      	movs	r2, #0
 8002898:	0019      	movs	r1, r3
 800289a:	f7ff fe6b 	bl	8002574 <Yellow>
					Yellow(Slotnum, Slotnum,0x00);
 800289e:	1dfb      	adds	r3, r7, #7
 80028a0:	7818      	ldrb	r0, [r3, #0]
 80028a2:	1dfb      	adds	r3, r7, #7
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2200      	movs	r2, #0
 80028a8:	0019      	movs	r1, r3
 80028aa:	f7ff fe63 	bl	8002574 <Yellow>
					break;
 80028ae:	e033      	b.n	8002918 <SetLed+0x128>
	case RGBPink:
					Pink(Slotnum, Slotnum,0x00);
 80028b0:	1dfb      	adds	r3, r7, #7
 80028b2:	7818      	ldrb	r0, [r3, #0]
 80028b4:	1dfb      	adds	r3, r7, #7
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2200      	movs	r2, #0
 80028ba:	0019      	movs	r1, r3
 80028bc:	f7ff ff08 	bl	80026d0 <Pink>
					Pink(Slotnum, Slotnum,0x00);
 80028c0:	1dfb      	adds	r3, r7, #7
 80028c2:	7818      	ldrb	r0, [r3, #0]
 80028c4:	1dfb      	adds	r3, r7, #7
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2200      	movs	r2, #0
 80028ca:	0019      	movs	r1, r3
 80028cc:	f7ff ff00 	bl	80026d0 <Pink>
					break;
 80028d0:	e022      	b.n	8002918 <SetLed+0x128>

	case RGBCyan:
					Cyan(Slotnum, Slotnum,0x00);
 80028d2:	1dfb      	adds	r3, r7, #7
 80028d4:	7818      	ldrb	r0, [r3, #0]
 80028d6:	1dfb      	adds	r3, r7, #7
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2200      	movs	r2, #0
 80028dc:	0019      	movs	r1, r3
 80028de:	f7ff febd 	bl	800265c <Cyan>
					Cyan(Slotnum, Slotnum,0x00);
 80028e2:	1dfb      	adds	r3, r7, #7
 80028e4:	7818      	ldrb	r0, [r3, #0]
 80028e6:	1dfb      	adds	r3, r7, #7
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2200      	movs	r2, #0
 80028ec:	0019      	movs	r1, r3
 80028ee:	f7ff feb5 	bl	800265c <Cyan>
					break;
 80028f2:	e011      	b.n	8002918 <SetLed+0x128>
	case RGBWhite:
					White(Slotnum, Slotnum,0x00);
 80028f4:	1dfb      	adds	r3, r7, #7
 80028f6:	7818      	ldrb	r0, [r3, #0]
 80028f8:	1dfb      	adds	r3, r7, #7
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2200      	movs	r2, #0
 80028fe:	0019      	movs	r1, r3
 8002900:	f7ff fe72 	bl	80025e8 <White>
					White(Slotnum, Slotnum,0x00);
 8002904:	1dfb      	adds	r3, r7, #7
 8002906:	7818      	ldrb	r0, [r3, #0]
 8002908:	1dfb      	adds	r3, r7, #7
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2200      	movs	r2, #0
 800290e:	0019      	movs	r1, r3
 8002910:	f7ff fe6a 	bl	80025e8 <White>
					break;
 8002914:	e000      	b.n	8002918 <SetLed+0x128>
	default:
					break;
 8002916:	46c0      	nop			; (mov r8, r8)
	}
}
 8002918:	46c0      	nop			; (mov r8, r8)
 800291a:	46bd      	mov	sp, r7
 800291c:	b002      	add	sp, #8
 800291e:	bd80      	pop	{r7, pc}
 8002920:	0800be5c 	.word	0x0800be5c

08002924 <UpdateSlotLeds>:

void UpdateSlotLeds(uint16_t Data, Slot_Para_t status)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	0002      	movs	r2, r0
 800292c:	1dbb      	adds	r3, r7, #6
 800292e:	801a      	strh	r2, [r3, #0]
 8002930:	1d7b      	adds	r3, r7, #5
 8002932:	1c0a      	adds	r2, r1, #0
 8002934:	701a      	strb	r2, [r3, #0]
	int8_t i = 0;
 8002936:	210f      	movs	r1, #15
 8002938:	187b      	adds	r3, r7, r1
 800293a:	2200      	movs	r2, #0
 800293c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i< 15; i++)
 800293e:	187b      	adds	r3, r7, r1
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
 8002944:	e01d      	b.n	8002982 <UpdateSlotLeds+0x5e>
	{
		if(Data & (0x4000 >> i))
 8002946:	1dbb      	adds	r3, r7, #6
 8002948:	881b      	ldrh	r3, [r3, #0]
 800294a:	200f      	movs	r0, #15
 800294c:	183a      	adds	r2, r7, r0
 800294e:	7812      	ldrb	r2, [r2, #0]
 8002950:	b252      	sxtb	r2, r2
 8002952:	2180      	movs	r1, #128	; 0x80
 8002954:	01c9      	lsls	r1, r1, #7
 8002956:	4111      	asrs	r1, r2
 8002958:	000a      	movs	r2, r1
 800295a:	4013      	ands	r3, r2
 800295c:	d008      	beq.n	8002970 <UpdateSlotLeds+0x4c>
			SetLed(i,SlotParam[status]);
 800295e:	183b      	adds	r3, r7, r0
 8002960:	7818      	ldrb	r0, [r3, #0]
 8002962:	1d7b      	adds	r3, r7, #5
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	4a0c      	ldr	r2, [pc, #48]	; (8002998 <UpdateSlotLeds+0x74>)
 8002968:	5cd3      	ldrb	r3, [r2, r3]
 800296a:	0019      	movs	r1, r3
 800296c:	f7ff ff40 	bl	80027f0 <SetLed>
	for(i = 0; i< 15; i++)
 8002970:	210f      	movs	r1, #15
 8002972:	187b      	adds	r3, r7, r1
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	b25b      	sxtb	r3, r3
 8002978:	b2db      	uxtb	r3, r3
 800297a:	3301      	adds	r3, #1
 800297c:	b2da      	uxtb	r2, r3
 800297e:	187b      	adds	r3, r7, r1
 8002980:	701a      	strb	r2, [r3, #0]
 8002982:	230f      	movs	r3, #15
 8002984:	18fb      	adds	r3, r7, r3
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	b25b      	sxtb	r3, r3
 800298a:	2b0e      	cmp	r3, #14
 800298c:	dddb      	ble.n	8002946 <UpdateSlotLeds+0x22>
	}
}
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	46c0      	nop			; (mov r8, r8)
 8002992:	46bd      	mov	sp, r7
 8002994:	b004      	add	sp, #16
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20000528 	.word	0x20000528

0800299c <HAL_GPIO_EXTI_Rising_Callback>:
Slot15_t Slot;



void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	0002      	movs	r2, r0
 80029a4:	1dbb      	adds	r3, r7, #6
 80029a6:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == GPIO_PIN_0)
 80029a8:	1dbb      	adds	r3, r7, #6
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d156      	bne.n	8002a5e <HAL_GPIO_EXTI_Rising_Callback+0xc2>
  {
//	 Readbuff[j++] = __HAL_TIM_GET_COUNTER(&htim2);
    if (__HAL_TIM_GET_COUNTER(&htim2) > 8000)
 80029b0:	4bb5      	ldr	r3, [pc, #724]	; (8002c88 <HAL_GPIO_EXTI_Rising_Callback+0x2ec>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029b6:	23fa      	movs	r3, #250	; 0xfa
 80029b8:	015b      	lsls	r3, r3, #5
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d906      	bls.n	80029cc <HAL_GPIO_EXTI_Rising_Callback+0x30>
    {
      CapChannelA = 0;
 80029be:	4bb3      	ldr	r3, [pc, #716]	; (8002c8c <HAL_GPIO_EXTI_Rising_Callback+0x2f0>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	701a      	strb	r2, [r3, #0]
      bitIndexA = 0;
 80029c4:	4bb2      	ldr	r3, [pc, #712]	; (8002c90 <HAL_GPIO_EXTI_Rising_Callback+0x2f4>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	701a      	strb	r2, [r3, #0]
 80029ca:	e03a      	b.n	8002a42 <HAL_GPIO_EXTI_Rising_Callback+0xa6>
    }
    else if (__HAL_TIM_GET_COUNTER(&htim2) > 2000)
 80029cc:	4bae      	ldr	r3, [pc, #696]	; (8002c88 <HAL_GPIO_EXTI_Rising_Callback+0x2ec>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029d2:	23fa      	movs	r3, #250	; 0xfa
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d915      	bls.n	8002a06 <HAL_GPIO_EXTI_Rising_Callback+0x6a>
    {
	  CapChannelA |= (1UL << (7-bitIndexA));   // write 1
 80029da:	4bad      	ldr	r3, [pc, #692]	; (8002c90 <HAL_GPIO_EXTI_Rising_Callback+0x2f4>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	001a      	movs	r2, r3
 80029e0:	2307      	movs	r3, #7
 80029e2:	1a9b      	subs	r3, r3, r2
 80029e4:	2201      	movs	r2, #1
 80029e6:	409a      	lsls	r2, r3
 80029e8:	0013      	movs	r3, r2
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	4ba7      	ldr	r3, [pc, #668]	; (8002c8c <HAL_GPIO_EXTI_Rising_Callback+0x2f0>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	4ba5      	ldr	r3, [pc, #660]	; (8002c8c <HAL_GPIO_EXTI_Rising_Callback+0x2f0>)
 80029f6:	701a      	strb	r2, [r3, #0]
      bitIndexA++;
 80029f8:	4ba5      	ldr	r3, [pc, #660]	; (8002c90 <HAL_GPIO_EXTI_Rising_Callback+0x2f4>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	3301      	adds	r3, #1
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	4ba3      	ldr	r3, [pc, #652]	; (8002c90 <HAL_GPIO_EXTI_Rising_Callback+0x2f4>)
 8002a02:	701a      	strb	r2, [r3, #0]
 8002a04:	e01d      	b.n	8002a42 <HAL_GPIO_EXTI_Rising_Callback+0xa6>
    }
    else if (__HAL_TIM_GET_COUNTER(&htim2) > 1000)
 8002a06:	4ba0      	ldr	r3, [pc, #640]	; (8002c88 <HAL_GPIO_EXTI_Rising_Callback+0x2ec>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a0c:	23fa      	movs	r3, #250	; 0xfa
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d916      	bls.n	8002a42 <HAL_GPIO_EXTI_Rising_Callback+0xa6>
    {
      CapChannelA &= ~(1UL << (7-bitIndexA));  // write 0
 8002a14:	4b9e      	ldr	r3, [pc, #632]	; (8002c90 <HAL_GPIO_EXTI_Rising_Callback+0x2f4>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	001a      	movs	r2, r3
 8002a1a:	2307      	movs	r3, #7
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	2201      	movs	r2, #1
 8002a20:	409a      	lsls	r2, r3
 8002a22:	0013      	movs	r3, r2
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	4a98      	ldr	r2, [pc, #608]	; (8002c8c <HAL_GPIO_EXTI_Rising_Callback+0x2f0>)
 8002a2c:	7812      	ldrb	r2, [r2, #0]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	4b96      	ldr	r3, [pc, #600]	; (8002c8c <HAL_GPIO_EXTI_Rising_Callback+0x2f0>)
 8002a34:	701a      	strb	r2, [r3, #0]
      bitIndexA++;
 8002a36:	4b96      	ldr	r3, [pc, #600]	; (8002c90 <HAL_GPIO_EXTI_Rising_Callback+0x2f4>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	4b94      	ldr	r3, [pc, #592]	; (8002c90 <HAL_GPIO_EXTI_Rising_Callback+0x2f4>)
 8002a40:	701a      	strb	r2, [r3, #0]
    }
    if(bitIndexA == 8)
 8002a42:	4b93      	ldr	r3, [pc, #588]	; (8002c90 <HAL_GPIO_EXTI_Rising_Callback+0x2f4>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d105      	bne.n	8002a56 <HAL_GPIO_EXTI_Rising_Callback+0xba>
    {
//    	if(CapChannelA == 0xAA)
		  ReceivedA = 1;
 8002a4a:	4b92      	ldr	r3, [pc, #584]	; (8002c94 <HAL_GPIO_EXTI_Rising_Callback+0x2f8>)
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	701a      	strb	r2, [r3, #0]
    	 bitIndexA = 0;
 8002a50:	4b8f      	ldr	r3, [pc, #572]	; (8002c90 <HAL_GPIO_EXTI_Rising_Callback+0x2f4>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	701a      	strb	r2, [r3, #0]
//      i = 0;
    }
//	if( j == 32)
//		j = 0;
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 8002a56:	4b8c      	ldr	r3, [pc, #560]	; (8002c88 <HAL_GPIO_EXTI_Rising_Callback+0x2ec>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	625a      	str	r2, [r3, #36]	; 0x24
  }

  if(GPIO_Pin == GPIO_PIN_1)
 8002a5e:	1dbb      	adds	r3, r7, #6
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d156      	bne.n	8002b14 <HAL_GPIO_EXTI_Rising_Callback+0x178>
  {
//	Readbuff[j++] = __HAL_TIM_GET_COUNTER(&htim14);
	if (__HAL_TIM_GET_COUNTER(&htim14) > 8000)
 8002a66:	4b8c      	ldr	r3, [pc, #560]	; (8002c98 <HAL_GPIO_EXTI_Rising_Callback+0x2fc>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a6c:	23fa      	movs	r3, #250	; 0xfa
 8002a6e:	015b      	lsls	r3, r3, #5
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d906      	bls.n	8002a82 <HAL_GPIO_EXTI_Rising_Callback+0xe6>
	{
	CapChannelB = 0;
 8002a74:	4b89      	ldr	r3, [pc, #548]	; (8002c9c <HAL_GPIO_EXTI_Rising_Callback+0x300>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	701a      	strb	r2, [r3, #0]
	bitIndexB = 0;
 8002a7a:	4b89      	ldr	r3, [pc, #548]	; (8002ca0 <HAL_GPIO_EXTI_Rising_Callback+0x304>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
 8002a80:	e03a      	b.n	8002af8 <HAL_GPIO_EXTI_Rising_Callback+0x15c>
	}
	else if (__HAL_TIM_GET_COUNTER(&htim14) > 2000)
 8002a82:	4b85      	ldr	r3, [pc, #532]	; (8002c98 <HAL_GPIO_EXTI_Rising_Callback+0x2fc>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a88:	23fa      	movs	r3, #250	; 0xfa
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d915      	bls.n	8002abc <HAL_GPIO_EXTI_Rising_Callback+0x120>
	{
	CapChannelB |= (1UL << (7-bitIndexB));   // write 1
 8002a90:	4b83      	ldr	r3, [pc, #524]	; (8002ca0 <HAL_GPIO_EXTI_Rising_Callback+0x304>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	001a      	movs	r2, r3
 8002a96:	2307      	movs	r3, #7
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	409a      	lsls	r2, r3
 8002a9e:	0013      	movs	r3, r2
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	4b7e      	ldr	r3, [pc, #504]	; (8002c9c <HAL_GPIO_EXTI_Rising_Callback+0x300>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	4b7c      	ldr	r3, [pc, #496]	; (8002c9c <HAL_GPIO_EXTI_Rising_Callback+0x300>)
 8002aac:	701a      	strb	r2, [r3, #0]
	bitIndexB++;
 8002aae:	4b7c      	ldr	r3, [pc, #496]	; (8002ca0 <HAL_GPIO_EXTI_Rising_Callback+0x304>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	4b7a      	ldr	r3, [pc, #488]	; (8002ca0 <HAL_GPIO_EXTI_Rising_Callback+0x304>)
 8002ab8:	701a      	strb	r2, [r3, #0]
 8002aba:	e01d      	b.n	8002af8 <HAL_GPIO_EXTI_Rising_Callback+0x15c>
	}
	else if (__HAL_TIM_GET_COUNTER(&htim14) > 1000)
 8002abc:	4b76      	ldr	r3, [pc, #472]	; (8002c98 <HAL_GPIO_EXTI_Rising_Callback+0x2fc>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ac2:	23fa      	movs	r3, #250	; 0xfa
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d916      	bls.n	8002af8 <HAL_GPIO_EXTI_Rising_Callback+0x15c>
	{
	CapChannelB &= ~(1UL << (7-bitIndexB));  // write 0
 8002aca:	4b75      	ldr	r3, [pc, #468]	; (8002ca0 <HAL_GPIO_EXTI_Rising_Callback+0x304>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	001a      	movs	r2, r3
 8002ad0:	2307      	movs	r3, #7
 8002ad2:	1a9b      	subs	r3, r3, r2
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	0013      	movs	r3, r2
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	4a6e      	ldr	r2, [pc, #440]	; (8002c9c <HAL_GPIO_EXTI_Rising_Callback+0x300>)
 8002ae2:	7812      	ldrb	r2, [r2, #0]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	4b6c      	ldr	r3, [pc, #432]	; (8002c9c <HAL_GPIO_EXTI_Rising_Callback+0x300>)
 8002aea:	701a      	strb	r2, [r3, #0]
	bitIndexB++;
 8002aec:	4b6c      	ldr	r3, [pc, #432]	; (8002ca0 <HAL_GPIO_EXTI_Rising_Callback+0x304>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	3301      	adds	r3, #1
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	4b6a      	ldr	r3, [pc, #424]	; (8002ca0 <HAL_GPIO_EXTI_Rising_Callback+0x304>)
 8002af6:	701a      	strb	r2, [r3, #0]
	}
	if(bitIndexB == 8)
 8002af8:	4b69      	ldr	r3, [pc, #420]	; (8002ca0 <HAL_GPIO_EXTI_Rising_Callback+0x304>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d105      	bne.n	8002b0c <HAL_GPIO_EXTI_Rising_Callback+0x170>
	{
//	if(CapChannelB == 0xAA)
	  ReceivedB = 1;
 8002b00:	4b68      	ldr	r3, [pc, #416]	; (8002ca4 <HAL_GPIO_EXTI_Rising_Callback+0x308>)
 8002b02:	2201      	movs	r2, #1
 8002b04:	701a      	strb	r2, [r3, #0]
	  bitIndexB = 0;
 8002b06:	4b66      	ldr	r3, [pc, #408]	; (8002ca0 <HAL_GPIO_EXTI_Rising_Callback+0x304>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]

	}
//	if( j == 32)
//		j = 0;
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8002b0c:	4b62      	ldr	r3, [pc, #392]	; (8002c98 <HAL_GPIO_EXTI_Rising_Callback+0x2fc>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2200      	movs	r2, #0
 8002b12:	625a      	str	r2, [r3, #36]	; 0x24
  }
  if(GPIO_Pin == GPIO_PIN_2)
 8002b14:	1dbb      	adds	r3, r7, #6
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d156      	bne.n	8002bca <HAL_GPIO_EXTI_Rising_Callback+0x22e>
  {
//	Readbuff[j++] = __HAL_TIM_GET_COUNTER(&htim14);
	if (__HAL_TIM_GET_COUNTER(&htim16) > 8000)
 8002b1c:	4b62      	ldr	r3, [pc, #392]	; (8002ca8 <HAL_GPIO_EXTI_Rising_Callback+0x30c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b22:	23fa      	movs	r3, #250	; 0xfa
 8002b24:	015b      	lsls	r3, r3, #5
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d906      	bls.n	8002b38 <HAL_GPIO_EXTI_Rising_Callback+0x19c>
	{
	CapChannelC = 0;
 8002b2a:	4b60      	ldr	r3, [pc, #384]	; (8002cac <HAL_GPIO_EXTI_Rising_Callback+0x310>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	701a      	strb	r2, [r3, #0]
	bitIndexC = 0;
 8002b30:	4b5f      	ldr	r3, [pc, #380]	; (8002cb0 <HAL_GPIO_EXTI_Rising_Callback+0x314>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	701a      	strb	r2, [r3, #0]
 8002b36:	e03a      	b.n	8002bae <HAL_GPIO_EXTI_Rising_Callback+0x212>
	}
	else if (__HAL_TIM_GET_COUNTER(&htim16) > 2000)
 8002b38:	4b5b      	ldr	r3, [pc, #364]	; (8002ca8 <HAL_GPIO_EXTI_Rising_Callback+0x30c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b3e:	23fa      	movs	r3, #250	; 0xfa
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d915      	bls.n	8002b72 <HAL_GPIO_EXTI_Rising_Callback+0x1d6>
	{
	CapChannelC |= (1UL << (7-bitIndexC));   // write 1
 8002b46:	4b5a      	ldr	r3, [pc, #360]	; (8002cb0 <HAL_GPIO_EXTI_Rising_Callback+0x314>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	001a      	movs	r2, r3
 8002b4c:	2307      	movs	r3, #7
 8002b4e:	1a9b      	subs	r3, r3, r2
 8002b50:	2201      	movs	r2, #1
 8002b52:	409a      	lsls	r2, r3
 8002b54:	0013      	movs	r3, r2
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	4b54      	ldr	r3, [pc, #336]	; (8002cac <HAL_GPIO_EXTI_Rising_Callback+0x310>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	4b52      	ldr	r3, [pc, #328]	; (8002cac <HAL_GPIO_EXTI_Rising_Callback+0x310>)
 8002b62:	701a      	strb	r2, [r3, #0]
	bitIndexC++;
 8002b64:	4b52      	ldr	r3, [pc, #328]	; (8002cb0 <HAL_GPIO_EXTI_Rising_Callback+0x314>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	4b50      	ldr	r3, [pc, #320]	; (8002cb0 <HAL_GPIO_EXTI_Rising_Callback+0x314>)
 8002b6e:	701a      	strb	r2, [r3, #0]
 8002b70:	e01d      	b.n	8002bae <HAL_GPIO_EXTI_Rising_Callback+0x212>
	}
	else if (__HAL_TIM_GET_COUNTER(&htim16) > 1000)
 8002b72:	4b4d      	ldr	r3, [pc, #308]	; (8002ca8 <HAL_GPIO_EXTI_Rising_Callback+0x30c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b78:	23fa      	movs	r3, #250	; 0xfa
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d916      	bls.n	8002bae <HAL_GPIO_EXTI_Rising_Callback+0x212>
	{
	CapChannelC &= ~(1UL << (7-bitIndexC));  // write 0
 8002b80:	4b4b      	ldr	r3, [pc, #300]	; (8002cb0 <HAL_GPIO_EXTI_Rising_Callback+0x314>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	001a      	movs	r2, r3
 8002b86:	2307      	movs	r3, #7
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	409a      	lsls	r2, r3
 8002b8e:	0013      	movs	r3, r2
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	43db      	mvns	r3, r3
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	4a45      	ldr	r2, [pc, #276]	; (8002cac <HAL_GPIO_EXTI_Rising_Callback+0x310>)
 8002b98:	7812      	ldrb	r2, [r2, #0]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	4b43      	ldr	r3, [pc, #268]	; (8002cac <HAL_GPIO_EXTI_Rising_Callback+0x310>)
 8002ba0:	701a      	strb	r2, [r3, #0]
	bitIndexC++;
 8002ba2:	4b43      	ldr	r3, [pc, #268]	; (8002cb0 <HAL_GPIO_EXTI_Rising_Callback+0x314>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	4b41      	ldr	r3, [pc, #260]	; (8002cb0 <HAL_GPIO_EXTI_Rising_Callback+0x314>)
 8002bac:	701a      	strb	r2, [r3, #0]
	}
	if(bitIndexC == 8)
 8002bae:	4b40      	ldr	r3, [pc, #256]	; (8002cb0 <HAL_GPIO_EXTI_Rising_Callback+0x314>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d105      	bne.n	8002bc2 <HAL_GPIO_EXTI_Rising_Callback+0x226>
	{
//	if(CapChannelB == 0xAA)
		ReceivedC = 1;
 8002bb6:	4b3f      	ldr	r3, [pc, #252]	; (8002cb4 <HAL_GPIO_EXTI_Rising_Callback+0x318>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	701a      	strb	r2, [r3, #0]
		bitIndexC = 0;
 8002bbc:	4b3c      	ldr	r3, [pc, #240]	; (8002cb0 <HAL_GPIO_EXTI_Rising_Callback+0x314>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	701a      	strb	r2, [r3, #0]

	}
//	if( j == 32)
//		j = 0;
	__HAL_TIM_SET_COUNTER(&htim16, 0);
 8002bc2:	4b39      	ldr	r3, [pc, #228]	; (8002ca8 <HAL_GPIO_EXTI_Rising_Callback+0x30c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	625a      	str	r2, [r3, #36]	; 0x24
  }
  if(GPIO_Pin == GPIO_PIN_3)
 8002bca:	1dbb      	adds	r3, r7, #6
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	2b08      	cmp	r3, #8
 8002bd0:	d156      	bne.n	8002c80 <HAL_GPIO_EXTI_Rising_Callback+0x2e4>
  {
//	Readbuff[j++] = __HAL_TIM_GET_COUNTER(&htim14);
	if (__HAL_TIM_GET_COUNTER(&htim17) > 8000)
 8002bd2:	4b39      	ldr	r3, [pc, #228]	; (8002cb8 <HAL_GPIO_EXTI_Rising_Callback+0x31c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bd8:	23fa      	movs	r3, #250	; 0xfa
 8002bda:	015b      	lsls	r3, r3, #5
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d906      	bls.n	8002bee <HAL_GPIO_EXTI_Rising_Callback+0x252>
	{
	CapChannelD = 0;
 8002be0:	4b36      	ldr	r3, [pc, #216]	; (8002cbc <HAL_GPIO_EXTI_Rising_Callback+0x320>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	701a      	strb	r2, [r3, #0]
	bitIndexD = 0;
 8002be6:	4b36      	ldr	r3, [pc, #216]	; (8002cc0 <HAL_GPIO_EXTI_Rising_Callback+0x324>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
 8002bec:	e03a      	b.n	8002c64 <HAL_GPIO_EXTI_Rising_Callback+0x2c8>
	}
	else if (__HAL_TIM_GET_COUNTER(&htim17) > 2000)
 8002bee:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <HAL_GPIO_EXTI_Rising_Callback+0x31c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bf4:	23fa      	movs	r3, #250	; 0xfa
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d915      	bls.n	8002c28 <HAL_GPIO_EXTI_Rising_Callback+0x28c>
	{
	CapChannelD |= (1UL << (7-bitIndexD));   // write 1
 8002bfc:	4b30      	ldr	r3, [pc, #192]	; (8002cc0 <HAL_GPIO_EXTI_Rising_Callback+0x324>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	001a      	movs	r2, r3
 8002c02:	2307      	movs	r3, #7
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	2201      	movs	r2, #1
 8002c08:	409a      	lsls	r2, r3
 8002c0a:	0013      	movs	r3, r2
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	4b2b      	ldr	r3, [pc, #172]	; (8002cbc <HAL_GPIO_EXTI_Rising_Callback+0x320>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	4b29      	ldr	r3, [pc, #164]	; (8002cbc <HAL_GPIO_EXTI_Rising_Callback+0x320>)
 8002c18:	701a      	strb	r2, [r3, #0]
	bitIndexD++;
 8002c1a:	4b29      	ldr	r3, [pc, #164]	; (8002cc0 <HAL_GPIO_EXTI_Rising_Callback+0x324>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	4b27      	ldr	r3, [pc, #156]	; (8002cc0 <HAL_GPIO_EXTI_Rising_Callback+0x324>)
 8002c24:	701a      	strb	r2, [r3, #0]
 8002c26:	e01d      	b.n	8002c64 <HAL_GPIO_EXTI_Rising_Callback+0x2c8>
	}
	else if (__HAL_TIM_GET_COUNTER(&htim17) > 1000)
 8002c28:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <HAL_GPIO_EXTI_Rising_Callback+0x31c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c2e:	23fa      	movs	r3, #250	; 0xfa
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d916      	bls.n	8002c64 <HAL_GPIO_EXTI_Rising_Callback+0x2c8>
	{
	CapChannelD &= ~(1UL << (7-bitIndexD));  // write 0
 8002c36:	4b22      	ldr	r3, [pc, #136]	; (8002cc0 <HAL_GPIO_EXTI_Rising_Callback+0x324>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	001a      	movs	r2, r3
 8002c3c:	2307      	movs	r3, #7
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	2201      	movs	r2, #1
 8002c42:	409a      	lsls	r2, r3
 8002c44:	0013      	movs	r3, r2
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	4a1b      	ldr	r2, [pc, #108]	; (8002cbc <HAL_GPIO_EXTI_Rising_Callback+0x320>)
 8002c4e:	7812      	ldrb	r2, [r2, #0]
 8002c50:	4013      	ands	r3, r2
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <HAL_GPIO_EXTI_Rising_Callback+0x320>)
 8002c56:	701a      	strb	r2, [r3, #0]
	bitIndexD++;
 8002c58:	4b19      	ldr	r3, [pc, #100]	; (8002cc0 <HAL_GPIO_EXTI_Rising_Callback+0x324>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	4b17      	ldr	r3, [pc, #92]	; (8002cc0 <HAL_GPIO_EXTI_Rising_Callback+0x324>)
 8002c62:	701a      	strb	r2, [r3, #0]
	}
	if(bitIndexD == 8)
 8002c64:	4b16      	ldr	r3, [pc, #88]	; (8002cc0 <HAL_GPIO_EXTI_Rising_Callback+0x324>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d105      	bne.n	8002c78 <HAL_GPIO_EXTI_Rising_Callback+0x2dc>
	{
//	if(CapChannelB == 0xAA)
	  ReceivedD = 1;
 8002c6c:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <HAL_GPIO_EXTI_Rising_Callback+0x328>)
 8002c6e:	2201      	movs	r2, #1
 8002c70:	701a      	strb	r2, [r3, #0]
	  bitIndexD = 0;
 8002c72:	4b13      	ldr	r3, [pc, #76]	; (8002cc0 <HAL_GPIO_EXTI_Rising_Callback+0x324>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]

	}
//	if( j == 32)
//		j = 0;
	__HAL_TIM_SET_COUNTER(&htim17, 0);
 8002c78:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <HAL_GPIO_EXTI_Rising_Callback+0x31c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24
  }

}
 8002c80:	46c0      	nop			; (mov r8, r8)
 8002c82:	46bd      	mov	sp, r7
 8002c84:	b002      	add	sp, #8
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	200002ac 	.word	0x200002ac
 8002c8c:	20000251 	.word	0x20000251
 8002c90:	2000024d 	.word	0x2000024d
 8002c94:	20000255 	.word	0x20000255
 8002c98:	20000344 	.word	0x20000344
 8002c9c:	20000252 	.word	0x20000252
 8002ca0:	2000024e 	.word	0x2000024e
 8002ca4:	20000256 	.word	0x20000256
 8002ca8:	20000390 	.word	0x20000390
 8002cac:	20000253 	.word	0x20000253
 8002cb0:	2000024f 	.word	0x2000024f
 8002cb4:	20000257 	.word	0x20000257
 8002cb8:	200003dc 	.word	0x200003dc
 8002cbc:	20000254 	.word	0x20000254
 8002cc0:	20000250 	.word	0x20000250
 8002cc4:	20000258 	.word	0x20000258

08002cc8 <SlotCheck>:



void SlotCheck(uint32_t channel)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
//uint8_t i = 0,SuccessA = 0,SuccessB = 0;
	sendNEC(0xAA,8,channel);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	001a      	movs	r2, r3
 8002cd4:	2108      	movs	r1, #8
 8002cd6:	20aa      	movs	r0, #170	; 0xaa
 8002cd8:	f000 f93e 	bl	8002f58 <sendNEC>
	delay(10);
 8002cdc:	200a      	movs	r0, #10
 8002cde:	f000 fa9e 	bl	800321e <delay>
	switch(channel)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b0c      	cmp	r3, #12
 8002ce6:	d100      	bne.n	8002cea <SlotCheck+0x22>
 8002ce8:	e0c9      	b.n	8002e7e <SlotCheck+0x1b6>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b0c      	cmp	r3, #12
 8002cee:	d900      	bls.n	8002cf2 <SlotCheck+0x2a>
 8002cf0:	e0f4      	b.n	8002edc <SlotCheck+0x214>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d100      	bne.n	8002cfa <SlotCheck+0x32>
 8002cf8:	e084      	b.n	8002e04 <SlotCheck+0x13c>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d900      	bls.n	8002d02 <SlotCheck+0x3a>
 8002d00:	e0ec      	b.n	8002edc <SlotCheck+0x214>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d003      	beq.n	8002d10 <SlotCheck+0x48>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d03d      	beq.n	8002d8a <SlotCheck+0xc2>
							Slot.Slot_12 = 0;
						else
							Slot.Slot_12 = 1;
						break;
		default:
						break;
 8002d0e:	e0e5      	b.n	8002edc <SlotCheck+0x214>
						if(ReceivedA)
 8002d10:	4b83      	ldr	r3, [pc, #524]	; (8002f20 <SlotCheck+0x258>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <SlotCheck+0x5c>
							Slot.Slot_1 = 0;
 8002d18:	4b82      	ldr	r3, [pc, #520]	; (8002f24 <SlotCheck+0x25c>)
 8002d1a:	781a      	ldrb	r2, [r3, #0]
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	438a      	bics	r2, r1
 8002d20:	701a      	strb	r2, [r3, #0]
 8002d22:	e004      	b.n	8002d2e <SlotCheck+0x66>
							Slot.Slot_1 = 1;
 8002d24:	4b7f      	ldr	r3, [pc, #508]	; (8002f24 <SlotCheck+0x25c>)
 8002d26:	781a      	ldrb	r2, [r3, #0]
 8002d28:	2101      	movs	r1, #1
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	701a      	strb	r2, [r3, #0]
						if(ReceivedB)
 8002d2e:	4b7e      	ldr	r3, [pc, #504]	; (8002f28 <SlotCheck+0x260>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d005      	beq.n	8002d42 <SlotCheck+0x7a>
							Slot.Slot_5 = 0;
 8002d36:	4b7b      	ldr	r3, [pc, #492]	; (8002f24 <SlotCheck+0x25c>)
 8002d38:	781a      	ldrb	r2, [r3, #0]
 8002d3a:	2110      	movs	r1, #16
 8002d3c:	438a      	bics	r2, r1
 8002d3e:	701a      	strb	r2, [r3, #0]
 8002d40:	e004      	b.n	8002d4c <SlotCheck+0x84>
							Slot.Slot_5 = 1;
 8002d42:	4b78      	ldr	r3, [pc, #480]	; (8002f24 <SlotCheck+0x25c>)
 8002d44:	781a      	ldrb	r2, [r3, #0]
 8002d46:	2110      	movs	r1, #16
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	701a      	strb	r2, [r3, #0]
						if(ReceivedC)
 8002d4c:	4b77      	ldr	r3, [pc, #476]	; (8002f2c <SlotCheck+0x264>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <SlotCheck+0x98>
							Slot.Slot_9 = 0;
 8002d54:	4b73      	ldr	r3, [pc, #460]	; (8002f24 <SlotCheck+0x25c>)
 8002d56:	785a      	ldrb	r2, [r3, #1]
 8002d58:	2101      	movs	r1, #1
 8002d5a:	438a      	bics	r2, r1
 8002d5c:	705a      	strb	r2, [r3, #1]
 8002d5e:	e004      	b.n	8002d6a <SlotCheck+0xa2>
							Slot.Slot_9 = 1;
 8002d60:	4b70      	ldr	r3, [pc, #448]	; (8002f24 <SlotCheck+0x25c>)
 8002d62:	785a      	ldrb	r2, [r3, #1]
 8002d64:	2101      	movs	r1, #1
 8002d66:	430a      	orrs	r2, r1
 8002d68:	705a      	strb	r2, [r3, #1]
						if(ReceivedD)
 8002d6a:	4b71      	ldr	r3, [pc, #452]	; (8002f30 <SlotCheck+0x268>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <SlotCheck+0xb6>
							Slot.Slot_13 = 0;
 8002d72:	4b6c      	ldr	r3, [pc, #432]	; (8002f24 <SlotCheck+0x25c>)
 8002d74:	785a      	ldrb	r2, [r3, #1]
 8002d76:	2110      	movs	r1, #16
 8002d78:	438a      	bics	r2, r1
 8002d7a:	705a      	strb	r2, [r3, #1]
						break;
 8002d7c:	e0af      	b.n	8002ede <SlotCheck+0x216>
							Slot.Slot_13 = 1;
 8002d7e:	4b69      	ldr	r3, [pc, #420]	; (8002f24 <SlotCheck+0x25c>)
 8002d80:	785a      	ldrb	r2, [r3, #1]
 8002d82:	2110      	movs	r1, #16
 8002d84:	430a      	orrs	r2, r1
 8002d86:	705a      	strb	r2, [r3, #1]
						break;
 8002d88:	e0a9      	b.n	8002ede <SlotCheck+0x216>
						if(ReceivedA)
 8002d8a:	4b65      	ldr	r3, [pc, #404]	; (8002f20 <SlotCheck+0x258>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d005      	beq.n	8002d9e <SlotCheck+0xd6>
							Slot.Slot_2 = 0;
 8002d92:	4b64      	ldr	r3, [pc, #400]	; (8002f24 <SlotCheck+0x25c>)
 8002d94:	781a      	ldrb	r2, [r3, #0]
 8002d96:	2102      	movs	r1, #2
 8002d98:	438a      	bics	r2, r1
 8002d9a:	701a      	strb	r2, [r3, #0]
 8002d9c:	e004      	b.n	8002da8 <SlotCheck+0xe0>
							Slot.Slot_2 = 1;
 8002d9e:	4b61      	ldr	r3, [pc, #388]	; (8002f24 <SlotCheck+0x25c>)
 8002da0:	781a      	ldrb	r2, [r3, #0]
 8002da2:	2102      	movs	r1, #2
 8002da4:	430a      	orrs	r2, r1
 8002da6:	701a      	strb	r2, [r3, #0]
						if(ReceivedB)
 8002da8:	4b5f      	ldr	r3, [pc, #380]	; (8002f28 <SlotCheck+0x260>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <SlotCheck+0xf4>
							Slot.Slot_6 = 0;
 8002db0:	4b5c      	ldr	r3, [pc, #368]	; (8002f24 <SlotCheck+0x25c>)
 8002db2:	781a      	ldrb	r2, [r3, #0]
 8002db4:	2120      	movs	r1, #32
 8002db6:	438a      	bics	r2, r1
 8002db8:	701a      	strb	r2, [r3, #0]
 8002dba:	e004      	b.n	8002dc6 <SlotCheck+0xfe>
							Slot.Slot_6 = 1;
 8002dbc:	4b59      	ldr	r3, [pc, #356]	; (8002f24 <SlotCheck+0x25c>)
 8002dbe:	781a      	ldrb	r2, [r3, #0]
 8002dc0:	2120      	movs	r1, #32
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	701a      	strb	r2, [r3, #0]
						if(ReceivedC)
 8002dc6:	4b59      	ldr	r3, [pc, #356]	; (8002f2c <SlotCheck+0x264>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d005      	beq.n	8002dda <SlotCheck+0x112>
							Slot.Slot_10 = 0;
 8002dce:	4b55      	ldr	r3, [pc, #340]	; (8002f24 <SlotCheck+0x25c>)
 8002dd0:	785a      	ldrb	r2, [r3, #1]
 8002dd2:	2102      	movs	r1, #2
 8002dd4:	438a      	bics	r2, r1
 8002dd6:	705a      	strb	r2, [r3, #1]
 8002dd8:	e004      	b.n	8002de4 <SlotCheck+0x11c>
							Slot.Slot_10 = 1;
 8002dda:	4b52      	ldr	r3, [pc, #328]	; (8002f24 <SlotCheck+0x25c>)
 8002ddc:	785a      	ldrb	r2, [r3, #1]
 8002dde:	2102      	movs	r1, #2
 8002de0:	430a      	orrs	r2, r1
 8002de2:	705a      	strb	r2, [r3, #1]
						if(ReceivedD)
 8002de4:	4b52      	ldr	r3, [pc, #328]	; (8002f30 <SlotCheck+0x268>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d005      	beq.n	8002df8 <SlotCheck+0x130>
							Slot.Slot_14 = 0;
 8002dec:	4b4d      	ldr	r3, [pc, #308]	; (8002f24 <SlotCheck+0x25c>)
 8002dee:	785a      	ldrb	r2, [r3, #1]
 8002df0:	2120      	movs	r1, #32
 8002df2:	438a      	bics	r2, r1
 8002df4:	705a      	strb	r2, [r3, #1]
						break;
 8002df6:	e072      	b.n	8002ede <SlotCheck+0x216>
							Slot.Slot_14 = 1;
 8002df8:	4b4a      	ldr	r3, [pc, #296]	; (8002f24 <SlotCheck+0x25c>)
 8002dfa:	785a      	ldrb	r2, [r3, #1]
 8002dfc:	2120      	movs	r1, #32
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	705a      	strb	r2, [r3, #1]
						break;
 8002e02:	e06c      	b.n	8002ede <SlotCheck+0x216>
						if(ReceivedA)
 8002e04:	4b46      	ldr	r3, [pc, #280]	; (8002f20 <SlotCheck+0x258>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <SlotCheck+0x150>
							Slot.Slot_3 = 0;
 8002e0c:	4b45      	ldr	r3, [pc, #276]	; (8002f24 <SlotCheck+0x25c>)
 8002e0e:	781a      	ldrb	r2, [r3, #0]
 8002e10:	2104      	movs	r1, #4
 8002e12:	438a      	bics	r2, r1
 8002e14:	701a      	strb	r2, [r3, #0]
 8002e16:	e004      	b.n	8002e22 <SlotCheck+0x15a>
							Slot.Slot_3 = 1;
 8002e18:	4b42      	ldr	r3, [pc, #264]	; (8002f24 <SlotCheck+0x25c>)
 8002e1a:	781a      	ldrb	r2, [r3, #0]
 8002e1c:	2104      	movs	r1, #4
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	701a      	strb	r2, [r3, #0]
						if(ReceivedB)
 8002e22:	4b41      	ldr	r3, [pc, #260]	; (8002f28 <SlotCheck+0x260>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d005      	beq.n	8002e36 <SlotCheck+0x16e>
							Slot.Slot_7 = 0;
 8002e2a:	4b3e      	ldr	r3, [pc, #248]	; (8002f24 <SlotCheck+0x25c>)
 8002e2c:	781a      	ldrb	r2, [r3, #0]
 8002e2e:	2140      	movs	r1, #64	; 0x40
 8002e30:	438a      	bics	r2, r1
 8002e32:	701a      	strb	r2, [r3, #0]
 8002e34:	e004      	b.n	8002e40 <SlotCheck+0x178>
							Slot.Slot_7 = 1;
 8002e36:	4b3b      	ldr	r3, [pc, #236]	; (8002f24 <SlotCheck+0x25c>)
 8002e38:	781a      	ldrb	r2, [r3, #0]
 8002e3a:	2140      	movs	r1, #64	; 0x40
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	701a      	strb	r2, [r3, #0]
						if(ReceivedC)
 8002e40:	4b3a      	ldr	r3, [pc, #232]	; (8002f2c <SlotCheck+0x264>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d005      	beq.n	8002e54 <SlotCheck+0x18c>
							Slot.Slot_11 = 0;
 8002e48:	4b36      	ldr	r3, [pc, #216]	; (8002f24 <SlotCheck+0x25c>)
 8002e4a:	785a      	ldrb	r2, [r3, #1]
 8002e4c:	2104      	movs	r1, #4
 8002e4e:	438a      	bics	r2, r1
 8002e50:	705a      	strb	r2, [r3, #1]
 8002e52:	e004      	b.n	8002e5e <SlotCheck+0x196>
							Slot.Slot_11 = 1;
 8002e54:	4b33      	ldr	r3, [pc, #204]	; (8002f24 <SlotCheck+0x25c>)
 8002e56:	785a      	ldrb	r2, [r3, #1]
 8002e58:	2104      	movs	r1, #4
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	705a      	strb	r2, [r3, #1]
						if(ReceivedD)
 8002e5e:	4b34      	ldr	r3, [pc, #208]	; (8002f30 <SlotCheck+0x268>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d005      	beq.n	8002e72 <SlotCheck+0x1aa>
							Slot.Slot_15 = 0;
 8002e66:	4b2f      	ldr	r3, [pc, #188]	; (8002f24 <SlotCheck+0x25c>)
 8002e68:	785a      	ldrb	r2, [r3, #1]
 8002e6a:	2140      	movs	r1, #64	; 0x40
 8002e6c:	438a      	bics	r2, r1
 8002e6e:	705a      	strb	r2, [r3, #1]
						break;
 8002e70:	e035      	b.n	8002ede <SlotCheck+0x216>
							Slot.Slot_15 = 1;
 8002e72:	4b2c      	ldr	r3, [pc, #176]	; (8002f24 <SlotCheck+0x25c>)
 8002e74:	785a      	ldrb	r2, [r3, #1]
 8002e76:	2140      	movs	r1, #64	; 0x40
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	705a      	strb	r2, [r3, #1]
						break;
 8002e7c:	e02f      	b.n	8002ede <SlotCheck+0x216>
						if(ReceivedA)
 8002e7e:	4b28      	ldr	r3, [pc, #160]	; (8002f20 <SlotCheck+0x258>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d005      	beq.n	8002e92 <SlotCheck+0x1ca>
							Slot.Slot_4 = 0;
 8002e86:	4b27      	ldr	r3, [pc, #156]	; (8002f24 <SlotCheck+0x25c>)
 8002e88:	781a      	ldrb	r2, [r3, #0]
 8002e8a:	2108      	movs	r1, #8
 8002e8c:	438a      	bics	r2, r1
 8002e8e:	701a      	strb	r2, [r3, #0]
 8002e90:	e004      	b.n	8002e9c <SlotCheck+0x1d4>
							Slot.Slot_4 = 1;
 8002e92:	4b24      	ldr	r3, [pc, #144]	; (8002f24 <SlotCheck+0x25c>)
 8002e94:	781a      	ldrb	r2, [r3, #0]
 8002e96:	2108      	movs	r1, #8
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	701a      	strb	r2, [r3, #0]
						if(ReceivedB)
 8002e9c:	4b22      	ldr	r3, [pc, #136]	; (8002f28 <SlotCheck+0x260>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <SlotCheck+0x1e8>
							Slot.Slot_8 = 0;
 8002ea4:	4b1f      	ldr	r3, [pc, #124]	; (8002f24 <SlotCheck+0x25c>)
 8002ea6:	781a      	ldrb	r2, [r3, #0]
 8002ea8:	217f      	movs	r1, #127	; 0x7f
 8002eaa:	400a      	ands	r2, r1
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	e005      	b.n	8002ebc <SlotCheck+0x1f4>
							Slot.Slot_8 = 1;
 8002eb0:	4b1c      	ldr	r3, [pc, #112]	; (8002f24 <SlotCheck+0x25c>)
 8002eb2:	781a      	ldrb	r2, [r3, #0]
 8002eb4:	2180      	movs	r1, #128	; 0x80
 8002eb6:	4249      	negs	r1, r1
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	701a      	strb	r2, [r3, #0]
						if(ReceivedC)
 8002ebc:	4b1b      	ldr	r3, [pc, #108]	; (8002f2c <SlotCheck+0x264>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <SlotCheck+0x208>
							Slot.Slot_12 = 0;
 8002ec4:	4b17      	ldr	r3, [pc, #92]	; (8002f24 <SlotCheck+0x25c>)
 8002ec6:	785a      	ldrb	r2, [r3, #1]
 8002ec8:	2108      	movs	r1, #8
 8002eca:	438a      	bics	r2, r1
 8002ecc:	705a      	strb	r2, [r3, #1]
						break;
 8002ece:	e006      	b.n	8002ede <SlotCheck+0x216>
							Slot.Slot_12 = 1;
 8002ed0:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <SlotCheck+0x25c>)
 8002ed2:	785a      	ldrb	r2, [r3, #1]
 8002ed4:	2108      	movs	r1, #8
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	705a      	strb	r2, [r3, #1]
						break;
 8002eda:	e000      	b.n	8002ede <SlotCheck+0x216>
						break;
 8002edc:	46c0      	nop			; (mov r8, r8)

	}

	if(ReceivedA)
 8002ede:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <SlotCheck+0x258>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <SlotCheck+0x224>
		ReceivedA = 0;
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <SlotCheck+0x258>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	701a      	strb	r2, [r3, #0]
	if(ReceivedB)
 8002eec:	4b0e      	ldr	r3, [pc, #56]	; (8002f28 <SlotCheck+0x260>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <SlotCheck+0x232>
		ReceivedB = 0;
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <SlotCheck+0x260>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	701a      	strb	r2, [r3, #0]
	if(ReceivedC)
 8002efa:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <SlotCheck+0x264>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d002      	beq.n	8002f08 <SlotCheck+0x240>
		ReceivedC = 0;
 8002f02:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <SlotCheck+0x264>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	701a      	strb	r2, [r3, #0]
	if(ReceivedD)
 8002f08:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <SlotCheck+0x268>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <SlotCheck+0x24e>
		ReceivedD = 0;
 8002f10:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <SlotCheck+0x268>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	701a      	strb	r2, [r3, #0]
}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b002      	add	sp, #8
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	20000255 	.word	0x20000255
 8002f24:	2000025c 	.word	0x2000025c
 8002f28:	20000256 	.word	0x20000256
 8002f2c:	20000257 	.word	0x20000257
 8002f30:	20000258 	.word	0x20000258

08002f34 <SlotDataChek>:

void SlotDataChek(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
//	}
//	HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
//	HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
//	HAL_NVIC_DisableIRQ(EXTI0_1_IRQn);
//	HAL_NVIC_DisableIRQ(EXTI2_3_IRQn);
	SlotCheck(TIM_CHANNEL_1);
 8002f38:	2000      	movs	r0, #0
 8002f3a:	f7ff fec5 	bl	8002cc8 <SlotCheck>
	SlotCheck(TIM_CHANNEL_2);
 8002f3e:	2004      	movs	r0, #4
 8002f40:	f7ff fec2 	bl	8002cc8 <SlotCheck>
	SlotCheck(TIM_CHANNEL_3);
 8002f44:	2008      	movs	r0, #8
 8002f46:	f7ff febf 	bl	8002cc8 <SlotCheck>
	SlotCheck(TIM_CHANNEL_4);
 8002f4a:	200c      	movs	r0, #12
 8002f4c:	f7ff febc 	bl	8002cc8 <SlotCheck>
}
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <sendNEC>:
#define NEC_ONE_SPACE   1690
#define NEC_ZERO_SPACE   560
#define NEC_RPT_SPACE   2250

void sendNEC (unsigned long data,  int nbits, uint32_t channel)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
	// Set IR carrier frequency

	// Header
	mark(NEC_HDR_MARK,channel);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a24      	ldr	r2, [pc, #144]	; (8002ff8 <sendNEC+0xa0>)
 8002f68:	0019      	movs	r1, r3
 8002f6a:	0010      	movs	r0, r2
 8002f6c:	f000 f84a 	bl	8003004 <mark>
	space(NEC_HDR_SPACE,channel);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a22      	ldr	r2, [pc, #136]	; (8002ffc <sendNEC+0xa4>)
 8002f74:	0019      	movs	r1, r3
 8002f76:	0010      	movs	r0, r2
 8002f78:	f000 f85c 	bl	8003034 <space>

	// Data
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	2201      	movs	r2, #1
 8002f82:	409a      	lsls	r2, r3
 8002f84:	0013      	movs	r3, r2
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	e022      	b.n	8002fd0 <sendNEC+0x78>
		if (data & mask) {
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d00d      	beq.n	8002fae <sendNEC+0x56>
			mark(NEC_BIT_MARK,channel);
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	238c      	movs	r3, #140	; 0x8c
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	0011      	movs	r1, r2
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f000 f832 	bl	8003004 <mark>
			space(NEC_ONE_SPACE,channel);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a17      	ldr	r2, [pc, #92]	; (8003000 <sendNEC+0xa8>)
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	0010      	movs	r0, r2
 8002fa8:	f000 f844 	bl	8003034 <space>
 8002fac:	e00d      	b.n	8002fca <sendNEC+0x72>
		} else {
			mark(NEC_BIT_MARK,channel);
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	238c      	movs	r3, #140	; 0x8c
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	0011      	movs	r1, r2
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f000 f824 	bl	8003004 <mark>
			space(NEC_ZERO_SPACE,channel);
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	238c      	movs	r3, #140	; 0x8c
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	0011      	movs	r1, r2
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f000 f835 	bl	8003034 <space>
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	085b      	lsrs	r3, r3, #1
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1d9      	bne.n	8002f8a <sendNEC+0x32>
		}
	}

	// Footer
	mark(NEC_BIT_MARK,channel);
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	238c      	movs	r3, #140	; 0x8c
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	0011      	movs	r1, r2
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f000 f810 	bl	8003004 <mark>
	space(0,channel);  // Always end with the LED off
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	0019      	movs	r1, r3
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f000 f823 	bl	8003034 <space>
}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	b006      	add	sp, #24
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	00002328 	.word	0x00002328
 8002ffc:	00001194 	.word	0x00001194
 8003000:	0000069a 	.word	0x0000069a

08003004 <mark>:

	space(0,channel);
}

void mark(unsigned int time,uint32_t channel)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(&htim1, channel);
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	4b07      	ldr	r3, [pc, #28]	; (8003030 <mark+0x2c>)
 8003012:	0011      	movs	r1, r2
 8003014:	0018      	movs	r0, r3
 8003016:	f003 f91b 	bl	8006250 <HAL_TIM_PWM_Start>
	if (time > 0) custom_delay_usec(time);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <mark+0x24>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	0018      	movs	r0, r3
 8003024:	f000 f8dc 	bl	80031e0 <custom_delay_usec>
}
 8003028:	46c0      	nop			; (mov r8, r8)
 800302a:	46bd      	mov	sp, r7
 800302c:	b002      	add	sp, #8
 800302e:	bd80      	pop	{r7, pc}
 8003030:	20000260 	.word	0x20000260

08003034 <space>:

void space(unsigned int time,uint32_t channel)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Stop(&htim1, channel);
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	4b07      	ldr	r3, [pc, #28]	; (8003060 <space+0x2c>)
 8003042:	0011      	movs	r1, r2
 8003044:	0018      	movs	r0, r3
 8003046:	f003 f9e1 	bl	800640c <HAL_TIM_PWM_Stop>
	if(time > 0) custom_delay_usec(time);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <space+0x24>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	0018      	movs	r0, r3
 8003054:	f000 f8c4 	bl	80031e0 <custom_delay_usec>
}
 8003058:	46c0      	nop			; (mov r8, r8)
 800305a:	46bd      	mov	sp, r7
 800305c:	b002      	add	sp, #8
 800305e:	bd80      	pop	{r7, pc}
 8003060:	20000260 	.word	0x20000260

08003064 <enableIROut>:

void enableIROut(uint8_t khz)
{
 8003064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003066:	b093      	sub	sp, #76	; 0x4c
 8003068:	af00      	add	r7, sp, #0
 800306a:	0002      	movs	r2, r0
 800306c:	1dfb      	adds	r3, r7, #7
 800306e:	701a      	strb	r2, [r3, #0]
	uint16_t pwm_freq = 0;
 8003070:	2546      	movs	r5, #70	; 0x46
 8003072:	197b      	adds	r3, r7, r5
 8003074:	2200      	movs	r2, #0
 8003076:	801a      	strh	r2, [r3, #0]
	uint16_t pwm_pulse = 0;
 8003078:	2444      	movs	r4, #68	; 0x44
 800307a:	193b      	adds	r3, r7, r4
 800307c:	2200      	movs	r2, #0
 800307e:	801a      	strh	r2, [r3, #0]
	pwm_freq = MYSYSCLOCK / (khz * 1000) - 1;
 8003080:	1dfb      	adds	r3, r7, #7
 8003082:	781a      	ldrb	r2, [r3, #0]
 8003084:	0013      	movs	r3, r2
 8003086:	015b      	lsls	r3, r3, #5
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	189b      	adds	r3, r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	0019      	movs	r1, r3
 8003092:	4850      	ldr	r0, [pc, #320]	; (80031d4 <enableIROut+0x170>)
 8003094:	f7fd f8dc 	bl	8000250 <__divsi3>
 8003098:	0003      	movs	r3, r0
 800309a:	b29a      	uxth	r2, r3
 800309c:	197b      	adds	r3, r7, r5
 800309e:	3a01      	subs	r2, #1
 80030a0:	801a      	strh	r2, [r3, #0]
	pwm_pulse = pwm_freq / 3;
 80030a2:	193c      	adds	r4, r7, r4
 80030a4:	197b      	adds	r3, r7, r5
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	2103      	movs	r1, #3
 80030aa:	0018      	movs	r0, r3
 80030ac:	f7fd f846 	bl	800013c <__udivsi3>
 80030b0:	0003      	movs	r3, r0
 80030b2:	8023      	strh	r3, [r4, #0]

	HAL_TIM_Base_DeInit(&htim1);
 80030b4:	4b48      	ldr	r3, [pc, #288]	; (80031d8 <enableIROut+0x174>)
 80030b6:	0018      	movs	r0, r3
 80030b8:	f002 ffc0 	bl	800603c <HAL_TIM_Base_DeInit>

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030bc:	2134      	movs	r1, #52	; 0x34
 80030be:	187b      	adds	r3, r7, r1
 80030c0:	0018      	movs	r0, r3
 80030c2:	2310      	movs	r3, #16
 80030c4:	001a      	movs	r2, r3
 80030c6:	2100      	movs	r1, #0
 80030c8:	f006 feb4 	bl	8009e34 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030cc:	2628      	movs	r6, #40	; 0x28
 80030ce:	19bb      	adds	r3, r7, r6
 80030d0:	0018      	movs	r0, r3
 80030d2:	230c      	movs	r3, #12
 80030d4:	001a      	movs	r2, r3
 80030d6:	2100      	movs	r1, #0
 80030d8:	f006 feac 	bl	8009e34 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 80030dc:	240c      	movs	r4, #12
 80030de:	193b      	adds	r3, r7, r4
 80030e0:	0018      	movs	r0, r3
 80030e2:	231c      	movs	r3, #28
 80030e4:	001a      	movs	r2, r3
 80030e6:	2100      	movs	r1, #0
 80030e8:	f006 fea4 	bl	8009e34 <memset>

	htim1.Instance = TIM1;
 80030ec:	4b3a      	ldr	r3, [pc, #232]	; (80031d8 <enableIROut+0x174>)
 80030ee:	4a3b      	ldr	r2, [pc, #236]	; (80031dc <enableIROut+0x178>)
 80030f0:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80030f2:	4b39      	ldr	r3, [pc, #228]	; (80031d8 <enableIROut+0x174>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030f8:	4b37      	ldr	r3, [pc, #220]	; (80031d8 <enableIROut+0x174>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = pwm_freq;
 80030fe:	197b      	adds	r3, r7, r5
 8003100:	881a      	ldrh	r2, [r3, #0]
 8003102:	4b35      	ldr	r3, [pc, #212]	; (80031d8 <enableIROut+0x174>)
 8003104:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003106:	4b34      	ldr	r3, [pc, #208]	; (80031d8 <enableIROut+0x174>)
 8003108:	2200      	movs	r2, #0
 800310a:	611a      	str	r2, [r3, #16]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800310c:	4b32      	ldr	r3, [pc, #200]	; (80031d8 <enableIROut+0x174>)
 800310e:	2200      	movs	r2, #0
 8003110:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim1);
 8003112:	4b31      	ldr	r3, [pc, #196]	; (80031d8 <enableIROut+0x174>)
 8003114:	0018      	movs	r0, r3
 8003116:	f002 ff39 	bl	8005f8c <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800311a:	2134      	movs	r1, #52	; 0x34
 800311c:	187b      	adds	r3, r7, r1
 800311e:	2280      	movs	r2, #128	; 0x80
 8003120:	0152      	lsls	r2, r2, #5
 8003122:	601a      	str	r2, [r3, #0]
	HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 8003124:	187a      	adds	r2, r7, r1
 8003126:	4b2c      	ldr	r3, [pc, #176]	; (80031d8 <enableIROut+0x174>)
 8003128:	0011      	movs	r1, r2
 800312a:	0018      	movs	r0, r3
 800312c:	f003 faf4 	bl	8006718 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim1);
 8003130:	4b29      	ldr	r3, [pc, #164]	; (80031d8 <enableIROut+0x174>)
 8003132:	0018      	movs	r0, r3
 8003134:	f003 f82c 	bl	8006190 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003138:	19bb      	adds	r3, r7, r6
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800313e:	19bb      	adds	r3, r7, r6
 8003140:	2200      	movs	r2, #0
 8003142:	609a      	str	r2, [r3, #8]
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 8003144:	19ba      	adds	r2, r7, r6
 8003146:	4b24      	ldr	r3, [pc, #144]	; (80031d8 <enableIROut+0x174>)
 8003148:	0011      	movs	r1, r2
 800314a:	0018      	movs	r0, r3
 800314c:	f003 ff8c 	bl	8007068 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003150:	193b      	adds	r3, r7, r4
 8003152:	2260      	movs	r2, #96	; 0x60
 8003154:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = pwm_pulse;
 8003156:	2344      	movs	r3, #68	; 0x44
 8003158:	18fb      	adds	r3, r7, r3
 800315a:	881a      	ldrh	r2, [r3, #0]
 800315c:	193b      	adds	r3, r7, r4
 800315e:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003160:	193b      	adds	r3, r7, r4
 8003162:	2200      	movs	r2, #0
 8003164:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003166:	193b      	adds	r3, r7, r4
 8003168:	2200      	movs	r2, #0
 800316a:	611a      	str	r2, [r3, #16]
//	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800316c:	1939      	adds	r1, r7, r4
 800316e:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <enableIROut+0x174>)
 8003170:	2200      	movs	r2, #0
 8003172:	0018      	movs	r0, r3
 8003174:	f003 f9d0 	bl	8006518 <HAL_TIM_PWM_ConfigChannel>
 8003178:	1e03      	subs	r3, r0, #0
 800317a:	d001      	beq.n	8003180 <enableIROut+0x11c>
	{
	Error_Handler();
 800317c:	f000 fd3a 	bl	8003bf4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003180:	230c      	movs	r3, #12
 8003182:	18f9      	adds	r1, r7, r3
 8003184:	4b14      	ldr	r3, [pc, #80]	; (80031d8 <enableIROut+0x174>)
 8003186:	2204      	movs	r2, #4
 8003188:	0018      	movs	r0, r3
 800318a:	f003 f9c5 	bl	8006518 <HAL_TIM_PWM_ConfigChannel>
 800318e:	1e03      	subs	r3, r0, #0
 8003190:	d001      	beq.n	8003196 <enableIROut+0x132>
	{
	Error_Handler();
 8003192:	f000 fd2f 	bl	8003bf4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003196:	230c      	movs	r3, #12
 8003198:	18f9      	adds	r1, r7, r3
 800319a:	4b0f      	ldr	r3, [pc, #60]	; (80031d8 <enableIROut+0x174>)
 800319c:	2208      	movs	r2, #8
 800319e:	0018      	movs	r0, r3
 80031a0:	f003 f9ba 	bl	8006518 <HAL_TIM_PWM_ConfigChannel>
 80031a4:	1e03      	subs	r3, r0, #0
 80031a6:	d001      	beq.n	80031ac <enableIROut+0x148>
	{
	Error_Handler();
 80031a8:	f000 fd24 	bl	8003bf4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80031ac:	230c      	movs	r3, #12
 80031ae:	18f9      	adds	r1, r7, r3
 80031b0:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <enableIROut+0x174>)
 80031b2:	220c      	movs	r2, #12
 80031b4:	0018      	movs	r0, r3
 80031b6:	f003 f9af 	bl	8006518 <HAL_TIM_PWM_ConfigChannel>
 80031ba:	1e03      	subs	r3, r0, #0
 80031bc:	d001      	beq.n	80031c2 <enableIROut+0x15e>
	{
	Error_Handler();
 80031be:	f000 fd19 	bl	8003bf4 <Error_Handler>
	}
	HAL_TIM_MspPostInit(&htim1);
 80031c2:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <enableIROut+0x174>)
 80031c4:	0018      	movs	r0, r3
 80031c6:	f001 f969 	bl	800449c <HAL_TIM_MspPostInit>
}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b013      	add	sp, #76	; 0x4c
 80031d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	03d09000 	.word	0x03d09000
 80031d8:	20000260 	.word	0x20000260
 80031dc:	40012c00 	.word	0x40012c00

080031e0 <custom_delay_usec>:

void custom_delay_usec(unsigned long us)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 80031e8:	4b07      	ldr	r3, [pc, #28]	; (8003208 <custom_delay_usec+0x28>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2200      	movs	r2, #0
 80031ee:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
 80031f0:	46c0      	nop			; (mov r8, r8)
 80031f2:	4b05      	ldr	r3, [pc, #20]	; (8003208 <custom_delay_usec+0x28>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d8f9      	bhi.n	80031f2 <custom_delay_usec+0x12>

}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	46c0      	nop			; (mov r8, r8)
 8003202:	46bd      	mov	sp, r7
 8003204:	b002      	add	sp, #8
 8003206:	bd80      	pop	{r7, pc}
 8003208:	200002f8 	.word	0x200002f8

0800320c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
//  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
  return ch;
 8003214:	687b      	ldr	r3, [r7, #4]
}
 8003216:	0018      	movs	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	b002      	add	sp, #8
 800321c:	bd80      	pop	{r7, pc}

0800321e <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(uint32_t var)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b084      	sub	sp, #16
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
	while(i < var)
 800322a:	e002      	b.n	8003232 <delay+0x14>
	{
		i++;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	3301      	adds	r3, #1
 8003230:	60fb      	str	r3, [r7, #12]
	while(i < var)
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	429a      	cmp	r2, r3
 8003238:	d3f8      	bcc.n	800322c <delay+0xe>
	}

}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	46c0      	nop			; (mov r8, r8)
 800323e:	46bd      	mov	sp, r7
 8003240:	b004      	add	sp, #16
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	000a      	movs	r2, r1
 800324e:	1cbb      	adds	r3, r7, #2
 8003250:	801a      	strh	r2, [r3, #0]
	 __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	220f      	movs	r2, #15
 8003258:	621a      	str	r2, [r3, #32]
	if((RxData[0] == SlaveID) || (RxData[0] == 0x01))
 800325a:	4b3d      	ldr	r3, [pc, #244]	; (8003350 <HAL_UARTEx_RxEventCallback+0x10c>)
 800325c:	781a      	ldrb	r2, [r3, #0]
 800325e:	4b3d      	ldr	r3, [pc, #244]	; (8003354 <HAL_UARTEx_RxEventCallback+0x110>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d003      	beq.n	800326e <HAL_UARTEx_RxEventCallback+0x2a>
 8003266:	4b3a      	ldr	r3, [pc, #232]	; (8003350 <HAL_UARTEx_RxEventCallback+0x10c>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d161      	bne.n	8003332 <HAL_UARTEx_RxEventCallback+0xee>
	{
			crc_cal = crc16(RxData, 7);
 800326e:	4b38      	ldr	r3, [pc, #224]	; (8003350 <HAL_UARTEx_RxEventCallback+0x10c>)
 8003270:	2107      	movs	r1, #7
 8003272:	0018      	movs	r0, r3
 8003274:	f000 fff8 	bl	8004268 <crc16>
 8003278:	0003      	movs	r3, r0
 800327a:	001a      	movs	r2, r3
 800327c:	4b36      	ldr	r3, [pc, #216]	; (8003358 <HAL_UARTEx_RxEventCallback+0x114>)
 800327e:	801a      	strh	r2, [r3, #0]
			crcrx = ((RxData[8]<<8)|RxData[7]);
 8003280:	4b33      	ldr	r3, [pc, #204]	; (8003350 <HAL_UARTEx_RxEventCallback+0x10c>)
 8003282:	7a1b      	ldrb	r3, [r3, #8]
 8003284:	021b      	lsls	r3, r3, #8
 8003286:	b21a      	sxth	r2, r3
 8003288:	4b31      	ldr	r3, [pc, #196]	; (8003350 <HAL_UARTEx_RxEventCallback+0x10c>)
 800328a:	79db      	ldrb	r3, [r3, #7]
 800328c:	b21b      	sxth	r3, r3
 800328e:	4313      	orrs	r3, r2
 8003290:	b21b      	sxth	r3, r3
 8003292:	b29a      	uxth	r2, r3
 8003294:	4b31      	ldr	r3, [pc, #196]	; (800335c <HAL_UARTEx_RxEventCallback+0x118>)
 8003296:	801a      	strh	r2, [r3, #0]
			if(crc_cal == crcrx)
 8003298:	4b2f      	ldr	r3, [pc, #188]	; (8003358 <HAL_UARTEx_RxEventCallback+0x114>)
 800329a:	881a      	ldrh	r2, [r3, #0]
 800329c:	4b2f      	ldr	r3, [pc, #188]	; (800335c <HAL_UARTEx_RxEventCallback+0x118>)
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d146      	bne.n	8003332 <HAL_UARTEx_RxEventCallback+0xee>
			{
				if (RxData[0] == SlaveID)
 80032a4:	4b2a      	ldr	r3, [pc, #168]	; (8003350 <HAL_UARTEx_RxEventCallback+0x10c>)
 80032a6:	781a      	ldrb	r2, [r3, #0]
 80032a8:	4b2a      	ldr	r3, [pc, #168]	; (8003354 <HAL_UARTEx_RxEventCallback+0x110>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d115      	bne.n	80032dc <HAL_UARTEx_RxEventCallback+0x98>
				{
					switch (RxData[1]){
 80032b0:	4b27      	ldr	r3, [pc, #156]	; (8003350 <HAL_UARTEx_RxEventCallback+0x10c>)
 80032b2:	785b      	ldrb	r3, [r3, #1]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d002      	beq.n	80032be <HAL_UARTEx_RxEventCallback+0x7a>
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d008      	beq.n	80032ce <HAL_UARTEx_RxEventCallback+0x8a>
 80032bc:	e00a      	b.n	80032d4 <HAL_UARTEx_RxEventCallback+0x90>
					case 0x01:
						updateSlotData();
 80032be:	f000 fd01 	bl	8003cc4 <updateSlotData>
					    HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 80032c2:	4b27      	ldr	r3, [pc, #156]	; (8003360 <HAL_UARTEx_RxEventCallback+0x11c>)
 80032c4:	2120      	movs	r1, #32
 80032c6:	0018      	movs	r0, r3
 80032c8:	f001 ff0c 	bl	80050e4 <HAL_GPIO_TogglePin>
		//				ModeState = PresentUpdate;
			//			updateSlotData();
						break;
 80032cc:	e031      	b.n	8003332 <HAL_UARTEx_RxEventCallback+0xee>
					case 0x04:
						prr();
 80032ce:	f000 ffa1 	bl	8004214 <prr>
		//				ModeState = PickupRequest;
						break;
 80032d2:	e02e      	b.n	8003332 <HAL_UARTEx_RxEventCallback+0xee>
					default:
						modbusException(ILLEGAL_FUNCTION);
 80032d4:	2001      	movs	r0, #1
 80032d6:	f000 fcd1 	bl	8003c7c <modbusException>
						break;
 80032da:	e02a      	b.n	8003332 <HAL_UARTEx_RxEventCallback+0xee>
					}
				}
				else if(RxData[0] == 0x01)                //Broadcast Data Received
 80032dc:	4b1c      	ldr	r3, [pc, #112]	; (8003350 <HAL_UARTEx_RxEventCallback+0x10c>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d126      	bne.n	8003332 <HAL_UARTEx_RxEventCallback+0xee>
				{
					switch (RxData[1])
 80032e4:	4b1a      	ldr	r3, [pc, #104]	; (8003350 <HAL_UARTEx_RxEventCallback+0x10c>)
 80032e6:	785b      	ldrb	r3, [r3, #1]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d002      	beq.n	80032f2 <HAL_UARTEx_RxEventCallback+0xae>
 80032ec:	2b03      	cmp	r3, #3
 80032ee:	d019      	beq.n	8003324 <HAL_UARTEx_RxEventCallback+0xe0>
 80032f0:	e01b      	b.n	800332a <HAL_UARTEx_RxEventCallback+0xe6>
					{
						case 0x01:
							for(i = 2; i<7;i++)
 80032f2:	4b1c      	ldr	r3, [pc, #112]	; (8003364 <HAL_UARTEx_RxEventCallback+0x120>)
 80032f4:	2202      	movs	r2, #2
 80032f6:	701a      	strb	r2, [r3, #0]
 80032f8:	e00f      	b.n	800331a <HAL_UARTEx_RxEventCallback+0xd6>
							 SlotParam[i-2] = RxData[i];
 80032fa:	4b1a      	ldr	r3, [pc, #104]	; (8003364 <HAL_UARTEx_RxEventCallback+0x120>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	0019      	movs	r1, r3
 8003300:	4b18      	ldr	r3, [pc, #96]	; (8003364 <HAL_UARTEx_RxEventCallback+0x120>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	3b02      	subs	r3, #2
 8003306:	4a12      	ldr	r2, [pc, #72]	; (8003350 <HAL_UARTEx_RxEventCallback+0x10c>)
 8003308:	5c51      	ldrb	r1, [r2, r1]
 800330a:	4a17      	ldr	r2, [pc, #92]	; (8003368 <HAL_UARTEx_RxEventCallback+0x124>)
 800330c:	54d1      	strb	r1, [r2, r3]
							for(i = 2; i<7;i++)
 800330e:	4b15      	ldr	r3, [pc, #84]	; (8003364 <HAL_UARTEx_RxEventCallback+0x120>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	3301      	adds	r3, #1
 8003314:	b2da      	uxtb	r2, r3
 8003316:	4b13      	ldr	r3, [pc, #76]	; (8003364 <HAL_UARTEx_RxEventCallback+0x120>)
 8003318:	701a      	strb	r2, [r3, #0]
 800331a:	4b12      	ldr	r3, [pc, #72]	; (8003364 <HAL_UARTEx_RxEventCallback+0x120>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b06      	cmp	r3, #6
 8003320:	d9eb      	bls.n	80032fa <HAL_UARTEx_RxEventCallback+0xb6>
			//				ModeState = LedUpdate;
							break;
 8003322:	e006      	b.n	8003332 <HAL_UARTEx_RxEventCallback+0xee>
						case 0x03:
							lrr();
 8003324:	f000 ff6c 	bl	8004200 <lrr>
		//					ModeState = LoadRequest;
				//			lrr();                             //Load Reel Request
							break;
 8003328:	e003      	b.n	8003332 <HAL_UARTEx_RxEventCallback+0xee>
						default:
							modbusException(ILLEGAL_FUNCTION);
 800332a:	2001      	movs	r0, #1
 800332c:	f000 fca6 	bl	8003c7c <modbusException>
							break;
 8003330:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
	}
	while(HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 40) != HAL_OK);
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	4906      	ldr	r1, [pc, #24]	; (8003350 <HAL_UARTEx_RxEventCallback+0x10c>)
 8003336:	4b0d      	ldr	r3, [pc, #52]	; (800336c <HAL_UARTEx_RxEventCallback+0x128>)
 8003338:	2228      	movs	r2, #40	; 0x28
 800333a:	0018      	movs	r0, r3
 800333c:	f005 ff16 	bl	800916c <HAL_UARTEx_ReceiveToIdle_IT>
 8003340:	1e03      	subs	r3, r0, #0
 8003342:	d1f7      	bne.n	8003334 <HAL_UARTEx_RxEventCallback+0xf0>

}
 8003344:	46c0      	nop			; (mov r8, r8)
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	46bd      	mov	sp, r7
 800334a:	b002      	add	sp, #8
 800334c:	bd80      	pop	{r7, pc}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	200004c0 	.word	0x200004c0
 8003354:	200004bc 	.word	0x200004bc
 8003358:	2000052e 	.word	0x2000052e
 800335c:	20000530 	.word	0x20000530
 8003360:	50000400 	.word	0x50000400
 8003364:	2000052d 	.word	0x2000052d
 8003368:	20000528 	.word	0x20000528
 800336c:	20000428 	.word	0x20000428

08003370 <ReadSW_ID>:
static uint8_t ReadSW_ID(void){
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
	// Read switch data ID
    uint8_t value = 0,bit = 7;
 8003376:	1dfb      	adds	r3, r7, #7
 8003378:	2200      	movs	r2, #0
 800337a:	701a      	strb	r2, [r3, #0]
 800337c:	1dbb      	adds	r3, r7, #6
 800337e:	2207      	movs	r2, #7
 8003380:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(SH_LD_GPIO_Port, SH_LD_Pin, GPIO_PIN_RESET);
 8003382:	4b34      	ldr	r3, [pc, #208]	; (8003454 <ReadSW_ID+0xe4>)
 8003384:	2200      	movs	r2, #0
 8003386:	2104      	movs	r1, #4
 8003388:	0018      	movs	r0, r3
 800338a:	f001 fe8e 	bl	80050aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW_CS_GPIO_Port, SW_CS_Pin, GPIO_PIN_RESET);
 800338e:	2380      	movs	r3, #128	; 0x80
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4830      	ldr	r0, [pc, #192]	; (8003454 <ReadSW_ID+0xe4>)
 8003394:	2200      	movs	r2, #0
 8003396:	0019      	movs	r1, r3
 8003398:	f001 fe87 	bl	80050aa <HAL_GPIO_WritePin>
	delay(10);
 800339c:	200a      	movs	r0, #10
 800339e:	f7ff ff3e 	bl	800321e <delay>
	for(int i =0; i < 8; i++)
 80033a2:	2300      	movs	r3, #0
 80033a4:	603b      	str	r3, [r7, #0]
 80033a6:	e044      	b.n	8003432 <ReadSW_ID+0xc2>
	{
		HAL_GPIO_WritePin(BB_CLK_GPIO_Port, BB_CLK_Pin, GPIO_PIN_RESET);
 80033a8:	23a0      	movs	r3, #160	; 0xa0
 80033aa:	05db      	lsls	r3, r3, #23
 80033ac:	2200      	movs	r2, #0
 80033ae:	2120      	movs	r1, #32
 80033b0:	0018      	movs	r0, r3
 80033b2:	f001 fe7a 	bl	80050aa <HAL_GPIO_WritePin>
		delay(10);
 80033b6:	200a      	movs	r0, #10
 80033b8:	f7ff ff31 	bl	800321e <delay>
		HAL_GPIO_WritePin(BB_CLK_GPIO_Port, BB_CLK_Pin, GPIO_PIN_SET);
 80033bc:	23a0      	movs	r3, #160	; 0xa0
 80033be:	05db      	lsls	r3, r3, #23
 80033c0:	2201      	movs	r2, #1
 80033c2:	2120      	movs	r1, #32
 80033c4:	0018      	movs	r0, r3
 80033c6:	f001 fe70 	bl	80050aa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SH_LD_GPIO_Port, SH_LD_Pin, GPIO_PIN_SET);
 80033ca:	4b22      	ldr	r3, [pc, #136]	; (8003454 <ReadSW_ID+0xe4>)
 80033cc:	2201      	movs	r2, #1
 80033ce:	2104      	movs	r1, #4
 80033d0:	0018      	movs	r0, r3
 80033d2:	f001 fe6a 	bl	80050aa <HAL_GPIO_WritePin>
		if((HAL_GPIO_ReadPin(BB_MISO_GPIO_Port, BB_MISO_Pin)) == GPIO_PIN_SET)
 80033d6:	23a0      	movs	r3, #160	; 0xa0
 80033d8:	05db      	lsls	r3, r3, #23
 80033da:	2140      	movs	r1, #64	; 0x40
 80033dc:	0018      	movs	r0, r3
 80033de:	f001 fe47 	bl	8005070 <HAL_GPIO_ReadPin>
 80033e2:	0003      	movs	r3, r0
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d10d      	bne.n	8003404 <ReadSW_ID+0x94>
			value |= (1 << bit);
 80033e8:	1dbb      	adds	r3, r7, #6
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2201      	movs	r2, #1
 80033ee:	409a      	lsls	r2, r3
 80033f0:	0013      	movs	r3, r2
 80033f2:	b25a      	sxtb	r2, r3
 80033f4:	1dfb      	adds	r3, r7, #7
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	b25b      	sxtb	r3, r3
 80033fa:	4313      	orrs	r3, r2
 80033fc:	b25a      	sxtb	r2, r3
 80033fe:	1dfb      	adds	r3, r7, #7
 8003400:	701a      	strb	r2, [r3, #0]
 8003402:	e00e      	b.n	8003422 <ReadSW_ID+0xb2>
		else
			value &= ~(1 << bit);
 8003404:	1dbb      	adds	r3, r7, #6
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2201      	movs	r2, #1
 800340a:	409a      	lsls	r2, r3
 800340c:	0013      	movs	r3, r2
 800340e:	b25b      	sxtb	r3, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	b25b      	sxtb	r3, r3
 8003414:	1dfa      	adds	r2, r7, #7
 8003416:	7812      	ldrb	r2, [r2, #0]
 8003418:	b252      	sxtb	r2, r2
 800341a:	4013      	ands	r3, r2
 800341c:	b25a      	sxtb	r2, r3
 800341e:	1dfb      	adds	r3, r7, #7
 8003420:	701a      	strb	r2, [r3, #0]
		bit--;
 8003422:	1dbb      	adds	r3, r7, #6
 8003424:	781a      	ldrb	r2, [r3, #0]
 8003426:	1dbb      	adds	r3, r7, #6
 8003428:	3a01      	subs	r2, #1
 800342a:	701a      	strb	r2, [r3, #0]
	for(int i =0; i < 8; i++)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	3301      	adds	r3, #1
 8003430:	603b      	str	r3, [r7, #0]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b07      	cmp	r3, #7
 8003436:	ddb7      	ble.n	80033a8 <ReadSW_ID+0x38>
	}
	HAL_GPIO_WritePin(SW_CS_GPIO_Port, SW_CS_Pin, GPIO_PIN_SET);
 8003438:	2380      	movs	r3, #128	; 0x80
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4805      	ldr	r0, [pc, #20]	; (8003454 <ReadSW_ID+0xe4>)
 800343e:	2201      	movs	r2, #1
 8003440:	0019      	movs	r1, r3
 8003442:	f001 fe32 	bl	80050aa <HAL_GPIO_WritePin>
	return value;
 8003446:	1dfb      	adds	r3, r7, #7
 8003448:	781b      	ldrb	r3, [r3, #0]
}
 800344a:	0018      	movs	r0, r3
 800344c:	46bd      	mov	sp, r7
 800344e:	b002      	add	sp, #8
 8003450:	bd80      	pop	{r7, pc}
 8003452:	46c0      	nop			; (mov r8, r8)
 8003454:	50000400 	.word	0x50000400

08003458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800345c:	f001 fa74 	bl	8004948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003460:	f000 f85e 	bl	8003520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003464:	f000 fb1c 	bl	8003aa0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8003468:	f000 fac4 	bl	80039f4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800346c:	f000 f8b6 	bl	80035dc <MX_TIM1_Init>
  MX_TIM3_Init();
 8003470:	f000 f9f4 	bl	800385c <MX_TIM3_Init>
  MX_TIM2_Init();
 8003474:	f000 f99e 	bl	80037b4 <MX_TIM2_Init>
  MX_TIM14_Init();
 8003478:	f000 fa46 	bl	8003908 <MX_TIM14_Init>
  MX_TIM16_Init();
 800347c:	f000 fa6a 	bl	8003954 <MX_TIM16_Init>
  MX_TIM17_Init();
 8003480:	f000 fa90 	bl	80039a4 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8003484:	4b1e      	ldr	r3, [pc, #120]	; (8003500 <main+0xa8>)
 8003486:	0018      	movs	r0, r3
 8003488:	f002 fe36 	bl	80060f8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 800348c:	4b1d      	ldr	r3, [pc, #116]	; (8003504 <main+0xac>)
 800348e:	0018      	movs	r0, r3
 8003490:	f002 fe32 	bl	80060f8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim14);
 8003494:	4b1c      	ldr	r3, [pc, #112]	; (8003508 <main+0xb0>)
 8003496:	0018      	movs	r0, r3
 8003498:	f002 fe2e 	bl	80060f8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim16);
 800349c:	4b1b      	ldr	r3, [pc, #108]	; (800350c <main+0xb4>)
 800349e:	0018      	movs	r0, r3
 80034a0:	f002 fe2a 	bl	80060f8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim17);
 80034a4:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <main+0xb8>)
 80034a6:	0018      	movs	r0, r3
 80034a8:	f002 fe26 	bl	80060f8 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80034ac:	4b15      	ldr	r3, [pc, #84]	; (8003504 <main+0xac>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2200      	movs	r2, #0
 80034b2:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_TIM_SET_COUNTER(&htim14, 0);
 80034b4:	4b14      	ldr	r3, [pc, #80]	; (8003508 <main+0xb0>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2200      	movs	r2, #0
 80034ba:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_TIM_SET_COUNTER(&htim16, 0);
 80034bc:	4b13      	ldr	r3, [pc, #76]	; (800350c <main+0xb4>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2200      	movs	r2, #0
 80034c2:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_TIM_SET_COUNTER(&htim17, 0);
 80034c4:	4b12      	ldr	r3, [pc, #72]	; (8003510 <main+0xb8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2200      	movs	r2, #0
 80034ca:	625a      	str	r2, [r3, #36]	; 0x24
  enableIROut(38);
 80034cc:	2026      	movs	r0, #38	; 0x26
 80034ce:	f7ff fdc9 	bl	8003064 <enableIROut>
  SlaveID = ReadSW_ID();
 80034d2:	f7ff ff4d 	bl	8003370 <ReadSW_ID>
 80034d6:	0003      	movs	r3, r0
 80034d8:	001a      	movs	r2, r3
 80034da:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <main+0xbc>)
 80034dc:	701a      	strb	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 40);
 80034de:	490e      	ldr	r1, [pc, #56]	; (8003518 <main+0xc0>)
 80034e0:	4b0e      	ldr	r3, [pc, #56]	; (800351c <main+0xc4>)
 80034e2:	2228      	movs	r2, #40	; 0x28
 80034e4:	0018      	movs	r0, r3
 80034e6:	f005 fe41 	bl	800916c <HAL_UARTEx_ReceiveToIdle_IT>
//  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
//  printf("Hello World \n\r");

  RGBInit();
 80034ea:	f7fe ff39 	bl	8002360 <RGBInit>
  AllLedOff(20);
 80034ee:	2014      	movs	r0, #20
 80034f0:	f7ff f962 	bl	80027b8 <AllLedOff>
							  break;

		  default:			  ModeState = CheckStatus;
							  break;
		}*/
	   SlotDataChek();
 80034f4:	f7ff fd1e 	bl	8002f34 <SlotDataChek>
	   delay(100);
 80034f8:	2064      	movs	r0, #100	; 0x64
 80034fa:	f7ff fe90 	bl	800321e <delay>
	   SlotDataChek();
 80034fe:	e7f9      	b.n	80034f4 <main+0x9c>
 8003500:	200002f8 	.word	0x200002f8
 8003504:	200002ac 	.word	0x200002ac
 8003508:	20000344 	.word	0x20000344
 800350c:	20000390 	.word	0x20000390
 8003510:	200003dc 	.word	0x200003dc
 8003514:	200004bc 	.word	0x200004bc
 8003518:	200004c0 	.word	0x200004c0
 800351c:	20000428 	.word	0x20000428

08003520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003520:	b590      	push	{r4, r7, lr}
 8003522:	b093      	sub	sp, #76	; 0x4c
 8003524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003526:	2410      	movs	r4, #16
 8003528:	193b      	adds	r3, r7, r4
 800352a:	0018      	movs	r0, r3
 800352c:	2338      	movs	r3, #56	; 0x38
 800352e:	001a      	movs	r2, r3
 8003530:	2100      	movs	r1, #0
 8003532:	f006 fc7f 	bl	8009e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003536:	003b      	movs	r3, r7
 8003538:	0018      	movs	r0, r3
 800353a:	2310      	movs	r3, #16
 800353c:	001a      	movs	r2, r3
 800353e:	2100      	movs	r1, #0
 8003540:	f006 fc78 	bl	8009e34 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003544:	2380      	movs	r3, #128	; 0x80
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	0018      	movs	r0, r3
 800354a:	f001 fe95 	bl	8005278 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800354e:	193b      	adds	r3, r7, r4
 8003550:	2202      	movs	r2, #2
 8003552:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003554:	193b      	adds	r3, r7, r4
 8003556:	2280      	movs	r2, #128	; 0x80
 8003558:	0052      	lsls	r2, r2, #1
 800355a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800355c:	0021      	movs	r1, r4
 800355e:	187b      	adds	r3, r7, r1
 8003560:	2200      	movs	r2, #0
 8003562:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003564:	187b      	adds	r3, r7, r1
 8003566:	2240      	movs	r2, #64	; 0x40
 8003568:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800356a:	187b      	adds	r3, r7, r1
 800356c:	2202      	movs	r2, #2
 800356e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003570:	187b      	adds	r3, r7, r1
 8003572:	2202      	movs	r2, #2
 8003574:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003576:	187b      	adds	r3, r7, r1
 8003578:	2200      	movs	r2, #0
 800357a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800357c:	187b      	adds	r3, r7, r1
 800357e:	2208      	movs	r2, #8
 8003580:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003582:	187b      	adds	r3, r7, r1
 8003584:	2280      	movs	r2, #128	; 0x80
 8003586:	0292      	lsls	r2, r2, #10
 8003588:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800358a:	187b      	adds	r3, r7, r1
 800358c:	2280      	movs	r2, #128	; 0x80
 800358e:	0492      	lsls	r2, r2, #18
 8003590:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003592:	187b      	adds	r3, r7, r1
 8003594:	2280      	movs	r2, #128	; 0x80
 8003596:	0592      	lsls	r2, r2, #22
 8003598:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800359a:	187b      	adds	r3, r7, r1
 800359c:	0018      	movs	r0, r3
 800359e:	f001 feb7 	bl	8005310 <HAL_RCC_OscConfig>
 80035a2:	1e03      	subs	r3, r0, #0
 80035a4:	d001      	beq.n	80035aa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80035a6:	f000 fb25 	bl	8003bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035aa:	003b      	movs	r3, r7
 80035ac:	2207      	movs	r2, #7
 80035ae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035b0:	003b      	movs	r3, r7
 80035b2:	2202      	movs	r2, #2
 80035b4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035b6:	003b      	movs	r3, r7
 80035b8:	2200      	movs	r2, #0
 80035ba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80035bc:	003b      	movs	r3, r7
 80035be:	2200      	movs	r2, #0
 80035c0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80035c2:	003b      	movs	r3, r7
 80035c4:	2102      	movs	r1, #2
 80035c6:	0018      	movs	r0, r3
 80035c8:	f002 f9bc 	bl	8005944 <HAL_RCC_ClockConfig>
 80035cc:	1e03      	subs	r3, r0, #0
 80035ce:	d001      	beq.n	80035d4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80035d0:	f000 fb10 	bl	8003bf4 <Error_Handler>
  }
}
 80035d4:	46c0      	nop			; (mov r8, r8)
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b013      	add	sp, #76	; 0x4c
 80035da:	bd90      	pop	{r4, r7, pc}

080035dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b09c      	sub	sp, #112	; 0x70
 80035e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035e2:	2360      	movs	r3, #96	; 0x60
 80035e4:	18fb      	adds	r3, r7, r3
 80035e6:	0018      	movs	r0, r3
 80035e8:	2310      	movs	r3, #16
 80035ea:	001a      	movs	r2, r3
 80035ec:	2100      	movs	r1, #0
 80035ee:	f006 fc21 	bl	8009e34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035f2:	2354      	movs	r3, #84	; 0x54
 80035f4:	18fb      	adds	r3, r7, r3
 80035f6:	0018      	movs	r0, r3
 80035f8:	230c      	movs	r3, #12
 80035fa:	001a      	movs	r2, r3
 80035fc:	2100      	movs	r1, #0
 80035fe:	f006 fc19 	bl	8009e34 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003602:	2338      	movs	r3, #56	; 0x38
 8003604:	18fb      	adds	r3, r7, r3
 8003606:	0018      	movs	r0, r3
 8003608:	231c      	movs	r3, #28
 800360a:	001a      	movs	r2, r3
 800360c:	2100      	movs	r1, #0
 800360e:	f006 fc11 	bl	8009e34 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003612:	1d3b      	adds	r3, r7, #4
 8003614:	0018      	movs	r0, r3
 8003616:	2334      	movs	r3, #52	; 0x34
 8003618:	001a      	movs	r2, r3
 800361a:	2100      	movs	r1, #0
 800361c:	f006 fc0a 	bl	8009e34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003620:	4b61      	ldr	r3, [pc, #388]	; (80037a8 <MX_TIM1_Init+0x1cc>)
 8003622:	4a62      	ldr	r2, [pc, #392]	; (80037ac <MX_TIM1_Init+0x1d0>)
 8003624:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003626:	4b60      	ldr	r3, [pc, #384]	; (80037a8 <MX_TIM1_Init+0x1cc>)
 8003628:	2200      	movs	r2, #0
 800362a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800362c:	4b5e      	ldr	r3, [pc, #376]	; (80037a8 <MX_TIM1_Init+0x1cc>)
 800362e:	2200      	movs	r2, #0
 8003630:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003632:	4b5d      	ldr	r3, [pc, #372]	; (80037a8 <MX_TIM1_Init+0x1cc>)
 8003634:	4a5e      	ldr	r2, [pc, #376]	; (80037b0 <MX_TIM1_Init+0x1d4>)
 8003636:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003638:	4b5b      	ldr	r3, [pc, #364]	; (80037a8 <MX_TIM1_Init+0x1cc>)
 800363a:	2200      	movs	r2, #0
 800363c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800363e:	4b5a      	ldr	r3, [pc, #360]	; (80037a8 <MX_TIM1_Init+0x1cc>)
 8003640:	2200      	movs	r2, #0
 8003642:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003644:	4b58      	ldr	r3, [pc, #352]	; (80037a8 <MX_TIM1_Init+0x1cc>)
 8003646:	2200      	movs	r2, #0
 8003648:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800364a:	4b57      	ldr	r3, [pc, #348]	; (80037a8 <MX_TIM1_Init+0x1cc>)
 800364c:	0018      	movs	r0, r3
 800364e:	f002 fc9d 	bl	8005f8c <HAL_TIM_Base_Init>
 8003652:	1e03      	subs	r3, r0, #0
 8003654:	d001      	beq.n	800365a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8003656:	f000 facd 	bl	8003bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800365a:	2160      	movs	r1, #96	; 0x60
 800365c:	187b      	adds	r3, r7, r1
 800365e:	2280      	movs	r2, #128	; 0x80
 8003660:	0152      	lsls	r2, r2, #5
 8003662:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003664:	187a      	adds	r2, r7, r1
 8003666:	4b50      	ldr	r3, [pc, #320]	; (80037a8 <MX_TIM1_Init+0x1cc>)
 8003668:	0011      	movs	r1, r2
 800366a:	0018      	movs	r0, r3
 800366c:	f003 f854 	bl	8006718 <HAL_TIM_ConfigClockSource>
 8003670:	1e03      	subs	r3, r0, #0
 8003672:	d001      	beq.n	8003678 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8003674:	f000 fabe 	bl	8003bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003678:	4b4b      	ldr	r3, [pc, #300]	; (80037a8 <MX_TIM1_Init+0x1cc>)
 800367a:	0018      	movs	r0, r3
 800367c:	f002 fd88 	bl	8006190 <HAL_TIM_PWM_Init>
 8003680:	1e03      	subs	r3, r0, #0
 8003682:	d001      	beq.n	8003688 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8003684:	f000 fab6 	bl	8003bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003688:	2154      	movs	r1, #84	; 0x54
 800368a:	187b      	adds	r3, r7, r1
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003690:	187b      	adds	r3, r7, r1
 8003692:	2200      	movs	r2, #0
 8003694:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003696:	187b      	adds	r3, r7, r1
 8003698:	2200      	movs	r2, #0
 800369a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800369c:	187a      	adds	r2, r7, r1
 800369e:	4b42      	ldr	r3, [pc, #264]	; (80037a8 <MX_TIM1_Init+0x1cc>)
 80036a0:	0011      	movs	r1, r2
 80036a2:	0018      	movs	r0, r3
 80036a4:	f003 fce0 	bl	8007068 <HAL_TIMEx_MasterConfigSynchronization>
 80036a8:	1e03      	subs	r3, r0, #0
 80036aa:	d001      	beq.n	80036b0 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80036ac:	f000 faa2 	bl	8003bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036b0:	2138      	movs	r1, #56	; 0x38
 80036b2:	187b      	adds	r3, r7, r1
 80036b4:	2260      	movs	r2, #96	; 0x60
 80036b6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80036b8:	187b      	adds	r3, r7, r1
 80036ba:	2200      	movs	r2, #0
 80036bc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036be:	187b      	adds	r3, r7, r1
 80036c0:	2200      	movs	r2, #0
 80036c2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80036c4:	187b      	adds	r3, r7, r1
 80036c6:	2200      	movs	r2, #0
 80036c8:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036ca:	187b      	adds	r3, r7, r1
 80036cc:	2200      	movs	r2, #0
 80036ce:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80036d0:	187b      	adds	r3, r7, r1
 80036d2:	2200      	movs	r2, #0
 80036d4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80036d6:	187b      	adds	r3, r7, r1
 80036d8:	2200      	movs	r2, #0
 80036da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80036dc:	1879      	adds	r1, r7, r1
 80036de:	4b32      	ldr	r3, [pc, #200]	; (80037a8 <MX_TIM1_Init+0x1cc>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	0018      	movs	r0, r3
 80036e4:	f002 ff18 	bl	8006518 <HAL_TIM_PWM_ConfigChannel>
 80036e8:	1e03      	subs	r3, r0, #0
 80036ea:	d001      	beq.n	80036f0 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80036ec:	f000 fa82 	bl	8003bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80036f0:	2338      	movs	r3, #56	; 0x38
 80036f2:	18f9      	adds	r1, r7, r3
 80036f4:	4b2c      	ldr	r3, [pc, #176]	; (80037a8 <MX_TIM1_Init+0x1cc>)
 80036f6:	2204      	movs	r2, #4
 80036f8:	0018      	movs	r0, r3
 80036fa:	f002 ff0d 	bl	8006518 <HAL_TIM_PWM_ConfigChannel>
 80036fe:	1e03      	subs	r3, r0, #0
 8003700:	d001      	beq.n	8003706 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8003702:	f000 fa77 	bl	8003bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003706:	2338      	movs	r3, #56	; 0x38
 8003708:	18f9      	adds	r1, r7, r3
 800370a:	4b27      	ldr	r3, [pc, #156]	; (80037a8 <MX_TIM1_Init+0x1cc>)
 800370c:	2208      	movs	r2, #8
 800370e:	0018      	movs	r0, r3
 8003710:	f002 ff02 	bl	8006518 <HAL_TIM_PWM_ConfigChannel>
 8003714:	1e03      	subs	r3, r0, #0
 8003716:	d001      	beq.n	800371c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8003718:	f000 fa6c 	bl	8003bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800371c:	2338      	movs	r3, #56	; 0x38
 800371e:	18f9      	adds	r1, r7, r3
 8003720:	4b21      	ldr	r3, [pc, #132]	; (80037a8 <MX_TIM1_Init+0x1cc>)
 8003722:	220c      	movs	r2, #12
 8003724:	0018      	movs	r0, r3
 8003726:	f002 fef7 	bl	8006518 <HAL_TIM_PWM_ConfigChannel>
 800372a:	1e03      	subs	r3, r0, #0
 800372c:	d001      	beq.n	8003732 <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 800372e:	f000 fa61 	bl	8003bf4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003732:	1d3b      	adds	r3, r7, #4
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003738:	1d3b      	adds	r3, r7, #4
 800373a:	2200      	movs	r2, #0
 800373c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800373e:	1d3b      	adds	r3, r7, #4
 8003740:	2200      	movs	r2, #0
 8003742:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003744:	1d3b      	adds	r3, r7, #4
 8003746:	2200      	movs	r2, #0
 8003748:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800374a:	1d3b      	adds	r3, r7, #4
 800374c:	2200      	movs	r2, #0
 800374e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003750:	1d3b      	adds	r3, r7, #4
 8003752:	2280      	movs	r2, #128	; 0x80
 8003754:	0192      	lsls	r2, r2, #6
 8003756:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003758:	1d3b      	adds	r3, r7, #4
 800375a:	2200      	movs	r2, #0
 800375c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800375e:	1d3b      	adds	r3, r7, #4
 8003760:	2200      	movs	r2, #0
 8003762:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003764:	1d3b      	adds	r3, r7, #4
 8003766:	2200      	movs	r2, #0
 8003768:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800376a:	1d3b      	adds	r3, r7, #4
 800376c:	2280      	movs	r2, #128	; 0x80
 800376e:	0492      	lsls	r2, r2, #18
 8003770:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003772:	1d3b      	adds	r3, r7, #4
 8003774:	2200      	movs	r2, #0
 8003776:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003778:	1d3b      	adds	r3, r7, #4
 800377a:	2200      	movs	r2, #0
 800377c:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800377e:	1d3b      	adds	r3, r7, #4
 8003780:	2200      	movs	r2, #0
 8003782:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003784:	1d3a      	adds	r2, r7, #4
 8003786:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <MX_TIM1_Init+0x1cc>)
 8003788:	0011      	movs	r1, r2
 800378a:	0018      	movs	r0, r3
 800378c:	f003 fcd4 	bl	8007138 <HAL_TIMEx_ConfigBreakDeadTime>
 8003790:	1e03      	subs	r3, r0, #0
 8003792:	d001      	beq.n	8003798 <MX_TIM1_Init+0x1bc>
  {
    Error_Handler();
 8003794:	f000 fa2e 	bl	8003bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003798:	4b03      	ldr	r3, [pc, #12]	; (80037a8 <MX_TIM1_Init+0x1cc>)
 800379a:	0018      	movs	r0, r3
 800379c:	f000 fe7e 	bl	800449c <HAL_TIM_MspPostInit>

}
 80037a0:	46c0      	nop			; (mov r8, r8)
 80037a2:	46bd      	mov	sp, r7
 80037a4:	b01c      	add	sp, #112	; 0x70
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	20000260 	.word	0x20000260
 80037ac:	40012c00 	.word	0x40012c00
 80037b0:	0000ffff 	.word	0x0000ffff

080037b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037ba:	2310      	movs	r3, #16
 80037bc:	18fb      	adds	r3, r7, r3
 80037be:	0018      	movs	r0, r3
 80037c0:	2310      	movs	r3, #16
 80037c2:	001a      	movs	r2, r3
 80037c4:	2100      	movs	r1, #0
 80037c6:	f006 fb35 	bl	8009e34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037ca:	1d3b      	adds	r3, r7, #4
 80037cc:	0018      	movs	r0, r3
 80037ce:	230c      	movs	r3, #12
 80037d0:	001a      	movs	r2, r3
 80037d2:	2100      	movs	r1, #0
 80037d4:	f006 fb2e 	bl	8009e34 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80037d8:	4b1f      	ldr	r3, [pc, #124]	; (8003858 <MX_TIM2_Init+0xa4>)
 80037da:	2280      	movs	r2, #128	; 0x80
 80037dc:	05d2      	lsls	r2, r2, #23
 80037de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 80037e0:	4b1d      	ldr	r3, [pc, #116]	; (8003858 <MX_TIM2_Init+0xa4>)
 80037e2:	223f      	movs	r2, #63	; 0x3f
 80037e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037e6:	4b1c      	ldr	r3, [pc, #112]	; (8003858 <MX_TIM2_Init+0xa4>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80037ec:	4b1a      	ldr	r3, [pc, #104]	; (8003858 <MX_TIM2_Init+0xa4>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	4252      	negs	r2, r2
 80037f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037f4:	4b18      	ldr	r3, [pc, #96]	; (8003858 <MX_TIM2_Init+0xa4>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037fa:	4b17      	ldr	r3, [pc, #92]	; (8003858 <MX_TIM2_Init+0xa4>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003800:	4b15      	ldr	r3, [pc, #84]	; (8003858 <MX_TIM2_Init+0xa4>)
 8003802:	0018      	movs	r0, r3
 8003804:	f002 fbc2 	bl	8005f8c <HAL_TIM_Base_Init>
 8003808:	1e03      	subs	r3, r0, #0
 800380a:	d001      	beq.n	8003810 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800380c:	f000 f9f2 	bl	8003bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003810:	2110      	movs	r1, #16
 8003812:	187b      	adds	r3, r7, r1
 8003814:	2280      	movs	r2, #128	; 0x80
 8003816:	0152      	lsls	r2, r2, #5
 8003818:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800381a:	187a      	adds	r2, r7, r1
 800381c:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <MX_TIM2_Init+0xa4>)
 800381e:	0011      	movs	r1, r2
 8003820:	0018      	movs	r0, r3
 8003822:	f002 ff79 	bl	8006718 <HAL_TIM_ConfigClockSource>
 8003826:	1e03      	subs	r3, r0, #0
 8003828:	d001      	beq.n	800382e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800382a:	f000 f9e3 	bl	8003bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800382e:	1d3b      	adds	r3, r7, #4
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003834:	1d3b      	adds	r3, r7, #4
 8003836:	2200      	movs	r2, #0
 8003838:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800383a:	1d3a      	adds	r2, r7, #4
 800383c:	4b06      	ldr	r3, [pc, #24]	; (8003858 <MX_TIM2_Init+0xa4>)
 800383e:	0011      	movs	r1, r2
 8003840:	0018      	movs	r0, r3
 8003842:	f003 fc11 	bl	8007068 <HAL_TIMEx_MasterConfigSynchronization>
 8003846:	1e03      	subs	r3, r0, #0
 8003848:	d001      	beq.n	800384e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800384a:	f000 f9d3 	bl	8003bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	46bd      	mov	sp, r7
 8003852:	b008      	add	sp, #32
 8003854:	bd80      	pop	{r7, pc}
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	200002ac 	.word	0x200002ac

0800385c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b088      	sub	sp, #32
 8003860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003862:	2310      	movs	r3, #16
 8003864:	18fb      	adds	r3, r7, r3
 8003866:	0018      	movs	r0, r3
 8003868:	2310      	movs	r3, #16
 800386a:	001a      	movs	r2, r3
 800386c:	2100      	movs	r1, #0
 800386e:	f006 fae1 	bl	8009e34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003872:	1d3b      	adds	r3, r7, #4
 8003874:	0018      	movs	r0, r3
 8003876:	230c      	movs	r3, #12
 8003878:	001a      	movs	r2, r3
 800387a:	2100      	movs	r1, #0
 800387c:	f006 fada 	bl	8009e34 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003880:	4b1e      	ldr	r3, [pc, #120]	; (80038fc <MX_TIM3_Init+0xa0>)
 8003882:	4a1f      	ldr	r2, [pc, #124]	; (8003900 <MX_TIM3_Init+0xa4>)
 8003884:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8003886:	4b1d      	ldr	r3, [pc, #116]	; (80038fc <MX_TIM3_Init+0xa0>)
 8003888:	223f      	movs	r2, #63	; 0x3f
 800388a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800388c:	4b1b      	ldr	r3, [pc, #108]	; (80038fc <MX_TIM3_Init+0xa0>)
 800388e:	2200      	movs	r2, #0
 8003890:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF -1;
 8003892:	4b1a      	ldr	r3, [pc, #104]	; (80038fc <MX_TIM3_Init+0xa0>)
 8003894:	4a1b      	ldr	r2, [pc, #108]	; (8003904 <MX_TIM3_Init+0xa8>)
 8003896:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003898:	4b18      	ldr	r3, [pc, #96]	; (80038fc <MX_TIM3_Init+0xa0>)
 800389a:	2200      	movs	r2, #0
 800389c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800389e:	4b17      	ldr	r3, [pc, #92]	; (80038fc <MX_TIM3_Init+0xa0>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80038a4:	4b15      	ldr	r3, [pc, #84]	; (80038fc <MX_TIM3_Init+0xa0>)
 80038a6:	0018      	movs	r0, r3
 80038a8:	f002 fb70 	bl	8005f8c <HAL_TIM_Base_Init>
 80038ac:	1e03      	subs	r3, r0, #0
 80038ae:	d001      	beq.n	80038b4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80038b0:	f000 f9a0 	bl	8003bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038b4:	2110      	movs	r1, #16
 80038b6:	187b      	adds	r3, r7, r1
 80038b8:	2280      	movs	r2, #128	; 0x80
 80038ba:	0152      	lsls	r2, r2, #5
 80038bc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80038be:	187a      	adds	r2, r7, r1
 80038c0:	4b0e      	ldr	r3, [pc, #56]	; (80038fc <MX_TIM3_Init+0xa0>)
 80038c2:	0011      	movs	r1, r2
 80038c4:	0018      	movs	r0, r3
 80038c6:	f002 ff27 	bl	8006718 <HAL_TIM_ConfigClockSource>
 80038ca:	1e03      	subs	r3, r0, #0
 80038cc:	d001      	beq.n	80038d2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80038ce:	f000 f991 	bl	8003bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038d2:	1d3b      	adds	r3, r7, #4
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038d8:	1d3b      	adds	r3, r7, #4
 80038da:	2200      	movs	r2, #0
 80038dc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038de:	1d3a      	adds	r2, r7, #4
 80038e0:	4b06      	ldr	r3, [pc, #24]	; (80038fc <MX_TIM3_Init+0xa0>)
 80038e2:	0011      	movs	r1, r2
 80038e4:	0018      	movs	r0, r3
 80038e6:	f003 fbbf 	bl	8007068 <HAL_TIMEx_MasterConfigSynchronization>
 80038ea:	1e03      	subs	r3, r0, #0
 80038ec:	d001      	beq.n	80038f2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80038ee:	f000 f981 	bl	8003bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	46bd      	mov	sp, r7
 80038f6:	b008      	add	sp, #32
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	200002f8 	.word	0x200002f8
 8003900:	40000400 	.word	0x40000400
 8003904:	0000fffe 	.word	0x0000fffe

08003908 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800390c:	4b0e      	ldr	r3, [pc, #56]	; (8003948 <MX_TIM14_Init+0x40>)
 800390e:	4a0f      	ldr	r2, [pc, #60]	; (800394c <MX_TIM14_Init+0x44>)
 8003910:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 64-1;
 8003912:	4b0d      	ldr	r3, [pc, #52]	; (8003948 <MX_TIM14_Init+0x40>)
 8003914:	223f      	movs	r2, #63	; 0x3f
 8003916:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003918:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <MX_TIM14_Init+0x40>)
 800391a:	2200      	movs	r2, #0
 800391c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800391e:	4b0a      	ldr	r3, [pc, #40]	; (8003948 <MX_TIM14_Init+0x40>)
 8003920:	4a0b      	ldr	r2, [pc, #44]	; (8003950 <MX_TIM14_Init+0x48>)
 8003922:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003924:	4b08      	ldr	r3, [pc, #32]	; (8003948 <MX_TIM14_Init+0x40>)
 8003926:	2200      	movs	r2, #0
 8003928:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800392a:	4b07      	ldr	r3, [pc, #28]	; (8003948 <MX_TIM14_Init+0x40>)
 800392c:	2200      	movs	r2, #0
 800392e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003930:	4b05      	ldr	r3, [pc, #20]	; (8003948 <MX_TIM14_Init+0x40>)
 8003932:	0018      	movs	r0, r3
 8003934:	f002 fb2a 	bl	8005f8c <HAL_TIM_Base_Init>
 8003938:	1e03      	subs	r3, r0, #0
 800393a:	d001      	beq.n	8003940 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 800393c:	f000 f95a 	bl	8003bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003940:	46c0      	nop			; (mov r8, r8)
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	20000344 	.word	0x20000344
 800394c:	40002000 	.word	0x40002000
 8003950:	0000ffff 	.word	0x0000ffff

08003954 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003958:	4b0f      	ldr	r3, [pc, #60]	; (8003998 <MX_TIM16_Init+0x44>)
 800395a:	4a10      	ldr	r2, [pc, #64]	; (800399c <MX_TIM16_Init+0x48>)
 800395c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64-1;
 800395e:	4b0e      	ldr	r3, [pc, #56]	; (8003998 <MX_TIM16_Init+0x44>)
 8003960:	223f      	movs	r2, #63	; 0x3f
 8003962:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003964:	4b0c      	ldr	r3, [pc, #48]	; (8003998 <MX_TIM16_Init+0x44>)
 8003966:	2200      	movs	r2, #0
 8003968:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800396a:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <MX_TIM16_Init+0x44>)
 800396c:	4a0c      	ldr	r2, [pc, #48]	; (80039a0 <MX_TIM16_Init+0x4c>)
 800396e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003970:	4b09      	ldr	r3, [pc, #36]	; (8003998 <MX_TIM16_Init+0x44>)
 8003972:	2200      	movs	r2, #0
 8003974:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003976:	4b08      	ldr	r3, [pc, #32]	; (8003998 <MX_TIM16_Init+0x44>)
 8003978:	2200      	movs	r2, #0
 800397a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800397c:	4b06      	ldr	r3, [pc, #24]	; (8003998 <MX_TIM16_Init+0x44>)
 800397e:	2200      	movs	r2, #0
 8003980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003982:	4b05      	ldr	r3, [pc, #20]	; (8003998 <MX_TIM16_Init+0x44>)
 8003984:	0018      	movs	r0, r3
 8003986:	f002 fb01 	bl	8005f8c <HAL_TIM_Base_Init>
 800398a:	1e03      	subs	r3, r0, #0
 800398c:	d001      	beq.n	8003992 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800398e:	f000 f931 	bl	8003bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	20000390 	.word	0x20000390
 800399c:	40014400 	.word	0x40014400
 80039a0:	0000ffff 	.word	0x0000ffff

080039a4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80039a8:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <MX_TIM17_Init+0x44>)
 80039aa:	4a10      	ldr	r2, [pc, #64]	; (80039ec <MX_TIM17_Init+0x48>)
 80039ac:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 64-1;
 80039ae:	4b0e      	ldr	r3, [pc, #56]	; (80039e8 <MX_TIM17_Init+0x44>)
 80039b0:	223f      	movs	r2, #63	; 0x3f
 80039b2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039b4:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <MX_TIM17_Init+0x44>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80039ba:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <MX_TIM17_Init+0x44>)
 80039bc:	4a0c      	ldr	r2, [pc, #48]	; (80039f0 <MX_TIM17_Init+0x4c>)
 80039be:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039c0:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <MX_TIM17_Init+0x44>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80039c6:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <MX_TIM17_Init+0x44>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039cc:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <MX_TIM17_Init+0x44>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80039d2:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <MX_TIM17_Init+0x44>)
 80039d4:	0018      	movs	r0, r3
 80039d6:	f002 fad9 	bl	8005f8c <HAL_TIM_Base_Init>
 80039da:	1e03      	subs	r3, r0, #0
 80039dc:	d001      	beq.n	80039e2 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 80039de:	f000 f909 	bl	8003bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80039e2:	46c0      	nop			; (mov r8, r8)
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	200003dc 	.word	0x200003dc
 80039ec:	40014800 	.word	0x40014800
 80039f0:	0000ffff 	.word	0x0000ffff

080039f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80039f8:	4b27      	ldr	r3, [pc, #156]	; (8003a98 <MX_USART1_UART_Init+0xa4>)
 80039fa:	4a28      	ldr	r2, [pc, #160]	; (8003a9c <MX_USART1_UART_Init+0xa8>)
 80039fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80039fe:	4b26      	ldr	r3, [pc, #152]	; (8003a98 <MX_USART1_UART_Init+0xa4>)
 8003a00:	22e1      	movs	r2, #225	; 0xe1
 8003a02:	0252      	lsls	r2, r2, #9
 8003a04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a06:	4b24      	ldr	r3, [pc, #144]	; (8003a98 <MX_USART1_UART_Init+0xa4>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a0c:	4b22      	ldr	r3, [pc, #136]	; (8003a98 <MX_USART1_UART_Init+0xa4>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a12:	4b21      	ldr	r3, [pc, #132]	; (8003a98 <MX_USART1_UART_Init+0xa4>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a18:	4b1f      	ldr	r3, [pc, #124]	; (8003a98 <MX_USART1_UART_Init+0xa4>)
 8003a1a:	220c      	movs	r2, #12
 8003a1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a1e:	4b1e      	ldr	r3, [pc, #120]	; (8003a98 <MX_USART1_UART_Init+0xa4>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a24:	4b1c      	ldr	r3, [pc, #112]	; (8003a98 <MX_USART1_UART_Init+0xa4>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a2a:	4b1b      	ldr	r3, [pc, #108]	; (8003a98 <MX_USART1_UART_Init+0xa4>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003a30:	4b19      	ldr	r3, [pc, #100]	; (8003a98 <MX_USART1_UART_Init+0xa4>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8003a36:	4b18      	ldr	r3, [pc, #96]	; (8003a98 <MX_USART1_UART_Init+0xa4>)
 8003a38:	2230      	movs	r2, #48	; 0x30
 8003a3a:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003a3c:	4b16      	ldr	r3, [pc, #88]	; (8003a98 <MX_USART1_UART_Init+0xa4>)
 8003a3e:	2280      	movs	r2, #128	; 0x80
 8003a40:	0152      	lsls	r2, r2, #5
 8003a42:	63da      	str	r2, [r3, #60]	; 0x3c
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8003a44:	4b14      	ldr	r3, [pc, #80]	; (8003a98 <MX_USART1_UART_Init+0xa4>)
 8003a46:	2280      	movs	r2, #128	; 0x80
 8003a48:	0192      	lsls	r2, r2, #6
 8003a4a:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a4c:	4b12      	ldr	r3, [pc, #72]	; (8003a98 <MX_USART1_UART_Init+0xa4>)
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f003 fc18 	bl	8007284 <HAL_UART_Init>
 8003a54:	1e03      	subs	r3, r0, #0
 8003a56:	d001      	beq.n	8003a5c <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8003a58:	f000 f8cc 	bl	8003bf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a5c:	4b0e      	ldr	r3, [pc, #56]	; (8003a98 <MX_USART1_UART_Init+0xa4>)
 8003a5e:	2100      	movs	r1, #0
 8003a60:	0018      	movs	r0, r3
 8003a62:	f005 fb01 	bl	8009068 <HAL_UARTEx_SetTxFifoThreshold>
 8003a66:	1e03      	subs	r3, r0, #0
 8003a68:	d001      	beq.n	8003a6e <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8003a6a:	f000 f8c3 	bl	8003bf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a6e:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <MX_USART1_UART_Init+0xa4>)
 8003a70:	2100      	movs	r1, #0
 8003a72:	0018      	movs	r0, r3
 8003a74:	f005 fb38 	bl	80090e8 <HAL_UARTEx_SetRxFifoThreshold>
 8003a78:	1e03      	subs	r3, r0, #0
 8003a7a:	d001      	beq.n	8003a80 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003a7c:	f000 f8ba 	bl	8003bf4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003a80:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <MX_USART1_UART_Init+0xa4>)
 8003a82:	0018      	movs	r0, r3
 8003a84:	f005 fab6 	bl	8008ff4 <HAL_UARTEx_DisableFifoMode>
 8003a88:	1e03      	subs	r3, r0, #0
 8003a8a:	d001      	beq.n	8003a90 <MX_USART1_UART_Init+0x9c>
  {
    Error_Handler();
 8003a8c:	f000 f8b2 	bl	8003bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	20000428 	.word	0x20000428
 8003a9c:	40013800 	.word	0x40013800

08003aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003aa0:	b590      	push	{r4, r7, lr}
 8003aa2:	b089      	sub	sp, #36	; 0x24
 8003aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa6:	240c      	movs	r4, #12
 8003aa8:	193b      	adds	r3, r7, r4
 8003aaa:	0018      	movs	r0, r3
 8003aac:	2314      	movs	r3, #20
 8003aae:	001a      	movs	r2, r3
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	f006 f9bf 	bl	8009e34 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ab6:	4b4d      	ldr	r3, [pc, #308]	; (8003bec <MX_GPIO_Init+0x14c>)
 8003ab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aba:	4b4c      	ldr	r3, [pc, #304]	; (8003bec <MX_GPIO_Init+0x14c>)
 8003abc:	2102      	movs	r1, #2
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	635a      	str	r2, [r3, #52]	; 0x34
 8003ac2:	4b4a      	ldr	r3, [pc, #296]	; (8003bec <MX_GPIO_Init+0x14c>)
 8003ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	4013      	ands	r3, r2
 8003aca:	60bb      	str	r3, [r7, #8]
 8003acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ace:	4b47      	ldr	r3, [pc, #284]	; (8003bec <MX_GPIO_Init+0x14c>)
 8003ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ad2:	4b46      	ldr	r3, [pc, #280]	; (8003bec <MX_GPIO_Init+0x14c>)
 8003ad4:	2104      	movs	r1, #4
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	635a      	str	r2, [r3, #52]	; 0x34
 8003ada:	4b44      	ldr	r3, [pc, #272]	; (8003bec <MX_GPIO_Init+0x14c>)
 8003adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ade:	2204      	movs	r2, #4
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	607b      	str	r3, [r7, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ae6:	4b41      	ldr	r3, [pc, #260]	; (8003bec <MX_GPIO_Init+0x14c>)
 8003ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aea:	4b40      	ldr	r3, [pc, #256]	; (8003bec <MX_GPIO_Init+0x14c>)
 8003aec:	2101      	movs	r1, #1
 8003aee:	430a      	orrs	r2, r1
 8003af0:	635a      	str	r2, [r3, #52]	; 0x34
 8003af2:	4b3e      	ldr	r3, [pc, #248]	; (8003bec <MX_GPIO_Init+0x14c>)
 8003af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af6:	2201      	movs	r2, #1
 8003af8:	4013      	ands	r3, r2
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SW_CS_Pin|SH_LD_Pin|STATUS_LED_Pin, GPIO_PIN_SET);
 8003afe:	2389      	movs	r3, #137	; 0x89
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	483b      	ldr	r0, [pc, #236]	; (8003bf0 <MX_GPIO_Init+0x150>)
 8003b04:	2201      	movs	r2, #1
 8003b06:	0019      	movs	r1, r3
 8003b08:	f001 facf 	bl	80050aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_CS_GPIO_Port, RGB_CS_Pin, GPIO_PIN_SET);
 8003b0c:	23a0      	movs	r3, #160	; 0xa0
 8003b0e:	05db      	lsls	r3, r3, #23
 8003b10:	2201      	movs	r2, #1
 8003b12:	2110      	movs	r1, #16
 8003b14:	0018      	movs	r0, r3
 8003b16:	f001 fac8 	bl	80050aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BB_CLK_Pin|BB_MOSI_Pin, GPIO_PIN_RESET);
 8003b1a:	23a0      	movs	r3, #160	; 0xa0
 8003b1c:	05db      	lsls	r3, r3, #23
 8003b1e:	2200      	movs	r2, #0
 8003b20:	21a0      	movs	r1, #160	; 0xa0
 8003b22:	0018      	movs	r0, r3
 8003b24:	f001 fac1 	bl	80050aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_CNTL_GPIO_Port, RS485_CNTL_Pin, GPIO_PIN_RESET);
 8003b28:	2380      	movs	r3, #128	; 0x80
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	4830      	ldr	r0, [pc, #192]	; (8003bf0 <MX_GPIO_Init+0x150>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	0019      	movs	r1, r3
 8003b32:	f001 faba 	bl	80050aa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW_CS_Pin SH_LD_Pin STATUS_LED_Pin RS485_CNTL_Pin */
  GPIO_InitStruct.Pin = SW_CS_Pin|SH_LD_Pin|STATUS_LED_Pin|RS485_CNTL_Pin;
 8003b36:	193b      	adds	r3, r7, r4
 8003b38:	22c9      	movs	r2, #201	; 0xc9
 8003b3a:	0092      	lsls	r2, r2, #2
 8003b3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b3e:	193b      	adds	r3, r7, r4
 8003b40:	2201      	movs	r2, #1
 8003b42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b44:	193b      	adds	r3, r7, r4
 8003b46:	2200      	movs	r2, #0
 8003b48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b4a:	193b      	adds	r3, r7, r4
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b50:	193b      	adds	r3, r7, r4
 8003b52:	4a27      	ldr	r2, [pc, #156]	; (8003bf0 <MX_GPIO_Init+0x150>)
 8003b54:	0019      	movs	r1, r3
 8003b56:	0010      	movs	r0, r2
 8003b58:	f001 f926 	bl	8004da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003b5c:	193b      	adds	r3, r7, r4
 8003b5e:	220f      	movs	r2, #15
 8003b60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b62:	193b      	adds	r3, r7, r4
 8003b64:	2288      	movs	r2, #136	; 0x88
 8003b66:	0352      	lsls	r2, r2, #13
 8003b68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6a:	193b      	adds	r3, r7, r4
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b70:	193a      	adds	r2, r7, r4
 8003b72:	23a0      	movs	r3, #160	; 0xa0
 8003b74:	05db      	lsls	r3, r3, #23
 8003b76:	0011      	movs	r1, r2
 8003b78:	0018      	movs	r0, r3
 8003b7a:	f001 f915 	bl	8004da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RGB_CS_Pin BB_CLK_Pin BB_MOSI_Pin */
  GPIO_InitStruct.Pin = RGB_CS_Pin|BB_CLK_Pin|BB_MOSI_Pin;
 8003b7e:	193b      	adds	r3, r7, r4
 8003b80:	22b0      	movs	r2, #176	; 0xb0
 8003b82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b84:	193b      	adds	r3, r7, r4
 8003b86:	2201      	movs	r2, #1
 8003b88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8a:	193b      	adds	r3, r7, r4
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b90:	193b      	adds	r3, r7, r4
 8003b92:	2200      	movs	r2, #0
 8003b94:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b96:	193a      	adds	r2, r7, r4
 8003b98:	23a0      	movs	r3, #160	; 0xa0
 8003b9a:	05db      	lsls	r3, r3, #23
 8003b9c:	0011      	movs	r1, r2
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f001 f902 	bl	8004da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BB_MISO_Pin */
  GPIO_InitStruct.Pin = BB_MISO_Pin;
 8003ba4:	193b      	adds	r3, r7, r4
 8003ba6:	2240      	movs	r2, #64	; 0x40
 8003ba8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003baa:	193b      	adds	r3, r7, r4
 8003bac:	2200      	movs	r2, #0
 8003bae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bb0:	193b      	adds	r3, r7, r4
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BB_MISO_GPIO_Port, &GPIO_InitStruct);
 8003bb6:	193a      	adds	r2, r7, r4
 8003bb8:	23a0      	movs	r3, #160	; 0xa0
 8003bba:	05db      	lsls	r3, r3, #23
 8003bbc:	0011      	movs	r1, r2
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f001 f8f2 	bl	8004da8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	2005      	movs	r0, #5
 8003bca:	f000 ffef 	bl	8004bac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003bce:	2005      	movs	r0, #5
 8003bd0:	f001 f801 	bl	8004bd6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	2006      	movs	r0, #6
 8003bda:	f000 ffe7 	bl	8004bac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8003bde:	2006      	movs	r0, #6
 8003be0:	f000 fff9 	bl	8004bd6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003be4:	46c0      	nop			; (mov r8, r8)
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b009      	add	sp, #36	; 0x24
 8003bea:	bd90      	pop	{r4, r7, pc}
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	50000400 	.word	0x50000400

08003bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003bf8:	b672      	cpsid	i
}
 8003bfa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003bfc:	e7fe      	b.n	8003bfc <Error_Handler+0x8>
	...

08003c00 <sendData>:
extern uint8_t SlaveID;
uint8_t errorDataPosition[16],LoadRequestFlag = 0,PickupFlag = 0;
static uint16_t AccupiedData,WrongPickData,WrongPlaceData,PickupSlots;

void sendData (uint8_t *data, int size)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
	// we will calculate the CRC in this function itself
	uint8_t crc = crc16(data, size);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	0011      	movs	r1, r2
 8003c12:	0018      	movs	r0, r3
 8003c14:	f000 fb28 	bl	8004268 <crc16>
 8003c18:	0003      	movs	r3, r0
 8003c1a:	001a      	movs	r2, r3
 8003c1c:	210f      	movs	r1, #15
 8003c1e:	187b      	adds	r3, r7, r1
 8003c20:	701a      	strb	r2, [r3, #0]
	data[size] = crc;   // CRC LOW
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	18d3      	adds	r3, r2, r3
 8003c28:	187a      	adds	r2, r7, r1
 8003c2a:	7812      	ldrb	r2, [r2, #0]
 8003c2c:	701a      	strb	r2, [r3, #0]
	data[size+1] = (crc>>8)&0xFF;  // CRC HIGH
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	3301      	adds	r3, #1
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	18d3      	adds	r3, r2, r3
 8003c36:	2200      	movs	r2, #0
 8003c38:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RS485_CNTL_GPIO_Port, RS485_CNTL_Pin, GPIO_PIN_SET);
 8003c3a:	2380      	movs	r3, #128	; 0x80
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	480d      	ldr	r0, [pc, #52]	; (8003c74 <sendData+0x74>)
 8003c40:	2201      	movs	r2, #1
 8003c42:	0019      	movs	r1, r3
 8003c44:	f001 fa31 	bl	80050aa <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, data, size+2, 1000);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	3302      	adds	r3, #2
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	23fa      	movs	r3, #250	; 0xfa
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	4808      	ldr	r0, [pc, #32]	; (8003c78 <sendData+0x78>)
 8003c58:	f003 fb6a 	bl	8007330 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(RS485_CNTL_GPIO_Port, RS485_CNTL_Pin, GPIO_PIN_RESET);
 8003c5c:	2380      	movs	r3, #128	; 0x80
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	4804      	ldr	r0, [pc, #16]	; (8003c74 <sendData+0x74>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	0019      	movs	r1, r3
 8003c66:	f001 fa20 	bl	80050aa <HAL_GPIO_WritePin>
}
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b004      	add	sp, #16
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	50000400 	.word	0x50000400
 8003c78:	20000428 	.word	0x20000428

08003c7c <modbusException>:

void modbusException (uint8_t exceptioncode)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	0002      	movs	r2, r0
 8003c84:	1dfb      	adds	r3, r7, #7
 8003c86:	701a      	strb	r2, [r3, #0]
	//| SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	//| 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	TxData[0] = RxData[0];       // slave ID
 8003c88:	4b0c      	ldr	r3, [pc, #48]	; (8003cbc <modbusException+0x40>)
 8003c8a:	781a      	ldrb	r2, [r3, #0]
 8003c8c:	4b0c      	ldr	r3, [pc, #48]	; (8003cc0 <modbusException+0x44>)
 8003c8e:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1]|0x80;  // adding 1 to the MSB of the function code
 8003c90:	4b0a      	ldr	r3, [pc, #40]	; (8003cbc <modbusException+0x40>)
 8003c92:	785b      	ldrb	r3, [r3, #1]
 8003c94:	2280      	movs	r2, #128	; 0x80
 8003c96:	4252      	negs	r2, r2
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	4b08      	ldr	r3, [pc, #32]	; (8003cc0 <modbusException+0x44>)
 8003c9e:	705a      	strb	r2, [r3, #1]
	TxData[2] = exceptioncode;   // Load the Exception code
 8003ca0:	4b07      	ldr	r3, [pc, #28]	; (8003cc0 <modbusException+0x44>)
 8003ca2:	1dfa      	adds	r2, r7, #7
 8003ca4:	7812      	ldrb	r2, [r2, #0]
 8003ca6:	709a      	strb	r2, [r3, #2]
	sendData(TxData, 3);         // send Data... CRC will be calculated in the function
 8003ca8:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <modbusException+0x44>)
 8003caa:	2103      	movs	r1, #3
 8003cac:	0018      	movs	r0, r3
 8003cae:	f7ff ffa7 	bl	8003c00 <sendData>
}
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	b002      	add	sp, #8
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	200004c0 	.word	0x200004c0
 8003cc0:	200004f4 	.word	0x200004f4

08003cc4 <updateSlotData>:

void updateSlotData(void)
{
 8003cc4:	b590      	push	{r4, r7, lr}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
	uint16_t StorageSlots = ((RxData[2]<<8)|RxData[3]);
 8003cca:	4bb3      	ldr	r3, [pc, #716]	; (8003f98 <updateSlotData+0x2d4>)
 8003ccc:	789b      	ldrb	r3, [r3, #2]
 8003cce:	021b      	lsls	r3, r3, #8
 8003cd0:	b21a      	sxth	r2, r3
 8003cd2:	4bb1      	ldr	r3, [pc, #708]	; (8003f98 <updateSlotData+0x2d4>)
 8003cd4:	78db      	ldrb	r3, [r3, #3]
 8003cd6:	b21b      	sxth	r3, r3
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	b21a      	sxth	r2, r3
 8003cdc:	2316      	movs	r3, #22
 8003cde:	18fb      	adds	r3, r7, r3
 8003ce0:	801a      	strh	r2, [r3, #0]
	uint16_t WrongPickup = ((RxData[4]<<8)|RxData[5]);
 8003ce2:	4bad      	ldr	r3, [pc, #692]	; (8003f98 <updateSlotData+0x2d4>)
 8003ce4:	791b      	ldrb	r3, [r3, #4]
 8003ce6:	021b      	lsls	r3, r3, #8
 8003ce8:	b21a      	sxth	r2, r3
 8003cea:	4bab      	ldr	r3, [pc, #684]	; (8003f98 <updateSlotData+0x2d4>)
 8003cec:	795b      	ldrb	r3, [r3, #5]
 8003cee:	b21b      	sxth	r3, r3
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	b21a      	sxth	r2, r3
 8003cf4:	2408      	movs	r4, #8
 8003cf6:	193b      	adds	r3, r7, r4
 8003cf8:	801a      	strh	r2, [r3, #0]
	uint16_t PresentSlotData = *(uint16_t *)&Slot;
 8003cfa:	4aa8      	ldr	r2, [pc, #672]	; (8003f9c <updateSlotData+0x2d8>)
 8003cfc:	2114      	movs	r1, #20
 8003cfe:	187b      	adds	r3, r7, r1
 8003d00:	8812      	ldrh	r2, [r2, #0]
 8003d02:	801a      	strh	r2, [r3, #0]
	uint16_t WrongEmptySlot = 0,WrongReelPlaced = 0,WrongPick = 0,EmptySlot = 0;
 8003d04:	2312      	movs	r3, #18
 8003d06:	18fb      	adds	r3, r7, r3
 8003d08:	2200      	movs	r2, #0
 8003d0a:	801a      	strh	r2, [r3, #0]
 8003d0c:	2310      	movs	r3, #16
 8003d0e:	18fb      	adds	r3, r7, r3
 8003d10:	2200      	movs	r2, #0
 8003d12:	801a      	strh	r2, [r3, #0]
 8003d14:	230e      	movs	r3, #14
 8003d16:	18fb      	adds	r3, r7, r3
 8003d18:	2200      	movs	r2, #0
 8003d1a:	801a      	strh	r2, [r3, #0]
 8003d1c:	230c      	movs	r3, #12
 8003d1e:	18fb      	adds	r3, r7, r3
 8003d20:	2200      	movs	r2, #0
 8003d22:	801a      	strh	r2, [r3, #0]
	int8_t i = 0, errcnt = 0;
 8003d24:	230b      	movs	r3, #11
 8003d26:	18fb      	adds	r3, r7, r3
 8003d28:	2200      	movs	r2, #0
 8003d2a:	701a      	strb	r2, [r3, #0]
 8003d2c:	230a      	movs	r3, #10
 8003d2e:	18fb      	adds	r3, r7, r3
 8003d30:	2200      	movs	r2, #0
 8003d32:	701a      	strb	r2, [r3, #0]

	if(LoadRequestFlag == 1){
 8003d34:	4b9a      	ldr	r3, [pc, #616]	; (8003fa0 <updateSlotData+0x2dc>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d113      	bne.n	8003d64 <updateSlotData+0xa0>
		PresentSlotData |= WrongPickup;
 8003d3c:	187b      	adds	r3, r7, r1
 8003d3e:	0008      	movs	r0, r1
 8003d40:	1879      	adds	r1, r7, r1
 8003d42:	193a      	adds	r2, r7, r4
 8003d44:	8809      	ldrh	r1, [r1, #0]
 8003d46:	8812      	ldrh	r2, [r2, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	801a      	strh	r2, [r3, #0]
		PresentSlotData &= ~(WrongPlaceData);
 8003d4c:	4b95      	ldr	r3, [pc, #596]	; (8003fa4 <updateSlotData+0x2e0>)
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	b21b      	sxth	r3, r3
 8003d52:	43db      	mvns	r3, r3
 8003d54:	b21b      	sxth	r3, r3
 8003d56:	183a      	adds	r2, r7, r0
 8003d58:	2100      	movs	r1, #0
 8003d5a:	5e52      	ldrsh	r2, [r2, r1]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	b21a      	sxth	r2, r3
 8003d60:	183b      	adds	r3, r7, r0
 8003d62:	801a      	strh	r2, [r3, #0]
	}

	if(PickupFlag == 1){
 8003d64:	4b90      	ldr	r3, [pc, #576]	; (8003fa8 <updateSlotData+0x2e4>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d10c      	bne.n	8003d86 <updateSlotData+0xc2>
		StorageSlots &= ~(WrongPickData);
 8003d6c:	4b8f      	ldr	r3, [pc, #572]	; (8003fac <updateSlotData+0x2e8>)
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	b21b      	sxth	r3, r3
 8003d72:	43db      	mvns	r3, r3
 8003d74:	b21b      	sxth	r3, r3
 8003d76:	2116      	movs	r1, #22
 8003d78:	187a      	adds	r2, r7, r1
 8003d7a:	2000      	movs	r0, #0
 8003d7c:	5e12      	ldrsh	r2, [r2, r0]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	b21a      	sxth	r2, r3
 8003d82:	187b      	adds	r3, r7, r1
 8003d84:	801a      	strh	r2, [r3, #0]
//		PresentSlotData |= WrongPickup;
//		PresentSlotData &= ~(WrongPlaceData);
	}
	if((RxData[1] == 0x01) && (LoadRequestFlag == 0) && (PickupFlag == 0)){
 8003d86:	4b84      	ldr	r3, [pc, #528]	; (8003f98 <updateSlotData+0x2d4>)
 8003d88:	785b      	ldrb	r3, [r3, #1]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d10d      	bne.n	8003daa <updateSlotData+0xe6>
 8003d8e:	4b84      	ldr	r3, [pc, #528]	; (8003fa0 <updateSlotData+0x2dc>)
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d109      	bne.n	8003daa <updateSlotData+0xe6>
 8003d96:	4b84      	ldr	r3, [pc, #528]	; (8003fa8 <updateSlotData+0x2e4>)
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d105      	bne.n	8003daa <updateSlotData+0xe6>
		WrongPickData = 0x00;
 8003d9e:	4b83      	ldr	r3, [pc, #524]	; (8003fac <updateSlotData+0x2e8>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	801a      	strh	r2, [r3, #0]
		WrongPlaceData = 0x00;
 8003da4:	4b7f      	ldr	r3, [pc, #508]	; (8003fa4 <updateSlotData+0x2e0>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	801a      	strh	r2, [r3, #0]
	}

	uint16_t DataCompare = StorageSlots ^ PresentSlotData;
 8003daa:	1dbb      	adds	r3, r7, #6
 8003dac:	2216      	movs	r2, #22
 8003dae:	18b9      	adds	r1, r7, r2
 8003db0:	2214      	movs	r2, #20
 8003db2:	18ba      	adds	r2, r7, r2
 8003db4:	8809      	ldrh	r1, [r1, #0]
 8003db6:	8812      	ldrh	r2, [r2, #0]
 8003db8:	404a      	eors	r2, r1
 8003dba:	801a      	strh	r2, [r3, #0]
	UpdateSlotLeds(WrongPickup,PickupError);
 8003dbc:	2308      	movs	r3, #8
 8003dbe:	18fb      	adds	r3, r7, r3
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	2104      	movs	r1, #4
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f7fe fdad 	bl	8002924 <UpdateSlotLeds>
	if(DataCompare)
 8003dca:	1dbb      	adds	r3, r7, #6
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d100      	bne.n	8003dd4 <updateSlotData+0x110>
 8003dd2:	e1ae      	b.n	8004132 <updateSlotData+0x46e>
	{
		for(i = 0; i < 16; i++)
 8003dd4:	230b      	movs	r3, #11
 8003dd6:	18fb      	adds	r3, r7, r3
 8003dd8:	2200      	movs	r2, #0
 8003dda:	701a      	strb	r2, [r3, #0]
 8003ddc:	e020      	b.n	8003e20 <updateSlotData+0x15c>
		{
			if(DataCompare & (0x01 << i))
 8003dde:	1dbb      	adds	r3, r7, #6
 8003de0:	881a      	ldrh	r2, [r3, #0]
 8003de2:	200b      	movs	r0, #11
 8003de4:	183b      	adds	r3, r7, r0
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	b25b      	sxtb	r3, r3
 8003dea:	411a      	asrs	r2, r3
 8003dec:	0013      	movs	r3, r2
 8003dee:	2201      	movs	r2, #1
 8003df0:	4013      	ands	r3, r2
 8003df2:	d00c      	beq.n	8003e0e <updateSlotData+0x14a>
				errorDataPosition[errcnt++] = i;
 8003df4:	240a      	movs	r4, #10
 8003df6:	193b      	adds	r3, r7, r4
 8003df8:	2200      	movs	r2, #0
 8003dfa:	569a      	ldrsb	r2, [r3, r2]
 8003dfc:	b2d3      	uxtb	r3, r2
 8003dfe:	3301      	adds	r3, #1
 8003e00:	b2d9      	uxtb	r1, r3
 8003e02:	193b      	adds	r3, r7, r4
 8003e04:	7019      	strb	r1, [r3, #0]
 8003e06:	183b      	adds	r3, r7, r0
 8003e08:	7819      	ldrb	r1, [r3, #0]
 8003e0a:	4b69      	ldr	r3, [pc, #420]	; (8003fb0 <updateSlotData+0x2ec>)
 8003e0c:	5499      	strb	r1, [r3, r2]
		for(i = 0; i < 16; i++)
 8003e0e:	210b      	movs	r1, #11
 8003e10:	187b      	adds	r3, r7, r1
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	b25b      	sxtb	r3, r3
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	3301      	adds	r3, #1
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	187b      	adds	r3, r7, r1
 8003e1e:	701a      	strb	r2, [r3, #0]
 8003e20:	220b      	movs	r2, #11
 8003e22:	18bb      	adds	r3, r7, r2
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	b25b      	sxtb	r3, r3
 8003e28:	2b0f      	cmp	r3, #15
 8003e2a:	ddd8      	ble.n	8003dde <updateSlotData+0x11a>
		}
		i = 0;
 8003e2c:	18bb      	adds	r3, r7, r2
 8003e2e:	2200      	movs	r2, #0
 8003e30:	701a      	strb	r2, [r3, #0]

		while(errcnt > 0)
 8003e32:	e042      	b.n	8003eba <updateSlotData+0x1f6>
		{
			if(StorageSlots & (0x01 << errorDataPosition[i]))
 8003e34:	2316      	movs	r3, #22
 8003e36:	18fb      	adds	r3, r7, r3
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	200b      	movs	r0, #11
 8003e3c:	183a      	adds	r2, r7, r0
 8003e3e:	7812      	ldrb	r2, [r2, #0]
 8003e40:	b252      	sxtb	r2, r2
 8003e42:	495b      	ldr	r1, [pc, #364]	; (8003fb0 <updateSlotData+0x2ec>)
 8003e44:	5c8a      	ldrb	r2, [r1, r2]
 8003e46:	4113      	asrs	r3, r2
 8003e48:	2201      	movs	r2, #1
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	d011      	beq.n	8003e72 <updateSlotData+0x1ae>
				WrongEmptySlot |= (0x01 << errorDataPosition[i]); //Wrong Empty Slot
 8003e4e:	183b      	adds	r3, r7, r0
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	b25b      	sxtb	r3, r3
 8003e54:	4a56      	ldr	r2, [pc, #344]	; (8003fb0 <updateSlotData+0x2ec>)
 8003e56:	5cd3      	ldrb	r3, [r2, r3]
 8003e58:	001a      	movs	r2, r3
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	4093      	lsls	r3, r2
 8003e5e:	b21a      	sxth	r2, r3
 8003e60:	2112      	movs	r1, #18
 8003e62:	187b      	adds	r3, r7, r1
 8003e64:	2000      	movs	r0, #0
 8003e66:	5e1b      	ldrsh	r3, [r3, r0]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	b21a      	sxth	r2, r3
 8003e6c:	187b      	adds	r3, r7, r1
 8003e6e:	801a      	strh	r2, [r3, #0]
 8003e70:	e011      	b.n	8003e96 <updateSlotData+0x1d2>
			else
				WrongReelPlaced |= (0x01 << errorDataPosition[i]); //Wrong material placed
 8003e72:	230b      	movs	r3, #11
 8003e74:	18fb      	adds	r3, r7, r3
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	b25b      	sxtb	r3, r3
 8003e7a:	4a4d      	ldr	r2, [pc, #308]	; (8003fb0 <updateSlotData+0x2ec>)
 8003e7c:	5cd3      	ldrb	r3, [r2, r3]
 8003e7e:	001a      	movs	r2, r3
 8003e80:	2301      	movs	r3, #1
 8003e82:	4093      	lsls	r3, r2
 8003e84:	b21a      	sxth	r2, r3
 8003e86:	2110      	movs	r1, #16
 8003e88:	187b      	adds	r3, r7, r1
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	5e1b      	ldrsh	r3, [r3, r0]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	b21a      	sxth	r2, r3
 8003e92:	187b      	adds	r3, r7, r1
 8003e94:	801a      	strh	r2, [r3, #0]
			i++;
 8003e96:	210b      	movs	r1, #11
 8003e98:	187b      	adds	r3, r7, r1
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	b25b      	sxtb	r3, r3
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	187b      	adds	r3, r7, r1
 8003ea6:	701a      	strb	r2, [r3, #0]
			errcnt--;
 8003ea8:	210a      	movs	r1, #10
 8003eaa:	187b      	adds	r3, r7, r1
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	b25b      	sxtb	r3, r3
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	187b      	adds	r3, r7, r1
 8003eb8:	701a      	strb	r2, [r3, #0]
		while(errcnt > 0)
 8003eba:	230a      	movs	r3, #10
 8003ebc:	18fb      	adds	r3, r7, r3
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	b25b      	sxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	dcb6      	bgt.n	8003e34 <updateSlotData+0x170>
		}

		if(LoadRequestFlag == 1){
 8003ec6:	4b36      	ldr	r3, [pc, #216]	; (8003fa0 <updateSlotData+0x2dc>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d109      	bne.n	8003ee2 <updateSlotData+0x21e>
//			WrongReelPlaced  &=~(WrongPlaceData);
			StorageSlots |= WrongReelPlaced;
 8003ece:	2216      	movs	r2, #22
 8003ed0:	18bb      	adds	r3, r7, r2
 8003ed2:	18b9      	adds	r1, r7, r2
 8003ed4:	2210      	movs	r2, #16
 8003ed6:	18ba      	adds	r2, r7, r2
 8003ed8:	8809      	ldrh	r1, [r1, #0]
 8003eda:	8812      	ldrh	r2, [r2, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	801a      	strh	r2, [r3, #0]
 8003ee0:	e017      	b.n	8003f12 <updateSlotData+0x24e>
//			UpdateSlotLeds(WrongEmptySlot,PickupError);
//			WrongPickData |= WrongEmptySlot;
		}
		else
		{
			WrongPlaceData = WrongReelPlaced;
 8003ee2:	4b30      	ldr	r3, [pc, #192]	; (8003fa4 <updateSlotData+0x2e0>)
 8003ee4:	2210      	movs	r2, #16
 8003ee6:	18ba      	adds	r2, r7, r2
 8003ee8:	8812      	ldrh	r2, [r2, #0]
 8003eea:	801a      	strh	r2, [r3, #0]
			WrongPlaceData &= ~(WrongPickData);
 8003eec:	4b2f      	ldr	r3, [pc, #188]	; (8003fac <updateSlotData+0x2e8>)
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	b21b      	sxth	r3, r3
 8003ef2:	43db      	mvns	r3, r3
 8003ef4:	b21b      	sxth	r3, r3
 8003ef6:	4a2b      	ldr	r2, [pc, #172]	; (8003fa4 <updateSlotData+0x2e0>)
 8003ef8:	8812      	ldrh	r2, [r2, #0]
 8003efa:	b212      	sxth	r2, r2
 8003efc:	4013      	ands	r3, r2
 8003efe:	b21b      	sxth	r3, r3
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	4b28      	ldr	r3, [pc, #160]	; (8003fa4 <updateSlotData+0x2e0>)
 8003f04:	801a      	strh	r2, [r3, #0]
			UpdateSlotLeds(WrongPlaceData,PlaceError);
 8003f06:	4b27      	ldr	r3, [pc, #156]	; (8003fa4 <updateSlotData+0x2e0>)
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	2103      	movs	r1, #3
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	f7fe fd09 	bl	8002924 <UpdateSlotLeds>

		}

		if(PickupFlag == 1){
 8003f12:	4b25      	ldr	r3, [pc, #148]	; (8003fa8 <updateSlotData+0x2e4>)
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d14e      	bne.n	8003fb8 <updateSlotData+0x2f4>
//			PickupFlag = 0;
			WrongPick = WrongEmptySlot & (StorageSlots ^ PickupSlots);
 8003f1a:	4b26      	ldr	r3, [pc, #152]	; (8003fb4 <updateSlotData+0x2f0>)
 8003f1c:	881a      	ldrh	r2, [r3, #0]
 8003f1e:	2316      	movs	r3, #22
 8003f20:	18fb      	adds	r3, r7, r3
 8003f22:	881b      	ldrh	r3, [r3, #0]
 8003f24:	4053      	eors	r3, r2
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	200e      	movs	r0, #14
 8003f2a:	183b      	adds	r3, r7, r0
 8003f2c:	2412      	movs	r4, #18
 8003f2e:	1939      	adds	r1, r7, r4
 8003f30:	8809      	ldrh	r1, [r1, #0]
 8003f32:	400a      	ands	r2, r1
 8003f34:	801a      	strh	r2, [r3, #0]
			WrongPickData |= WrongPick;
 8003f36:	4b1d      	ldr	r3, [pc, #116]	; (8003fac <updateSlotData+0x2e8>)
 8003f38:	881a      	ldrh	r2, [r3, #0]
 8003f3a:	0001      	movs	r1, r0
 8003f3c:	187b      	adds	r3, r7, r1
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	4b19      	ldr	r3, [pc, #100]	; (8003fac <updateSlotData+0x2e8>)
 8003f46:	801a      	strh	r2, [r3, #0]
			WrongPickData &= ~(WrongPlaceData);
 8003f48:	4b16      	ldr	r3, [pc, #88]	; (8003fa4 <updateSlotData+0x2e0>)
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	b21b      	sxth	r3, r3
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	b21b      	sxth	r3, r3
 8003f52:	4a16      	ldr	r2, [pc, #88]	; (8003fac <updateSlotData+0x2e8>)
 8003f54:	8812      	ldrh	r2, [r2, #0]
 8003f56:	b212      	sxth	r2, r2
 8003f58:	4013      	ands	r3, r2
 8003f5a:	b21b      	sxth	r3, r3
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	4b13      	ldr	r3, [pc, #76]	; (8003fac <updateSlotData+0x2e8>)
 8003f60:	801a      	strh	r2, [r3, #0]
			if(WrongPick == 0)
 8003f62:	187b      	adds	r3, r7, r1
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d105      	bne.n	8003f76 <updateSlotData+0x2b2>
				UpdateSlotLeds(WrongEmptySlot,EmptyLocaction);
 8003f6a:	193b      	adds	r3, r7, r4
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	2100      	movs	r1, #0
 8003f70:	0018      	movs	r0, r3
 8003f72:	f7fe fcd7 	bl	8002924 <UpdateSlotLeds>
			UpdateSlotLeds((WrongEmptySlot & (StorageSlots ^ PickupSlots)),PickupError);
 8003f76:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <updateSlotData+0x2f0>)
 8003f78:	881a      	ldrh	r2, [r3, #0]
 8003f7a:	2316      	movs	r3, #22
 8003f7c:	18fb      	adds	r3, r7, r3
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	4053      	eors	r3, r2
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	2212      	movs	r2, #18
 8003f86:	18ba      	adds	r2, r7, r2
 8003f88:	8812      	ldrh	r2, [r2, #0]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	2104      	movs	r1, #4
 8003f90:	0018      	movs	r0, r3
 8003f92:	f7fe fcc7 	bl	8002924 <UpdateSlotLeds>
 8003f96:	e03e      	b.n	8004016 <updateSlotData+0x352>
 8003f98:	200004c0 	.word	0x200004c0
 8003f9c:	2000025c 	.word	0x2000025c
 8003fa0:	20000544 	.word	0x20000544
 8003fa4:	2000054a 	.word	0x2000054a
 8003fa8:	20000545 	.word	0x20000545
 8003fac:	20000548 	.word	0x20000548
 8003fb0:	20000534 	.word	0x20000534
 8003fb4:	2000054c 	.word	0x2000054c

		}
		else
		{
//			WrongPlaceData = WrongReelPlaced;
			WrongEmptySlot &= ~(PickupSlots);
 8003fb8:	4b88      	ldr	r3, [pc, #544]	; (80041dc <updateSlotData+0x518>)
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	b21b      	sxth	r3, r3
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	b21b      	sxth	r3, r3
 8003fc2:	2412      	movs	r4, #18
 8003fc4:	193a      	adds	r2, r7, r4
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	5e52      	ldrsh	r2, [r2, r1]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	b21a      	sxth	r2, r3
 8003fce:	193b      	adds	r3, r7, r4
 8003fd0:	801a      	strh	r2, [r3, #0]
			UpdateSlotLeds(WrongEmptySlot,PickupError);
 8003fd2:	193b      	adds	r3, r7, r4
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	2104      	movs	r1, #4
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f7fe fca3 	bl	8002924 <UpdateSlotLeds>
			WrongPickData |= WrongEmptySlot;
 8003fde:	4b80      	ldr	r3, [pc, #512]	; (80041e0 <updateSlotData+0x51c>)
 8003fe0:	881a      	ldrh	r2, [r3, #0]
 8003fe2:	193b      	adds	r3, r7, r4
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	4b7d      	ldr	r3, [pc, #500]	; (80041e0 <updateSlotData+0x51c>)
 8003fec:	801a      	strh	r2, [r3, #0]
			StorageSlots &=~(WrongPickup);
 8003fee:	2308      	movs	r3, #8
 8003ff0:	18fb      	adds	r3, r7, r3
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	5e9b      	ldrsh	r3, [r3, r2]
 8003ff6:	43db      	mvns	r3, r3
 8003ff8:	b21b      	sxth	r3, r3
 8003ffa:	2116      	movs	r1, #22
 8003ffc:	187a      	adds	r2, r7, r1
 8003ffe:	2000      	movs	r0, #0
 8004000:	5e12      	ldrsh	r2, [r2, r0]
 8004002:	4013      	ands	r3, r2
 8004004:	b21a      	sxth	r2, r3
 8004006:	187b      	adds	r3, r7, r1
 8004008:	801a      	strh	r2, [r3, #0]
			UpdateSlotLeds(StorageSlots,OcupiedLocation);
 800400a:	187b      	adds	r3, r7, r1
 800400c:	881b      	ldrh	r3, [r3, #0]
 800400e:	2101      	movs	r1, #1
 8004010:	0018      	movs	r0, r3
 8004012:	f7fe fc87 	bl	8002924 <UpdateSlotLeds>
		}
//		StorageSlots &= ~(WrongEmptySlot & PickupSlots);
//		StorageSlots &=~(WrongPickup | PickupSlots);
//		UpdateSlotLeds(StorageSlots,OcupiedLocation);
//		StorageSlots |= WrongPlaceData;
		EmptySlot = (EMPTY_SLOT ^ (StorageSlots | DataCompare));
 8004016:	2316      	movs	r3, #22
 8004018:	18fa      	adds	r2, r7, r3
 800401a:	1dbb      	adds	r3, r7, #6
 800401c:	8812      	ldrh	r2, [r2, #0]
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	4313      	orrs	r3, r2
 8004022:	b29a      	uxth	r2, r3
 8004024:	210c      	movs	r1, #12
 8004026:	187b      	adds	r3, r7, r1
 8004028:	43d2      	mvns	r2, r2
 800402a:	801a      	strh	r2, [r3, #0]
		if(LoadRequestFlag == 1)
 800402c:	4b6d      	ldr	r3, [pc, #436]	; (80041e4 <updateSlotData+0x520>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d115      	bne.n	8004060 <updateSlotData+0x39c>
			EmptySlot &=~(WrongPickup | WrongPlaceData | WrongPickData);
 8004034:	4b6c      	ldr	r3, [pc, #432]	; (80041e8 <updateSlotData+0x524>)
 8004036:	881a      	ldrh	r2, [r3, #0]
 8004038:	2308      	movs	r3, #8
 800403a:	18fb      	adds	r3, r7, r3
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	4313      	orrs	r3, r2
 8004040:	b29a      	uxth	r2, r3
 8004042:	4b67      	ldr	r3, [pc, #412]	; (80041e0 <updateSlotData+0x51c>)
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	4313      	orrs	r3, r2
 8004048:	b29b      	uxth	r3, r3
 800404a:	b21b      	sxth	r3, r3
 800404c:	43db      	mvns	r3, r3
 800404e:	b21b      	sxth	r3, r3
 8004050:	187a      	adds	r2, r7, r1
 8004052:	2000      	movs	r0, #0
 8004054:	5e12      	ldrsh	r2, [r2, r0]
 8004056:	4013      	ands	r3, r2
 8004058:	b21a      	sxth	r2, r3
 800405a:	187b      	adds	r3, r7, r1
 800405c:	801a      	strh	r2, [r3, #0]
 800405e:	e00d      	b.n	800407c <updateSlotData+0x3b8>
		else
			EmptySlot &=~(WrongPickup);
 8004060:	2308      	movs	r3, #8
 8004062:	18fb      	adds	r3, r7, r3
 8004064:	2200      	movs	r2, #0
 8004066:	5e9b      	ldrsh	r3, [r3, r2]
 8004068:	43db      	mvns	r3, r3
 800406a:	b21b      	sxth	r3, r3
 800406c:	210c      	movs	r1, #12
 800406e:	187a      	adds	r2, r7, r1
 8004070:	2000      	movs	r0, #0
 8004072:	5e12      	ldrsh	r2, [r2, r0]
 8004074:	4013      	ands	r3, r2
 8004076:	b21a      	sxth	r2, r3
 8004078:	187b      	adds	r3, r7, r1
 800407a:	801a      	strh	r2, [r3, #0]
		UpdateSlotLeds(EmptySlot,EmptyLocaction);
 800407c:	230c      	movs	r3, #12
 800407e:	18fb      	adds	r3, r7, r3
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	2100      	movs	r1, #0
 8004084:	0018      	movs	r0, r3
 8004086:	f7fe fc4d 	bl	8002924 <UpdateSlotLeds>
		TxData[0] = SlaveID;            // slave ID
 800408a:	4b58      	ldr	r3, [pc, #352]	; (80041ec <updateSlotData+0x528>)
 800408c:	781a      	ldrb	r2, [r3, #0]
 800408e:	4b58      	ldr	r3, [pc, #352]	; (80041f0 <updateSlotData+0x52c>)
 8004090:	701a      	strb	r2, [r3, #0]
		if((LoadRequestFlag == 1) && (WrongEmptySlot == 0)){
 8004092:	4b54      	ldr	r3, [pc, #336]	; (80041e4 <updateSlotData+0x520>)
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d116      	bne.n	80040c8 <updateSlotData+0x404>
 800409a:	2312      	movs	r3, #18
 800409c:	18fb      	adds	r3, r7, r3
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d111      	bne.n	80040c8 <updateSlotData+0x404>
			LoadRequestFlag = 0;
 80040a4:	4b4f      	ldr	r3, [pc, #316]	; (80041e4 <updateSlotData+0x520>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x03;				// function code
 80040aa:	4b51      	ldr	r3, [pc, #324]	; (80041f0 <updateSlotData+0x52c>)
 80040ac:	2203      	movs	r2, #3
 80040ae:	705a      	strb	r2, [r3, #1]
			TxData[4] = 0x00;            // Error Status
 80040b0:	4b4f      	ldr	r3, [pc, #316]	; (80041f0 <updateSlotData+0x52c>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	711a      	strb	r2, [r3, #4]
			PresentSlotData |= WrongPickData;
 80040b6:	4b4a      	ldr	r3, [pc, #296]	; (80041e0 <updateSlotData+0x51c>)
 80040b8:	8819      	ldrh	r1, [r3, #0]
 80040ba:	2214      	movs	r2, #20
 80040bc:	18bb      	adds	r3, r7, r2
 80040be:	18ba      	adds	r2, r7, r2
 80040c0:	8812      	ldrh	r2, [r2, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	801a      	strh	r2, [r3, #0]
 80040c6:	e021      	b.n	800410c <updateSlotData+0x448>
		}
		else if((PickupFlag == 1) &&(WrongPick == 0)){
 80040c8:	4b4a      	ldr	r3, [pc, #296]	; (80041f4 <updateSlotData+0x530>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d116      	bne.n	80040fe <updateSlotData+0x43a>
 80040d0:	230e      	movs	r3, #14
 80040d2:	18fb      	adds	r3, r7, r3
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d111      	bne.n	80040fe <updateSlotData+0x43a>
			PickupFlag = 0;
 80040da:	4b46      	ldr	r3, [pc, #280]	; (80041f4 <updateSlotData+0x530>)
 80040dc:	2200      	movs	r2, #0
 80040de:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0x04;				// function code
 80040e0:	4b43      	ldr	r3, [pc, #268]	; (80041f0 <updateSlotData+0x52c>)
 80040e2:	2204      	movs	r2, #4
 80040e4:	705a      	strb	r2, [r3, #1]
			TxData[4] = 0x00;            // Error Status
 80040e6:	4b42      	ldr	r3, [pc, #264]	; (80041f0 <updateSlotData+0x52c>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	711a      	strb	r2, [r3, #4]
			PresentSlotData |= WrongPickData;
 80040ec:	4b3c      	ldr	r3, [pc, #240]	; (80041e0 <updateSlotData+0x51c>)
 80040ee:	8819      	ldrh	r1, [r3, #0]
 80040f0:	2214      	movs	r2, #20
 80040f2:	18bb      	adds	r3, r7, r2
 80040f4:	18ba      	adds	r2, r7, r2
 80040f6:	8812      	ldrh	r2, [r2, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	801a      	strh	r2, [r3, #0]
 80040fc:	e006      	b.n	800410c <updateSlotData+0x448>

		}
		else{
			TxData[1] = RxData[1];           // function code
 80040fe:	4b3e      	ldr	r3, [pc, #248]	; (80041f8 <updateSlotData+0x534>)
 8004100:	785a      	ldrb	r2, [r3, #1]
 8004102:	4b3b      	ldr	r3, [pc, #236]	; (80041f0 <updateSlotData+0x52c>)
 8004104:	705a      	strb	r2, [r3, #1]
			TxData[4] = 0x01;            // Error Status
 8004106:	4b3a      	ldr	r3, [pc, #232]	; (80041f0 <updateSlotData+0x52c>)
 8004108:	2201      	movs	r2, #1
 800410a:	711a      	strb	r2, [r3, #4]
		}
		TxData[2] = ((PresentSlotData >>8) & 0xFF);                //Higher Slot Data byte
 800410c:	2114      	movs	r1, #20
 800410e:	187b      	adds	r3, r7, r1
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	0a1b      	lsrs	r3, r3, #8
 8004114:	b29b      	uxth	r3, r3
 8004116:	b2da      	uxtb	r2, r3
 8004118:	4b35      	ldr	r3, [pc, #212]	; (80041f0 <updateSlotData+0x52c>)
 800411a:	709a      	strb	r2, [r3, #2]
		TxData[3] = PresentSlotData & 0xFF;     					//  Lower Slot Data byte;     // SlotData count
 800411c:	187b      	adds	r3, r7, r1
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	b2da      	uxtb	r2, r3
 8004122:	4b33      	ldr	r3, [pc, #204]	; (80041f0 <updateSlotData+0x52c>)
 8004124:	70da      	strb	r2, [r3, #3]
		sendData(TxData, 5);
 8004126:	4b32      	ldr	r3, [pc, #200]	; (80041f0 <updateSlotData+0x52c>)
 8004128:	2105      	movs	r1, #5
 800412a:	0018      	movs	r0, r3
 800412c:	f7ff fd68 	bl	8003c00 <sendData>
 8004130:	e049      	b.n	80041c6 <updateSlotData+0x502>
//			TxData[4] = 0x00;            // Error Status
//
//		sendData(TxData, 5);  			 // send data... CRC will be calculated in the function itself
    }
	else{
		AccupiedData = (EMPTY_SLOT ^ PresentSlotData);
 8004132:	2314      	movs	r3, #20
 8004134:	18fb      	adds	r3, r7, r3
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	43db      	mvns	r3, r3
 800413a:	b29a      	uxth	r2, r3
 800413c:	4b2f      	ldr	r3, [pc, #188]	; (80041fc <updateSlotData+0x538>)
 800413e:	801a      	strh	r2, [r3, #0]
		if(LoadRequestFlag == 1)
 8004140:	4b28      	ldr	r3, [pc, #160]	; (80041e4 <updateSlotData+0x520>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d112      	bne.n	800416e <updateSlotData+0x4aa>
			AccupiedData &=~(WrongPickup | WrongPlaceData);
 8004148:	4b27      	ldr	r3, [pc, #156]	; (80041e8 <updateSlotData+0x524>)
 800414a:	881a      	ldrh	r2, [r3, #0]
 800414c:	2308      	movs	r3, #8
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	4313      	orrs	r3, r2
 8004154:	b29b      	uxth	r3, r3
 8004156:	b21b      	sxth	r3, r3
 8004158:	43db      	mvns	r3, r3
 800415a:	b21b      	sxth	r3, r3
 800415c:	4a27      	ldr	r2, [pc, #156]	; (80041fc <updateSlotData+0x538>)
 800415e:	8812      	ldrh	r2, [r2, #0]
 8004160:	b212      	sxth	r2, r2
 8004162:	4013      	ands	r3, r2
 8004164:	b21b      	sxth	r3, r3
 8004166:	b29a      	uxth	r2, r3
 8004168:	4b24      	ldr	r3, [pc, #144]	; (80041fc <updateSlotData+0x538>)
 800416a:	801a      	strh	r2, [r3, #0]
 800416c:	e00d      	b.n	800418a <updateSlotData+0x4c6>
		else
			AccupiedData &=~(WrongPickup);
 800416e:	2308      	movs	r3, #8
 8004170:	18fb      	adds	r3, r7, r3
 8004172:	2200      	movs	r2, #0
 8004174:	5e9b      	ldrsh	r3, [r3, r2]
 8004176:	43db      	mvns	r3, r3
 8004178:	b21b      	sxth	r3, r3
 800417a:	4a20      	ldr	r2, [pc, #128]	; (80041fc <updateSlotData+0x538>)
 800417c:	8812      	ldrh	r2, [r2, #0]
 800417e:	b212      	sxth	r2, r2
 8004180:	4013      	ands	r3, r2
 8004182:	b21b      	sxth	r3, r3
 8004184:	b29a      	uxth	r2, r3
 8004186:	4b1d      	ldr	r3, [pc, #116]	; (80041fc <updateSlotData+0x538>)
 8004188:	801a      	strh	r2, [r3, #0]
		UpdateSlotLeds(AccupiedData,EmptyLocaction);
 800418a:	4b1c      	ldr	r3, [pc, #112]	; (80041fc <updateSlotData+0x538>)
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	2100      	movs	r1, #0
 8004190:	0018      	movs	r0, r3
 8004192:	f7fe fbc7 	bl	8002924 <UpdateSlotLeds>
		if(PickupFlag == 0){
 8004196:	4b17      	ldr	r3, [pc, #92]	; (80041f4 <updateSlotData+0x530>)
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d113      	bne.n	80041c6 <updateSlotData+0x502>
			StorageSlots &=~(WrongPickup);
 800419e:	2308      	movs	r3, #8
 80041a0:	18fb      	adds	r3, r7, r3
 80041a2:	2200      	movs	r2, #0
 80041a4:	5e9b      	ldrsh	r3, [r3, r2]
 80041a6:	43db      	mvns	r3, r3
 80041a8:	b21b      	sxth	r3, r3
 80041aa:	2116      	movs	r1, #22
 80041ac:	187a      	adds	r2, r7, r1
 80041ae:	2000      	movs	r0, #0
 80041b0:	5e12      	ldrsh	r2, [r2, r0]
 80041b2:	4013      	ands	r3, r2
 80041b4:	b21a      	sxth	r2, r3
 80041b6:	187b      	adds	r3, r7, r1
 80041b8:	801a      	strh	r2, [r3, #0]
			UpdateSlotLeds(StorageSlots,OcupiedLocation);
 80041ba:	187b      	adds	r3, r7, r1
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	2101      	movs	r1, #1
 80041c0:	0018      	movs	r0, r3
 80041c2:	f7fe fbaf 	bl	8002924 <UpdateSlotLeds>
		}


	}
	LoadRequestFlag = 0;
 80041c6:	4b07      	ldr	r3, [pc, #28]	; (80041e4 <updateSlotData+0x520>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	701a      	strb	r2, [r3, #0]
	PickupFlag = 0;
 80041cc:	4b09      	ldr	r3, [pc, #36]	; (80041f4 <updateSlotData+0x530>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	701a      	strb	r2, [r3, #0]
//	UpdateSlotLeds((EMPTY_SLOT ^ PresentSlotData),EmptyLocaction);

}
 80041d2:	46c0      	nop			; (mov r8, r8)
 80041d4:	46bd      	mov	sp, r7
 80041d6:	b007      	add	sp, #28
 80041d8:	bd90      	pop	{r4, r7, pc}
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	2000054c 	.word	0x2000054c
 80041e0:	20000548 	.word	0x20000548
 80041e4:	20000544 	.word	0x20000544
 80041e8:	2000054a 	.word	0x2000054a
 80041ec:	200004bc 	.word	0x200004bc
 80041f0:	200004f4 	.word	0x200004f4
 80041f4:	20000545 	.word	0x20000545
 80041f8:	200004c0 	.word	0x200004c0
 80041fc:	20000546 	.word	0x20000546

08004200 <lrr>:
 * |       |  		 	 |			  |			   |    |
 */


void lrr(void)                     //Load Reel Request
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
	LoadRequestFlag = 1;
 8004204:	4b02      	ldr	r3, [pc, #8]	; (8004210 <lrr+0x10>)
 8004206:	2201      	movs	r2, #1
 8004208:	701a      	strb	r2, [r3, #0]
}
 800420a:	46c0      	nop			; (mov r8, r8)
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	20000544 	.word	0x20000544

08004214 <prr>:
 * |       |  		 	 |			  |			  |    |
 */


void prr(void)                     //Pick Reel Request
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
	PickupSlots  = ((RxData[4]<<8)|RxData[5]);      //Data to pickup from slot
 8004218:	4b0e      	ldr	r3, [pc, #56]	; (8004254 <prr+0x40>)
 800421a:	791b      	ldrb	r3, [r3, #4]
 800421c:	021b      	lsls	r3, r3, #8
 800421e:	b21a      	sxth	r2, r3
 8004220:	4b0c      	ldr	r3, [pc, #48]	; (8004254 <prr+0x40>)
 8004222:	795b      	ldrb	r3, [r3, #5]
 8004224:	b21b      	sxth	r3, r3
 8004226:	4313      	orrs	r3, r2
 8004228:	b21b      	sxth	r3, r3
 800422a:	b29a      	uxth	r2, r3
 800422c:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <prr+0x44>)
 800422e:	801a      	strh	r2, [r3, #0]
	UpdateSlotLeds(PickupSlots,PickupLocation);
 8004230:	4b09      	ldr	r3, [pc, #36]	; (8004258 <prr+0x44>)
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	2102      	movs	r1, #2
 8004236:	0018      	movs	r0, r3
 8004238:	f7fe fb74 	bl	8002924 <UpdateSlotLeds>
	printf("%d",UpdateSlotLeds);
 800423c:	4a07      	ldr	r2, [pc, #28]	; (800425c <prr+0x48>)
 800423e:	4b08      	ldr	r3, [pc, #32]	; (8004260 <prr+0x4c>)
 8004240:	0011      	movs	r1, r2
 8004242:	0018      	movs	r0, r3
 8004244:	f005 fd9a 	bl	8009d7c <iprintf>
	PickupFlag = 1;
 8004248:	4b06      	ldr	r3, [pc, #24]	; (8004264 <prr+0x50>)
 800424a:	2201      	movs	r2, #1
 800424c:	701a      	strb	r2, [r3, #0]
}
 800424e:	46c0      	nop			; (mov r8, r8)
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	200004c0 	.word	0x200004c0
 8004258:	2000054c 	.word	0x2000054c
 800425c:	08002925 	.word	0x08002925
 8004260:	0800be18 	.word	0x0800be18
 8004264:	20000545 	.word	0x20000545

08004268 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	000a      	movs	r2, r1
 8004272:	1cbb      	adds	r3, r7, #2
 8004274:	801a      	strh	r2, [r3, #0]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8004276:	230f      	movs	r3, #15
 8004278:	18fb      	adds	r3, r7, r3
 800427a:	22ff      	movs	r2, #255	; 0xff
 800427c:	701a      	strb	r2, [r3, #0]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 800427e:	230e      	movs	r3, #14
 8004280:	18fb      	adds	r3, r7, r3
 8004282:	22ff      	movs	r2, #255	; 0xff
 8004284:	701a      	strb	r2, [r3, #0]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8004286:	e019      	b.n	80042bc <crc16+0x54>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	607a      	str	r2, [r7, #4]
 800428e:	781a      	ldrb	r2, [r3, #0]
 8004290:	200e      	movs	r0, #14
 8004292:	183b      	adds	r3, r7, r0
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	4053      	eors	r3, r2
 8004298:	b2db      	uxtb	r3, r3
 800429a:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 800429c:	4a13      	ldr	r2, [pc, #76]	; (80042ec <crc16+0x84>)
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	18d3      	adds	r3, r2, r3
 80042a2:	7819      	ldrb	r1, [r3, #0]
 80042a4:	183b      	adds	r3, r7, r0
 80042a6:	200f      	movs	r0, #15
 80042a8:	183a      	adds	r2, r7, r0
 80042aa:	7812      	ldrb	r2, [r2, #0]
 80042ac:	404a      	eors	r2, r1
 80042ae:	701a      	strb	r2, [r3, #0]
        crc_hi = table_crc_lo[i];
 80042b0:	183b      	adds	r3, r7, r0
 80042b2:	490f      	ldr	r1, [pc, #60]	; (80042f0 <crc16+0x88>)
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	188a      	adds	r2, r1, r2
 80042b8:	7812      	ldrb	r2, [r2, #0]
 80042ba:	701a      	strb	r2, [r3, #0]
    while (buffer_length--) {
 80042bc:	1cbb      	adds	r3, r7, #2
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	1cba      	adds	r2, r7, #2
 80042c2:	1e59      	subs	r1, r3, #1
 80042c4:	8011      	strh	r1, [r2, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1de      	bne.n	8004288 <crc16+0x20>
    }

    return (crc_hi << 8 | crc_lo);
 80042ca:	230f      	movs	r3, #15
 80042cc:	18fb      	adds	r3, r7, r3
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	021b      	lsls	r3, r3, #8
 80042d2:	b21a      	sxth	r2, r3
 80042d4:	230e      	movs	r3, #14
 80042d6:	18fb      	adds	r3, r7, r3
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	b21b      	sxth	r3, r3
 80042dc:	4313      	orrs	r3, r2
 80042de:	b21b      	sxth	r3, r3
 80042e0:	b29b      	uxth	r3, r3
}
 80042e2:	0018      	movs	r0, r3
 80042e4:	46bd      	mov	sp, r7
 80042e6:	b004      	add	sp, #16
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	46c0      	nop			; (mov r8, r8)
 80042ec:	0800be7c 	.word	0x0800be7c
 80042f0:	0800bf7c 	.word	0x0800bf7c

080042f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042f4:	b590      	push	{r4, r7, lr}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 80042fa:	2408      	movs	r4, #8
 80042fc:	193b      	adds	r3, r7, r4
 80042fe:	0018      	movs	r0, r3
 8004300:	2308      	movs	r3, #8
 8004302:	001a      	movs	r2, r3
 8004304:	2100      	movs	r1, #0
 8004306:	f005 fd95 	bl	8009e34 <memset>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800430a:	4b13      	ldr	r3, [pc, #76]	; (8004358 <HAL_MspInit+0x64>)
 800430c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800430e:	4b12      	ldr	r3, [pc, #72]	; (8004358 <HAL_MspInit+0x64>)
 8004310:	2101      	movs	r1, #1
 8004312:	430a      	orrs	r2, r1
 8004314:	641a      	str	r2, [r3, #64]	; 0x40
 8004316:	4b10      	ldr	r3, [pc, #64]	; (8004358 <HAL_MspInit+0x64>)
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	2201      	movs	r2, #1
 800431c:	4013      	ands	r3, r2
 800431e:	607b      	str	r3, [r7, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004322:	4b0d      	ldr	r3, [pc, #52]	; (8004358 <HAL_MspInit+0x64>)
 8004324:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004326:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <HAL_MspInit+0x64>)
 8004328:	2180      	movs	r1, #128	; 0x80
 800432a:	0549      	lsls	r1, r1, #21
 800432c:	430a      	orrs	r2, r1
 800432e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004330:	4b09      	ldr	r3, [pc, #36]	; (8004358 <HAL_MspInit+0x64>)
 8004332:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004334:	2380      	movs	r3, #128	; 0x80
 8004336:	055b      	lsls	r3, r3, #21
 8004338:	4013      	ands	r3, r2
 800433a:	603b      	str	r3, [r7, #0]
 800433c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 800433e:	193b      	adds	r3, r7, r4
 8004340:	2200      	movs	r2, #0
 8004342:	605a      	str	r2, [r3, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8004344:	193b      	adds	r3, r7, r4
 8004346:	0018      	movs	r0, r3
 8004348:	f000 ff1c 	bl	8005184 <HAL_PWREx_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 800434c:	f000 ff86 	bl	800525c <HAL_PWREx_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004350:	46c0      	nop			; (mov r8, r8)
 8004352:	46bd      	mov	sp, r7
 8004354:	b005      	add	sp, #20
 8004356:	bd90      	pop	{r4, r7, pc}
 8004358:	40021000 	.word	0x40021000

0800435c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800435c:	b590      	push	{r4, r7, lr}
 800435e:	b093      	sub	sp, #76	; 0x4c
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004364:	2420      	movs	r4, #32
 8004366:	193b      	adds	r3, r7, r4
 8004368:	0018      	movs	r0, r3
 800436a:	2328      	movs	r3, #40	; 0x28
 800436c:	001a      	movs	r2, r3
 800436e:	2100      	movs	r1, #0
 8004370:	f005 fd60 	bl	8009e34 <memset>
  if(htim_base->Instance==TIM1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a42      	ldr	r2, [pc, #264]	; (8004484 <HAL_TIM_Base_MspInit+0x128>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d11d      	bne.n	80043ba <HAL_TIM_Base_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800437e:	193b      	adds	r3, r7, r4
 8004380:	2280      	movs	r2, #128	; 0x80
 8004382:	0392      	lsls	r2, r2, #14
 8004384:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8004386:	193b      	adds	r3, r7, r4
 8004388:	2200      	movs	r2, #0
 800438a:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800438c:	193b      	adds	r3, r7, r4
 800438e:	0018      	movs	r0, r3
 8004390:	f001 fc82 	bl	8005c98 <HAL_RCCEx_PeriphCLKConfig>
 8004394:	1e03      	subs	r3, r0, #0
 8004396:	d001      	beq.n	800439c <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8004398:	f7ff fc2c 	bl	8003bf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800439c:	4b3a      	ldr	r3, [pc, #232]	; (8004488 <HAL_TIM_Base_MspInit+0x12c>)
 800439e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043a0:	4b39      	ldr	r3, [pc, #228]	; (8004488 <HAL_TIM_Base_MspInit+0x12c>)
 80043a2:	2180      	movs	r1, #128	; 0x80
 80043a4:	0109      	lsls	r1, r1, #4
 80043a6:	430a      	orrs	r2, r1
 80043a8:	641a      	str	r2, [r3, #64]	; 0x40
 80043aa:	4b37      	ldr	r3, [pc, #220]	; (8004488 <HAL_TIM_Base_MspInit+0x12c>)
 80043ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043ae:	2380      	movs	r3, #128	; 0x80
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	4013      	ands	r3, r2
 80043b4:	61fb      	str	r3, [r7, #28]
 80043b6:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80043b8:	e05f      	b.n	800447a <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM2)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	2380      	movs	r3, #128	; 0x80
 80043c0:	05db      	lsls	r3, r3, #23
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d10c      	bne.n	80043e0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043c6:	4b30      	ldr	r3, [pc, #192]	; (8004488 <HAL_TIM_Base_MspInit+0x12c>)
 80043c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043ca:	4b2f      	ldr	r3, [pc, #188]	; (8004488 <HAL_TIM_Base_MspInit+0x12c>)
 80043cc:	2101      	movs	r1, #1
 80043ce:	430a      	orrs	r2, r1
 80043d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80043d2:	4b2d      	ldr	r3, [pc, #180]	; (8004488 <HAL_TIM_Base_MspInit+0x12c>)
 80043d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d6:	2201      	movs	r2, #1
 80043d8:	4013      	ands	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
 80043dc:	69bb      	ldr	r3, [r7, #24]
}
 80043de:	e04c      	b.n	800447a <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a29      	ldr	r2, [pc, #164]	; (800448c <HAL_TIM_Base_MspInit+0x130>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d10c      	bne.n	8004404 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043ea:	4b27      	ldr	r3, [pc, #156]	; (8004488 <HAL_TIM_Base_MspInit+0x12c>)
 80043ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043ee:	4b26      	ldr	r3, [pc, #152]	; (8004488 <HAL_TIM_Base_MspInit+0x12c>)
 80043f0:	2102      	movs	r1, #2
 80043f2:	430a      	orrs	r2, r1
 80043f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80043f6:	4b24      	ldr	r3, [pc, #144]	; (8004488 <HAL_TIM_Base_MspInit+0x12c>)
 80043f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fa:	2202      	movs	r2, #2
 80043fc:	4013      	ands	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]
 8004400:	697b      	ldr	r3, [r7, #20]
}
 8004402:	e03a      	b.n	800447a <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM14)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a21      	ldr	r2, [pc, #132]	; (8004490 <HAL_TIM_Base_MspInit+0x134>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d10e      	bne.n	800442c <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800440e:	4b1e      	ldr	r3, [pc, #120]	; (8004488 <HAL_TIM_Base_MspInit+0x12c>)
 8004410:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004412:	4b1d      	ldr	r3, [pc, #116]	; (8004488 <HAL_TIM_Base_MspInit+0x12c>)
 8004414:	2180      	movs	r1, #128	; 0x80
 8004416:	0209      	lsls	r1, r1, #8
 8004418:	430a      	orrs	r2, r1
 800441a:	641a      	str	r2, [r3, #64]	; 0x40
 800441c:	4b1a      	ldr	r3, [pc, #104]	; (8004488 <HAL_TIM_Base_MspInit+0x12c>)
 800441e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004420:	2380      	movs	r3, #128	; 0x80
 8004422:	021b      	lsls	r3, r3, #8
 8004424:	4013      	ands	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
 8004428:	693b      	ldr	r3, [r7, #16]
}
 800442a:	e026      	b.n	800447a <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM16)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a18      	ldr	r2, [pc, #96]	; (8004494 <HAL_TIM_Base_MspInit+0x138>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d10e      	bne.n	8004454 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004436:	4b14      	ldr	r3, [pc, #80]	; (8004488 <HAL_TIM_Base_MspInit+0x12c>)
 8004438:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800443a:	4b13      	ldr	r3, [pc, #76]	; (8004488 <HAL_TIM_Base_MspInit+0x12c>)
 800443c:	2180      	movs	r1, #128	; 0x80
 800443e:	0289      	lsls	r1, r1, #10
 8004440:	430a      	orrs	r2, r1
 8004442:	641a      	str	r2, [r3, #64]	; 0x40
 8004444:	4b10      	ldr	r3, [pc, #64]	; (8004488 <HAL_TIM_Base_MspInit+0x12c>)
 8004446:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004448:	2380      	movs	r3, #128	; 0x80
 800444a:	029b      	lsls	r3, r3, #10
 800444c:	4013      	ands	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	68fb      	ldr	r3, [r7, #12]
}
 8004452:	e012      	b.n	800447a <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM17)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a0f      	ldr	r2, [pc, #60]	; (8004498 <HAL_TIM_Base_MspInit+0x13c>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d10d      	bne.n	800447a <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800445e:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <HAL_TIM_Base_MspInit+0x12c>)
 8004460:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004462:	4b09      	ldr	r3, [pc, #36]	; (8004488 <HAL_TIM_Base_MspInit+0x12c>)
 8004464:	2180      	movs	r1, #128	; 0x80
 8004466:	02c9      	lsls	r1, r1, #11
 8004468:	430a      	orrs	r2, r1
 800446a:	641a      	str	r2, [r3, #64]	; 0x40
 800446c:	4b06      	ldr	r3, [pc, #24]	; (8004488 <HAL_TIM_Base_MspInit+0x12c>)
 800446e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004470:	2380      	movs	r3, #128	; 0x80
 8004472:	02db      	lsls	r3, r3, #11
 8004474:	4013      	ands	r3, r2
 8004476:	60bb      	str	r3, [r7, #8]
 8004478:	68bb      	ldr	r3, [r7, #8]
}
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	46bd      	mov	sp, r7
 800447e:	b013      	add	sp, #76	; 0x4c
 8004480:	bd90      	pop	{r4, r7, pc}
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	40012c00 	.word	0x40012c00
 8004488:	40021000 	.word	0x40021000
 800448c:	40000400 	.word	0x40000400
 8004490:	40002000 	.word	0x40002000
 8004494:	40014400 	.word	0x40014400
 8004498:	40014800 	.word	0x40014800

0800449c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800449c:	b590      	push	{r4, r7, lr}
 800449e:	b08b      	sub	sp, #44	; 0x2c
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a4:	2414      	movs	r4, #20
 80044a6:	193b      	adds	r3, r7, r4
 80044a8:	0018      	movs	r0, r3
 80044aa:	2314      	movs	r3, #20
 80044ac:	001a      	movs	r2, r3
 80044ae:	2100      	movs	r1, #0
 80044b0:	f005 fcc0 	bl	8009e34 <memset>
  if(htim->Instance==TIM1)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a25      	ldr	r2, [pc, #148]	; (8004550 <HAL_TIM_MspPostInit+0xb4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d144      	bne.n	8004548 <HAL_TIM_MspPostInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044be:	4b25      	ldr	r3, [pc, #148]	; (8004554 <HAL_TIM_MspPostInit+0xb8>)
 80044c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044c2:	4b24      	ldr	r3, [pc, #144]	; (8004554 <HAL_TIM_MspPostInit+0xb8>)
 80044c4:	2101      	movs	r1, #1
 80044c6:	430a      	orrs	r2, r1
 80044c8:	635a      	str	r2, [r3, #52]	; 0x34
 80044ca:	4b22      	ldr	r3, [pc, #136]	; (8004554 <HAL_TIM_MspPostInit+0xb8>)
 80044cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ce:	2201      	movs	r2, #1
 80044d0:	4013      	ands	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
 80044d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044d6:	4b1f      	ldr	r3, [pc, #124]	; (8004554 <HAL_TIM_MspPostInit+0xb8>)
 80044d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044da:	4b1e      	ldr	r3, [pc, #120]	; (8004554 <HAL_TIM_MspPostInit+0xb8>)
 80044dc:	2102      	movs	r1, #2
 80044de:	430a      	orrs	r2, r1
 80044e0:	635a      	str	r2, [r3, #52]	; 0x34
 80044e2:	4b1c      	ldr	r3, [pc, #112]	; (8004554 <HAL_TIM_MspPostInit+0xb8>)
 80044e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e6:	2202      	movs	r2, #2
 80044e8:	4013      	ands	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA11 [PA9]     ------> TIM1_CH4
    PB3     ------> TIM1_CH2
    PB6     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80044ee:	193b      	adds	r3, r7, r4
 80044f0:	2290      	movs	r2, #144	; 0x90
 80044f2:	0112      	lsls	r2, r2, #4
 80044f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f6:	193b      	adds	r3, r7, r4
 80044f8:	2202      	movs	r2, #2
 80044fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044fc:	193b      	adds	r3, r7, r4
 80044fe:	2200      	movs	r2, #0
 8004500:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004502:	193b      	adds	r3, r7, r4
 8004504:	2200      	movs	r2, #0
 8004506:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004508:	193b      	adds	r3, r7, r4
 800450a:	2202      	movs	r2, #2
 800450c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800450e:	193a      	adds	r2, r7, r4
 8004510:	23a0      	movs	r3, #160	; 0xa0
 8004512:	05db      	lsls	r3, r3, #23
 8004514:	0011      	movs	r1, r2
 8004516:	0018      	movs	r0, r3
 8004518:	f000 fc46 	bl	8004da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 800451c:	0021      	movs	r1, r4
 800451e:	187b      	adds	r3, r7, r1
 8004520:	2248      	movs	r2, #72	; 0x48
 8004522:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004524:	187b      	adds	r3, r7, r1
 8004526:	2202      	movs	r2, #2
 8004528:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452a:	187b      	adds	r3, r7, r1
 800452c:	2200      	movs	r2, #0
 800452e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004530:	187b      	adds	r3, r7, r1
 8004532:	2200      	movs	r2, #0
 8004534:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004536:	187b      	adds	r3, r7, r1
 8004538:	2201      	movs	r2, #1
 800453a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800453c:	187b      	adds	r3, r7, r1
 800453e:	4a06      	ldr	r2, [pc, #24]	; (8004558 <HAL_TIM_MspPostInit+0xbc>)
 8004540:	0019      	movs	r1, r3
 8004542:	0010      	movs	r0, r2
 8004544:	f000 fc30 	bl	8004da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004548:	46c0      	nop			; (mov r8, r8)
 800454a:	46bd      	mov	sp, r7
 800454c:	b00b      	add	sp, #44	; 0x2c
 800454e:	bd90      	pop	{r4, r7, pc}
 8004550:	40012c00 	.word	0x40012c00
 8004554:	40021000 	.word	0x40021000
 8004558:	50000400 	.word	0x50000400

0800455c <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a24      	ldr	r2, [pc, #144]	; (80045fc <HAL_TIM_Base_MspDeInit+0xa0>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d106      	bne.n	800457c <HAL_TIM_Base_MspDeInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 800456e:	4b24      	ldr	r3, [pc, #144]	; (8004600 <HAL_TIM_Base_MspDeInit+0xa4>)
 8004570:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004572:	4b23      	ldr	r3, [pc, #140]	; (8004600 <HAL_TIM_Base_MspDeInit+0xa4>)
 8004574:	4923      	ldr	r1, [pc, #140]	; (8004604 <HAL_TIM_Base_MspDeInit+0xa8>)
 8004576:	400a      	ands	r2, r1
 8004578:	641a      	str	r2, [r3, #64]	; 0x40
  /* USER CODE BEGIN TIM17_MspDeInit 1 */

  /* USER CODE END TIM17_MspDeInit 1 */
  }

}
 800457a:	e03b      	b.n	80045f4 <HAL_TIM_Base_MspDeInit+0x98>
  else if(htim_base->Instance==TIM2)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	2380      	movs	r3, #128	; 0x80
 8004582:	05db      	lsls	r3, r3, #23
 8004584:	429a      	cmp	r2, r3
 8004586:	d106      	bne.n	8004596 <HAL_TIM_Base_MspDeInit+0x3a>
    __HAL_RCC_TIM2_CLK_DISABLE();
 8004588:	4b1d      	ldr	r3, [pc, #116]	; (8004600 <HAL_TIM_Base_MspDeInit+0xa4>)
 800458a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800458c:	4b1c      	ldr	r3, [pc, #112]	; (8004600 <HAL_TIM_Base_MspDeInit+0xa4>)
 800458e:	2101      	movs	r1, #1
 8004590:	438a      	bics	r2, r1
 8004592:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004594:	e02e      	b.n	80045f4 <HAL_TIM_Base_MspDeInit+0x98>
  else if(htim_base->Instance==TIM3)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a1b      	ldr	r2, [pc, #108]	; (8004608 <HAL_TIM_Base_MspDeInit+0xac>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d106      	bne.n	80045ae <HAL_TIM_Base_MspDeInit+0x52>
    __HAL_RCC_TIM3_CLK_DISABLE();
 80045a0:	4b17      	ldr	r3, [pc, #92]	; (8004600 <HAL_TIM_Base_MspDeInit+0xa4>)
 80045a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045a4:	4b16      	ldr	r3, [pc, #88]	; (8004600 <HAL_TIM_Base_MspDeInit+0xa4>)
 80045a6:	2102      	movs	r1, #2
 80045a8:	438a      	bics	r2, r1
 80045aa:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80045ac:	e022      	b.n	80045f4 <HAL_TIM_Base_MspDeInit+0x98>
  else if(htim_base->Instance==TIM14)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a16      	ldr	r2, [pc, #88]	; (800460c <HAL_TIM_Base_MspDeInit+0xb0>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d106      	bne.n	80045c6 <HAL_TIM_Base_MspDeInit+0x6a>
    __HAL_RCC_TIM14_CLK_DISABLE();
 80045b8:	4b11      	ldr	r3, [pc, #68]	; (8004600 <HAL_TIM_Base_MspDeInit+0xa4>)
 80045ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045bc:	4b10      	ldr	r3, [pc, #64]	; (8004600 <HAL_TIM_Base_MspDeInit+0xa4>)
 80045be:	4914      	ldr	r1, [pc, #80]	; (8004610 <HAL_TIM_Base_MspDeInit+0xb4>)
 80045c0:	400a      	ands	r2, r1
 80045c2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80045c4:	e016      	b.n	80045f4 <HAL_TIM_Base_MspDeInit+0x98>
  else if(htim_base->Instance==TIM16)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a12      	ldr	r2, [pc, #72]	; (8004614 <HAL_TIM_Base_MspDeInit+0xb8>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d106      	bne.n	80045de <HAL_TIM_Base_MspDeInit+0x82>
    __HAL_RCC_TIM16_CLK_DISABLE();
 80045d0:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <HAL_TIM_Base_MspDeInit+0xa4>)
 80045d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045d4:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <HAL_TIM_Base_MspDeInit+0xa4>)
 80045d6:	4910      	ldr	r1, [pc, #64]	; (8004618 <HAL_TIM_Base_MspDeInit+0xbc>)
 80045d8:	400a      	ands	r2, r1
 80045da:	641a      	str	r2, [r3, #64]	; 0x40
}
 80045dc:	e00a      	b.n	80045f4 <HAL_TIM_Base_MspDeInit+0x98>
  else if(htim_base->Instance==TIM17)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a0e      	ldr	r2, [pc, #56]	; (800461c <HAL_TIM_Base_MspDeInit+0xc0>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d105      	bne.n	80045f4 <HAL_TIM_Base_MspDeInit+0x98>
    __HAL_RCC_TIM17_CLK_DISABLE();
 80045e8:	4b05      	ldr	r3, [pc, #20]	; (8004600 <HAL_TIM_Base_MspDeInit+0xa4>)
 80045ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045ec:	4b04      	ldr	r3, [pc, #16]	; (8004600 <HAL_TIM_Base_MspDeInit+0xa4>)
 80045ee:	490c      	ldr	r1, [pc, #48]	; (8004620 <HAL_TIM_Base_MspDeInit+0xc4>)
 80045f0:	400a      	ands	r2, r1
 80045f2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80045f4:	46c0      	nop			; (mov r8, r8)
 80045f6:	46bd      	mov	sp, r7
 80045f8:	b002      	add	sp, #8
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40012c00 	.word	0x40012c00
 8004600:	40021000 	.word	0x40021000
 8004604:	fffff7ff 	.word	0xfffff7ff
 8004608:	40000400 	.word	0x40000400
 800460c:	40002000 	.word	0x40002000
 8004610:	ffff7fff 	.word	0xffff7fff
 8004614:	40014400 	.word	0x40014400
 8004618:	fffdffff 	.word	0xfffdffff
 800461c:	40014800 	.word	0x40014800
 8004620:	fffbffff 	.word	0xfffbffff

08004624 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004624:	b590      	push	{r4, r7, lr}
 8004626:	b095      	sub	sp, #84	; 0x54
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800462c:	233c      	movs	r3, #60	; 0x3c
 800462e:	18fb      	adds	r3, r7, r3
 8004630:	0018      	movs	r0, r3
 8004632:	2314      	movs	r3, #20
 8004634:	001a      	movs	r2, r3
 8004636:	2100      	movs	r1, #0
 8004638:	f005 fbfc 	bl	8009e34 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800463c:	2414      	movs	r4, #20
 800463e:	193b      	adds	r3, r7, r4
 8004640:	0018      	movs	r0, r3
 8004642:	2328      	movs	r3, #40	; 0x28
 8004644:	001a      	movs	r2, r3
 8004646:	2100      	movs	r1, #0
 8004648:	f005 fbf4 	bl	8009e34 <memset>
  if(huart->Instance==USART1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a27      	ldr	r2, [pc, #156]	; (80046f0 <HAL_UART_MspInit+0xcc>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d147      	bne.n	80046e6 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004656:	193b      	adds	r3, r7, r4
 8004658:	2201      	movs	r2, #1
 800465a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800465c:	193b      	adds	r3, r7, r4
 800465e:	2200      	movs	r2, #0
 8004660:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004662:	193b      	adds	r3, r7, r4
 8004664:	0018      	movs	r0, r3
 8004666:	f001 fb17 	bl	8005c98 <HAL_RCCEx_PeriphCLKConfig>
 800466a:	1e03      	subs	r3, r0, #0
 800466c:	d001      	beq.n	8004672 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800466e:	f7ff fac1 	bl	8003bf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004672:	4b20      	ldr	r3, [pc, #128]	; (80046f4 <HAL_UART_MspInit+0xd0>)
 8004674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004676:	4b1f      	ldr	r3, [pc, #124]	; (80046f4 <HAL_UART_MspInit+0xd0>)
 8004678:	2180      	movs	r1, #128	; 0x80
 800467a:	01c9      	lsls	r1, r1, #7
 800467c:	430a      	orrs	r2, r1
 800467e:	641a      	str	r2, [r3, #64]	; 0x40
 8004680:	4b1c      	ldr	r3, [pc, #112]	; (80046f4 <HAL_UART_MspInit+0xd0>)
 8004682:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004684:	2380      	movs	r3, #128	; 0x80
 8004686:	01db      	lsls	r3, r3, #7
 8004688:	4013      	ands	r3, r2
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800468e:	4b19      	ldr	r3, [pc, #100]	; (80046f4 <HAL_UART_MspInit+0xd0>)
 8004690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004692:	4b18      	ldr	r3, [pc, #96]	; (80046f4 <HAL_UART_MspInit+0xd0>)
 8004694:	2101      	movs	r1, #1
 8004696:	430a      	orrs	r2, r1
 8004698:	635a      	str	r2, [r3, #52]	; 0x34
 800469a:	4b16      	ldr	r3, [pc, #88]	; (80046f4 <HAL_UART_MspInit+0xd0>)
 800469c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800469e:	2201      	movs	r2, #1
 80046a0:	4013      	ands	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80046a6:	213c      	movs	r1, #60	; 0x3c
 80046a8:	187b      	adds	r3, r7, r1
 80046aa:	22c0      	movs	r2, #192	; 0xc0
 80046ac:	00d2      	lsls	r2, r2, #3
 80046ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046b0:	187b      	adds	r3, r7, r1
 80046b2:	2202      	movs	r2, #2
 80046b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b6:	187b      	adds	r3, r7, r1
 80046b8:	2200      	movs	r2, #0
 80046ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046bc:	187b      	adds	r3, r7, r1
 80046be:	2200      	movs	r2, #0
 80046c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80046c2:	187b      	adds	r3, r7, r1
 80046c4:	2201      	movs	r2, #1
 80046c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046c8:	187a      	adds	r2, r7, r1
 80046ca:	23a0      	movs	r3, #160	; 0xa0
 80046cc:	05db      	lsls	r3, r3, #23
 80046ce:	0011      	movs	r1, r2
 80046d0:	0018      	movs	r0, r3
 80046d2:	f000 fb69 	bl	8004da8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80046d6:	2200      	movs	r2, #0
 80046d8:	2100      	movs	r1, #0
 80046da:	201b      	movs	r0, #27
 80046dc:	f000 fa66 	bl	8004bac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80046e0:	201b      	movs	r0, #27
 80046e2:	f000 fa78 	bl	8004bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80046e6:	46c0      	nop			; (mov r8, r8)
 80046e8:	46bd      	mov	sp, r7
 80046ea:	b015      	add	sp, #84	; 0x54
 80046ec:	bd90      	pop	{r4, r7, pc}
 80046ee:	46c0      	nop			; (mov r8, r8)
 80046f0:	40013800 	.word	0x40013800
 80046f4:	40021000 	.word	0x40021000

080046f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80046fc:	e7fe      	b.n	80046fc <NMI_Handler+0x4>

080046fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004702:	e7fe      	b.n	8004702 <HardFault_Handler+0x4>

08004704 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004708:	46c0      	nop			; (mov r8, r8)
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004712:	46c0      	nop			; (mov r8, r8)
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800471c:	f000 f97e 	bl	8004a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004720:	46c0      	nop			; (mov r8, r8)
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800472a:	2001      	movs	r0, #1
 800472c:	f000 fcf6 	bl	800511c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004730:	2002      	movs	r0, #2
 8004732:	f000 fcf3 	bl	800511c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8004736:	46c0      	nop			; (mov r8, r8)
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004740:	2004      	movs	r0, #4
 8004742:	f000 fceb 	bl	800511c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004746:	2008      	movs	r0, #8
 8004748:	f000 fce8 	bl	800511c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800474c:	46c0      	nop			; (mov r8, r8)
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
	...

08004754 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004758:	4b03      	ldr	r3, [pc, #12]	; (8004768 <USART1_IRQHandler+0x14>)
 800475a:	0018      	movs	r0, r3
 800475c:	f002 fe84 	bl	8007468 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004760:	46c0      	nop			; (mov r8, r8)
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	20000428 	.word	0x20000428

0800476c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
  return 1;
 8004770:	2301      	movs	r3, #1
}
 8004772:	0018      	movs	r0, r3
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <_kill>:

int _kill(int pid, int sig)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004782:	f005 fbb1 	bl	8009ee8 <__errno>
 8004786:	0003      	movs	r3, r0
 8004788:	2216      	movs	r2, #22
 800478a:	601a      	str	r2, [r3, #0]
  return -1;
 800478c:	2301      	movs	r3, #1
 800478e:	425b      	negs	r3, r3
}
 8004790:	0018      	movs	r0, r3
 8004792:	46bd      	mov	sp, r7
 8004794:	b002      	add	sp, #8
 8004796:	bd80      	pop	{r7, pc}

08004798 <_exit>:

void _exit (int status)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80047a0:	2301      	movs	r3, #1
 80047a2:	425a      	negs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	0011      	movs	r1, r2
 80047a8:	0018      	movs	r0, r3
 80047aa:	f7ff ffe5 	bl	8004778 <_kill>
  while (1) {}    /* Make sure we hang here */
 80047ae:	e7fe      	b.n	80047ae <_exit+0x16>

080047b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047bc:	2300      	movs	r3, #0
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	e00a      	b.n	80047d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80047c2:	e000      	b.n	80047c6 <_read+0x16>
 80047c4:	bf00      	nop
 80047c6:	0001      	movs	r1, r0
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	60ba      	str	r2, [r7, #8]
 80047ce:	b2ca      	uxtb	r2, r1
 80047d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	3301      	adds	r3, #1
 80047d6:	617b      	str	r3, [r7, #20]
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	429a      	cmp	r2, r3
 80047de:	dbf0      	blt.n	80047c2 <_read+0x12>
  }

  return len;
 80047e0:	687b      	ldr	r3, [r7, #4]
}
 80047e2:	0018      	movs	r0, r3
 80047e4:	46bd      	mov	sp, r7
 80047e6:	b006      	add	sp, #24
 80047e8:	bd80      	pop	{r7, pc}

080047ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b086      	sub	sp, #24
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	60f8      	str	r0, [r7, #12]
 80047f2:	60b9      	str	r1, [r7, #8]
 80047f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047f6:	2300      	movs	r3, #0
 80047f8:	617b      	str	r3, [r7, #20]
 80047fa:	e009      	b.n	8004810 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	1c5a      	adds	r2, r3, #1
 8004800:	60ba      	str	r2, [r7, #8]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	0018      	movs	r0, r3
 8004806:	f7fe fd01 	bl	800320c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	3301      	adds	r3, #1
 800480e:	617b      	str	r3, [r7, #20]
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	429a      	cmp	r2, r3
 8004816:	dbf1      	blt.n	80047fc <_write+0x12>
  }
  return len;
 8004818:	687b      	ldr	r3, [r7, #4]
}
 800481a:	0018      	movs	r0, r3
 800481c:	46bd      	mov	sp, r7
 800481e:	b006      	add	sp, #24
 8004820:	bd80      	pop	{r7, pc}

08004822 <_close>:

int _close(int file)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b082      	sub	sp, #8
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800482a:	2301      	movs	r3, #1
 800482c:	425b      	negs	r3, r3
}
 800482e:	0018      	movs	r0, r3
 8004830:	46bd      	mov	sp, r7
 8004832:	b002      	add	sp, #8
 8004834:	bd80      	pop	{r7, pc}

08004836 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b082      	sub	sp, #8
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2280      	movs	r2, #128	; 0x80
 8004844:	0192      	lsls	r2, r2, #6
 8004846:	605a      	str	r2, [r3, #4]
  return 0;
 8004848:	2300      	movs	r3, #0
}
 800484a:	0018      	movs	r0, r3
 800484c:	46bd      	mov	sp, r7
 800484e:	b002      	add	sp, #8
 8004850:	bd80      	pop	{r7, pc}

08004852 <_isatty>:

int _isatty(int file)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b082      	sub	sp, #8
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800485a:	2301      	movs	r3, #1
}
 800485c:	0018      	movs	r0, r3
 800485e:	46bd      	mov	sp, r7
 8004860:	b002      	add	sp, #8
 8004862:	bd80      	pop	{r7, pc}

08004864 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004870:	2300      	movs	r3, #0
}
 8004872:	0018      	movs	r0, r3
 8004874:	46bd      	mov	sp, r7
 8004876:	b004      	add	sp, #16
 8004878:	bd80      	pop	{r7, pc}
	...

0800487c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004884:	4a14      	ldr	r2, [pc, #80]	; (80048d8 <_sbrk+0x5c>)
 8004886:	4b15      	ldr	r3, [pc, #84]	; (80048dc <_sbrk+0x60>)
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004890:	4b13      	ldr	r3, [pc, #76]	; (80048e0 <_sbrk+0x64>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d102      	bne.n	800489e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004898:	4b11      	ldr	r3, [pc, #68]	; (80048e0 <_sbrk+0x64>)
 800489a:	4a12      	ldr	r2, [pc, #72]	; (80048e4 <_sbrk+0x68>)
 800489c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800489e:	4b10      	ldr	r3, [pc, #64]	; (80048e0 <_sbrk+0x64>)
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	18d3      	adds	r3, r2, r3
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d207      	bcs.n	80048bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80048ac:	f005 fb1c 	bl	8009ee8 <__errno>
 80048b0:	0003      	movs	r3, r0
 80048b2:	220c      	movs	r2, #12
 80048b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80048b6:	2301      	movs	r3, #1
 80048b8:	425b      	negs	r3, r3
 80048ba:	e009      	b.n	80048d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80048bc:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <_sbrk+0x64>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80048c2:	4b07      	ldr	r3, [pc, #28]	; (80048e0 <_sbrk+0x64>)
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	18d2      	adds	r2, r2, r3
 80048ca:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <_sbrk+0x64>)
 80048cc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80048ce:	68fb      	ldr	r3, [r7, #12]
}
 80048d0:	0018      	movs	r0, r3
 80048d2:	46bd      	mov	sp, r7
 80048d4:	b006      	add	sp, #24
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	20002000 	.word	0x20002000
 80048dc:	000000ff 	.word	0x000000ff
 80048e0:	20000550 	.word	0x20000550
 80048e4:	200006a8 	.word	0x200006a8

080048e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80048ec:	46c0      	nop			; (mov r8, r8)
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
	...

080048f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80048f4:	480d      	ldr	r0, [pc, #52]	; (800492c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80048f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80048f8:	f7ff fff6 	bl	80048e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80048fc:	480c      	ldr	r0, [pc, #48]	; (8004930 <LoopForever+0x6>)
  ldr r1, =_edata
 80048fe:	490d      	ldr	r1, [pc, #52]	; (8004934 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004900:	4a0d      	ldr	r2, [pc, #52]	; (8004938 <LoopForever+0xe>)
  movs r3, #0
 8004902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004904:	e002      	b.n	800490c <LoopCopyDataInit>

08004906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800490a:	3304      	adds	r3, #4

0800490c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800490c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800490e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004910:	d3f9      	bcc.n	8004906 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004912:	4a0a      	ldr	r2, [pc, #40]	; (800493c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004914:	4c0a      	ldr	r4, [pc, #40]	; (8004940 <LoopForever+0x16>)
  movs r3, #0
 8004916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004918:	e001      	b.n	800491e <LoopFillZerobss>

0800491a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800491a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800491c:	3204      	adds	r2, #4

0800491e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800491e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004920:	d3fb      	bcc.n	800491a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004922:	f005 fae7 	bl	8009ef4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004926:	f7fe fd97 	bl	8003458 <main>

0800492a <LoopForever>:

LoopForever:
  b LoopForever
 800492a:	e7fe      	b.n	800492a <LoopForever>
  ldr   r0, =_estack
 800492c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004934:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8004938:	0800c4dc 	.word	0x0800c4dc
  ldr r2, =_sbss
 800493c:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8004940:	200006a4 	.word	0x200006a4

08004944 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004944:	e7fe      	b.n	8004944 <ADC1_IRQHandler>
	...

08004948 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800494e:	1dfb      	adds	r3, r7, #7
 8004950:	2200      	movs	r2, #0
 8004952:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004954:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <HAL_Init+0x3c>)
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <HAL_Init+0x3c>)
 800495a:	2180      	movs	r1, #128	; 0x80
 800495c:	0049      	lsls	r1, r1, #1
 800495e:	430a      	orrs	r2, r1
 8004960:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004962:	2000      	movs	r0, #0
 8004964:	f000 f810 	bl	8004988 <HAL_InitTick>
 8004968:	1e03      	subs	r3, r0, #0
 800496a:	d003      	beq.n	8004974 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800496c:	1dfb      	adds	r3, r7, #7
 800496e:	2201      	movs	r2, #1
 8004970:	701a      	strb	r2, [r3, #0]
 8004972:	e001      	b.n	8004978 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004974:	f7ff fcbe 	bl	80042f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004978:	1dfb      	adds	r3, r7, #7
 800497a:	781b      	ldrb	r3, [r3, #0]
}
 800497c:	0018      	movs	r0, r3
 800497e:	46bd      	mov	sp, r7
 8004980:	b002      	add	sp, #8
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40022000 	.word	0x40022000

08004988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004988:	b590      	push	{r4, r7, lr}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004990:	230f      	movs	r3, #15
 8004992:	18fb      	adds	r3, r7, r3
 8004994:	2200      	movs	r2, #0
 8004996:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004998:	4b1d      	ldr	r3, [pc, #116]	; (8004a10 <HAL_InitTick+0x88>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d02b      	beq.n	80049f8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80049a0:	4b1c      	ldr	r3, [pc, #112]	; (8004a14 <HAL_InitTick+0x8c>)
 80049a2:	681c      	ldr	r4, [r3, #0]
 80049a4:	4b1a      	ldr	r3, [pc, #104]	; (8004a10 <HAL_InitTick+0x88>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	0019      	movs	r1, r3
 80049aa:	23fa      	movs	r3, #250	; 0xfa
 80049ac:	0098      	lsls	r0, r3, #2
 80049ae:	f7fb fbc5 	bl	800013c <__udivsi3>
 80049b2:	0003      	movs	r3, r0
 80049b4:	0019      	movs	r1, r3
 80049b6:	0020      	movs	r0, r4
 80049b8:	f7fb fbc0 	bl	800013c <__udivsi3>
 80049bc:	0003      	movs	r3, r0
 80049be:	0018      	movs	r0, r3
 80049c0:	f000 f919 	bl	8004bf6 <HAL_SYSTICK_Config>
 80049c4:	1e03      	subs	r3, r0, #0
 80049c6:	d112      	bne.n	80049ee <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b03      	cmp	r3, #3
 80049cc:	d80a      	bhi.n	80049e4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	2301      	movs	r3, #1
 80049d2:	425b      	negs	r3, r3
 80049d4:	2200      	movs	r2, #0
 80049d6:	0018      	movs	r0, r3
 80049d8:	f000 f8e8 	bl	8004bac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80049dc:	4b0e      	ldr	r3, [pc, #56]	; (8004a18 <HAL_InitTick+0x90>)
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	e00d      	b.n	8004a00 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80049e4:	230f      	movs	r3, #15
 80049e6:	18fb      	adds	r3, r7, r3
 80049e8:	2201      	movs	r2, #1
 80049ea:	701a      	strb	r2, [r3, #0]
 80049ec:	e008      	b.n	8004a00 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80049ee:	230f      	movs	r3, #15
 80049f0:	18fb      	adds	r3, r7, r3
 80049f2:	2201      	movs	r2, #1
 80049f4:	701a      	strb	r2, [r3, #0]
 80049f6:	e003      	b.n	8004a00 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80049f8:	230f      	movs	r3, #15
 80049fa:	18fb      	adds	r3, r7, r3
 80049fc:	2201      	movs	r2, #1
 80049fe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004a00:	230f      	movs	r3, #15
 8004a02:	18fb      	adds	r3, r7, r3
 8004a04:	781b      	ldrb	r3, [r3, #0]
}
 8004a06:	0018      	movs	r0, r3
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	b005      	add	sp, #20
 8004a0c:	bd90      	pop	{r4, r7, pc}
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	20000038 	.word	0x20000038
 8004a14:	20000030 	.word	0x20000030
 8004a18:	20000034 	.word	0x20000034

08004a1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004a20:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <HAL_IncTick+0x1c>)
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	001a      	movs	r2, r3
 8004a26:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <HAL_IncTick+0x20>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	18d2      	adds	r2, r2, r3
 8004a2c:	4b03      	ldr	r3, [pc, #12]	; (8004a3c <HAL_IncTick+0x20>)
 8004a2e:	601a      	str	r2, [r3, #0]
}
 8004a30:	46c0      	nop			; (mov r8, r8)
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	20000038 	.word	0x20000038
 8004a3c:	20000554 	.word	0x20000554

08004a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  return uwTick;
 8004a44:	4b02      	ldr	r3, [pc, #8]	; (8004a50 <HAL_GetTick+0x10>)
 8004a46:	681b      	ldr	r3, [r3, #0]
}
 8004a48:	0018      	movs	r0, r3
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	46c0      	nop			; (mov r8, r8)
 8004a50:	20000554 	.word	0x20000554

08004a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	0002      	movs	r2, r0
 8004a5c:	1dfb      	adds	r3, r7, #7
 8004a5e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004a60:	1dfb      	adds	r3, r7, #7
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	2b7f      	cmp	r3, #127	; 0x7f
 8004a66:	d809      	bhi.n	8004a7c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a68:	1dfb      	adds	r3, r7, #7
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	001a      	movs	r2, r3
 8004a6e:	231f      	movs	r3, #31
 8004a70:	401a      	ands	r2, r3
 8004a72:	4b04      	ldr	r3, [pc, #16]	; (8004a84 <__NVIC_EnableIRQ+0x30>)
 8004a74:	2101      	movs	r1, #1
 8004a76:	4091      	lsls	r1, r2
 8004a78:	000a      	movs	r2, r1
 8004a7a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004a7c:	46c0      	nop			; (mov r8, r8)
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	b002      	add	sp, #8
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	e000e100 	.word	0xe000e100

08004a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a88:	b590      	push	{r4, r7, lr}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	0002      	movs	r2, r0
 8004a90:	6039      	str	r1, [r7, #0]
 8004a92:	1dfb      	adds	r3, r7, #7
 8004a94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004a96:	1dfb      	adds	r3, r7, #7
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8004a9c:	d828      	bhi.n	8004af0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a9e:	4a2f      	ldr	r2, [pc, #188]	; (8004b5c <__NVIC_SetPriority+0xd4>)
 8004aa0:	1dfb      	adds	r3, r7, #7
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	b25b      	sxtb	r3, r3
 8004aa6:	089b      	lsrs	r3, r3, #2
 8004aa8:	33c0      	adds	r3, #192	; 0xc0
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	589b      	ldr	r3, [r3, r2]
 8004aae:	1dfa      	adds	r2, r7, #7
 8004ab0:	7812      	ldrb	r2, [r2, #0]
 8004ab2:	0011      	movs	r1, r2
 8004ab4:	2203      	movs	r2, #3
 8004ab6:	400a      	ands	r2, r1
 8004ab8:	00d2      	lsls	r2, r2, #3
 8004aba:	21ff      	movs	r1, #255	; 0xff
 8004abc:	4091      	lsls	r1, r2
 8004abe:	000a      	movs	r2, r1
 8004ac0:	43d2      	mvns	r2, r2
 8004ac2:	401a      	ands	r2, r3
 8004ac4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	019b      	lsls	r3, r3, #6
 8004aca:	22ff      	movs	r2, #255	; 0xff
 8004acc:	401a      	ands	r2, r3
 8004ace:	1dfb      	adds	r3, r7, #7
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	4003      	ands	r3, r0
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004adc:	481f      	ldr	r0, [pc, #124]	; (8004b5c <__NVIC_SetPriority+0xd4>)
 8004ade:	1dfb      	adds	r3, r7, #7
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	b25b      	sxtb	r3, r3
 8004ae4:	089b      	lsrs	r3, r3, #2
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	33c0      	adds	r3, #192	; 0xc0
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004aee:	e031      	b.n	8004b54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004af0:	4a1b      	ldr	r2, [pc, #108]	; (8004b60 <__NVIC_SetPriority+0xd8>)
 8004af2:	1dfb      	adds	r3, r7, #7
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	0019      	movs	r1, r3
 8004af8:	230f      	movs	r3, #15
 8004afa:	400b      	ands	r3, r1
 8004afc:	3b08      	subs	r3, #8
 8004afe:	089b      	lsrs	r3, r3, #2
 8004b00:	3306      	adds	r3, #6
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	18d3      	adds	r3, r2, r3
 8004b06:	3304      	adds	r3, #4
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	1dfa      	adds	r2, r7, #7
 8004b0c:	7812      	ldrb	r2, [r2, #0]
 8004b0e:	0011      	movs	r1, r2
 8004b10:	2203      	movs	r2, #3
 8004b12:	400a      	ands	r2, r1
 8004b14:	00d2      	lsls	r2, r2, #3
 8004b16:	21ff      	movs	r1, #255	; 0xff
 8004b18:	4091      	lsls	r1, r2
 8004b1a:	000a      	movs	r2, r1
 8004b1c:	43d2      	mvns	r2, r2
 8004b1e:	401a      	ands	r2, r3
 8004b20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	019b      	lsls	r3, r3, #6
 8004b26:	22ff      	movs	r2, #255	; 0xff
 8004b28:	401a      	ands	r2, r3
 8004b2a:	1dfb      	adds	r3, r7, #7
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	0018      	movs	r0, r3
 8004b30:	2303      	movs	r3, #3
 8004b32:	4003      	ands	r3, r0
 8004b34:	00db      	lsls	r3, r3, #3
 8004b36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b38:	4809      	ldr	r0, [pc, #36]	; (8004b60 <__NVIC_SetPriority+0xd8>)
 8004b3a:	1dfb      	adds	r3, r7, #7
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	001c      	movs	r4, r3
 8004b40:	230f      	movs	r3, #15
 8004b42:	4023      	ands	r3, r4
 8004b44:	3b08      	subs	r3, #8
 8004b46:	089b      	lsrs	r3, r3, #2
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	3306      	adds	r3, #6
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	18c3      	adds	r3, r0, r3
 8004b50:	3304      	adds	r3, #4
 8004b52:	601a      	str	r2, [r3, #0]
}
 8004b54:	46c0      	nop			; (mov r8, r8)
 8004b56:	46bd      	mov	sp, r7
 8004b58:	b003      	add	sp, #12
 8004b5a:	bd90      	pop	{r4, r7, pc}
 8004b5c:	e000e100 	.word	0xe000e100
 8004b60:	e000ed00 	.word	0xe000ed00

08004b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	1e5a      	subs	r2, r3, #1
 8004b70:	2380      	movs	r3, #128	; 0x80
 8004b72:	045b      	lsls	r3, r3, #17
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d301      	bcc.n	8004b7c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e010      	b.n	8004b9e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ba8 <SysTick_Config+0x44>)
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	3a01      	subs	r2, #1
 8004b82:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b84:	2301      	movs	r3, #1
 8004b86:	425b      	negs	r3, r3
 8004b88:	2103      	movs	r1, #3
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	f7ff ff7c 	bl	8004a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b90:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <SysTick_Config+0x44>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b96:	4b04      	ldr	r3, [pc, #16]	; (8004ba8 <SysTick_Config+0x44>)
 8004b98:	2207      	movs	r2, #7
 8004b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	0018      	movs	r0, r3
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	b002      	add	sp, #8
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	46c0      	nop			; (mov r8, r8)
 8004ba8:	e000e010 	.word	0xe000e010

08004bac <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60b9      	str	r1, [r7, #8]
 8004bb4:	607a      	str	r2, [r7, #4]
 8004bb6:	210f      	movs	r1, #15
 8004bb8:	187b      	adds	r3, r7, r1
 8004bba:	1c02      	adds	r2, r0, #0
 8004bbc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	187b      	adds	r3, r7, r1
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	b25b      	sxtb	r3, r3
 8004bc6:	0011      	movs	r1, r2
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f7ff ff5d 	bl	8004a88 <__NVIC_SetPriority>
}
 8004bce:	46c0      	nop			; (mov r8, r8)
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	b004      	add	sp, #16
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b082      	sub	sp, #8
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	0002      	movs	r2, r0
 8004bde:	1dfb      	adds	r3, r7, #7
 8004be0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004be2:	1dfb      	adds	r3, r7, #7
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	b25b      	sxtb	r3, r3
 8004be8:	0018      	movs	r0, r3
 8004bea:	f7ff ff33 	bl	8004a54 <__NVIC_EnableIRQ>
}
 8004bee:	46c0      	nop			; (mov r8, r8)
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	b002      	add	sp, #8
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b082      	sub	sp, #8
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	0018      	movs	r0, r3
 8004c02:	f7ff ffaf 	bl	8004b64 <SysTick_Config>
 8004c06:	0003      	movs	r3, r0
}
 8004c08:	0018      	movs	r0, r3
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	b002      	add	sp, #8
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e050      	b.n	8004cc4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2225      	movs	r2, #37	; 0x25
 8004c26:	5c9b      	ldrb	r3, [r3, r2]
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d008      	beq.n	8004c40 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2204      	movs	r2, #4
 8004c32:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2224      	movs	r2, #36	; 0x24
 8004c38:	2100      	movs	r1, #0
 8004c3a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e041      	b.n	8004cc4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	210e      	movs	r1, #14
 8004c4c:	438a      	bics	r2, r1
 8004c4e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5a:	491c      	ldr	r1, [pc, #112]	; (8004ccc <HAL_DMA_Abort+0xbc>)
 8004c5c:	400a      	ands	r2, r1
 8004c5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	438a      	bics	r2, r1
 8004c6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8004c70:	4b17      	ldr	r3, [pc, #92]	; (8004cd0 <HAL_DMA_Abort+0xc0>)
 8004c72:	6859      	ldr	r1, [r3, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c78:	221c      	movs	r2, #28
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	409a      	lsls	r2, r3
 8004c80:	4b13      	ldr	r3, [pc, #76]	; (8004cd0 <HAL_DMA_Abort+0xc0>)
 8004c82:	430a      	orrs	r2, r1
 8004c84:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004c8e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00c      	beq.n	8004cb2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca2:	490a      	ldr	r1, [pc, #40]	; (8004ccc <HAL_DMA_Abort+0xbc>)
 8004ca4:	400a      	ands	r2, r1
 8004ca6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004cb0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2225      	movs	r2, #37	; 0x25
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2224      	movs	r2, #36	; 0x24
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	b002      	add	sp, #8
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	fffffeff 	.word	0xfffffeff
 8004cd0:	40020000 	.word	0x40020000

08004cd4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cdc:	210f      	movs	r1, #15
 8004cde:	187b      	adds	r3, r7, r1
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2225      	movs	r2, #37	; 0x25
 8004ce8:	5c9b      	ldrb	r3, [r3, r2]
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d006      	beq.n	8004cfe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2204      	movs	r2, #4
 8004cf4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004cf6:	187b      	adds	r3, r7, r1
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	701a      	strb	r2, [r3, #0]
 8004cfc:	e049      	b.n	8004d92 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	210e      	movs	r1, #14
 8004d0a:	438a      	bics	r2, r1
 8004d0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2101      	movs	r1, #1
 8004d1a:	438a      	bics	r2, r1
 8004d1c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d28:	491d      	ldr	r1, [pc, #116]	; (8004da0 <HAL_DMA_Abort_IT+0xcc>)
 8004d2a:	400a      	ands	r2, r1
 8004d2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8004d2e:	4b1d      	ldr	r3, [pc, #116]	; (8004da4 <HAL_DMA_Abort_IT+0xd0>)
 8004d30:	6859      	ldr	r1, [r3, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	221c      	movs	r2, #28
 8004d38:	4013      	ands	r3, r2
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	409a      	lsls	r2, r3
 8004d3e:	4b19      	ldr	r3, [pc, #100]	; (8004da4 <HAL_DMA_Abort_IT+0xd0>)
 8004d40:	430a      	orrs	r2, r1
 8004d42:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004d4c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00c      	beq.n	8004d70 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d60:	490f      	ldr	r1, [pc, #60]	; (8004da0 <HAL_DMA_Abort_IT+0xcc>)
 8004d62:	400a      	ands	r2, r1
 8004d64:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004d6e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2225      	movs	r2, #37	; 0x25
 8004d74:	2101      	movs	r1, #1
 8004d76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2224      	movs	r2, #36	; 0x24
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d004      	beq.n	8004d92 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	0010      	movs	r0, r2
 8004d90:	4798      	blx	r3
    }
  }
  return status;
 8004d92:	230f      	movs	r3, #15
 8004d94:	18fb      	adds	r3, r7, r3
 8004d96:	781b      	ldrb	r3, [r3, #0]
}
 8004d98:	0018      	movs	r0, r3
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	b004      	add	sp, #16
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	fffffeff 	.word	0xfffffeff
 8004da4:	40020000 	.word	0x40020000

08004da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004db2:	2300      	movs	r3, #0
 8004db4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004db6:	e147      	b.n	8005048 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	4091      	lsls	r1, r2
 8004dc2:	000a      	movs	r2, r1
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d100      	bne.n	8004dd0 <HAL_GPIO_Init+0x28>
 8004dce:	e138      	b.n	8005042 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	2203      	movs	r2, #3
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d005      	beq.n	8004de8 <HAL_GPIO_Init+0x40>
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	2203      	movs	r2, #3
 8004de2:	4013      	ands	r3, r2
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d130      	bne.n	8004e4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	005b      	lsls	r3, r3, #1
 8004df2:	2203      	movs	r2, #3
 8004df4:	409a      	lsls	r2, r3
 8004df6:	0013      	movs	r3, r2
 8004df8:	43da      	mvns	r2, r3
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	68da      	ldr	r2, [r3, #12]
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	409a      	lsls	r2, r3
 8004e0a:	0013      	movs	r3, r2
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e1e:	2201      	movs	r2, #1
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	409a      	lsls	r2, r3
 8004e24:	0013      	movs	r3, r2
 8004e26:	43da      	mvns	r2, r3
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	091b      	lsrs	r3, r3, #4
 8004e34:	2201      	movs	r2, #1
 8004e36:	401a      	ands	r2, r3
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	409a      	lsls	r2, r3
 8004e3c:	0013      	movs	r3, r2
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	2203      	movs	r2, #3
 8004e50:	4013      	ands	r3, r2
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d017      	beq.n	8004e86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	2203      	movs	r2, #3
 8004e62:	409a      	lsls	r2, r3
 8004e64:	0013      	movs	r3, r2
 8004e66:	43da      	mvns	r2, r3
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	689a      	ldr	r2, [r3, #8]
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	005b      	lsls	r3, r3, #1
 8004e76:	409a      	lsls	r2, r3
 8004e78:	0013      	movs	r3, r2
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2203      	movs	r2, #3
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d123      	bne.n	8004eda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	08da      	lsrs	r2, r3, #3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	3208      	adds	r2, #8
 8004e9a:	0092      	lsls	r2, r2, #2
 8004e9c:	58d3      	ldr	r3, [r2, r3]
 8004e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	2207      	movs	r2, #7
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	220f      	movs	r2, #15
 8004eaa:	409a      	lsls	r2, r3
 8004eac:	0013      	movs	r3, r2
 8004eae:	43da      	mvns	r2, r3
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	691a      	ldr	r2, [r3, #16]
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2107      	movs	r1, #7
 8004ebe:	400b      	ands	r3, r1
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	409a      	lsls	r2, r3
 8004ec4:	0013      	movs	r3, r2
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	08da      	lsrs	r2, r3, #3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3208      	adds	r2, #8
 8004ed4:	0092      	lsls	r2, r2, #2
 8004ed6:	6939      	ldr	r1, [r7, #16]
 8004ed8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	2203      	movs	r2, #3
 8004ee6:	409a      	lsls	r2, r3
 8004ee8:	0013      	movs	r3, r2
 8004eea:	43da      	mvns	r2, r3
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	2203      	movs	r2, #3
 8004ef8:	401a      	ands	r2, r3
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	005b      	lsls	r3, r3, #1
 8004efe:	409a      	lsls	r2, r3
 8004f00:	0013      	movs	r3, r2
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	23c0      	movs	r3, #192	; 0xc0
 8004f14:	029b      	lsls	r3, r3, #10
 8004f16:	4013      	ands	r3, r2
 8004f18:	d100      	bne.n	8004f1c <HAL_GPIO_Init+0x174>
 8004f1a:	e092      	b.n	8005042 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004f1c:	4a50      	ldr	r2, [pc, #320]	; (8005060 <HAL_GPIO_Init+0x2b8>)
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	089b      	lsrs	r3, r3, #2
 8004f22:	3318      	adds	r3, #24
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	589b      	ldr	r3, [r3, r2]
 8004f28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2203      	movs	r2, #3
 8004f2e:	4013      	ands	r3, r2
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	220f      	movs	r2, #15
 8004f34:	409a      	lsls	r2, r3
 8004f36:	0013      	movs	r3, r2
 8004f38:	43da      	mvns	r2, r3
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	23a0      	movs	r3, #160	; 0xa0
 8004f44:	05db      	lsls	r3, r3, #23
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d013      	beq.n	8004f72 <HAL_GPIO_Init+0x1ca>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a45      	ldr	r2, [pc, #276]	; (8005064 <HAL_GPIO_Init+0x2bc>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d00d      	beq.n	8004f6e <HAL_GPIO_Init+0x1c6>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a44      	ldr	r2, [pc, #272]	; (8005068 <HAL_GPIO_Init+0x2c0>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d007      	beq.n	8004f6a <HAL_GPIO_Init+0x1c2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a43      	ldr	r2, [pc, #268]	; (800506c <HAL_GPIO_Init+0x2c4>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d101      	bne.n	8004f66 <HAL_GPIO_Init+0x1be>
 8004f62:	2303      	movs	r3, #3
 8004f64:	e006      	b.n	8004f74 <HAL_GPIO_Init+0x1cc>
 8004f66:	2305      	movs	r3, #5
 8004f68:	e004      	b.n	8004f74 <HAL_GPIO_Init+0x1cc>
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	e002      	b.n	8004f74 <HAL_GPIO_Init+0x1cc>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e000      	b.n	8004f74 <HAL_GPIO_Init+0x1cc>
 8004f72:	2300      	movs	r3, #0
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	2103      	movs	r1, #3
 8004f78:	400a      	ands	r2, r1
 8004f7a:	00d2      	lsls	r2, r2, #3
 8004f7c:	4093      	lsls	r3, r2
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004f84:	4936      	ldr	r1, [pc, #216]	; (8005060 <HAL_GPIO_Init+0x2b8>)
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	089b      	lsrs	r3, r3, #2
 8004f8a:	3318      	adds	r3, #24
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f92:	4b33      	ldr	r3, [pc, #204]	; (8005060 <HAL_GPIO_Init+0x2b8>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	43da      	mvns	r2, r3
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	2380      	movs	r3, #128	; 0x80
 8004fa8:	035b      	lsls	r3, r3, #13
 8004faa:	4013      	ands	r3, r2
 8004fac:	d003      	beq.n	8004fb6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004fb6:	4b2a      	ldr	r3, [pc, #168]	; (8005060 <HAL_GPIO_Init+0x2b8>)
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004fbc:	4b28      	ldr	r3, [pc, #160]	; (8005060 <HAL_GPIO_Init+0x2b8>)
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	43da      	mvns	r2, r3
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	2380      	movs	r3, #128	; 0x80
 8004fd2:	039b      	lsls	r3, r3, #14
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	d003      	beq.n	8004fe0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004fe0:	4b1f      	ldr	r3, [pc, #124]	; (8005060 <HAL_GPIO_Init+0x2b8>)
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004fe6:	4a1e      	ldr	r2, [pc, #120]	; (8005060 <HAL_GPIO_Init+0x2b8>)
 8004fe8:	2384      	movs	r3, #132	; 0x84
 8004fea:	58d3      	ldr	r3, [r2, r3]
 8004fec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	43da      	mvns	r2, r3
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	2380      	movs	r3, #128	; 0x80
 8004ffe:	029b      	lsls	r3, r3, #10
 8005000:	4013      	ands	r3, r2
 8005002:	d003      	beq.n	800500c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4313      	orrs	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800500c:	4914      	ldr	r1, [pc, #80]	; (8005060 <HAL_GPIO_Init+0x2b8>)
 800500e:	2284      	movs	r2, #132	; 0x84
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005014:	4a12      	ldr	r2, [pc, #72]	; (8005060 <HAL_GPIO_Init+0x2b8>)
 8005016:	2380      	movs	r3, #128	; 0x80
 8005018:	58d3      	ldr	r3, [r2, r3]
 800501a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	43da      	mvns	r2, r3
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	4013      	ands	r3, r2
 8005024:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	2380      	movs	r3, #128	; 0x80
 800502c:	025b      	lsls	r3, r3, #9
 800502e:	4013      	ands	r3, r2
 8005030:	d003      	beq.n	800503a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4313      	orrs	r3, r2
 8005038:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800503a:	4909      	ldr	r1, [pc, #36]	; (8005060 <HAL_GPIO_Init+0x2b8>)
 800503c:	2280      	movs	r2, #128	; 0x80
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	3301      	adds	r3, #1
 8005046:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	40da      	lsrs	r2, r3
 8005050:	1e13      	subs	r3, r2, #0
 8005052:	d000      	beq.n	8005056 <HAL_GPIO_Init+0x2ae>
 8005054:	e6b0      	b.n	8004db8 <HAL_GPIO_Init+0x10>
  }
}
 8005056:	46c0      	nop			; (mov r8, r8)
 8005058:	46c0      	nop			; (mov r8, r8)
 800505a:	46bd      	mov	sp, r7
 800505c:	b006      	add	sp, #24
 800505e:	bd80      	pop	{r7, pc}
 8005060:	40021800 	.word	0x40021800
 8005064:	50000400 	.word	0x50000400
 8005068:	50000800 	.word	0x50000800
 800506c:	50000c00 	.word	0x50000c00

08005070 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	000a      	movs	r2, r1
 800507a:	1cbb      	adds	r3, r7, #2
 800507c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	1cba      	adds	r2, r7, #2
 8005084:	8812      	ldrh	r2, [r2, #0]
 8005086:	4013      	ands	r3, r2
 8005088:	d004      	beq.n	8005094 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800508a:	230f      	movs	r3, #15
 800508c:	18fb      	adds	r3, r7, r3
 800508e:	2201      	movs	r2, #1
 8005090:	701a      	strb	r2, [r3, #0]
 8005092:	e003      	b.n	800509c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005094:	230f      	movs	r3, #15
 8005096:	18fb      	adds	r3, r7, r3
 8005098:	2200      	movs	r2, #0
 800509a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800509c:	230f      	movs	r3, #15
 800509e:	18fb      	adds	r3, r7, r3
 80050a0:	781b      	ldrb	r3, [r3, #0]
}
 80050a2:	0018      	movs	r0, r3
 80050a4:	46bd      	mov	sp, r7
 80050a6:	b004      	add	sp, #16
 80050a8:	bd80      	pop	{r7, pc}

080050aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b082      	sub	sp, #8
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	0008      	movs	r0, r1
 80050b4:	0011      	movs	r1, r2
 80050b6:	1cbb      	adds	r3, r7, #2
 80050b8:	1c02      	adds	r2, r0, #0
 80050ba:	801a      	strh	r2, [r3, #0]
 80050bc:	1c7b      	adds	r3, r7, #1
 80050be:	1c0a      	adds	r2, r1, #0
 80050c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050c2:	1c7b      	adds	r3, r7, #1
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d004      	beq.n	80050d4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050ca:	1cbb      	adds	r3, r7, #2
 80050cc:	881a      	ldrh	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80050d2:	e003      	b.n	80050dc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80050d4:	1cbb      	adds	r3, r7, #2
 80050d6:	881a      	ldrh	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80050dc:	46c0      	nop			; (mov r8, r8)
 80050de:	46bd      	mov	sp, r7
 80050e0:	b002      	add	sp, #8
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	000a      	movs	r2, r1
 80050ee:	1cbb      	adds	r3, r7, #2
 80050f0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80050f8:	1cbb      	adds	r3, r7, #2
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	4013      	ands	r3, r2
 8005100:	041a      	lsls	r2, r3, #16
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	43db      	mvns	r3, r3
 8005106:	1cb9      	adds	r1, r7, #2
 8005108:	8809      	ldrh	r1, [r1, #0]
 800510a:	400b      	ands	r3, r1
 800510c:	431a      	orrs	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	619a      	str	r2, [r3, #24]
}
 8005112:	46c0      	nop			; (mov r8, r8)
 8005114:	46bd      	mov	sp, r7
 8005116:	b004      	add	sp, #16
 8005118:	bd80      	pop	{r7, pc}
	...

0800511c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	0002      	movs	r2, r0
 8005124:	1dbb      	adds	r3, r7, #6
 8005126:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8005128:	4b10      	ldr	r3, [pc, #64]	; (800516c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	1dba      	adds	r2, r7, #6
 800512e:	8812      	ldrh	r2, [r2, #0]
 8005130:	4013      	ands	r3, r2
 8005132:	d008      	beq.n	8005146 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8005134:	4b0d      	ldr	r3, [pc, #52]	; (800516c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005136:	1dba      	adds	r2, r7, #6
 8005138:	8812      	ldrh	r2, [r2, #0]
 800513a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800513c:	1dbb      	adds	r3, r7, #6
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	0018      	movs	r0, r3
 8005142:	f7fd fc2b 	bl	800299c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8005146:	4b09      	ldr	r3, [pc, #36]	; (800516c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	1dba      	adds	r2, r7, #6
 800514c:	8812      	ldrh	r2, [r2, #0]
 800514e:	4013      	ands	r3, r2
 8005150:	d008      	beq.n	8005164 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8005152:	4b06      	ldr	r3, [pc, #24]	; (800516c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005154:	1dba      	adds	r2, r7, #6
 8005156:	8812      	ldrh	r2, [r2, #0]
 8005158:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800515a:	1dbb      	adds	r3, r7, #6
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	0018      	movs	r0, r3
 8005160:	f000 f806 	bl	8005170 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8005164:	46c0      	nop			; (mov r8, r8)
 8005166:	46bd      	mov	sp, r7
 8005168:	b002      	add	sp, #8
 800516a:	bd80      	pop	{r7, pc}
 800516c:	40021800 	.word	0x40021800

08005170 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	0002      	movs	r2, r0
 8005178:	1dbb      	adds	r3, r7, #6
 800517a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800517c:	46c0      	nop			; (mov r8, r8)
 800517e:	46bd      	mov	sp, r7
 8005180:	b002      	add	sp, #8
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_PWREx_ConfigPVD>:
  * @note   User should take care that rising threshold is higher than falling
  *         one in order to avoid having always PVDO output set.
  * @retval HAL_OK
  */
HAL_StatusTypeDef HAL_PWREx_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PVD level bits only according to PVDLevel value */
  MODIFY_REG(PWR->CR2, (PWR_CR2_PVDFT | PWR_CR2_PVDRT), sConfigPVD->PVDLevel);
 800518c:	4b30      	ldr	r3, [pc, #192]	; (8005250 <HAL_PWREx_ConfigPVD+0xcc>)
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	227e      	movs	r2, #126	; 0x7e
 8005192:	4393      	bics	r3, r2
 8005194:	0019      	movs	r1, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	4b2d      	ldr	r3, [pc, #180]	; (8005250 <HAL_PWREx_ConfigPVD+0xcc>)
 800519c:	430a      	orrs	r2, r1
 800519e:	605a      	str	r2, [r3, #4]

  /* Clear any previous config, in case no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 80051a0:	4a2c      	ldr	r2, [pc, #176]	; (8005254 <HAL_PWREx_ConfigPVD+0xd0>)
 80051a2:	2384      	movs	r3, #132	; 0x84
 80051a4:	58d3      	ldr	r3, [r2, r3]
 80051a6:	492b      	ldr	r1, [pc, #172]	; (8005254 <HAL_PWREx_ConfigPVD+0xd0>)
 80051a8:	4a2b      	ldr	r2, [pc, #172]	; (8005258 <HAL_PWREx_ConfigPVD+0xd4>)
 80051aa:	4013      	ands	r3, r2
 80051ac:	2284      	movs	r2, #132	; 0x84
 80051ae:	508b      	str	r3, [r1, r2]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80051b0:	4a28      	ldr	r2, [pc, #160]	; (8005254 <HAL_PWREx_ConfigPVD+0xd0>)
 80051b2:	2380      	movs	r3, #128	; 0x80
 80051b4:	58d3      	ldr	r3, [r2, r3]
 80051b6:	4927      	ldr	r1, [pc, #156]	; (8005254 <HAL_PWREx_ConfigPVD+0xd0>)
 80051b8:	4a27      	ldr	r2, [pc, #156]	; (8005258 <HAL_PWREx_ConfigPVD+0xd4>)
 80051ba:	4013      	ands	r3, r2
 80051bc:	2280      	movs	r2, #128	; 0x80
 80051be:	508b      	str	r3, [r1, r2]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 80051c0:	4b24      	ldr	r3, [pc, #144]	; (8005254 <HAL_PWREx_ConfigPVD+0xd0>)
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	4b23      	ldr	r3, [pc, #140]	; (8005254 <HAL_PWREx_ConfigPVD+0xd0>)
 80051c6:	4924      	ldr	r1, [pc, #144]	; (8005258 <HAL_PWREx_ConfigPVD+0xd4>)
 80051c8:	400a      	ands	r2, r1
 80051ca:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80051cc:	4b21      	ldr	r3, [pc, #132]	; (8005254 <HAL_PWREx_ConfigPVD+0xd0>)
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	4b20      	ldr	r3, [pc, #128]	; (8005254 <HAL_PWREx_ConfigPVD+0xd0>)
 80051d2:	4921      	ldr	r1, [pc, #132]	; (8005258 <HAL_PWREx_ConfigPVD+0xd4>)
 80051d4:	400a      	ands	r2, r1
 80051d6:	601a      	str	r2, [r3, #0]

  /* Configure interrupt mode */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	2380      	movs	r3, #128	; 0x80
 80051de:	025b      	lsls	r3, r3, #9
 80051e0:	4013      	ands	r3, r2
 80051e2:	d008      	beq.n	80051f6 <HAL_PWREx_ConfigPVD+0x72>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80051e4:	4a1b      	ldr	r2, [pc, #108]	; (8005254 <HAL_PWREx_ConfigPVD+0xd0>)
 80051e6:	2380      	movs	r3, #128	; 0x80
 80051e8:	58d3      	ldr	r3, [r2, r3]
 80051ea:	491a      	ldr	r1, [pc, #104]	; (8005254 <HAL_PWREx_ConfigPVD+0xd0>)
 80051ec:	2280      	movs	r2, #128	; 0x80
 80051ee:	0252      	lsls	r2, r2, #9
 80051f0:	4313      	orrs	r3, r2
 80051f2:	2280      	movs	r2, #128	; 0x80
 80051f4:	508b      	str	r3, [r1, r2]
  }

  /* Configure event mode */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	2380      	movs	r3, #128	; 0x80
 80051fc:	029b      	lsls	r3, r3, #10
 80051fe:	4013      	ands	r3, r2
 8005200:	d008      	beq.n	8005214 <HAL_PWREx_ConfigPVD+0x90>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8005202:	4a14      	ldr	r2, [pc, #80]	; (8005254 <HAL_PWREx_ConfigPVD+0xd0>)
 8005204:	2384      	movs	r3, #132	; 0x84
 8005206:	58d3      	ldr	r3, [r2, r3]
 8005208:	4912      	ldr	r1, [pc, #72]	; (8005254 <HAL_PWREx_ConfigPVD+0xd0>)
 800520a:	2280      	movs	r2, #128	; 0x80
 800520c:	0252      	lsls	r2, r2, #9
 800520e:	4313      	orrs	r3, r2
 8005210:	2284      	movs	r2, #132	; 0x84
 8005212:	508b      	str	r3, [r1, r2]
  }

  /* Configure the edge */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	4013      	ands	r3, r2
 800521c:	d006      	beq.n	800522c <HAL_PWREx_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800521e:	4b0d      	ldr	r3, [pc, #52]	; (8005254 <HAL_PWREx_ConfigPVD+0xd0>)
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	4b0c      	ldr	r3, [pc, #48]	; (8005254 <HAL_PWREx_ConfigPVD+0xd0>)
 8005224:	2180      	movs	r1, #128	; 0x80
 8005226:	0249      	lsls	r1, r1, #9
 8005228:	430a      	orrs	r2, r1
 800522a:	601a      	str	r2, [r3, #0]
  }

  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	2202      	movs	r2, #2
 8005232:	4013      	ands	r3, r2
 8005234:	d006      	beq.n	8005244 <HAL_PWREx_ConfigPVD+0xc0>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8005236:	4b07      	ldr	r3, [pc, #28]	; (8005254 <HAL_PWREx_ConfigPVD+0xd0>)
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	4b06      	ldr	r3, [pc, #24]	; (8005254 <HAL_PWREx_ConfigPVD+0xd0>)
 800523c:	2180      	movs	r1, #128	; 0x80
 800523e:	0249      	lsls	r1, r1, #9
 8005240:	430a      	orrs	r2, r1
 8005242:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	0018      	movs	r0, r3
 8005248:	46bd      	mov	sp, r7
 800524a:	b002      	add	sp, #8
 800524c:	bd80      	pop	{r7, pc}
 800524e:	46c0      	nop			; (mov r8, r8)
 8005250:	40007000 	.word	0x40007000
 8005254:	40021800 	.word	0x40021800
 8005258:	fffeffff 	.word	0xfffeffff

0800525c <HAL_PWREx_EnablePVD>:
/**
  * @brief  Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWREx_EnablePVD(void)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8005260:	4b04      	ldr	r3, [pc, #16]	; (8005274 <HAL_PWREx_EnablePVD+0x18>)
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	4b03      	ldr	r3, [pc, #12]	; (8005274 <HAL_PWREx_EnablePVD+0x18>)
 8005266:	2101      	movs	r1, #1
 8005268:	430a      	orrs	r2, r1
 800526a:	605a      	str	r2, [r3, #4]
}
 800526c:	46c0      	nop			; (mov r8, r8)
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	46c0      	nop			; (mov r8, r8)
 8005274:	40007000 	.word	0x40007000

08005278 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005280:	4b19      	ldr	r3, [pc, #100]	; (80052e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a19      	ldr	r2, [pc, #100]	; (80052ec <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005286:	4013      	ands	r3, r2
 8005288:	0019      	movs	r1, r3
 800528a:	4b17      	ldr	r3, [pc, #92]	; (80052e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	430a      	orrs	r2, r1
 8005290:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	2380      	movs	r3, #128	; 0x80
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	429a      	cmp	r2, r3
 800529a:	d11f      	bne.n	80052dc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800529c:	4b14      	ldr	r3, [pc, #80]	; (80052f0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	0013      	movs	r3, r2
 80052a2:	005b      	lsls	r3, r3, #1
 80052a4:	189b      	adds	r3, r3, r2
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	4912      	ldr	r1, [pc, #72]	; (80052f4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80052aa:	0018      	movs	r0, r3
 80052ac:	f7fa ff46 	bl	800013c <__udivsi3>
 80052b0:	0003      	movs	r3, r0
 80052b2:	3301      	adds	r3, #1
 80052b4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052b6:	e008      	b.n	80052ca <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	3b01      	subs	r3, #1
 80052c2:	60fb      	str	r3, [r7, #12]
 80052c4:	e001      	b.n	80052ca <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e009      	b.n	80052de <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052ca:	4b07      	ldr	r3, [pc, #28]	; (80052e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80052cc:	695a      	ldr	r2, [r3, #20]
 80052ce:	2380      	movs	r3, #128	; 0x80
 80052d0:	00db      	lsls	r3, r3, #3
 80052d2:	401a      	ands	r2, r3
 80052d4:	2380      	movs	r3, #128	; 0x80
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	429a      	cmp	r2, r3
 80052da:	d0ed      	beq.n	80052b8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	0018      	movs	r0, r3
 80052e0:	46bd      	mov	sp, r7
 80052e2:	b004      	add	sp, #16
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	46c0      	nop			; (mov r8, r8)
 80052e8:	40007000 	.word	0x40007000
 80052ec:	fffff9ff 	.word	0xfffff9ff
 80052f0:	20000030 	.word	0x20000030
 80052f4:	000f4240 	.word	0x000f4240

080052f8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80052fc:	4b03      	ldr	r3, [pc, #12]	; (800530c <LL_RCC_GetAPB1Prescaler+0x14>)
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	23e0      	movs	r3, #224	; 0xe0
 8005302:	01db      	lsls	r3, r3, #7
 8005304:	4013      	ands	r3, r2
}
 8005306:	0018      	movs	r0, r3
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40021000 	.word	0x40021000

08005310 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b088      	sub	sp, #32
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e2fe      	b.n	8005920 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2201      	movs	r2, #1
 8005328:	4013      	ands	r3, r2
 800532a:	d100      	bne.n	800532e <HAL_RCC_OscConfig+0x1e>
 800532c:	e07c      	b.n	8005428 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800532e:	4bc3      	ldr	r3, [pc, #780]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	2238      	movs	r2, #56	; 0x38
 8005334:	4013      	ands	r3, r2
 8005336:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005338:	4bc0      	ldr	r3, [pc, #768]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	2203      	movs	r2, #3
 800533e:	4013      	ands	r3, r2
 8005340:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	2b10      	cmp	r3, #16
 8005346:	d102      	bne.n	800534e <HAL_RCC_OscConfig+0x3e>
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	2b03      	cmp	r3, #3
 800534c:	d002      	beq.n	8005354 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	2b08      	cmp	r3, #8
 8005352:	d10b      	bne.n	800536c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005354:	4bb9      	ldr	r3, [pc, #740]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	2380      	movs	r3, #128	; 0x80
 800535a:	029b      	lsls	r3, r3, #10
 800535c:	4013      	ands	r3, r2
 800535e:	d062      	beq.n	8005426 <HAL_RCC_OscConfig+0x116>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d15e      	bne.n	8005426 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e2d9      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	2380      	movs	r3, #128	; 0x80
 8005372:	025b      	lsls	r3, r3, #9
 8005374:	429a      	cmp	r2, r3
 8005376:	d107      	bne.n	8005388 <HAL_RCC_OscConfig+0x78>
 8005378:	4bb0      	ldr	r3, [pc, #704]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	4baf      	ldr	r3, [pc, #700]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 800537e:	2180      	movs	r1, #128	; 0x80
 8005380:	0249      	lsls	r1, r1, #9
 8005382:	430a      	orrs	r2, r1
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	e020      	b.n	80053ca <HAL_RCC_OscConfig+0xba>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	23a0      	movs	r3, #160	; 0xa0
 800538e:	02db      	lsls	r3, r3, #11
 8005390:	429a      	cmp	r2, r3
 8005392:	d10e      	bne.n	80053b2 <HAL_RCC_OscConfig+0xa2>
 8005394:	4ba9      	ldr	r3, [pc, #676]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	4ba8      	ldr	r3, [pc, #672]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 800539a:	2180      	movs	r1, #128	; 0x80
 800539c:	02c9      	lsls	r1, r1, #11
 800539e:	430a      	orrs	r2, r1
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	4ba6      	ldr	r3, [pc, #664]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	4ba5      	ldr	r3, [pc, #660]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 80053a8:	2180      	movs	r1, #128	; 0x80
 80053aa:	0249      	lsls	r1, r1, #9
 80053ac:	430a      	orrs	r2, r1
 80053ae:	601a      	str	r2, [r3, #0]
 80053b0:	e00b      	b.n	80053ca <HAL_RCC_OscConfig+0xba>
 80053b2:	4ba2      	ldr	r3, [pc, #648]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	4ba1      	ldr	r3, [pc, #644]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 80053b8:	49a1      	ldr	r1, [pc, #644]	; (8005640 <HAL_RCC_OscConfig+0x330>)
 80053ba:	400a      	ands	r2, r1
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	4b9f      	ldr	r3, [pc, #636]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	4b9e      	ldr	r3, [pc, #632]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 80053c4:	499f      	ldr	r1, [pc, #636]	; (8005644 <HAL_RCC_OscConfig+0x334>)
 80053c6:	400a      	ands	r2, r1
 80053c8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d014      	beq.n	80053fc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d2:	f7ff fb35 	bl	8004a40 <HAL_GetTick>
 80053d6:	0003      	movs	r3, r0
 80053d8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053dc:	f7ff fb30 	bl	8004a40 <HAL_GetTick>
 80053e0:	0002      	movs	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b64      	cmp	r3, #100	; 0x64
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e298      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053ee:	4b93      	ldr	r3, [pc, #588]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	2380      	movs	r3, #128	; 0x80
 80053f4:	029b      	lsls	r3, r3, #10
 80053f6:	4013      	ands	r3, r2
 80053f8:	d0f0      	beq.n	80053dc <HAL_RCC_OscConfig+0xcc>
 80053fa:	e015      	b.n	8005428 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fc:	f7ff fb20 	bl	8004a40 <HAL_GetTick>
 8005400:	0003      	movs	r3, r0
 8005402:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005404:	e008      	b.n	8005418 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005406:	f7ff fb1b 	bl	8004a40 <HAL_GetTick>
 800540a:	0002      	movs	r2, r0
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b64      	cmp	r3, #100	; 0x64
 8005412:	d901      	bls.n	8005418 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e283      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005418:	4b88      	ldr	r3, [pc, #544]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	2380      	movs	r3, #128	; 0x80
 800541e:	029b      	lsls	r3, r3, #10
 8005420:	4013      	ands	r3, r2
 8005422:	d1f0      	bne.n	8005406 <HAL_RCC_OscConfig+0xf6>
 8005424:	e000      	b.n	8005428 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005426:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2202      	movs	r2, #2
 800542e:	4013      	ands	r3, r2
 8005430:	d100      	bne.n	8005434 <HAL_RCC_OscConfig+0x124>
 8005432:	e099      	b.n	8005568 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005434:	4b81      	ldr	r3, [pc, #516]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	2238      	movs	r2, #56	; 0x38
 800543a:	4013      	ands	r3, r2
 800543c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800543e:	4b7f      	ldr	r3, [pc, #508]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	2203      	movs	r2, #3
 8005444:	4013      	ands	r3, r2
 8005446:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	2b10      	cmp	r3, #16
 800544c:	d102      	bne.n	8005454 <HAL_RCC_OscConfig+0x144>
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2b02      	cmp	r3, #2
 8005452:	d002      	beq.n	800545a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d135      	bne.n	80054c6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800545a:	4b78      	ldr	r3, [pc, #480]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	2380      	movs	r3, #128	; 0x80
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	4013      	ands	r3, r2
 8005464:	d005      	beq.n	8005472 <HAL_RCC_OscConfig+0x162>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e256      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005472:	4b72      	ldr	r3, [pc, #456]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	4a74      	ldr	r2, [pc, #464]	; (8005648 <HAL_RCC_OscConfig+0x338>)
 8005478:	4013      	ands	r3, r2
 800547a:	0019      	movs	r1, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	021a      	lsls	r2, r3, #8
 8005482:	4b6e      	ldr	r3, [pc, #440]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 8005484:	430a      	orrs	r2, r1
 8005486:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d112      	bne.n	80054b4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800548e:	4b6b      	ldr	r3, [pc, #428]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a6e      	ldr	r2, [pc, #440]	; (800564c <HAL_RCC_OscConfig+0x33c>)
 8005494:	4013      	ands	r3, r2
 8005496:	0019      	movs	r1, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	691a      	ldr	r2, [r3, #16]
 800549c:	4b67      	ldr	r3, [pc, #412]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 800549e:	430a      	orrs	r2, r1
 80054a0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80054a2:	4b66      	ldr	r3, [pc, #408]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	0adb      	lsrs	r3, r3, #11
 80054a8:	2207      	movs	r2, #7
 80054aa:	4013      	ands	r3, r2
 80054ac:	4a68      	ldr	r2, [pc, #416]	; (8005650 <HAL_RCC_OscConfig+0x340>)
 80054ae:	40da      	lsrs	r2, r3
 80054b0:	4b68      	ldr	r3, [pc, #416]	; (8005654 <HAL_RCC_OscConfig+0x344>)
 80054b2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80054b4:	4b68      	ldr	r3, [pc, #416]	; (8005658 <HAL_RCC_OscConfig+0x348>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	0018      	movs	r0, r3
 80054ba:	f7ff fa65 	bl	8004988 <HAL_InitTick>
 80054be:	1e03      	subs	r3, r0, #0
 80054c0:	d051      	beq.n	8005566 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e22c      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d030      	beq.n	8005530 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80054ce:	4b5b      	ldr	r3, [pc, #364]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a5e      	ldr	r2, [pc, #376]	; (800564c <HAL_RCC_OscConfig+0x33c>)
 80054d4:	4013      	ands	r3, r2
 80054d6:	0019      	movs	r1, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	4b57      	ldr	r3, [pc, #348]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 80054de:	430a      	orrs	r2, r1
 80054e0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80054e2:	4b56      	ldr	r3, [pc, #344]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	4b55      	ldr	r3, [pc, #340]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 80054e8:	2180      	movs	r1, #128	; 0x80
 80054ea:	0049      	lsls	r1, r1, #1
 80054ec:	430a      	orrs	r2, r1
 80054ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f0:	f7ff faa6 	bl	8004a40 <HAL_GetTick>
 80054f4:	0003      	movs	r3, r0
 80054f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054f8:	e008      	b.n	800550c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054fa:	f7ff faa1 	bl	8004a40 <HAL_GetTick>
 80054fe:	0002      	movs	r2, r0
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d901      	bls.n	800550c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e209      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800550c:	4b4b      	ldr	r3, [pc, #300]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	2380      	movs	r3, #128	; 0x80
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	4013      	ands	r3, r2
 8005516:	d0f0      	beq.n	80054fa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005518:	4b48      	ldr	r3, [pc, #288]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	4a4a      	ldr	r2, [pc, #296]	; (8005648 <HAL_RCC_OscConfig+0x338>)
 800551e:	4013      	ands	r3, r2
 8005520:	0019      	movs	r1, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	021a      	lsls	r2, r3, #8
 8005528:	4b44      	ldr	r3, [pc, #272]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 800552a:	430a      	orrs	r2, r1
 800552c:	605a      	str	r2, [r3, #4]
 800552e:	e01b      	b.n	8005568 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005530:	4b42      	ldr	r3, [pc, #264]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	4b41      	ldr	r3, [pc, #260]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 8005536:	4949      	ldr	r1, [pc, #292]	; (800565c <HAL_RCC_OscConfig+0x34c>)
 8005538:	400a      	ands	r2, r1
 800553a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553c:	f7ff fa80 	bl	8004a40 <HAL_GetTick>
 8005540:	0003      	movs	r3, r0
 8005542:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005546:	f7ff fa7b 	bl	8004a40 <HAL_GetTick>
 800554a:	0002      	movs	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e1e3      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005558:	4b38      	ldr	r3, [pc, #224]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	2380      	movs	r3, #128	; 0x80
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	4013      	ands	r3, r2
 8005562:	d1f0      	bne.n	8005546 <HAL_RCC_OscConfig+0x236>
 8005564:	e000      	b.n	8005568 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005566:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2208      	movs	r2, #8
 800556e:	4013      	ands	r3, r2
 8005570:	d047      	beq.n	8005602 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005572:	4b32      	ldr	r3, [pc, #200]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	2238      	movs	r2, #56	; 0x38
 8005578:	4013      	ands	r3, r2
 800557a:	2b18      	cmp	r3, #24
 800557c:	d10a      	bne.n	8005594 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800557e:	4b2f      	ldr	r3, [pc, #188]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 8005580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005582:	2202      	movs	r2, #2
 8005584:	4013      	ands	r3, r2
 8005586:	d03c      	beq.n	8005602 <HAL_RCC_OscConfig+0x2f2>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d138      	bne.n	8005602 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e1c5      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d019      	beq.n	80055d0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800559c:	4b27      	ldr	r3, [pc, #156]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 800559e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80055a0:	4b26      	ldr	r3, [pc, #152]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 80055a2:	2101      	movs	r1, #1
 80055a4:	430a      	orrs	r2, r1
 80055a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a8:	f7ff fa4a 	bl	8004a40 <HAL_GetTick>
 80055ac:	0003      	movs	r3, r0
 80055ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055b0:	e008      	b.n	80055c4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055b2:	f7ff fa45 	bl	8004a40 <HAL_GetTick>
 80055b6:	0002      	movs	r2, r0
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d901      	bls.n	80055c4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e1ad      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055c4:	4b1d      	ldr	r3, [pc, #116]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 80055c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055c8:	2202      	movs	r2, #2
 80055ca:	4013      	ands	r3, r2
 80055cc:	d0f1      	beq.n	80055b2 <HAL_RCC_OscConfig+0x2a2>
 80055ce:	e018      	b.n	8005602 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80055d0:	4b1a      	ldr	r3, [pc, #104]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 80055d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80055d4:	4b19      	ldr	r3, [pc, #100]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 80055d6:	2101      	movs	r1, #1
 80055d8:	438a      	bics	r2, r1
 80055da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055dc:	f7ff fa30 	bl	8004a40 <HAL_GetTick>
 80055e0:	0003      	movs	r3, r0
 80055e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055e4:	e008      	b.n	80055f8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055e6:	f7ff fa2b 	bl	8004a40 <HAL_GetTick>
 80055ea:	0002      	movs	r2, r0
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d901      	bls.n	80055f8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e193      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055f8:	4b10      	ldr	r3, [pc, #64]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 80055fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055fc:	2202      	movs	r2, #2
 80055fe:	4013      	ands	r3, r2
 8005600:	d1f1      	bne.n	80055e6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2204      	movs	r2, #4
 8005608:	4013      	ands	r3, r2
 800560a:	d100      	bne.n	800560e <HAL_RCC_OscConfig+0x2fe>
 800560c:	e0c6      	b.n	800579c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800560e:	231f      	movs	r3, #31
 8005610:	18fb      	adds	r3, r7, r3
 8005612:	2200      	movs	r2, #0
 8005614:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005616:	4b09      	ldr	r3, [pc, #36]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	2238      	movs	r2, #56	; 0x38
 800561c:	4013      	ands	r3, r2
 800561e:	2b20      	cmp	r3, #32
 8005620:	d11e      	bne.n	8005660 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005622:	4b06      	ldr	r3, [pc, #24]	; (800563c <HAL_RCC_OscConfig+0x32c>)
 8005624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005626:	2202      	movs	r2, #2
 8005628:	4013      	ands	r3, r2
 800562a:	d100      	bne.n	800562e <HAL_RCC_OscConfig+0x31e>
 800562c:	e0b6      	b.n	800579c <HAL_RCC_OscConfig+0x48c>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d000      	beq.n	8005638 <HAL_RCC_OscConfig+0x328>
 8005636:	e0b1      	b.n	800579c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e171      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
 800563c:	40021000 	.word	0x40021000
 8005640:	fffeffff 	.word	0xfffeffff
 8005644:	fffbffff 	.word	0xfffbffff
 8005648:	ffff80ff 	.word	0xffff80ff
 800564c:	ffffc7ff 	.word	0xffffc7ff
 8005650:	00f42400 	.word	0x00f42400
 8005654:	20000030 	.word	0x20000030
 8005658:	20000034 	.word	0x20000034
 800565c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005660:	4bb1      	ldr	r3, [pc, #708]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 8005662:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005664:	2380      	movs	r3, #128	; 0x80
 8005666:	055b      	lsls	r3, r3, #21
 8005668:	4013      	ands	r3, r2
 800566a:	d101      	bne.n	8005670 <HAL_RCC_OscConfig+0x360>
 800566c:	2301      	movs	r3, #1
 800566e:	e000      	b.n	8005672 <HAL_RCC_OscConfig+0x362>
 8005670:	2300      	movs	r3, #0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d011      	beq.n	800569a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005676:	4bac      	ldr	r3, [pc, #688]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 8005678:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800567a:	4bab      	ldr	r3, [pc, #684]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 800567c:	2180      	movs	r1, #128	; 0x80
 800567e:	0549      	lsls	r1, r1, #21
 8005680:	430a      	orrs	r2, r1
 8005682:	63da      	str	r2, [r3, #60]	; 0x3c
 8005684:	4ba8      	ldr	r3, [pc, #672]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 8005686:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005688:	2380      	movs	r3, #128	; 0x80
 800568a:	055b      	lsls	r3, r3, #21
 800568c:	4013      	ands	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]
 8005690:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005692:	231f      	movs	r3, #31
 8005694:	18fb      	adds	r3, r7, r3
 8005696:	2201      	movs	r2, #1
 8005698:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800569a:	4ba4      	ldr	r3, [pc, #656]	; (800592c <HAL_RCC_OscConfig+0x61c>)
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	2380      	movs	r3, #128	; 0x80
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	4013      	ands	r3, r2
 80056a4:	d11a      	bne.n	80056dc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056a6:	4ba1      	ldr	r3, [pc, #644]	; (800592c <HAL_RCC_OscConfig+0x61c>)
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	4ba0      	ldr	r3, [pc, #640]	; (800592c <HAL_RCC_OscConfig+0x61c>)
 80056ac:	2180      	movs	r1, #128	; 0x80
 80056ae:	0049      	lsls	r1, r1, #1
 80056b0:	430a      	orrs	r2, r1
 80056b2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80056b4:	f7ff f9c4 	bl	8004a40 <HAL_GetTick>
 80056b8:	0003      	movs	r3, r0
 80056ba:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056bc:	e008      	b.n	80056d0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056be:	f7ff f9bf 	bl	8004a40 <HAL_GetTick>
 80056c2:	0002      	movs	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d901      	bls.n	80056d0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e127      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056d0:	4b96      	ldr	r3, [pc, #600]	; (800592c <HAL_RCC_OscConfig+0x61c>)
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	2380      	movs	r3, #128	; 0x80
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	4013      	ands	r3, r2
 80056da:	d0f0      	beq.n	80056be <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d106      	bne.n	80056f2 <HAL_RCC_OscConfig+0x3e2>
 80056e4:	4b90      	ldr	r3, [pc, #576]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 80056e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056e8:	4b8f      	ldr	r3, [pc, #572]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 80056ea:	2101      	movs	r1, #1
 80056ec:	430a      	orrs	r2, r1
 80056ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80056f0:	e01c      	b.n	800572c <HAL_RCC_OscConfig+0x41c>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	2b05      	cmp	r3, #5
 80056f8:	d10c      	bne.n	8005714 <HAL_RCC_OscConfig+0x404>
 80056fa:	4b8b      	ldr	r3, [pc, #556]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 80056fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056fe:	4b8a      	ldr	r3, [pc, #552]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 8005700:	2104      	movs	r1, #4
 8005702:	430a      	orrs	r2, r1
 8005704:	65da      	str	r2, [r3, #92]	; 0x5c
 8005706:	4b88      	ldr	r3, [pc, #544]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 8005708:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800570a:	4b87      	ldr	r3, [pc, #540]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 800570c:	2101      	movs	r1, #1
 800570e:	430a      	orrs	r2, r1
 8005710:	65da      	str	r2, [r3, #92]	; 0x5c
 8005712:	e00b      	b.n	800572c <HAL_RCC_OscConfig+0x41c>
 8005714:	4b84      	ldr	r3, [pc, #528]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 8005716:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005718:	4b83      	ldr	r3, [pc, #524]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 800571a:	2101      	movs	r1, #1
 800571c:	438a      	bics	r2, r1
 800571e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005720:	4b81      	ldr	r3, [pc, #516]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 8005722:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005724:	4b80      	ldr	r3, [pc, #512]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 8005726:	2104      	movs	r1, #4
 8005728:	438a      	bics	r2, r1
 800572a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d014      	beq.n	800575e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005734:	f7ff f984 	bl	8004a40 <HAL_GetTick>
 8005738:	0003      	movs	r3, r0
 800573a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800573c:	e009      	b.n	8005752 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800573e:	f7ff f97f 	bl	8004a40 <HAL_GetTick>
 8005742:	0002      	movs	r2, r0
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	4a79      	ldr	r2, [pc, #484]	; (8005930 <HAL_RCC_OscConfig+0x620>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e0e6      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005752:	4b75      	ldr	r3, [pc, #468]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 8005754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005756:	2202      	movs	r2, #2
 8005758:	4013      	ands	r3, r2
 800575a:	d0f0      	beq.n	800573e <HAL_RCC_OscConfig+0x42e>
 800575c:	e013      	b.n	8005786 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575e:	f7ff f96f 	bl	8004a40 <HAL_GetTick>
 8005762:	0003      	movs	r3, r0
 8005764:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005766:	e009      	b.n	800577c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005768:	f7ff f96a 	bl	8004a40 <HAL_GetTick>
 800576c:	0002      	movs	r2, r0
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	4a6f      	ldr	r2, [pc, #444]	; (8005930 <HAL_RCC_OscConfig+0x620>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d901      	bls.n	800577c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e0d1      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800577c:	4b6a      	ldr	r3, [pc, #424]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 800577e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005780:	2202      	movs	r2, #2
 8005782:	4013      	ands	r3, r2
 8005784:	d1f0      	bne.n	8005768 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005786:	231f      	movs	r3, #31
 8005788:	18fb      	adds	r3, r7, r3
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d105      	bne.n	800579c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005790:	4b65      	ldr	r3, [pc, #404]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 8005792:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005794:	4b64      	ldr	r3, [pc, #400]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 8005796:	4967      	ldr	r1, [pc, #412]	; (8005934 <HAL_RCC_OscConfig+0x624>)
 8005798:	400a      	ands	r2, r1
 800579a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d100      	bne.n	80057a6 <HAL_RCC_OscConfig+0x496>
 80057a4:	e0bb      	b.n	800591e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057a6:	4b60      	ldr	r3, [pc, #384]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	2238      	movs	r2, #56	; 0x38
 80057ac:	4013      	ands	r3, r2
 80057ae:	2b10      	cmp	r3, #16
 80057b0:	d100      	bne.n	80057b4 <HAL_RCC_OscConfig+0x4a4>
 80057b2:	e07b      	b.n	80058ac <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	69db      	ldr	r3, [r3, #28]
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d156      	bne.n	800586a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057bc:	4b5a      	ldr	r3, [pc, #360]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	4b59      	ldr	r3, [pc, #356]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 80057c2:	495d      	ldr	r1, [pc, #372]	; (8005938 <HAL_RCC_OscConfig+0x628>)
 80057c4:	400a      	ands	r2, r1
 80057c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c8:	f7ff f93a 	bl	8004a40 <HAL_GetTick>
 80057cc:	0003      	movs	r3, r0
 80057ce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057d0:	e008      	b.n	80057e4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057d2:	f7ff f935 	bl	8004a40 <HAL_GetTick>
 80057d6:	0002      	movs	r2, r0
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d901      	bls.n	80057e4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e09d      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057e4:	4b50      	ldr	r3, [pc, #320]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	2380      	movs	r3, #128	; 0x80
 80057ea:	049b      	lsls	r3, r3, #18
 80057ec:	4013      	ands	r3, r2
 80057ee:	d1f0      	bne.n	80057d2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057f0:	4b4d      	ldr	r3, [pc, #308]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	4a51      	ldr	r2, [pc, #324]	; (800593c <HAL_RCC_OscConfig+0x62c>)
 80057f6:	4013      	ands	r3, r2
 80057f8:	0019      	movs	r1, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a1a      	ldr	r2, [r3, #32]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	431a      	orrs	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005808:	021b      	lsls	r3, r3, #8
 800580a:	431a      	orrs	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005810:	431a      	orrs	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005816:	431a      	orrs	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581c:	431a      	orrs	r2, r3
 800581e:	4b42      	ldr	r3, [pc, #264]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 8005820:	430a      	orrs	r2, r1
 8005822:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005824:	4b40      	ldr	r3, [pc, #256]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	4b3f      	ldr	r3, [pc, #252]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 800582a:	2180      	movs	r1, #128	; 0x80
 800582c:	0449      	lsls	r1, r1, #17
 800582e:	430a      	orrs	r2, r1
 8005830:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005832:	4b3d      	ldr	r3, [pc, #244]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 8005834:	68da      	ldr	r2, [r3, #12]
 8005836:	4b3c      	ldr	r3, [pc, #240]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 8005838:	2180      	movs	r1, #128	; 0x80
 800583a:	0549      	lsls	r1, r1, #21
 800583c:	430a      	orrs	r2, r1
 800583e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005840:	f7ff f8fe 	bl	8004a40 <HAL_GetTick>
 8005844:	0003      	movs	r3, r0
 8005846:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005848:	e008      	b.n	800585c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800584a:	f7ff f8f9 	bl	8004a40 <HAL_GetTick>
 800584e:	0002      	movs	r2, r0
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	2b02      	cmp	r3, #2
 8005856:	d901      	bls.n	800585c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e061      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800585c:	4b32      	ldr	r3, [pc, #200]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	2380      	movs	r3, #128	; 0x80
 8005862:	049b      	lsls	r3, r3, #18
 8005864:	4013      	ands	r3, r2
 8005866:	d0f0      	beq.n	800584a <HAL_RCC_OscConfig+0x53a>
 8005868:	e059      	b.n	800591e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800586a:	4b2f      	ldr	r3, [pc, #188]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	4b2e      	ldr	r3, [pc, #184]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 8005870:	4931      	ldr	r1, [pc, #196]	; (8005938 <HAL_RCC_OscConfig+0x628>)
 8005872:	400a      	ands	r2, r1
 8005874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005876:	f7ff f8e3 	bl	8004a40 <HAL_GetTick>
 800587a:	0003      	movs	r3, r0
 800587c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800587e:	e008      	b.n	8005892 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005880:	f7ff f8de 	bl	8004a40 <HAL_GetTick>
 8005884:	0002      	movs	r2, r0
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e046      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005892:	4b25      	ldr	r3, [pc, #148]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	2380      	movs	r3, #128	; 0x80
 8005898:	049b      	lsls	r3, r3, #18
 800589a:	4013      	ands	r3, r2
 800589c:	d1f0      	bne.n	8005880 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800589e:	4b22      	ldr	r3, [pc, #136]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	4b21      	ldr	r3, [pc, #132]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 80058a4:	4926      	ldr	r1, [pc, #152]	; (8005940 <HAL_RCC_OscConfig+0x630>)
 80058a6:	400a      	ands	r2, r1
 80058a8:	60da      	str	r2, [r3, #12]
 80058aa:	e038      	b.n	800591e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d101      	bne.n	80058b8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e033      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80058b8:	4b1b      	ldr	r3, [pc, #108]	; (8005928 <HAL_RCC_OscConfig+0x618>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2203      	movs	r2, #3
 80058c2:	401a      	ands	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d126      	bne.n	800591a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	2270      	movs	r2, #112	; 0x70
 80058d0:	401a      	ands	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d11f      	bne.n	800591a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	23fe      	movs	r3, #254	; 0xfe
 80058de:	01db      	lsls	r3, r3, #7
 80058e0:	401a      	ands	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d116      	bne.n	800591a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	23f8      	movs	r3, #248	; 0xf8
 80058f0:	039b      	lsls	r3, r3, #14
 80058f2:	401a      	ands	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d10e      	bne.n	800591a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	23e0      	movs	r3, #224	; 0xe0
 8005900:	051b      	lsls	r3, r3, #20
 8005902:	401a      	ands	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005908:	429a      	cmp	r2, r3
 800590a:	d106      	bne.n	800591a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	0f5b      	lsrs	r3, r3, #29
 8005910:	075a      	lsls	r2, r3, #29
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005916:	429a      	cmp	r2, r3
 8005918:	d001      	beq.n	800591e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e000      	b.n	8005920 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	0018      	movs	r0, r3
 8005922:	46bd      	mov	sp, r7
 8005924:	b008      	add	sp, #32
 8005926:	bd80      	pop	{r7, pc}
 8005928:	40021000 	.word	0x40021000
 800592c:	40007000 	.word	0x40007000
 8005930:	00001388 	.word	0x00001388
 8005934:	efffffff 	.word	0xefffffff
 8005938:	feffffff 	.word	0xfeffffff
 800593c:	11c1808c 	.word	0x11c1808c
 8005940:	eefefffc 	.word	0xeefefffc

08005944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e0e9      	b.n	8005b2c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005958:	4b76      	ldr	r3, [pc, #472]	; (8005b34 <HAL_RCC_ClockConfig+0x1f0>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2207      	movs	r2, #7
 800595e:	4013      	ands	r3, r2
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	429a      	cmp	r2, r3
 8005964:	d91e      	bls.n	80059a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005966:	4b73      	ldr	r3, [pc, #460]	; (8005b34 <HAL_RCC_ClockConfig+0x1f0>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2207      	movs	r2, #7
 800596c:	4393      	bics	r3, r2
 800596e:	0019      	movs	r1, r3
 8005970:	4b70      	ldr	r3, [pc, #448]	; (8005b34 <HAL_RCC_ClockConfig+0x1f0>)
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	430a      	orrs	r2, r1
 8005976:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005978:	f7ff f862 	bl	8004a40 <HAL_GetTick>
 800597c:	0003      	movs	r3, r0
 800597e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005980:	e009      	b.n	8005996 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005982:	f7ff f85d 	bl	8004a40 <HAL_GetTick>
 8005986:	0002      	movs	r2, r0
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	4a6a      	ldr	r2, [pc, #424]	; (8005b38 <HAL_RCC_ClockConfig+0x1f4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e0ca      	b.n	8005b2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005996:	4b67      	ldr	r3, [pc, #412]	; (8005b34 <HAL_RCC_ClockConfig+0x1f0>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2207      	movs	r2, #7
 800599c:	4013      	ands	r3, r2
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d1ee      	bne.n	8005982 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2202      	movs	r2, #2
 80059aa:	4013      	ands	r3, r2
 80059ac:	d015      	beq.n	80059da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2204      	movs	r2, #4
 80059b4:	4013      	ands	r3, r2
 80059b6:	d006      	beq.n	80059c6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80059b8:	4b60      	ldr	r3, [pc, #384]	; (8005b3c <HAL_RCC_ClockConfig+0x1f8>)
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	4b5f      	ldr	r3, [pc, #380]	; (8005b3c <HAL_RCC_ClockConfig+0x1f8>)
 80059be:	21e0      	movs	r1, #224	; 0xe0
 80059c0:	01c9      	lsls	r1, r1, #7
 80059c2:	430a      	orrs	r2, r1
 80059c4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059c6:	4b5d      	ldr	r3, [pc, #372]	; (8005b3c <HAL_RCC_ClockConfig+0x1f8>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	4a5d      	ldr	r2, [pc, #372]	; (8005b40 <HAL_RCC_ClockConfig+0x1fc>)
 80059cc:	4013      	ands	r3, r2
 80059ce:	0019      	movs	r1, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	4b59      	ldr	r3, [pc, #356]	; (8005b3c <HAL_RCC_ClockConfig+0x1f8>)
 80059d6:	430a      	orrs	r2, r1
 80059d8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2201      	movs	r2, #1
 80059e0:	4013      	ands	r3, r2
 80059e2:	d057      	beq.n	8005a94 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d107      	bne.n	80059fc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059ec:	4b53      	ldr	r3, [pc, #332]	; (8005b3c <HAL_RCC_ClockConfig+0x1f8>)
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	2380      	movs	r3, #128	; 0x80
 80059f2:	029b      	lsls	r3, r3, #10
 80059f4:	4013      	ands	r3, r2
 80059f6:	d12b      	bne.n	8005a50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e097      	b.n	8005b2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d107      	bne.n	8005a14 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a04:	4b4d      	ldr	r3, [pc, #308]	; (8005b3c <HAL_RCC_ClockConfig+0x1f8>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	2380      	movs	r3, #128	; 0x80
 8005a0a:	049b      	lsls	r3, r3, #18
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	d11f      	bne.n	8005a50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e08b      	b.n	8005b2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d107      	bne.n	8005a2c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a1c:	4b47      	ldr	r3, [pc, #284]	; (8005b3c <HAL_RCC_ClockConfig+0x1f8>)
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	2380      	movs	r3, #128	; 0x80
 8005a22:	00db      	lsls	r3, r3, #3
 8005a24:	4013      	ands	r3, r2
 8005a26:	d113      	bne.n	8005a50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e07f      	b.n	8005b2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	2b03      	cmp	r3, #3
 8005a32:	d106      	bne.n	8005a42 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a34:	4b41      	ldr	r3, [pc, #260]	; (8005b3c <HAL_RCC_ClockConfig+0x1f8>)
 8005a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a38:	2202      	movs	r2, #2
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	d108      	bne.n	8005a50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e074      	b.n	8005b2c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a42:	4b3e      	ldr	r3, [pc, #248]	; (8005b3c <HAL_RCC_ClockConfig+0x1f8>)
 8005a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a46:	2202      	movs	r2, #2
 8005a48:	4013      	ands	r3, r2
 8005a4a:	d101      	bne.n	8005a50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e06d      	b.n	8005b2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a50:	4b3a      	ldr	r3, [pc, #232]	; (8005b3c <HAL_RCC_ClockConfig+0x1f8>)
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	2207      	movs	r2, #7
 8005a56:	4393      	bics	r3, r2
 8005a58:	0019      	movs	r1, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	4b37      	ldr	r3, [pc, #220]	; (8005b3c <HAL_RCC_ClockConfig+0x1f8>)
 8005a60:	430a      	orrs	r2, r1
 8005a62:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a64:	f7fe ffec 	bl	8004a40 <HAL_GetTick>
 8005a68:	0003      	movs	r3, r0
 8005a6a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a6c:	e009      	b.n	8005a82 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a6e:	f7fe ffe7 	bl	8004a40 <HAL_GetTick>
 8005a72:	0002      	movs	r2, r0
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	4a2f      	ldr	r2, [pc, #188]	; (8005b38 <HAL_RCC_ClockConfig+0x1f4>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e054      	b.n	8005b2c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a82:	4b2e      	ldr	r3, [pc, #184]	; (8005b3c <HAL_RCC_ClockConfig+0x1f8>)
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	2238      	movs	r2, #56	; 0x38
 8005a88:	401a      	ands	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d1ec      	bne.n	8005a6e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a94:	4b27      	ldr	r3, [pc, #156]	; (8005b34 <HAL_RCC_ClockConfig+0x1f0>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2207      	movs	r2, #7
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	683a      	ldr	r2, [r7, #0]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d21e      	bcs.n	8005ae0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aa2:	4b24      	ldr	r3, [pc, #144]	; (8005b34 <HAL_RCC_ClockConfig+0x1f0>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2207      	movs	r2, #7
 8005aa8:	4393      	bics	r3, r2
 8005aaa:	0019      	movs	r1, r3
 8005aac:	4b21      	ldr	r3, [pc, #132]	; (8005b34 <HAL_RCC_ClockConfig+0x1f0>)
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005ab4:	f7fe ffc4 	bl	8004a40 <HAL_GetTick>
 8005ab8:	0003      	movs	r3, r0
 8005aba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005abc:	e009      	b.n	8005ad2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005abe:	f7fe ffbf 	bl	8004a40 <HAL_GetTick>
 8005ac2:	0002      	movs	r2, r0
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	4a1b      	ldr	r2, [pc, #108]	; (8005b38 <HAL_RCC_ClockConfig+0x1f4>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e02c      	b.n	8005b2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005ad2:	4b18      	ldr	r3, [pc, #96]	; (8005b34 <HAL_RCC_ClockConfig+0x1f0>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2207      	movs	r2, #7
 8005ad8:	4013      	ands	r3, r2
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d1ee      	bne.n	8005abe <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2204      	movs	r2, #4
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	d009      	beq.n	8005afe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005aea:	4b14      	ldr	r3, [pc, #80]	; (8005b3c <HAL_RCC_ClockConfig+0x1f8>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	4a15      	ldr	r2, [pc, #84]	; (8005b44 <HAL_RCC_ClockConfig+0x200>)
 8005af0:	4013      	ands	r3, r2
 8005af2:	0019      	movs	r1, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68da      	ldr	r2, [r3, #12]
 8005af8:	4b10      	ldr	r3, [pc, #64]	; (8005b3c <HAL_RCC_ClockConfig+0x1f8>)
 8005afa:	430a      	orrs	r2, r1
 8005afc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005afe:	f000 f829 	bl	8005b54 <HAL_RCC_GetSysClockFreq>
 8005b02:	0001      	movs	r1, r0
 8005b04:	4b0d      	ldr	r3, [pc, #52]	; (8005b3c <HAL_RCC_ClockConfig+0x1f8>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	0a1b      	lsrs	r3, r3, #8
 8005b0a:	220f      	movs	r2, #15
 8005b0c:	401a      	ands	r2, r3
 8005b0e:	4b0e      	ldr	r3, [pc, #56]	; (8005b48 <HAL_RCC_ClockConfig+0x204>)
 8005b10:	0092      	lsls	r2, r2, #2
 8005b12:	58d3      	ldr	r3, [r2, r3]
 8005b14:	221f      	movs	r2, #31
 8005b16:	4013      	ands	r3, r2
 8005b18:	000a      	movs	r2, r1
 8005b1a:	40da      	lsrs	r2, r3
 8005b1c:	4b0b      	ldr	r3, [pc, #44]	; (8005b4c <HAL_RCC_ClockConfig+0x208>)
 8005b1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005b20:	4b0b      	ldr	r3, [pc, #44]	; (8005b50 <HAL_RCC_ClockConfig+0x20c>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	0018      	movs	r0, r3
 8005b26:	f7fe ff2f 	bl	8004988 <HAL_InitTick>
 8005b2a:	0003      	movs	r3, r0
}
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	b004      	add	sp, #16
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	40022000 	.word	0x40022000
 8005b38:	00001388 	.word	0x00001388
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	fffff0ff 	.word	0xfffff0ff
 8005b44:	ffff8fff 	.word	0xffff8fff
 8005b48:	0800c07c 	.word	0x0800c07c
 8005b4c:	20000030 	.word	0x20000030
 8005b50:	20000034 	.word	0x20000034

08005b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b5a:	4b3c      	ldr	r3, [pc, #240]	; (8005c4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	2238      	movs	r2, #56	; 0x38
 8005b60:	4013      	ands	r3, r2
 8005b62:	d10f      	bne.n	8005b84 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005b64:	4b39      	ldr	r3, [pc, #228]	; (8005c4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	0adb      	lsrs	r3, r3, #11
 8005b6a:	2207      	movs	r2, #7
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	2201      	movs	r2, #1
 8005b70:	409a      	lsls	r2, r3
 8005b72:	0013      	movs	r3, r2
 8005b74:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005b76:	6839      	ldr	r1, [r7, #0]
 8005b78:	4835      	ldr	r0, [pc, #212]	; (8005c50 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005b7a:	f7fa fadf 	bl	800013c <__udivsi3>
 8005b7e:	0003      	movs	r3, r0
 8005b80:	613b      	str	r3, [r7, #16]
 8005b82:	e05d      	b.n	8005c40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b84:	4b31      	ldr	r3, [pc, #196]	; (8005c4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	2238      	movs	r2, #56	; 0x38
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d102      	bne.n	8005b96 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b90:	4b30      	ldr	r3, [pc, #192]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x100>)
 8005b92:	613b      	str	r3, [r7, #16]
 8005b94:	e054      	b.n	8005c40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b96:	4b2d      	ldr	r3, [pc, #180]	; (8005c4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	2238      	movs	r2, #56	; 0x38
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	2b10      	cmp	r3, #16
 8005ba0:	d138      	bne.n	8005c14 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005ba2:	4b2a      	ldr	r3, [pc, #168]	; (8005c4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	2203      	movs	r2, #3
 8005ba8:	4013      	ands	r3, r2
 8005baa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bac:	4b27      	ldr	r3, [pc, #156]	; (8005c4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	091b      	lsrs	r3, r3, #4
 8005bb2:	2207      	movs	r2, #7
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2b03      	cmp	r3, #3
 8005bbe:	d10d      	bne.n	8005bdc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bc0:	68b9      	ldr	r1, [r7, #8]
 8005bc2:	4824      	ldr	r0, [pc, #144]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x100>)
 8005bc4:	f7fa faba 	bl	800013c <__udivsi3>
 8005bc8:	0003      	movs	r3, r0
 8005bca:	0019      	movs	r1, r3
 8005bcc:	4b1f      	ldr	r3, [pc, #124]	; (8005c4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	0a1b      	lsrs	r3, r3, #8
 8005bd2:	227f      	movs	r2, #127	; 0x7f
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	434b      	muls	r3, r1
 8005bd8:	617b      	str	r3, [r7, #20]
        break;
 8005bda:	e00d      	b.n	8005bf8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005bdc:	68b9      	ldr	r1, [r7, #8]
 8005bde:	481c      	ldr	r0, [pc, #112]	; (8005c50 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005be0:	f7fa faac 	bl	800013c <__udivsi3>
 8005be4:	0003      	movs	r3, r0
 8005be6:	0019      	movs	r1, r3
 8005be8:	4b18      	ldr	r3, [pc, #96]	; (8005c4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	0a1b      	lsrs	r3, r3, #8
 8005bee:	227f      	movs	r2, #127	; 0x7f
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	434b      	muls	r3, r1
 8005bf4:	617b      	str	r3, [r7, #20]
        break;
 8005bf6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005bf8:	4b14      	ldr	r3, [pc, #80]	; (8005c4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	0f5b      	lsrs	r3, r3, #29
 8005bfe:	2207      	movs	r2, #7
 8005c00:	4013      	ands	r3, r2
 8005c02:	3301      	adds	r3, #1
 8005c04:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005c06:	6879      	ldr	r1, [r7, #4]
 8005c08:	6978      	ldr	r0, [r7, #20]
 8005c0a:	f7fa fa97 	bl	800013c <__udivsi3>
 8005c0e:	0003      	movs	r3, r0
 8005c10:	613b      	str	r3, [r7, #16]
 8005c12:	e015      	b.n	8005c40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005c14:	4b0d      	ldr	r3, [pc, #52]	; (8005c4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	2238      	movs	r2, #56	; 0x38
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	2b20      	cmp	r3, #32
 8005c1e:	d103      	bne.n	8005c28 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005c20:	2380      	movs	r3, #128	; 0x80
 8005c22:	021b      	lsls	r3, r3, #8
 8005c24:	613b      	str	r3, [r7, #16]
 8005c26:	e00b      	b.n	8005c40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005c28:	4b08      	ldr	r3, [pc, #32]	; (8005c4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	2238      	movs	r2, #56	; 0x38
 8005c2e:	4013      	ands	r3, r2
 8005c30:	2b18      	cmp	r3, #24
 8005c32:	d103      	bne.n	8005c3c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005c34:	23fa      	movs	r3, #250	; 0xfa
 8005c36:	01db      	lsls	r3, r3, #7
 8005c38:	613b      	str	r3, [r7, #16]
 8005c3a:	e001      	b.n	8005c40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005c40:	693b      	ldr	r3, [r7, #16]
}
 8005c42:	0018      	movs	r0, r3
 8005c44:	46bd      	mov	sp, r7
 8005c46:	b006      	add	sp, #24
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	46c0      	nop			; (mov r8, r8)
 8005c4c:	40021000 	.word	0x40021000
 8005c50:	00f42400 	.word	0x00f42400
 8005c54:	007a1200 	.word	0x007a1200

08005c58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c5c:	4b02      	ldr	r3, [pc, #8]	; (8005c68 <HAL_RCC_GetHCLKFreq+0x10>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
}
 8005c60:	0018      	movs	r0, r3
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	46c0      	nop			; (mov r8, r8)
 8005c68:	20000030 	.word	0x20000030

08005c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c6c:	b5b0      	push	{r4, r5, r7, lr}
 8005c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005c70:	f7ff fff2 	bl	8005c58 <HAL_RCC_GetHCLKFreq>
 8005c74:	0004      	movs	r4, r0
 8005c76:	f7ff fb3f 	bl	80052f8 <LL_RCC_GetAPB1Prescaler>
 8005c7a:	0003      	movs	r3, r0
 8005c7c:	0b1a      	lsrs	r2, r3, #12
 8005c7e:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c80:	0092      	lsls	r2, r2, #2
 8005c82:	58d3      	ldr	r3, [r2, r3]
 8005c84:	221f      	movs	r2, #31
 8005c86:	4013      	ands	r3, r2
 8005c88:	40dc      	lsrs	r4, r3
 8005c8a:	0023      	movs	r3, r4
}
 8005c8c:	0018      	movs	r0, r3
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bdb0      	pop	{r4, r5, r7, pc}
 8005c92:	46c0      	nop			; (mov r8, r8)
 8005c94:	0800c0bc 	.word	0x0800c0bc

08005c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005ca0:	2313      	movs	r3, #19
 8005ca2:	18fb      	adds	r3, r7, r3
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ca8:	2312      	movs	r3, #18
 8005caa:	18fb      	adds	r3, r7, r3
 8005cac:	2200      	movs	r2, #0
 8005cae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	2380      	movs	r3, #128	; 0x80
 8005cb6:	029b      	lsls	r3, r3, #10
 8005cb8:	4013      	ands	r3, r2
 8005cba:	d100      	bne.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005cbc:	e0a3      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cbe:	2011      	movs	r0, #17
 8005cc0:	183b      	adds	r3, r7, r0
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cc6:	4ba5      	ldr	r3, [pc, #660]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005cc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cca:	2380      	movs	r3, #128	; 0x80
 8005ccc:	055b      	lsls	r3, r3, #21
 8005cce:	4013      	ands	r3, r2
 8005cd0:	d110      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cd2:	4ba2      	ldr	r3, [pc, #648]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005cd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cd6:	4ba1      	ldr	r3, [pc, #644]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005cd8:	2180      	movs	r1, #128	; 0x80
 8005cda:	0549      	lsls	r1, r1, #21
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	63da      	str	r2, [r3, #60]	; 0x3c
 8005ce0:	4b9e      	ldr	r3, [pc, #632]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005ce2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ce4:	2380      	movs	r3, #128	; 0x80
 8005ce6:	055b      	lsls	r3, r3, #21
 8005ce8:	4013      	ands	r3, r2
 8005cea:	60bb      	str	r3, [r7, #8]
 8005cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cee:	183b      	adds	r3, r7, r0
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cf4:	4b9a      	ldr	r3, [pc, #616]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	4b99      	ldr	r3, [pc, #612]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005cfa:	2180      	movs	r1, #128	; 0x80
 8005cfc:	0049      	lsls	r1, r1, #1
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d02:	f7fe fe9d 	bl	8004a40 <HAL_GetTick>
 8005d06:	0003      	movs	r3, r0
 8005d08:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d0a:	e00b      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d0c:	f7fe fe98 	bl	8004a40 <HAL_GetTick>
 8005d10:	0002      	movs	r2, r0
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d904      	bls.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005d1a:	2313      	movs	r3, #19
 8005d1c:	18fb      	adds	r3, r7, r3
 8005d1e:	2203      	movs	r2, #3
 8005d20:	701a      	strb	r2, [r3, #0]
        break;
 8005d22:	e005      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d24:	4b8e      	ldr	r3, [pc, #568]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	2380      	movs	r3, #128	; 0x80
 8005d2a:	005b      	lsls	r3, r3, #1
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	d0ed      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005d30:	2313      	movs	r3, #19
 8005d32:	18fb      	adds	r3, r7, r3
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d154      	bne.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d3a:	4b88      	ldr	r3, [pc, #544]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d3e:	23c0      	movs	r3, #192	; 0xc0
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4013      	ands	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d019      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d014      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d56:	4b81      	ldr	r3, [pc, #516]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d5a:	4a82      	ldr	r2, [pc, #520]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d60:	4b7e      	ldr	r3, [pc, #504]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d64:	4b7d      	ldr	r3, [pc, #500]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d66:	2180      	movs	r1, #128	; 0x80
 8005d68:	0249      	lsls	r1, r1, #9
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d6e:	4b7b      	ldr	r3, [pc, #492]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d72:	4b7a      	ldr	r3, [pc, #488]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d74:	497c      	ldr	r1, [pc, #496]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8005d76:	400a      	ands	r2, r1
 8005d78:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d7a:	4b78      	ldr	r3, [pc, #480]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	2201      	movs	r2, #1
 8005d84:	4013      	ands	r3, r2
 8005d86:	d016      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d88:	f7fe fe5a 	bl	8004a40 <HAL_GetTick>
 8005d8c:	0003      	movs	r3, r0
 8005d8e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d90:	e00c      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d92:	f7fe fe55 	bl	8004a40 <HAL_GetTick>
 8005d96:	0002      	movs	r2, r0
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	4a73      	ldr	r2, [pc, #460]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d904      	bls.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005da2:	2313      	movs	r3, #19
 8005da4:	18fb      	adds	r3, r7, r3
 8005da6:	2203      	movs	r2, #3
 8005da8:	701a      	strb	r2, [r3, #0]
            break;
 8005daa:	e004      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dac:	4b6b      	ldr	r3, [pc, #428]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db0:	2202      	movs	r2, #2
 8005db2:	4013      	ands	r3, r2
 8005db4:	d0ed      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005db6:	2313      	movs	r3, #19
 8005db8:	18fb      	adds	r3, r7, r3
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10a      	bne.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dc0:	4b66      	ldr	r3, [pc, #408]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc4:	4a67      	ldr	r2, [pc, #412]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	0019      	movs	r1, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dce:	4b63      	ldr	r3, [pc, #396]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	65da      	str	r2, [r3, #92]	; 0x5c
 8005dd4:	e00c      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005dd6:	2312      	movs	r3, #18
 8005dd8:	18fb      	adds	r3, r7, r3
 8005dda:	2213      	movs	r2, #19
 8005ddc:	18ba      	adds	r2, r7, r2
 8005dde:	7812      	ldrb	r2, [r2, #0]
 8005de0:	701a      	strb	r2, [r3, #0]
 8005de2:	e005      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de4:	2312      	movs	r3, #18
 8005de6:	18fb      	adds	r3, r7, r3
 8005de8:	2213      	movs	r2, #19
 8005dea:	18ba      	adds	r2, r7, r2
 8005dec:	7812      	ldrb	r2, [r2, #0]
 8005dee:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005df0:	2311      	movs	r3, #17
 8005df2:	18fb      	adds	r3, r7, r3
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d105      	bne.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dfa:	4b58      	ldr	r3, [pc, #352]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005dfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dfe:	4b57      	ldr	r3, [pc, #348]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e00:	495b      	ldr	r1, [pc, #364]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005e02:	400a      	ands	r2, r1
 8005e04:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	d009      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e10:	4b52      	ldr	r3, [pc, #328]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e14:	2203      	movs	r2, #3
 8005e16:	4393      	bics	r3, r2
 8005e18:	0019      	movs	r1, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	4b4f      	ldr	r3, [pc, #316]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e20:	430a      	orrs	r2, r1
 8005e22:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2210      	movs	r2, #16
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	d009      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e2e:	4b4b      	ldr	r3, [pc, #300]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e32:	4a50      	ldr	r2, [pc, #320]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005e34:	4013      	ands	r3, r2
 8005e36:	0019      	movs	r1, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689a      	ldr	r2, [r3, #8]
 8005e3c:	4b47      	ldr	r3, [pc, #284]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	2380      	movs	r3, #128	; 0x80
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	d009      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e4e:	4b43      	ldr	r3, [pc, #268]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e52:	4a49      	ldr	r2, [pc, #292]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005e54:	4013      	ands	r3, r2
 8005e56:	0019      	movs	r1, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	695a      	ldr	r2, [r3, #20]
 8005e5c:	4b3f      	ldr	r3, [pc, #252]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	2380      	movs	r3, #128	; 0x80
 8005e68:	00db      	lsls	r3, r3, #3
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	d009      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e6e:	4b3b      	ldr	r3, [pc, #236]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e72:	4a42      	ldr	r2, [pc, #264]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005e74:	4013      	ands	r3, r2
 8005e76:	0019      	movs	r1, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	699a      	ldr	r2, [r3, #24]
 8005e7c:	4b37      	ldr	r3, [pc, #220]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2220      	movs	r2, #32
 8005e88:	4013      	ands	r3, r2
 8005e8a:	d009      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e8c:	4b33      	ldr	r3, [pc, #204]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e90:	4a3b      	ldr	r2, [pc, #236]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005e92:	4013      	ands	r3, r2
 8005e94:	0019      	movs	r1, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	4b30      	ldr	r3, [pc, #192]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	2380      	movs	r3, #128	; 0x80
 8005ea6:	01db      	lsls	r3, r3, #7
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	d015      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005eac:	4b2b      	ldr	r3, [pc, #172]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	0899      	lsrs	r1, r3, #2
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	69da      	ldr	r2, [r3, #28]
 8005eb8:	4b28      	ldr	r3, [pc, #160]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	69da      	ldr	r2, [r3, #28]
 8005ec2:	2380      	movs	r3, #128	; 0x80
 8005ec4:	05db      	lsls	r3, r3, #23
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d106      	bne.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005eca:	4b24      	ldr	r3, [pc, #144]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	4b23      	ldr	r3, [pc, #140]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005ed0:	2180      	movs	r1, #128	; 0x80
 8005ed2:	0249      	lsls	r1, r1, #9
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	2380      	movs	r3, #128	; 0x80
 8005ede:	039b      	lsls	r3, r3, #14
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	d016      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005ee4:	4b1d      	ldr	r3, [pc, #116]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee8:	4a26      	ldr	r2, [pc, #152]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005eea:	4013      	ands	r3, r2
 8005eec:	0019      	movs	r1, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1a      	ldr	r2, [r3, #32]
 8005ef2:	4b1a      	ldr	r3, [pc, #104]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a1a      	ldr	r2, [r3, #32]
 8005efc:	2380      	movs	r3, #128	; 0x80
 8005efe:	03db      	lsls	r3, r3, #15
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d106      	bne.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005f04:	4b15      	ldr	r3, [pc, #84]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	4b14      	ldr	r3, [pc, #80]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f0a:	2180      	movs	r1, #128	; 0x80
 8005f0c:	0449      	lsls	r1, r1, #17
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	2380      	movs	r3, #128	; 0x80
 8005f18:	011b      	lsls	r3, r3, #4
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	d016      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005f1e:	4b0f      	ldr	r3, [pc, #60]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f22:	4a19      	ldr	r2, [pc, #100]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f24:	4013      	ands	r3, r2
 8005f26:	0019      	movs	r1, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691a      	ldr	r2, [r3, #16]
 8005f2c:	4b0b      	ldr	r3, [pc, #44]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	691a      	ldr	r2, [r3, #16]
 8005f36:	2380      	movs	r3, #128	; 0x80
 8005f38:	01db      	lsls	r3, r3, #7
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d106      	bne.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005f3e:	4b07      	ldr	r3, [pc, #28]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f40:	68da      	ldr	r2, [r3, #12]
 8005f42:	4b06      	ldr	r3, [pc, #24]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f44:	2180      	movs	r1, #128	; 0x80
 8005f46:	0249      	lsls	r1, r1, #9
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005f4c:	2312      	movs	r3, #18
 8005f4e:	18fb      	adds	r3, r7, r3
 8005f50:	781b      	ldrb	r3, [r3, #0]
}
 8005f52:	0018      	movs	r0, r3
 8005f54:	46bd      	mov	sp, r7
 8005f56:	b006      	add	sp, #24
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	46c0      	nop			; (mov r8, r8)
 8005f5c:	40021000 	.word	0x40021000
 8005f60:	40007000 	.word	0x40007000
 8005f64:	fffffcff 	.word	0xfffffcff
 8005f68:	fffeffff 	.word	0xfffeffff
 8005f6c:	00001388 	.word	0x00001388
 8005f70:	efffffff 	.word	0xefffffff
 8005f74:	fffff3ff 	.word	0xfffff3ff
 8005f78:	fff3ffff 	.word	0xfff3ffff
 8005f7c:	ffcfffff 	.word	0xffcfffff
 8005f80:	ffffcfff 	.word	0xffffcfff
 8005f84:	ffbfffff 	.word	0xffbfffff
 8005f88:	ffff3fff 	.word	0xffff3fff

08005f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e04a      	b.n	8006034 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	223d      	movs	r2, #61	; 0x3d
 8005fa2:	5c9b      	ldrb	r3, [r3, r2]
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d107      	bne.n	8005fba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	223c      	movs	r2, #60	; 0x3c
 8005fae:	2100      	movs	r1, #0
 8005fb0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	0018      	movs	r0, r3
 8005fb6:	f7fe f9d1 	bl	800435c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	223d      	movs	r2, #61	; 0x3d
 8005fbe:	2102      	movs	r1, #2
 8005fc0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	3304      	adds	r3, #4
 8005fca:	0019      	movs	r1, r3
 8005fcc:	0010      	movs	r0, r2
 8005fce:	f000 fc79 	bl	80068c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2248      	movs	r2, #72	; 0x48
 8005fd6:	2101      	movs	r1, #1
 8005fd8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	223e      	movs	r2, #62	; 0x3e
 8005fde:	2101      	movs	r1, #1
 8005fe0:	5499      	strb	r1, [r3, r2]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	223f      	movs	r2, #63	; 0x3f
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	5499      	strb	r1, [r3, r2]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2240      	movs	r2, #64	; 0x40
 8005fee:	2101      	movs	r1, #1
 8005ff0:	5499      	strb	r1, [r3, r2]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2241      	movs	r2, #65	; 0x41
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	5499      	strb	r1, [r3, r2]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2242      	movs	r2, #66	; 0x42
 8005ffe:	2101      	movs	r1, #1
 8006000:	5499      	strb	r1, [r3, r2]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2243      	movs	r2, #67	; 0x43
 8006006:	2101      	movs	r1, #1
 8006008:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2244      	movs	r2, #68	; 0x44
 800600e:	2101      	movs	r1, #1
 8006010:	5499      	strb	r1, [r3, r2]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2245      	movs	r2, #69	; 0x45
 8006016:	2101      	movs	r1, #1
 8006018:	5499      	strb	r1, [r3, r2]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2246      	movs	r2, #70	; 0x46
 800601e:	2101      	movs	r1, #1
 8006020:	5499      	strb	r1, [r3, r2]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2247      	movs	r2, #71	; 0x47
 8006026:	2101      	movs	r1, #1
 8006028:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	223d      	movs	r2, #61	; 0x3d
 800602e:	2101      	movs	r1, #1
 8006030:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	0018      	movs	r0, r3
 8006036:	46bd      	mov	sp, r7
 8006038:	b002      	add	sp, #8
 800603a:	bd80      	pop	{r7, pc}

0800603c <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	223d      	movs	r2, #61	; 0x3d
 8006048:	2102      	movs	r1, #2
 800604a:	5499      	strb	r1, [r3, r2]

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	4a27      	ldr	r2, [pc, #156]	; (80060f0 <HAL_TIM_Base_DeInit+0xb4>)
 8006054:	4013      	ands	r3, r2
 8006056:	d10d      	bne.n	8006074 <HAL_TIM_Base_DeInit+0x38>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	4a25      	ldr	r2, [pc, #148]	; (80060f4 <HAL_TIM_Base_DeInit+0xb8>)
 8006060:	4013      	ands	r3, r2
 8006062:	d107      	bne.n	8006074 <HAL_TIM_Base_DeInit+0x38>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2101      	movs	r1, #1
 8006070:	438a      	bics	r2, r1
 8006072:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	0018      	movs	r0, r3
 8006078:	f7fe fa70 	bl	800455c <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2248      	movs	r2, #72	; 0x48
 8006080:	2100      	movs	r1, #0
 8006082:	5499      	strb	r1, [r3, r2]

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	223e      	movs	r2, #62	; 0x3e
 8006088:	2100      	movs	r1, #0
 800608a:	5499      	strb	r1, [r3, r2]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	223f      	movs	r2, #63	; 0x3f
 8006090:	2100      	movs	r1, #0
 8006092:	5499      	strb	r1, [r3, r2]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2240      	movs	r2, #64	; 0x40
 8006098:	2100      	movs	r1, #0
 800609a:	5499      	strb	r1, [r3, r2]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2241      	movs	r2, #65	; 0x41
 80060a0:	2100      	movs	r1, #0
 80060a2:	5499      	strb	r1, [r3, r2]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2242      	movs	r2, #66	; 0x42
 80060a8:	2100      	movs	r1, #0
 80060aa:	5499      	strb	r1, [r3, r2]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2243      	movs	r2, #67	; 0x43
 80060b0:	2100      	movs	r1, #0
 80060b2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2244      	movs	r2, #68	; 0x44
 80060b8:	2100      	movs	r1, #0
 80060ba:	5499      	strb	r1, [r3, r2]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2245      	movs	r2, #69	; 0x45
 80060c0:	2100      	movs	r1, #0
 80060c2:	5499      	strb	r1, [r3, r2]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2246      	movs	r2, #70	; 0x46
 80060c8:	2100      	movs	r1, #0
 80060ca:	5499      	strb	r1, [r3, r2]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2247      	movs	r2, #71	; 0x47
 80060d0:	2100      	movs	r1, #0
 80060d2:	5499      	strb	r1, [r3, r2]

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	223d      	movs	r2, #61	; 0x3d
 80060d8:	2100      	movs	r1, #0
 80060da:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	223c      	movs	r2, #60	; 0x3c
 80060e0:	2100      	movs	r1, #0
 80060e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	0018      	movs	r0, r3
 80060e8:	46bd      	mov	sp, r7
 80060ea:	b002      	add	sp, #8
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	46c0      	nop			; (mov r8, r8)
 80060f0:	00001111 	.word	0x00001111
 80060f4:	00000444 	.word	0x00000444

080060f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	223d      	movs	r2, #61	; 0x3d
 8006104:	5c9b      	ldrb	r3, [r3, r2]
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b01      	cmp	r3, #1
 800610a:	d001      	beq.n	8006110 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e035      	b.n	800617c <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	223d      	movs	r2, #61	; 0x3d
 8006114:	2102      	movs	r1, #2
 8006116:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a19      	ldr	r2, [pc, #100]	; (8006184 <HAL_TIM_Base_Start+0x8c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d00a      	beq.n	8006138 <HAL_TIM_Base_Start+0x40>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	2380      	movs	r3, #128	; 0x80
 8006128:	05db      	lsls	r3, r3, #23
 800612a:	429a      	cmp	r2, r3
 800612c:	d004      	beq.n	8006138 <HAL_TIM_Base_Start+0x40>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a15      	ldr	r2, [pc, #84]	; (8006188 <HAL_TIM_Base_Start+0x90>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d116      	bne.n	8006166 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	4a13      	ldr	r2, [pc, #76]	; (800618c <HAL_TIM_Base_Start+0x94>)
 8006140:	4013      	ands	r3, r2
 8006142:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2b06      	cmp	r3, #6
 8006148:	d016      	beq.n	8006178 <HAL_TIM_Base_Start+0x80>
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	2380      	movs	r3, #128	; 0x80
 800614e:	025b      	lsls	r3, r3, #9
 8006150:	429a      	cmp	r2, r3
 8006152:	d011      	beq.n	8006178 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2101      	movs	r1, #1
 8006160:	430a      	orrs	r2, r1
 8006162:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006164:	e008      	b.n	8006178 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2101      	movs	r1, #1
 8006172:	430a      	orrs	r2, r1
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	e000      	b.n	800617a <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006178:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	0018      	movs	r0, r3
 800617e:	46bd      	mov	sp, r7
 8006180:	b004      	add	sp, #16
 8006182:	bd80      	pop	{r7, pc}
 8006184:	40012c00 	.word	0x40012c00
 8006188:	40000400 	.word	0x40000400
 800618c:	00010007 	.word	0x00010007

08006190 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e04a      	b.n	8006238 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	223d      	movs	r2, #61	; 0x3d
 80061a6:	5c9b      	ldrb	r3, [r3, r2]
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d107      	bne.n	80061be <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	223c      	movs	r2, #60	; 0x3c
 80061b2:	2100      	movs	r1, #0
 80061b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	0018      	movs	r0, r3
 80061ba:	f000 f841 	bl	8006240 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	223d      	movs	r2, #61	; 0x3d
 80061c2:	2102      	movs	r1, #2
 80061c4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	3304      	adds	r3, #4
 80061ce:	0019      	movs	r1, r3
 80061d0:	0010      	movs	r0, r2
 80061d2:	f000 fb77 	bl	80068c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2248      	movs	r2, #72	; 0x48
 80061da:	2101      	movs	r1, #1
 80061dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	223e      	movs	r2, #62	; 0x3e
 80061e2:	2101      	movs	r1, #1
 80061e4:	5499      	strb	r1, [r3, r2]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	223f      	movs	r2, #63	; 0x3f
 80061ea:	2101      	movs	r1, #1
 80061ec:	5499      	strb	r1, [r3, r2]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2240      	movs	r2, #64	; 0x40
 80061f2:	2101      	movs	r1, #1
 80061f4:	5499      	strb	r1, [r3, r2]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2241      	movs	r2, #65	; 0x41
 80061fa:	2101      	movs	r1, #1
 80061fc:	5499      	strb	r1, [r3, r2]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2242      	movs	r2, #66	; 0x42
 8006202:	2101      	movs	r1, #1
 8006204:	5499      	strb	r1, [r3, r2]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2243      	movs	r2, #67	; 0x43
 800620a:	2101      	movs	r1, #1
 800620c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2244      	movs	r2, #68	; 0x44
 8006212:	2101      	movs	r1, #1
 8006214:	5499      	strb	r1, [r3, r2]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2245      	movs	r2, #69	; 0x45
 800621a:	2101      	movs	r1, #1
 800621c:	5499      	strb	r1, [r3, r2]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2246      	movs	r2, #70	; 0x46
 8006222:	2101      	movs	r1, #1
 8006224:	5499      	strb	r1, [r3, r2]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2247      	movs	r2, #71	; 0x47
 800622a:	2101      	movs	r1, #1
 800622c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	223d      	movs	r2, #61	; 0x3d
 8006232:	2101      	movs	r1, #1
 8006234:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	0018      	movs	r0, r3
 800623a:	46bd      	mov	sp, r7
 800623c:	b002      	add	sp, #8
 800623e:	bd80      	pop	{r7, pc}

08006240 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006248:	46c0      	nop			; (mov r8, r8)
 800624a:	46bd      	mov	sp, r7
 800624c:	b002      	add	sp, #8
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d108      	bne.n	8006272 <HAL_TIM_PWM_Start+0x22>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	223e      	movs	r2, #62	; 0x3e
 8006264:	5c9b      	ldrb	r3, [r3, r2]
 8006266:	b2db      	uxtb	r3, r3
 8006268:	3b01      	subs	r3, #1
 800626a:	1e5a      	subs	r2, r3, #1
 800626c:	4193      	sbcs	r3, r2
 800626e:	b2db      	uxtb	r3, r3
 8006270:	e037      	b.n	80062e2 <HAL_TIM_PWM_Start+0x92>
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b04      	cmp	r3, #4
 8006276:	d108      	bne.n	800628a <HAL_TIM_PWM_Start+0x3a>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	223f      	movs	r2, #63	; 0x3f
 800627c:	5c9b      	ldrb	r3, [r3, r2]
 800627e:	b2db      	uxtb	r3, r3
 8006280:	3b01      	subs	r3, #1
 8006282:	1e5a      	subs	r2, r3, #1
 8006284:	4193      	sbcs	r3, r2
 8006286:	b2db      	uxtb	r3, r3
 8006288:	e02b      	b.n	80062e2 <HAL_TIM_PWM_Start+0x92>
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b08      	cmp	r3, #8
 800628e:	d108      	bne.n	80062a2 <HAL_TIM_PWM_Start+0x52>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2240      	movs	r2, #64	; 0x40
 8006294:	5c9b      	ldrb	r3, [r3, r2]
 8006296:	b2db      	uxtb	r3, r3
 8006298:	3b01      	subs	r3, #1
 800629a:	1e5a      	subs	r2, r3, #1
 800629c:	4193      	sbcs	r3, r2
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	e01f      	b.n	80062e2 <HAL_TIM_PWM_Start+0x92>
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b0c      	cmp	r3, #12
 80062a6:	d108      	bne.n	80062ba <HAL_TIM_PWM_Start+0x6a>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2241      	movs	r2, #65	; 0x41
 80062ac:	5c9b      	ldrb	r3, [r3, r2]
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	3b01      	subs	r3, #1
 80062b2:	1e5a      	subs	r2, r3, #1
 80062b4:	4193      	sbcs	r3, r2
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	e013      	b.n	80062e2 <HAL_TIM_PWM_Start+0x92>
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b10      	cmp	r3, #16
 80062be:	d108      	bne.n	80062d2 <HAL_TIM_PWM_Start+0x82>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2242      	movs	r2, #66	; 0x42
 80062c4:	5c9b      	ldrb	r3, [r3, r2]
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	3b01      	subs	r3, #1
 80062ca:	1e5a      	subs	r2, r3, #1
 80062cc:	4193      	sbcs	r3, r2
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	e007      	b.n	80062e2 <HAL_TIM_PWM_Start+0x92>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2243      	movs	r2, #67	; 0x43
 80062d6:	5c9b      	ldrb	r3, [r3, r2]
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	3b01      	subs	r3, #1
 80062dc:	1e5a      	subs	r2, r3, #1
 80062de:	4193      	sbcs	r3, r2
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e081      	b.n	80063ee <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d104      	bne.n	80062fa <HAL_TIM_PWM_Start+0xaa>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	223e      	movs	r2, #62	; 0x3e
 80062f4:	2102      	movs	r1, #2
 80062f6:	5499      	strb	r1, [r3, r2]
 80062f8:	e023      	b.n	8006342 <HAL_TIM_PWM_Start+0xf2>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b04      	cmp	r3, #4
 80062fe:	d104      	bne.n	800630a <HAL_TIM_PWM_Start+0xba>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	223f      	movs	r2, #63	; 0x3f
 8006304:	2102      	movs	r1, #2
 8006306:	5499      	strb	r1, [r3, r2]
 8006308:	e01b      	b.n	8006342 <HAL_TIM_PWM_Start+0xf2>
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b08      	cmp	r3, #8
 800630e:	d104      	bne.n	800631a <HAL_TIM_PWM_Start+0xca>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2240      	movs	r2, #64	; 0x40
 8006314:	2102      	movs	r1, #2
 8006316:	5499      	strb	r1, [r3, r2]
 8006318:	e013      	b.n	8006342 <HAL_TIM_PWM_Start+0xf2>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b0c      	cmp	r3, #12
 800631e:	d104      	bne.n	800632a <HAL_TIM_PWM_Start+0xda>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2241      	movs	r2, #65	; 0x41
 8006324:	2102      	movs	r1, #2
 8006326:	5499      	strb	r1, [r3, r2]
 8006328:	e00b      	b.n	8006342 <HAL_TIM_PWM_Start+0xf2>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b10      	cmp	r3, #16
 800632e:	d104      	bne.n	800633a <HAL_TIM_PWM_Start+0xea>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2242      	movs	r2, #66	; 0x42
 8006334:	2102      	movs	r1, #2
 8006336:	5499      	strb	r1, [r3, r2]
 8006338:	e003      	b.n	8006342 <HAL_TIM_PWM_Start+0xf2>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2243      	movs	r2, #67	; 0x43
 800633e:	2102      	movs	r1, #2
 8006340:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6839      	ldr	r1, [r7, #0]
 8006348:	2201      	movs	r2, #1
 800634a:	0018      	movs	r0, r3
 800634c:	f000 fe68 	bl	8007020 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a28      	ldr	r2, [pc, #160]	; (80063f8 <HAL_TIM_PWM_Start+0x1a8>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d009      	beq.n	800636e <HAL_TIM_PWM_Start+0x11e>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a27      	ldr	r2, [pc, #156]	; (80063fc <HAL_TIM_PWM_Start+0x1ac>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d004      	beq.n	800636e <HAL_TIM_PWM_Start+0x11e>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a25      	ldr	r2, [pc, #148]	; (8006400 <HAL_TIM_PWM_Start+0x1b0>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d101      	bne.n	8006372 <HAL_TIM_PWM_Start+0x122>
 800636e:	2301      	movs	r3, #1
 8006370:	e000      	b.n	8006374 <HAL_TIM_PWM_Start+0x124>
 8006372:	2300      	movs	r3, #0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d008      	beq.n	800638a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2180      	movs	r1, #128	; 0x80
 8006384:	0209      	lsls	r1, r1, #8
 8006386:	430a      	orrs	r2, r1
 8006388:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a1a      	ldr	r2, [pc, #104]	; (80063f8 <HAL_TIM_PWM_Start+0x1a8>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d00a      	beq.n	80063aa <HAL_TIM_PWM_Start+0x15a>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	2380      	movs	r3, #128	; 0x80
 800639a:	05db      	lsls	r3, r3, #23
 800639c:	429a      	cmp	r2, r3
 800639e:	d004      	beq.n	80063aa <HAL_TIM_PWM_Start+0x15a>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a17      	ldr	r2, [pc, #92]	; (8006404 <HAL_TIM_PWM_Start+0x1b4>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d116      	bne.n	80063d8 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	4a15      	ldr	r2, [pc, #84]	; (8006408 <HAL_TIM_PWM_Start+0x1b8>)
 80063b2:	4013      	ands	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2b06      	cmp	r3, #6
 80063ba:	d016      	beq.n	80063ea <HAL_TIM_PWM_Start+0x19a>
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	2380      	movs	r3, #128	; 0x80
 80063c0:	025b      	lsls	r3, r3, #9
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d011      	beq.n	80063ea <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2101      	movs	r1, #1
 80063d2:	430a      	orrs	r2, r1
 80063d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063d6:	e008      	b.n	80063ea <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2101      	movs	r1, #1
 80063e4:	430a      	orrs	r2, r1
 80063e6:	601a      	str	r2, [r3, #0]
 80063e8:	e000      	b.n	80063ec <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ea:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	0018      	movs	r0, r3
 80063f0:	46bd      	mov	sp, r7
 80063f2:	b004      	add	sp, #16
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	46c0      	nop			; (mov r8, r8)
 80063f8:	40012c00 	.word	0x40012c00
 80063fc:	40014400 	.word	0x40014400
 8006400:	40014800 	.word	0x40014800
 8006404:	40000400 	.word	0x40000400
 8006408:	00010007 	.word	0x00010007

0800640c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6839      	ldr	r1, [r7, #0]
 800641c:	2200      	movs	r2, #0
 800641e:	0018      	movs	r0, r3
 8006420:	f000 fdfe 	bl	8007020 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a35      	ldr	r2, [pc, #212]	; (8006500 <HAL_TIM_PWM_Stop+0xf4>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d009      	beq.n	8006442 <HAL_TIM_PWM_Stop+0x36>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a34      	ldr	r2, [pc, #208]	; (8006504 <HAL_TIM_PWM_Stop+0xf8>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d004      	beq.n	8006442 <HAL_TIM_PWM_Stop+0x36>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a32      	ldr	r2, [pc, #200]	; (8006508 <HAL_TIM_PWM_Stop+0xfc>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d101      	bne.n	8006446 <HAL_TIM_PWM_Stop+0x3a>
 8006442:	2301      	movs	r3, #1
 8006444:	e000      	b.n	8006448 <HAL_TIM_PWM_Stop+0x3c>
 8006446:	2300      	movs	r3, #0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d013      	beq.n	8006474 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	4a2e      	ldr	r2, [pc, #184]	; (800650c <HAL_TIM_PWM_Stop+0x100>)
 8006454:	4013      	ands	r3, r2
 8006456:	d10d      	bne.n	8006474 <HAL_TIM_PWM_Stop+0x68>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	4a2c      	ldr	r2, [pc, #176]	; (8006510 <HAL_TIM_PWM_Stop+0x104>)
 8006460:	4013      	ands	r3, r2
 8006462:	d107      	bne.n	8006474 <HAL_TIM_PWM_Stop+0x68>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4929      	ldr	r1, [pc, #164]	; (8006514 <HAL_TIM_PWM_Stop+0x108>)
 8006470:	400a      	ands	r2, r1
 8006472:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	4a24      	ldr	r2, [pc, #144]	; (800650c <HAL_TIM_PWM_Stop+0x100>)
 800647c:	4013      	ands	r3, r2
 800647e:	d10d      	bne.n	800649c <HAL_TIM_PWM_Stop+0x90>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	4a22      	ldr	r2, [pc, #136]	; (8006510 <HAL_TIM_PWM_Stop+0x104>)
 8006488:	4013      	ands	r3, r2
 800648a:	d107      	bne.n	800649c <HAL_TIM_PWM_Stop+0x90>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2101      	movs	r1, #1
 8006498:	438a      	bics	r2, r1
 800649a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d104      	bne.n	80064ac <HAL_TIM_PWM_Stop+0xa0>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	223e      	movs	r2, #62	; 0x3e
 80064a6:	2101      	movs	r1, #1
 80064a8:	5499      	strb	r1, [r3, r2]
 80064aa:	e023      	b.n	80064f4 <HAL_TIM_PWM_Stop+0xe8>
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	2b04      	cmp	r3, #4
 80064b0:	d104      	bne.n	80064bc <HAL_TIM_PWM_Stop+0xb0>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	223f      	movs	r2, #63	; 0x3f
 80064b6:	2101      	movs	r1, #1
 80064b8:	5499      	strb	r1, [r3, r2]
 80064ba:	e01b      	b.n	80064f4 <HAL_TIM_PWM_Stop+0xe8>
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	2b08      	cmp	r3, #8
 80064c0:	d104      	bne.n	80064cc <HAL_TIM_PWM_Stop+0xc0>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2240      	movs	r2, #64	; 0x40
 80064c6:	2101      	movs	r1, #1
 80064c8:	5499      	strb	r1, [r3, r2]
 80064ca:	e013      	b.n	80064f4 <HAL_TIM_PWM_Stop+0xe8>
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	2b0c      	cmp	r3, #12
 80064d0:	d104      	bne.n	80064dc <HAL_TIM_PWM_Stop+0xd0>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2241      	movs	r2, #65	; 0x41
 80064d6:	2101      	movs	r1, #1
 80064d8:	5499      	strb	r1, [r3, r2]
 80064da:	e00b      	b.n	80064f4 <HAL_TIM_PWM_Stop+0xe8>
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2b10      	cmp	r3, #16
 80064e0:	d104      	bne.n	80064ec <HAL_TIM_PWM_Stop+0xe0>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2242      	movs	r2, #66	; 0x42
 80064e6:	2101      	movs	r1, #1
 80064e8:	5499      	strb	r1, [r3, r2]
 80064ea:	e003      	b.n	80064f4 <HAL_TIM_PWM_Stop+0xe8>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2243      	movs	r2, #67	; 0x43
 80064f0:	2101      	movs	r1, #1
 80064f2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	0018      	movs	r0, r3
 80064f8:	46bd      	mov	sp, r7
 80064fa:	b002      	add	sp, #8
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	46c0      	nop			; (mov r8, r8)
 8006500:	40012c00 	.word	0x40012c00
 8006504:	40014400 	.word	0x40014400
 8006508:	40014800 	.word	0x40014800
 800650c:	00001111 	.word	0x00001111
 8006510:	00000444 	.word	0x00000444
 8006514:	ffff7fff 	.word	0xffff7fff

08006518 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006524:	2317      	movs	r3, #23
 8006526:	18fb      	adds	r3, r7, r3
 8006528:	2200      	movs	r2, #0
 800652a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	223c      	movs	r2, #60	; 0x3c
 8006530:	5c9b      	ldrb	r3, [r3, r2]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d101      	bne.n	800653a <HAL_TIM_PWM_ConfigChannel+0x22>
 8006536:	2302      	movs	r3, #2
 8006538:	e0e5      	b.n	8006706 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	223c      	movs	r2, #60	; 0x3c
 800653e:	2101      	movs	r1, #1
 8006540:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b14      	cmp	r3, #20
 8006546:	d900      	bls.n	800654a <HAL_TIM_PWM_ConfigChannel+0x32>
 8006548:	e0d1      	b.n	80066ee <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	009a      	lsls	r2, r3, #2
 800654e:	4b70      	ldr	r3, [pc, #448]	; (8006710 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8006550:	18d3      	adds	r3, r2, r3
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	0011      	movs	r1, r2
 800655e:	0018      	movs	r0, r3
 8006560:	f000 fa26 	bl	80069b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	699a      	ldr	r2, [r3, #24]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2108      	movs	r1, #8
 8006570:	430a      	orrs	r2, r1
 8006572:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	699a      	ldr	r2, [r3, #24]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2104      	movs	r1, #4
 8006580:	438a      	bics	r2, r1
 8006582:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6999      	ldr	r1, [r3, #24]
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	691a      	ldr	r2, [r3, #16]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	619a      	str	r2, [r3, #24]
      break;
 8006596:	e0af      	b.n	80066f8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	0011      	movs	r1, r2
 80065a0:	0018      	movs	r0, r3
 80065a2:	f000 fa85 	bl	8006ab0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	699a      	ldr	r2, [r3, #24]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2180      	movs	r1, #128	; 0x80
 80065b2:	0109      	lsls	r1, r1, #4
 80065b4:	430a      	orrs	r2, r1
 80065b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	699a      	ldr	r2, [r3, #24]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4954      	ldr	r1, [pc, #336]	; (8006714 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80065c4:	400a      	ands	r2, r1
 80065c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6999      	ldr	r1, [r3, #24]
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	021a      	lsls	r2, r3, #8
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	430a      	orrs	r2, r1
 80065da:	619a      	str	r2, [r3, #24]
      break;
 80065dc:	e08c      	b.n	80066f8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	0011      	movs	r1, r2
 80065e6:	0018      	movs	r0, r3
 80065e8:	f000 fae0 	bl	8006bac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	69da      	ldr	r2, [r3, #28]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2108      	movs	r1, #8
 80065f8:	430a      	orrs	r2, r1
 80065fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	69da      	ldr	r2, [r3, #28]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2104      	movs	r1, #4
 8006608:	438a      	bics	r2, r1
 800660a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	69d9      	ldr	r1, [r3, #28]
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	691a      	ldr	r2, [r3, #16]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	61da      	str	r2, [r3, #28]
      break;
 800661e:	e06b      	b.n	80066f8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	0011      	movs	r1, r2
 8006628:	0018      	movs	r0, r3
 800662a:	f000 fb41 	bl	8006cb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	69da      	ldr	r2, [r3, #28]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2180      	movs	r1, #128	; 0x80
 800663a:	0109      	lsls	r1, r1, #4
 800663c:	430a      	orrs	r2, r1
 800663e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	69da      	ldr	r2, [r3, #28]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4932      	ldr	r1, [pc, #200]	; (8006714 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800664c:	400a      	ands	r2, r1
 800664e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	69d9      	ldr	r1, [r3, #28]
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	021a      	lsls	r2, r3, #8
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	430a      	orrs	r2, r1
 8006662:	61da      	str	r2, [r3, #28]
      break;
 8006664:	e048      	b.n	80066f8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	0011      	movs	r1, r2
 800666e:	0018      	movs	r0, r3
 8006670:	f000 fb82 	bl	8006d78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2108      	movs	r1, #8
 8006680:	430a      	orrs	r2, r1
 8006682:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2104      	movs	r1, #4
 8006690:	438a      	bics	r2, r1
 8006692:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	691a      	ldr	r2, [r3, #16]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80066a6:	e027      	b.n	80066f8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	0011      	movs	r1, r2
 80066b0:	0018      	movs	r0, r3
 80066b2:	f000 fbbb 	bl	8006e2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2180      	movs	r1, #128	; 0x80
 80066c2:	0109      	lsls	r1, r1, #4
 80066c4:	430a      	orrs	r2, r1
 80066c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4910      	ldr	r1, [pc, #64]	; (8006714 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80066d4:	400a      	ands	r2, r1
 80066d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	021a      	lsls	r2, r3, #8
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	430a      	orrs	r2, r1
 80066ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80066ec:	e004      	b.n	80066f8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80066ee:	2317      	movs	r3, #23
 80066f0:	18fb      	adds	r3, r7, r3
 80066f2:	2201      	movs	r2, #1
 80066f4:	701a      	strb	r2, [r3, #0]
      break;
 80066f6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	223c      	movs	r2, #60	; 0x3c
 80066fc:	2100      	movs	r1, #0
 80066fe:	5499      	strb	r1, [r3, r2]

  return status;
 8006700:	2317      	movs	r3, #23
 8006702:	18fb      	adds	r3, r7, r3
 8006704:	781b      	ldrb	r3, [r3, #0]
}
 8006706:	0018      	movs	r0, r3
 8006708:	46bd      	mov	sp, r7
 800670a:	b006      	add	sp, #24
 800670c:	bd80      	pop	{r7, pc}
 800670e:	46c0      	nop			; (mov r8, r8)
 8006710:	0800c0dc 	.word	0x0800c0dc
 8006714:	fffffbff 	.word	0xfffffbff

08006718 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006722:	230f      	movs	r3, #15
 8006724:	18fb      	adds	r3, r7, r3
 8006726:	2200      	movs	r2, #0
 8006728:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	223c      	movs	r2, #60	; 0x3c
 800672e:	5c9b      	ldrb	r3, [r3, r2]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d101      	bne.n	8006738 <HAL_TIM_ConfigClockSource+0x20>
 8006734:	2302      	movs	r3, #2
 8006736:	e0bc      	b.n	80068b2 <HAL_TIM_ConfigClockSource+0x19a>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	223c      	movs	r2, #60	; 0x3c
 800673c:	2101      	movs	r1, #1
 800673e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	223d      	movs	r2, #61	; 0x3d
 8006744:	2102      	movs	r1, #2
 8006746:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	4a5a      	ldr	r2, [pc, #360]	; (80068bc <HAL_TIM_ConfigClockSource+0x1a4>)
 8006754:	4013      	ands	r3, r2
 8006756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	4a59      	ldr	r2, [pc, #356]	; (80068c0 <HAL_TIM_ConfigClockSource+0x1a8>)
 800675c:	4013      	ands	r3, r2
 800675e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2280      	movs	r2, #128	; 0x80
 800676e:	0192      	lsls	r2, r2, #6
 8006770:	4293      	cmp	r3, r2
 8006772:	d040      	beq.n	80067f6 <HAL_TIM_ConfigClockSource+0xde>
 8006774:	2280      	movs	r2, #128	; 0x80
 8006776:	0192      	lsls	r2, r2, #6
 8006778:	4293      	cmp	r3, r2
 800677a:	d900      	bls.n	800677e <HAL_TIM_ConfigClockSource+0x66>
 800677c:	e088      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x178>
 800677e:	2280      	movs	r2, #128	; 0x80
 8006780:	0152      	lsls	r2, r2, #5
 8006782:	4293      	cmp	r3, r2
 8006784:	d100      	bne.n	8006788 <HAL_TIM_ConfigClockSource+0x70>
 8006786:	e088      	b.n	800689a <HAL_TIM_ConfigClockSource+0x182>
 8006788:	2280      	movs	r2, #128	; 0x80
 800678a:	0152      	lsls	r2, r2, #5
 800678c:	4293      	cmp	r3, r2
 800678e:	d900      	bls.n	8006792 <HAL_TIM_ConfigClockSource+0x7a>
 8006790:	e07e      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x178>
 8006792:	2b70      	cmp	r3, #112	; 0x70
 8006794:	d018      	beq.n	80067c8 <HAL_TIM_ConfigClockSource+0xb0>
 8006796:	d900      	bls.n	800679a <HAL_TIM_ConfigClockSource+0x82>
 8006798:	e07a      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x178>
 800679a:	2b60      	cmp	r3, #96	; 0x60
 800679c:	d04f      	beq.n	800683e <HAL_TIM_ConfigClockSource+0x126>
 800679e:	d900      	bls.n	80067a2 <HAL_TIM_ConfigClockSource+0x8a>
 80067a0:	e076      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x178>
 80067a2:	2b50      	cmp	r3, #80	; 0x50
 80067a4:	d03b      	beq.n	800681e <HAL_TIM_ConfigClockSource+0x106>
 80067a6:	d900      	bls.n	80067aa <HAL_TIM_ConfigClockSource+0x92>
 80067a8:	e072      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x178>
 80067aa:	2b40      	cmp	r3, #64	; 0x40
 80067ac:	d057      	beq.n	800685e <HAL_TIM_ConfigClockSource+0x146>
 80067ae:	d900      	bls.n	80067b2 <HAL_TIM_ConfigClockSource+0x9a>
 80067b0:	e06e      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x178>
 80067b2:	2b30      	cmp	r3, #48	; 0x30
 80067b4:	d063      	beq.n	800687e <HAL_TIM_ConfigClockSource+0x166>
 80067b6:	d86b      	bhi.n	8006890 <HAL_TIM_ConfigClockSource+0x178>
 80067b8:	2b20      	cmp	r3, #32
 80067ba:	d060      	beq.n	800687e <HAL_TIM_ConfigClockSource+0x166>
 80067bc:	d868      	bhi.n	8006890 <HAL_TIM_ConfigClockSource+0x178>
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d05d      	beq.n	800687e <HAL_TIM_ConfigClockSource+0x166>
 80067c2:	2b10      	cmp	r3, #16
 80067c4:	d05b      	beq.n	800687e <HAL_TIM_ConfigClockSource+0x166>
 80067c6:	e063      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067d8:	f000 fc02 	bl	8006fe0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2277      	movs	r2, #119	; 0x77
 80067e8:	4313      	orrs	r3, r2
 80067ea:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	609a      	str	r2, [r3, #8]
      break;
 80067f4:	e052      	b.n	800689c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006806:	f000 fbeb 	bl	8006fe0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689a      	ldr	r2, [r3, #8]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2180      	movs	r1, #128	; 0x80
 8006816:	01c9      	lsls	r1, r1, #7
 8006818:	430a      	orrs	r2, r1
 800681a:	609a      	str	r2, [r3, #8]
      break;
 800681c:	e03e      	b.n	800689c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800682a:	001a      	movs	r2, r3
 800682c:	f000 fb5c 	bl	8006ee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2150      	movs	r1, #80	; 0x50
 8006836:	0018      	movs	r0, r3
 8006838:	f000 fbb6 	bl	8006fa8 <TIM_ITRx_SetConfig>
      break;
 800683c:	e02e      	b.n	800689c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800684a:	001a      	movs	r2, r3
 800684c:	f000 fb7a 	bl	8006f44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2160      	movs	r1, #96	; 0x60
 8006856:	0018      	movs	r0, r3
 8006858:	f000 fba6 	bl	8006fa8 <TIM_ITRx_SetConfig>
      break;
 800685c:	e01e      	b.n	800689c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800686a:	001a      	movs	r2, r3
 800686c:	f000 fb3c 	bl	8006ee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2140      	movs	r1, #64	; 0x40
 8006876:	0018      	movs	r0, r3
 8006878:	f000 fb96 	bl	8006fa8 <TIM_ITRx_SetConfig>
      break;
 800687c:	e00e      	b.n	800689c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	0019      	movs	r1, r3
 8006888:	0010      	movs	r0, r2
 800688a:	f000 fb8d 	bl	8006fa8 <TIM_ITRx_SetConfig>
      break;
 800688e:	e005      	b.n	800689c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006890:	230f      	movs	r3, #15
 8006892:	18fb      	adds	r3, r7, r3
 8006894:	2201      	movs	r2, #1
 8006896:	701a      	strb	r2, [r3, #0]
      break;
 8006898:	e000      	b.n	800689c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800689a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	223d      	movs	r2, #61	; 0x3d
 80068a0:	2101      	movs	r1, #1
 80068a2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	223c      	movs	r2, #60	; 0x3c
 80068a8:	2100      	movs	r1, #0
 80068aa:	5499      	strb	r1, [r3, r2]

  return status;
 80068ac:	230f      	movs	r3, #15
 80068ae:	18fb      	adds	r3, r7, r3
 80068b0:	781b      	ldrb	r3, [r3, #0]
}
 80068b2:	0018      	movs	r0, r3
 80068b4:	46bd      	mov	sp, r7
 80068b6:	b004      	add	sp, #16
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	46c0      	nop			; (mov r8, r8)
 80068bc:	ffceff88 	.word	0xffceff88
 80068c0:	ffff00ff 	.word	0xffff00ff

080068c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a30      	ldr	r2, [pc, #192]	; (8006998 <TIM_Base_SetConfig+0xd4>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d008      	beq.n	80068ee <TIM_Base_SetConfig+0x2a>
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	2380      	movs	r3, #128	; 0x80
 80068e0:	05db      	lsls	r3, r3, #23
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d003      	beq.n	80068ee <TIM_Base_SetConfig+0x2a>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a2c      	ldr	r2, [pc, #176]	; (800699c <TIM_Base_SetConfig+0xd8>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d108      	bne.n	8006900 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2270      	movs	r2, #112	; 0x70
 80068f2:	4393      	bics	r3, r2
 80068f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a25      	ldr	r2, [pc, #148]	; (8006998 <TIM_Base_SetConfig+0xd4>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d014      	beq.n	8006932 <TIM_Base_SetConfig+0x6e>
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	2380      	movs	r3, #128	; 0x80
 800690c:	05db      	lsls	r3, r3, #23
 800690e:	429a      	cmp	r2, r3
 8006910:	d00f      	beq.n	8006932 <TIM_Base_SetConfig+0x6e>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a21      	ldr	r2, [pc, #132]	; (800699c <TIM_Base_SetConfig+0xd8>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d00b      	beq.n	8006932 <TIM_Base_SetConfig+0x6e>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a20      	ldr	r2, [pc, #128]	; (80069a0 <TIM_Base_SetConfig+0xdc>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d007      	beq.n	8006932 <TIM_Base_SetConfig+0x6e>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a1f      	ldr	r2, [pc, #124]	; (80069a4 <TIM_Base_SetConfig+0xe0>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d003      	beq.n	8006932 <TIM_Base_SetConfig+0x6e>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a1e      	ldr	r2, [pc, #120]	; (80069a8 <TIM_Base_SetConfig+0xe4>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d108      	bne.n	8006944 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	4a1d      	ldr	r2, [pc, #116]	; (80069ac <TIM_Base_SetConfig+0xe8>)
 8006936:	4013      	ands	r3, r2
 8006938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	4313      	orrs	r3, r2
 8006942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2280      	movs	r2, #128	; 0x80
 8006948:	4393      	bics	r3, r2
 800694a:	001a      	movs	r2, r3
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	4313      	orrs	r3, r2
 8006952:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	689a      	ldr	r2, [r3, #8]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a0a      	ldr	r2, [pc, #40]	; (8006998 <TIM_Base_SetConfig+0xd4>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d007      	beq.n	8006982 <TIM_Base_SetConfig+0xbe>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a0b      	ldr	r2, [pc, #44]	; (80069a4 <TIM_Base_SetConfig+0xe0>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d003      	beq.n	8006982 <TIM_Base_SetConfig+0xbe>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a0a      	ldr	r2, [pc, #40]	; (80069a8 <TIM_Base_SetConfig+0xe4>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d103      	bne.n	800698a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	691a      	ldr	r2, [r3, #16]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	615a      	str	r2, [r3, #20]
}
 8006990:	46c0      	nop			; (mov r8, r8)
 8006992:	46bd      	mov	sp, r7
 8006994:	b004      	add	sp, #16
 8006996:	bd80      	pop	{r7, pc}
 8006998:	40012c00 	.word	0x40012c00
 800699c:	40000400 	.word	0x40000400
 80069a0:	40002000 	.word	0x40002000
 80069a4:	40014400 	.word	0x40014400
 80069a8:	40014800 	.word	0x40014800
 80069ac:	fffffcff 	.word	0xfffffcff

080069b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	2201      	movs	r2, #1
 80069c0:	4393      	bics	r3, r2
 80069c2:	001a      	movs	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	4a2e      	ldr	r2, [pc, #184]	; (8006a98 <TIM_OC1_SetConfig+0xe8>)
 80069de:	4013      	ands	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2203      	movs	r2, #3
 80069e6:	4393      	bics	r3, r2
 80069e8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	2202      	movs	r2, #2
 80069f8:	4393      	bics	r3, r2
 80069fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a24      	ldr	r2, [pc, #144]	; (8006a9c <TIM_OC1_SetConfig+0xec>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d007      	beq.n	8006a1e <TIM_OC1_SetConfig+0x6e>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a23      	ldr	r2, [pc, #140]	; (8006aa0 <TIM_OC1_SetConfig+0xf0>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d003      	beq.n	8006a1e <TIM_OC1_SetConfig+0x6e>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a22      	ldr	r2, [pc, #136]	; (8006aa4 <TIM_OC1_SetConfig+0xf4>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d10c      	bne.n	8006a38 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2208      	movs	r2, #8
 8006a22:	4393      	bics	r3, r2
 8006a24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	2204      	movs	r2, #4
 8006a34:	4393      	bics	r3, r2
 8006a36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a18      	ldr	r2, [pc, #96]	; (8006a9c <TIM_OC1_SetConfig+0xec>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d007      	beq.n	8006a50 <TIM_OC1_SetConfig+0xa0>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a17      	ldr	r2, [pc, #92]	; (8006aa0 <TIM_OC1_SetConfig+0xf0>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d003      	beq.n	8006a50 <TIM_OC1_SetConfig+0xa0>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a16      	ldr	r2, [pc, #88]	; (8006aa4 <TIM_OC1_SetConfig+0xf4>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d111      	bne.n	8006a74 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	4a15      	ldr	r2, [pc, #84]	; (8006aa8 <TIM_OC1_SetConfig+0xf8>)
 8006a54:	4013      	ands	r3, r2
 8006a56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	4a14      	ldr	r2, [pc, #80]	; (8006aac <TIM_OC1_SetConfig+0xfc>)
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	621a      	str	r2, [r3, #32]
}
 8006a8e:	46c0      	nop			; (mov r8, r8)
 8006a90:	46bd      	mov	sp, r7
 8006a92:	b006      	add	sp, #24
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	46c0      	nop			; (mov r8, r8)
 8006a98:	fffeff8f 	.word	0xfffeff8f
 8006a9c:	40012c00 	.word	0x40012c00
 8006aa0:	40014400 	.word	0x40014400
 8006aa4:	40014800 	.word	0x40014800
 8006aa8:	fffffeff 	.word	0xfffffeff
 8006aac:	fffffdff 	.word	0xfffffdff

08006ab0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	2210      	movs	r2, #16
 8006ac0:	4393      	bics	r3, r2
 8006ac2:	001a      	movs	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a1b      	ldr	r3, [r3, #32]
 8006acc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4a2c      	ldr	r2, [pc, #176]	; (8006b90 <TIM_OC2_SetConfig+0xe0>)
 8006ade:	4013      	ands	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4a2b      	ldr	r2, [pc, #172]	; (8006b94 <TIM_OC2_SetConfig+0xe4>)
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	021b      	lsls	r3, r3, #8
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2220      	movs	r2, #32
 8006afa:	4393      	bics	r3, r2
 8006afc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	011b      	lsls	r3, r3, #4
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a22      	ldr	r2, [pc, #136]	; (8006b98 <TIM_OC2_SetConfig+0xe8>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d10d      	bne.n	8006b2e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	2280      	movs	r2, #128	; 0x80
 8006b16:	4393      	bics	r3, r2
 8006b18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	011b      	lsls	r3, r3, #4
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	2240      	movs	r2, #64	; 0x40
 8006b2a:	4393      	bics	r3, r2
 8006b2c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a19      	ldr	r2, [pc, #100]	; (8006b98 <TIM_OC2_SetConfig+0xe8>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d007      	beq.n	8006b46 <TIM_OC2_SetConfig+0x96>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a18      	ldr	r2, [pc, #96]	; (8006b9c <TIM_OC2_SetConfig+0xec>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d003      	beq.n	8006b46 <TIM_OC2_SetConfig+0x96>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a17      	ldr	r2, [pc, #92]	; (8006ba0 <TIM_OC2_SetConfig+0xf0>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d113      	bne.n	8006b6e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	4a16      	ldr	r2, [pc, #88]	; (8006ba4 <TIM_OC2_SetConfig+0xf4>)
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	4a15      	ldr	r2, [pc, #84]	; (8006ba8 <TIM_OC2_SetConfig+0xf8>)
 8006b52:	4013      	ands	r3, r2
 8006b54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	621a      	str	r2, [r3, #32]
}
 8006b88:	46c0      	nop			; (mov r8, r8)
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	b006      	add	sp, #24
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	feff8fff 	.word	0xfeff8fff
 8006b94:	fffffcff 	.word	0xfffffcff
 8006b98:	40012c00 	.word	0x40012c00
 8006b9c:	40014400 	.word	0x40014400
 8006ba0:	40014800 	.word	0x40014800
 8006ba4:	fffffbff 	.word	0xfffffbff
 8006ba8:	fffff7ff 	.word	0xfffff7ff

08006bac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	4a33      	ldr	r2, [pc, #204]	; (8006c88 <TIM_OC3_SetConfig+0xdc>)
 8006bbc:	401a      	ands	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	4a2d      	ldr	r2, [pc, #180]	; (8006c8c <TIM_OC3_SetConfig+0xe0>)
 8006bd8:	4013      	ands	r3, r2
 8006bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2203      	movs	r2, #3
 8006be0:	4393      	bics	r3, r2
 8006be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	4a27      	ldr	r2, [pc, #156]	; (8006c90 <TIM_OC3_SetConfig+0xe4>)
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	021b      	lsls	r3, r3, #8
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a23      	ldr	r2, [pc, #140]	; (8006c94 <TIM_OC3_SetConfig+0xe8>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d10d      	bne.n	8006c26 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	4a22      	ldr	r2, [pc, #136]	; (8006c98 <TIM_OC3_SetConfig+0xec>)
 8006c0e:	4013      	ands	r3, r2
 8006c10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	021b      	lsls	r3, r3, #8
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	4a1e      	ldr	r2, [pc, #120]	; (8006c9c <TIM_OC3_SetConfig+0xf0>)
 8006c22:	4013      	ands	r3, r2
 8006c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a1a      	ldr	r2, [pc, #104]	; (8006c94 <TIM_OC3_SetConfig+0xe8>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d007      	beq.n	8006c3e <TIM_OC3_SetConfig+0x92>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a1b      	ldr	r2, [pc, #108]	; (8006ca0 <TIM_OC3_SetConfig+0xf4>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d003      	beq.n	8006c3e <TIM_OC3_SetConfig+0x92>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a1a      	ldr	r2, [pc, #104]	; (8006ca4 <TIM_OC3_SetConfig+0xf8>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d113      	bne.n	8006c66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	4a19      	ldr	r2, [pc, #100]	; (8006ca8 <TIM_OC3_SetConfig+0xfc>)
 8006c42:	4013      	ands	r3, r2
 8006c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	4a18      	ldr	r2, [pc, #96]	; (8006cac <TIM_OC3_SetConfig+0x100>)
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	011b      	lsls	r3, r3, #4
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	011b      	lsls	r3, r3, #4
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	685a      	ldr	r2, [r3, #4]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	621a      	str	r2, [r3, #32]
}
 8006c80:	46c0      	nop			; (mov r8, r8)
 8006c82:	46bd      	mov	sp, r7
 8006c84:	b006      	add	sp, #24
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	fffffeff 	.word	0xfffffeff
 8006c8c:	fffeff8f 	.word	0xfffeff8f
 8006c90:	fffffdff 	.word	0xfffffdff
 8006c94:	40012c00 	.word	0x40012c00
 8006c98:	fffff7ff 	.word	0xfffff7ff
 8006c9c:	fffffbff 	.word	0xfffffbff
 8006ca0:	40014400 	.word	0x40014400
 8006ca4:	40014800 	.word	0x40014800
 8006ca8:	ffffefff 	.word	0xffffefff
 8006cac:	ffffdfff 	.word	0xffffdfff

08006cb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	4a26      	ldr	r2, [pc, #152]	; (8006d58 <TIM_OC4_SetConfig+0xa8>)
 8006cc0:	401a      	ands	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	4a20      	ldr	r2, [pc, #128]	; (8006d5c <TIM_OC4_SetConfig+0xac>)
 8006cdc:	4013      	ands	r3, r2
 8006cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4a1f      	ldr	r2, [pc, #124]	; (8006d60 <TIM_OC4_SetConfig+0xb0>)
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	021b      	lsls	r3, r3, #8
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	4a1b      	ldr	r2, [pc, #108]	; (8006d64 <TIM_OC4_SetConfig+0xb4>)
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	031b      	lsls	r3, r3, #12
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a17      	ldr	r2, [pc, #92]	; (8006d68 <TIM_OC4_SetConfig+0xb8>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d007      	beq.n	8006d20 <TIM_OC4_SetConfig+0x70>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a16      	ldr	r2, [pc, #88]	; (8006d6c <TIM_OC4_SetConfig+0xbc>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d003      	beq.n	8006d20 <TIM_OC4_SetConfig+0x70>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a15      	ldr	r2, [pc, #84]	; (8006d70 <TIM_OC4_SetConfig+0xc0>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d109      	bne.n	8006d34 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	4a14      	ldr	r2, [pc, #80]	; (8006d74 <TIM_OC4_SetConfig+0xc4>)
 8006d24:	4013      	ands	r3, r2
 8006d26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	019b      	lsls	r3, r3, #6
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	621a      	str	r2, [r3, #32]
}
 8006d4e:	46c0      	nop			; (mov r8, r8)
 8006d50:	46bd      	mov	sp, r7
 8006d52:	b006      	add	sp, #24
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	46c0      	nop			; (mov r8, r8)
 8006d58:	ffffefff 	.word	0xffffefff
 8006d5c:	feff8fff 	.word	0xfeff8fff
 8006d60:	fffffcff 	.word	0xfffffcff
 8006d64:	ffffdfff 	.word	0xffffdfff
 8006d68:	40012c00 	.word	0x40012c00
 8006d6c:	40014400 	.word	0x40014400
 8006d70:	40014800 	.word	0x40014800
 8006d74:	ffffbfff 	.word	0xffffbfff

08006d78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	4a23      	ldr	r2, [pc, #140]	; (8006e14 <TIM_OC5_SetConfig+0x9c>)
 8006d88:	401a      	ands	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4a1d      	ldr	r2, [pc, #116]	; (8006e18 <TIM_OC5_SetConfig+0xa0>)
 8006da4:	4013      	ands	r3, r2
 8006da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	4a19      	ldr	r2, [pc, #100]	; (8006e1c <TIM_OC5_SetConfig+0xa4>)
 8006db6:	4013      	ands	r3, r2
 8006db8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	041b      	lsls	r3, r3, #16
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a15      	ldr	r2, [pc, #84]	; (8006e20 <TIM_OC5_SetConfig+0xa8>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d007      	beq.n	8006dde <TIM_OC5_SetConfig+0x66>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a14      	ldr	r2, [pc, #80]	; (8006e24 <TIM_OC5_SetConfig+0xac>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d003      	beq.n	8006dde <TIM_OC5_SetConfig+0x66>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a13      	ldr	r2, [pc, #76]	; (8006e28 <TIM_OC5_SetConfig+0xb0>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d109      	bne.n	8006df2 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	4a0c      	ldr	r2, [pc, #48]	; (8006e14 <TIM_OC5_SetConfig+0x9c>)
 8006de2:	4013      	ands	r3, r2
 8006de4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	021b      	lsls	r3, r3, #8
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	697a      	ldr	r2, [r7, #20]
 8006df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	685a      	ldr	r2, [r3, #4]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	621a      	str	r2, [r3, #32]
}
 8006e0c:	46c0      	nop			; (mov r8, r8)
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	b006      	add	sp, #24
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	fffeffff 	.word	0xfffeffff
 8006e18:	fffeff8f 	.word	0xfffeff8f
 8006e1c:	fffdffff 	.word	0xfffdffff
 8006e20:	40012c00 	.word	0x40012c00
 8006e24:	40014400 	.word	0x40014400
 8006e28:	40014800 	.word	0x40014800

08006e2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	4a24      	ldr	r2, [pc, #144]	; (8006ecc <TIM_OC6_SetConfig+0xa0>)
 8006e3c:	401a      	ands	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	4a1e      	ldr	r2, [pc, #120]	; (8006ed0 <TIM_OC6_SetConfig+0xa4>)
 8006e58:	4013      	ands	r3, r2
 8006e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	021b      	lsls	r3, r3, #8
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	4a1a      	ldr	r2, [pc, #104]	; (8006ed4 <TIM_OC6_SetConfig+0xa8>)
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	051b      	lsls	r3, r3, #20
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a16      	ldr	r2, [pc, #88]	; (8006ed8 <TIM_OC6_SetConfig+0xac>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d007      	beq.n	8006e94 <TIM_OC6_SetConfig+0x68>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a15      	ldr	r2, [pc, #84]	; (8006edc <TIM_OC6_SetConfig+0xb0>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d003      	beq.n	8006e94 <TIM_OC6_SetConfig+0x68>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a14      	ldr	r2, [pc, #80]	; (8006ee0 <TIM_OC6_SetConfig+0xb4>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d109      	bne.n	8006ea8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	4a13      	ldr	r2, [pc, #76]	; (8006ee4 <TIM_OC6_SetConfig+0xb8>)
 8006e98:	4013      	ands	r3, r2
 8006e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	029b      	lsls	r3, r3, #10
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	621a      	str	r2, [r3, #32]
}
 8006ec2:	46c0      	nop			; (mov r8, r8)
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	b006      	add	sp, #24
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	46c0      	nop			; (mov r8, r8)
 8006ecc:	ffefffff 	.word	0xffefffff
 8006ed0:	feff8fff 	.word	0xfeff8fff
 8006ed4:	ffdfffff 	.word	0xffdfffff
 8006ed8:	40012c00 	.word	0x40012c00
 8006edc:	40014400 	.word	0x40014400
 8006ee0:	40014800 	.word	0x40014800
 8006ee4:	fffbffff 	.word	0xfffbffff

08006ee8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b086      	sub	sp, #24
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6a1b      	ldr	r3, [r3, #32]
 8006ef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	2201      	movs	r2, #1
 8006f00:	4393      	bics	r3, r2
 8006f02:	001a      	movs	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	22f0      	movs	r2, #240	; 0xf0
 8006f12:	4393      	bics	r3, r2
 8006f14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	011b      	lsls	r3, r3, #4
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	220a      	movs	r2, #10
 8006f24:	4393      	bics	r3, r2
 8006f26:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	621a      	str	r2, [r3, #32]
}
 8006f3c:	46c0      	nop			; (mov r8, r8)
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	b006      	add	sp, #24
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6a1b      	ldr	r3, [r3, #32]
 8006f54:	2210      	movs	r2, #16
 8006f56:	4393      	bics	r3, r2
 8006f58:	001a      	movs	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6a1b      	ldr	r3, [r3, #32]
 8006f68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	4a0d      	ldr	r2, [pc, #52]	; (8006fa4 <TIM_TI2_ConfigInputStage+0x60>)
 8006f6e:	4013      	ands	r3, r2
 8006f70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	031b      	lsls	r3, r3, #12
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	22a0      	movs	r2, #160	; 0xa0
 8006f80:	4393      	bics	r3, r2
 8006f82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	011b      	lsls	r3, r3, #4
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	693a      	ldr	r2, [r7, #16]
 8006f98:	621a      	str	r2, [r3, #32]
}
 8006f9a:	46c0      	nop			; (mov r8, r8)
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	b006      	add	sp, #24
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	46c0      	nop			; (mov r8, r8)
 8006fa4:	ffff0fff 	.word	0xffff0fff

08006fa8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	4a08      	ldr	r2, [pc, #32]	; (8006fdc <TIM_ITRx_SetConfig+0x34>)
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	2207      	movs	r2, #7
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	609a      	str	r2, [r3, #8]
}
 8006fd2:	46c0      	nop			; (mov r8, r8)
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	b004      	add	sp, #16
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	46c0      	nop			; (mov r8, r8)
 8006fdc:	ffcfff8f 	.word	0xffcfff8f

08006fe0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
 8006fec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	4a09      	ldr	r2, [pc, #36]	; (800701c <TIM_ETR_SetConfig+0x3c>)
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	021a      	lsls	r2, r3, #8
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	431a      	orrs	r2, r3
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	4313      	orrs	r3, r2
 8007008:	697a      	ldr	r2, [r7, #20]
 800700a:	4313      	orrs	r3, r2
 800700c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	609a      	str	r2, [r3, #8]
}
 8007014:	46c0      	nop			; (mov r8, r8)
 8007016:	46bd      	mov	sp, r7
 8007018:	b006      	add	sp, #24
 800701a:	bd80      	pop	{r7, pc}
 800701c:	ffff00ff 	.word	0xffff00ff

08007020 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	221f      	movs	r2, #31
 8007030:	4013      	ands	r3, r2
 8007032:	2201      	movs	r2, #1
 8007034:	409a      	lsls	r2, r3
 8007036:	0013      	movs	r3, r2
 8007038:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6a1b      	ldr	r3, [r3, #32]
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	43d2      	mvns	r2, r2
 8007042:	401a      	ands	r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6a1a      	ldr	r2, [r3, #32]
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	211f      	movs	r1, #31
 8007050:	400b      	ands	r3, r1
 8007052:	6879      	ldr	r1, [r7, #4]
 8007054:	4099      	lsls	r1, r3
 8007056:	000b      	movs	r3, r1
 8007058:	431a      	orrs	r2, r3
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	621a      	str	r2, [r3, #32]
}
 800705e:	46c0      	nop			; (mov r8, r8)
 8007060:	46bd      	mov	sp, r7
 8007062:	b006      	add	sp, #24
 8007064:	bd80      	pop	{r7, pc}
	...

08007068 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	223c      	movs	r2, #60	; 0x3c
 8007076:	5c9b      	ldrb	r3, [r3, r2]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d101      	bne.n	8007080 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800707c:	2302      	movs	r3, #2
 800707e:	e050      	b.n	8007122 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	223c      	movs	r2, #60	; 0x3c
 8007084:	2101      	movs	r1, #1
 8007086:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	223d      	movs	r2, #61	; 0x3d
 800708c:	2102      	movs	r1, #2
 800708e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a21      	ldr	r2, [pc, #132]	; (800712c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d108      	bne.n	80070bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	4a20      	ldr	r2, [pc, #128]	; (8007130 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80070ae:	4013      	ands	r3, r2
 80070b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2270      	movs	r2, #112	; 0x70
 80070c0:	4393      	bics	r3, r2
 80070c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a14      	ldr	r2, [pc, #80]	; (800712c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d00a      	beq.n	80070f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	2380      	movs	r3, #128	; 0x80
 80070e6:	05db      	lsls	r3, r3, #23
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d004      	beq.n	80070f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a10      	ldr	r2, [pc, #64]	; (8007134 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d10c      	bne.n	8007110 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	2280      	movs	r2, #128	; 0x80
 80070fa:	4393      	bics	r3, r2
 80070fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	4313      	orrs	r3, r2
 8007106:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	223d      	movs	r2, #61	; 0x3d
 8007114:	2101      	movs	r1, #1
 8007116:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	223c      	movs	r2, #60	; 0x3c
 800711c:	2100      	movs	r1, #0
 800711e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	0018      	movs	r0, r3
 8007124:	46bd      	mov	sp, r7
 8007126:	b004      	add	sp, #16
 8007128:	bd80      	pop	{r7, pc}
 800712a:	46c0      	nop			; (mov r8, r8)
 800712c:	40012c00 	.word	0x40012c00
 8007130:	ff0fffff 	.word	0xff0fffff
 8007134:	40000400 	.word	0x40000400

08007138 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007142:	2300      	movs	r3, #0
 8007144:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	223c      	movs	r2, #60	; 0x3c
 800714a:	5c9b      	ldrb	r3, [r3, r2]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d101      	bne.n	8007154 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007150:	2302      	movs	r3, #2
 8007152:	e079      	b.n	8007248 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	223c      	movs	r2, #60	; 0x3c
 8007158:	2101      	movs	r1, #1
 800715a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	22ff      	movs	r2, #255	; 0xff
 8007160:	4393      	bics	r3, r2
 8007162:	001a      	movs	r2, r3
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	4313      	orrs	r3, r2
 800716a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4a38      	ldr	r2, [pc, #224]	; (8007250 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8007170:	401a      	ands	r2, r3
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	4313      	orrs	r3, r2
 8007178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	4a35      	ldr	r2, [pc, #212]	; (8007254 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800717e:	401a      	ands	r2, r3
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	4313      	orrs	r3, r2
 8007186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	4a33      	ldr	r2, [pc, #204]	; (8007258 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800718c:	401a      	ands	r2, r3
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4313      	orrs	r3, r2
 8007194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	4a30      	ldr	r2, [pc, #192]	; (800725c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800719a:	401a      	ands	r2, r3
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	4a2e      	ldr	r2, [pc, #184]	; (8007260 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80071a8:	401a      	ands	r2, r3
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	4a2b      	ldr	r2, [pc, #172]	; (8007264 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80071b6:	401a      	ands	r2, r3
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071bc:	4313      	orrs	r3, r2
 80071be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	4a29      	ldr	r2, [pc, #164]	; (8007268 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80071c4:	401a      	ands	r2, r3
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	041b      	lsls	r3, r3, #16
 80071cc:	4313      	orrs	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a25      	ldr	r2, [pc, #148]	; (800726c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d106      	bne.n	80071e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	4a24      	ldr	r2, [pc, #144]	; (8007270 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80071de:	401a      	ands	r2, r3
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	69db      	ldr	r3, [r3, #28]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a1f      	ldr	r2, [pc, #124]	; (800726c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d121      	bne.n	8007236 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	4a1f      	ldr	r2, [pc, #124]	; (8007274 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80071f6:	401a      	ands	r2, r3
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fc:	051b      	lsls	r3, r3, #20
 80071fe:	4313      	orrs	r3, r2
 8007200:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	4a1c      	ldr	r2, [pc, #112]	; (8007278 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8007206:	401a      	ands	r2, r3
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	6a1b      	ldr	r3, [r3, #32]
 800720c:	4313      	orrs	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	4a1a      	ldr	r2, [pc, #104]	; (800727c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8007214:	401a      	ands	r2, r3
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721a:	4313      	orrs	r3, r2
 800721c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a12      	ldr	r2, [pc, #72]	; (800726c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d106      	bne.n	8007236 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	4a15      	ldr	r2, [pc, #84]	; (8007280 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800722c:	401a      	ands	r2, r3
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007232:	4313      	orrs	r3, r2
 8007234:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	223c      	movs	r2, #60	; 0x3c
 8007242:	2100      	movs	r1, #0
 8007244:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	0018      	movs	r0, r3
 800724a:	46bd      	mov	sp, r7
 800724c:	b004      	add	sp, #16
 800724e:	bd80      	pop	{r7, pc}
 8007250:	fffffcff 	.word	0xfffffcff
 8007254:	fffffbff 	.word	0xfffffbff
 8007258:	fffff7ff 	.word	0xfffff7ff
 800725c:	ffffefff 	.word	0xffffefff
 8007260:	ffffdfff 	.word	0xffffdfff
 8007264:	ffffbfff 	.word	0xffffbfff
 8007268:	fff0ffff 	.word	0xfff0ffff
 800726c:	40012c00 	.word	0x40012c00
 8007270:	efffffff 	.word	0xefffffff
 8007274:	ff0fffff 	.word	0xff0fffff
 8007278:	feffffff 	.word	0xfeffffff
 800727c:	fdffffff 	.word	0xfdffffff
 8007280:	dfffffff 	.word	0xdfffffff

08007284 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d101      	bne.n	8007296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e046      	b.n	8007324 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2288      	movs	r2, #136	; 0x88
 800729a:	589b      	ldr	r3, [r3, r2]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d107      	bne.n	80072b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2284      	movs	r2, #132	; 0x84
 80072a4:	2100      	movs	r1, #0
 80072a6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	0018      	movs	r0, r3
 80072ac:	f7fd f9ba 	bl	8004624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2288      	movs	r2, #136	; 0x88
 80072b4:	2124      	movs	r1, #36	; 0x24
 80072b6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2101      	movs	r1, #1
 80072c4:	438a      	bics	r2, r1
 80072c6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	0018      	movs	r0, r3
 80072cc:	f000 fc0a 	bl	8007ae4 <UART_SetConfig>
 80072d0:	0003      	movs	r3, r0
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d101      	bne.n	80072da <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e024      	b.n	8007324 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d003      	beq.n	80072ea <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	0018      	movs	r0, r3
 80072e6:	f000 fe75 	bl	8007fd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	685a      	ldr	r2, [r3, #4]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	490d      	ldr	r1, [pc, #52]	; (800732c <HAL_UART_Init+0xa8>)
 80072f6:	400a      	ands	r2, r1
 80072f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	689a      	ldr	r2, [r3, #8]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	212a      	movs	r1, #42	; 0x2a
 8007306:	438a      	bics	r2, r1
 8007308:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2101      	movs	r1, #1
 8007316:	430a      	orrs	r2, r1
 8007318:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	0018      	movs	r0, r3
 800731e:	f000 ff0d 	bl	800813c <UART_CheckIdleState>
 8007322:	0003      	movs	r3, r0
}
 8007324:	0018      	movs	r0, r3
 8007326:	46bd      	mov	sp, r7
 8007328:	b002      	add	sp, #8
 800732a:	bd80      	pop	{r7, pc}
 800732c:	ffffb7ff 	.word	0xffffb7ff

08007330 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b08a      	sub	sp, #40	; 0x28
 8007334:	af02      	add	r7, sp, #8
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	603b      	str	r3, [r7, #0]
 800733c:	1dbb      	adds	r3, r7, #6
 800733e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2288      	movs	r2, #136	; 0x88
 8007344:	589b      	ldr	r3, [r3, r2]
 8007346:	2b20      	cmp	r3, #32
 8007348:	d000      	beq.n	800734c <HAL_UART_Transmit+0x1c>
 800734a:	e088      	b.n	800745e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d003      	beq.n	800735a <HAL_UART_Transmit+0x2a>
 8007352:	1dbb      	adds	r3, r7, #6
 8007354:	881b      	ldrh	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e080      	b.n	8007460 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	689a      	ldr	r2, [r3, #8]
 8007362:	2380      	movs	r3, #128	; 0x80
 8007364:	015b      	lsls	r3, r3, #5
 8007366:	429a      	cmp	r2, r3
 8007368:	d109      	bne.n	800737e <HAL_UART_Transmit+0x4e>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d105      	bne.n	800737e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	2201      	movs	r2, #1
 8007376:	4013      	ands	r3, r2
 8007378:	d001      	beq.n	800737e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e070      	b.n	8007460 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2290      	movs	r2, #144	; 0x90
 8007382:	2100      	movs	r1, #0
 8007384:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2288      	movs	r2, #136	; 0x88
 800738a:	2121      	movs	r1, #33	; 0x21
 800738c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800738e:	f7fd fb57 	bl	8004a40 <HAL_GetTick>
 8007392:	0003      	movs	r3, r0
 8007394:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	1dba      	adds	r2, r7, #6
 800739a:	2154      	movs	r1, #84	; 0x54
 800739c:	8812      	ldrh	r2, [r2, #0]
 800739e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	1dba      	adds	r2, r7, #6
 80073a4:	2156      	movs	r1, #86	; 0x56
 80073a6:	8812      	ldrh	r2, [r2, #0]
 80073a8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	689a      	ldr	r2, [r3, #8]
 80073ae:	2380      	movs	r3, #128	; 0x80
 80073b0:	015b      	lsls	r3, r3, #5
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d108      	bne.n	80073c8 <HAL_UART_Transmit+0x98>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d104      	bne.n	80073c8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80073be:	2300      	movs	r3, #0
 80073c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	61bb      	str	r3, [r7, #24]
 80073c6:	e003      	b.n	80073d0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073cc:	2300      	movs	r3, #0
 80073ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80073d0:	e02c      	b.n	800742c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	9300      	str	r3, [sp, #0]
 80073da:	0013      	movs	r3, r2
 80073dc:	2200      	movs	r2, #0
 80073de:	2180      	movs	r1, #128	; 0x80
 80073e0:	f000 fefa 	bl	80081d8 <UART_WaitOnFlagUntilTimeout>
 80073e4:	1e03      	subs	r3, r0, #0
 80073e6:	d001      	beq.n	80073ec <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e039      	b.n	8007460 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10b      	bne.n	800740a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	881b      	ldrh	r3, [r3, #0]
 80073f6:	001a      	movs	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	05d2      	lsls	r2, r2, #23
 80073fe:	0dd2      	lsrs	r2, r2, #23
 8007400:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	3302      	adds	r3, #2
 8007406:	61bb      	str	r3, [r7, #24]
 8007408:	e007      	b.n	800741a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	781a      	ldrb	r2, [r3, #0]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	3301      	adds	r3, #1
 8007418:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2256      	movs	r2, #86	; 0x56
 800741e:	5a9b      	ldrh	r3, [r3, r2]
 8007420:	b29b      	uxth	r3, r3
 8007422:	3b01      	subs	r3, #1
 8007424:	b299      	uxth	r1, r3
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2256      	movs	r2, #86	; 0x56
 800742a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2256      	movs	r2, #86	; 0x56
 8007430:	5a9b      	ldrh	r3, [r3, r2]
 8007432:	b29b      	uxth	r3, r3
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1cc      	bne.n	80073d2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	9300      	str	r3, [sp, #0]
 8007440:	0013      	movs	r3, r2
 8007442:	2200      	movs	r2, #0
 8007444:	2140      	movs	r1, #64	; 0x40
 8007446:	f000 fec7 	bl	80081d8 <UART_WaitOnFlagUntilTimeout>
 800744a:	1e03      	subs	r3, r0, #0
 800744c:	d001      	beq.n	8007452 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e006      	b.n	8007460 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2288      	movs	r2, #136	; 0x88
 8007456:	2120      	movs	r1, #32
 8007458:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	e000      	b.n	8007460 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800745e:	2302      	movs	r3, #2
  }
}
 8007460:	0018      	movs	r0, r3
 8007462:	46bd      	mov	sp, r7
 8007464:	b008      	add	sp, #32
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007468:	b5b0      	push	{r4, r5, r7, lr}
 800746a:	b0aa      	sub	sp, #168	; 0xa8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	69db      	ldr	r3, [r3, #28]
 8007476:	22a4      	movs	r2, #164	; 0xa4
 8007478:	18b9      	adds	r1, r7, r2
 800747a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	20a0      	movs	r0, #160	; 0xa0
 8007484:	1839      	adds	r1, r7, r0
 8007486:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	249c      	movs	r4, #156	; 0x9c
 8007490:	1939      	adds	r1, r7, r4
 8007492:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007494:	0011      	movs	r1, r2
 8007496:	18bb      	adds	r3, r7, r2
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4aa2      	ldr	r2, [pc, #648]	; (8007724 <HAL_UART_IRQHandler+0x2bc>)
 800749c:	4013      	ands	r3, r2
 800749e:	2298      	movs	r2, #152	; 0x98
 80074a0:	18bd      	adds	r5, r7, r2
 80074a2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80074a4:	18bb      	adds	r3, r7, r2
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d11a      	bne.n	80074e2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80074ac:	187b      	adds	r3, r7, r1
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2220      	movs	r2, #32
 80074b2:	4013      	ands	r3, r2
 80074b4:	d015      	beq.n	80074e2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80074b6:	183b      	adds	r3, r7, r0
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2220      	movs	r2, #32
 80074bc:	4013      	ands	r3, r2
 80074be:	d105      	bne.n	80074cc <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80074c0:	193b      	adds	r3, r7, r4
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	2380      	movs	r3, #128	; 0x80
 80074c6:	055b      	lsls	r3, r3, #21
 80074c8:	4013      	ands	r3, r2
 80074ca:	d00a      	beq.n	80074e2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d100      	bne.n	80074d6 <HAL_UART_IRQHandler+0x6e>
 80074d4:	e2dc      	b.n	8007a90 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	0010      	movs	r0, r2
 80074de:	4798      	blx	r3
      }
      return;
 80074e0:	e2d6      	b.n	8007a90 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80074e2:	2398      	movs	r3, #152	; 0x98
 80074e4:	18fb      	adds	r3, r7, r3
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d100      	bne.n	80074ee <HAL_UART_IRQHandler+0x86>
 80074ec:	e122      	b.n	8007734 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80074ee:	239c      	movs	r3, #156	; 0x9c
 80074f0:	18fb      	adds	r3, r7, r3
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a8c      	ldr	r2, [pc, #560]	; (8007728 <HAL_UART_IRQHandler+0x2c0>)
 80074f6:	4013      	ands	r3, r2
 80074f8:	d106      	bne.n	8007508 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80074fa:	23a0      	movs	r3, #160	; 0xa0
 80074fc:	18fb      	adds	r3, r7, r3
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a8a      	ldr	r2, [pc, #552]	; (800772c <HAL_UART_IRQHandler+0x2c4>)
 8007502:	4013      	ands	r3, r2
 8007504:	d100      	bne.n	8007508 <HAL_UART_IRQHandler+0xa0>
 8007506:	e115      	b.n	8007734 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007508:	23a4      	movs	r3, #164	; 0xa4
 800750a:	18fb      	adds	r3, r7, r3
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2201      	movs	r2, #1
 8007510:	4013      	ands	r3, r2
 8007512:	d012      	beq.n	800753a <HAL_UART_IRQHandler+0xd2>
 8007514:	23a0      	movs	r3, #160	; 0xa0
 8007516:	18fb      	adds	r3, r7, r3
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	2380      	movs	r3, #128	; 0x80
 800751c:	005b      	lsls	r3, r3, #1
 800751e:	4013      	ands	r3, r2
 8007520:	d00b      	beq.n	800753a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2201      	movs	r2, #1
 8007528:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2290      	movs	r2, #144	; 0x90
 800752e:	589b      	ldr	r3, [r3, r2]
 8007530:	2201      	movs	r2, #1
 8007532:	431a      	orrs	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2190      	movs	r1, #144	; 0x90
 8007538:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800753a:	23a4      	movs	r3, #164	; 0xa4
 800753c:	18fb      	adds	r3, r7, r3
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2202      	movs	r2, #2
 8007542:	4013      	ands	r3, r2
 8007544:	d011      	beq.n	800756a <HAL_UART_IRQHandler+0x102>
 8007546:	239c      	movs	r3, #156	; 0x9c
 8007548:	18fb      	adds	r3, r7, r3
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2201      	movs	r2, #1
 800754e:	4013      	ands	r3, r2
 8007550:	d00b      	beq.n	800756a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2202      	movs	r2, #2
 8007558:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2290      	movs	r2, #144	; 0x90
 800755e:	589b      	ldr	r3, [r3, r2]
 8007560:	2204      	movs	r2, #4
 8007562:	431a      	orrs	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2190      	movs	r1, #144	; 0x90
 8007568:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800756a:	23a4      	movs	r3, #164	; 0xa4
 800756c:	18fb      	adds	r3, r7, r3
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2204      	movs	r2, #4
 8007572:	4013      	ands	r3, r2
 8007574:	d011      	beq.n	800759a <HAL_UART_IRQHandler+0x132>
 8007576:	239c      	movs	r3, #156	; 0x9c
 8007578:	18fb      	adds	r3, r7, r3
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2201      	movs	r2, #1
 800757e:	4013      	ands	r3, r2
 8007580:	d00b      	beq.n	800759a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2204      	movs	r2, #4
 8007588:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2290      	movs	r2, #144	; 0x90
 800758e:	589b      	ldr	r3, [r3, r2]
 8007590:	2202      	movs	r2, #2
 8007592:	431a      	orrs	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2190      	movs	r1, #144	; 0x90
 8007598:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800759a:	23a4      	movs	r3, #164	; 0xa4
 800759c:	18fb      	adds	r3, r7, r3
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2208      	movs	r2, #8
 80075a2:	4013      	ands	r3, r2
 80075a4:	d017      	beq.n	80075d6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80075a6:	23a0      	movs	r3, #160	; 0xa0
 80075a8:	18fb      	adds	r3, r7, r3
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2220      	movs	r2, #32
 80075ae:	4013      	ands	r3, r2
 80075b0:	d105      	bne.n	80075be <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80075b2:	239c      	movs	r3, #156	; 0x9c
 80075b4:	18fb      	adds	r3, r7, r3
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a5b      	ldr	r2, [pc, #364]	; (8007728 <HAL_UART_IRQHandler+0x2c0>)
 80075ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80075bc:	d00b      	beq.n	80075d6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2208      	movs	r2, #8
 80075c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2290      	movs	r2, #144	; 0x90
 80075ca:	589b      	ldr	r3, [r3, r2]
 80075cc:	2208      	movs	r2, #8
 80075ce:	431a      	orrs	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2190      	movs	r1, #144	; 0x90
 80075d4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80075d6:	23a4      	movs	r3, #164	; 0xa4
 80075d8:	18fb      	adds	r3, r7, r3
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	2380      	movs	r3, #128	; 0x80
 80075de:	011b      	lsls	r3, r3, #4
 80075e0:	4013      	ands	r3, r2
 80075e2:	d013      	beq.n	800760c <HAL_UART_IRQHandler+0x1a4>
 80075e4:	23a0      	movs	r3, #160	; 0xa0
 80075e6:	18fb      	adds	r3, r7, r3
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	2380      	movs	r3, #128	; 0x80
 80075ec:	04db      	lsls	r3, r3, #19
 80075ee:	4013      	ands	r3, r2
 80075f0:	d00c      	beq.n	800760c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2280      	movs	r2, #128	; 0x80
 80075f8:	0112      	lsls	r2, r2, #4
 80075fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2290      	movs	r2, #144	; 0x90
 8007600:	589b      	ldr	r3, [r3, r2]
 8007602:	2220      	movs	r2, #32
 8007604:	431a      	orrs	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2190      	movs	r1, #144	; 0x90
 800760a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2290      	movs	r2, #144	; 0x90
 8007610:	589b      	ldr	r3, [r3, r2]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d100      	bne.n	8007618 <HAL_UART_IRQHandler+0x1b0>
 8007616:	e23d      	b.n	8007a94 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007618:	23a4      	movs	r3, #164	; 0xa4
 800761a:	18fb      	adds	r3, r7, r3
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2220      	movs	r2, #32
 8007620:	4013      	ands	r3, r2
 8007622:	d015      	beq.n	8007650 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007624:	23a0      	movs	r3, #160	; 0xa0
 8007626:	18fb      	adds	r3, r7, r3
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2220      	movs	r2, #32
 800762c:	4013      	ands	r3, r2
 800762e:	d106      	bne.n	800763e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007630:	239c      	movs	r3, #156	; 0x9c
 8007632:	18fb      	adds	r3, r7, r3
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	2380      	movs	r3, #128	; 0x80
 8007638:	055b      	lsls	r3, r3, #21
 800763a:	4013      	ands	r3, r2
 800763c:	d008      	beq.n	8007650 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007642:	2b00      	cmp	r3, #0
 8007644:	d004      	beq.n	8007650 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	0010      	movs	r0, r2
 800764e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2290      	movs	r2, #144	; 0x90
 8007654:	589b      	ldr	r3, [r3, r2]
 8007656:	2194      	movs	r1, #148	; 0x94
 8007658:	187a      	adds	r2, r7, r1
 800765a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	2240      	movs	r2, #64	; 0x40
 8007664:	4013      	ands	r3, r2
 8007666:	2b40      	cmp	r3, #64	; 0x40
 8007668:	d004      	beq.n	8007674 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800766a:	187b      	adds	r3, r7, r1
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2228      	movs	r2, #40	; 0x28
 8007670:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007672:	d04c      	beq.n	800770e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	0018      	movs	r0, r3
 8007678:	f000 ff9a 	bl	80085b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	2240      	movs	r2, #64	; 0x40
 8007684:	4013      	ands	r3, r2
 8007686:	2b40      	cmp	r3, #64	; 0x40
 8007688:	d13c      	bne.n	8007704 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800768a:	f3ef 8310 	mrs	r3, PRIMASK
 800768e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007690:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007692:	2090      	movs	r0, #144	; 0x90
 8007694:	183a      	adds	r2, r7, r0
 8007696:	6013      	str	r3, [r2, #0]
 8007698:	2301      	movs	r3, #1
 800769a:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800769c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800769e:	f383 8810 	msr	PRIMASK, r3
}
 80076a2:	46c0      	nop			; (mov r8, r8)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	689a      	ldr	r2, [r3, #8]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2140      	movs	r1, #64	; 0x40
 80076b0:	438a      	bics	r2, r1
 80076b2:	609a      	str	r2, [r3, #8]
 80076b4:	183b      	adds	r3, r7, r0
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076bc:	f383 8810 	msr	PRIMASK, r3
}
 80076c0:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2280      	movs	r2, #128	; 0x80
 80076c6:	589b      	ldr	r3, [r3, r2]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d016      	beq.n	80076fa <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2280      	movs	r2, #128	; 0x80
 80076d0:	589b      	ldr	r3, [r3, r2]
 80076d2:	4a17      	ldr	r2, [pc, #92]	; (8007730 <HAL_UART_IRQHandler+0x2c8>)
 80076d4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2280      	movs	r2, #128	; 0x80
 80076da:	589b      	ldr	r3, [r3, r2]
 80076dc:	0018      	movs	r0, r3
 80076de:	f7fd faf9 	bl	8004cd4 <HAL_DMA_Abort_IT>
 80076e2:	1e03      	subs	r3, r0, #0
 80076e4:	d01c      	beq.n	8007720 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2280      	movs	r2, #128	; 0x80
 80076ea:	589b      	ldr	r3, [r3, r2]
 80076ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	2180      	movs	r1, #128	; 0x80
 80076f2:	5852      	ldr	r2, [r2, r1]
 80076f4:	0010      	movs	r0, r2
 80076f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076f8:	e012      	b.n	8007720 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	0018      	movs	r0, r3
 80076fe:	f000 f9e9 	bl	8007ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007702:	e00d      	b.n	8007720 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	0018      	movs	r0, r3
 8007708:	f000 f9e4 	bl	8007ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800770c:	e008      	b.n	8007720 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	0018      	movs	r0, r3
 8007712:	f000 f9df 	bl	8007ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2290      	movs	r2, #144	; 0x90
 800771a:	2100      	movs	r1, #0
 800771c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800771e:	e1b9      	b.n	8007a94 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007720:	46c0      	nop			; (mov r8, r8)
    return;
 8007722:	e1b7      	b.n	8007a94 <HAL_UART_IRQHandler+0x62c>
 8007724:	0000080f 	.word	0x0000080f
 8007728:	10000001 	.word	0x10000001
 800772c:	04000120 	.word	0x04000120
 8007730:	0800867d 	.word	0x0800867d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007738:	2b01      	cmp	r3, #1
 800773a:	d000      	beq.n	800773e <HAL_UART_IRQHandler+0x2d6>
 800773c:	e13e      	b.n	80079bc <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800773e:	23a4      	movs	r3, #164	; 0xa4
 8007740:	18fb      	adds	r3, r7, r3
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2210      	movs	r2, #16
 8007746:	4013      	ands	r3, r2
 8007748:	d100      	bne.n	800774c <HAL_UART_IRQHandler+0x2e4>
 800774a:	e137      	b.n	80079bc <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800774c:	23a0      	movs	r3, #160	; 0xa0
 800774e:	18fb      	adds	r3, r7, r3
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2210      	movs	r2, #16
 8007754:	4013      	ands	r3, r2
 8007756:	d100      	bne.n	800775a <HAL_UART_IRQHandler+0x2f2>
 8007758:	e130      	b.n	80079bc <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2210      	movs	r2, #16
 8007760:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	2240      	movs	r2, #64	; 0x40
 800776a:	4013      	ands	r3, r2
 800776c:	2b40      	cmp	r3, #64	; 0x40
 800776e:	d000      	beq.n	8007772 <HAL_UART_IRQHandler+0x30a>
 8007770:	e0a4      	b.n	80078bc <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2280      	movs	r2, #128	; 0x80
 8007776:	589b      	ldr	r3, [r3, r2]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	217e      	movs	r1, #126	; 0x7e
 800777e:	187b      	adds	r3, r7, r1
 8007780:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007782:	187b      	adds	r3, r7, r1
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d100      	bne.n	800778c <HAL_UART_IRQHandler+0x324>
 800778a:	e185      	b.n	8007a98 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	225c      	movs	r2, #92	; 0x5c
 8007790:	5a9b      	ldrh	r3, [r3, r2]
 8007792:	187a      	adds	r2, r7, r1
 8007794:	8812      	ldrh	r2, [r2, #0]
 8007796:	429a      	cmp	r2, r3
 8007798:	d300      	bcc.n	800779c <HAL_UART_IRQHandler+0x334>
 800779a:	e17d      	b.n	8007a98 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	187a      	adds	r2, r7, r1
 80077a0:	215e      	movs	r1, #94	; 0x5e
 80077a2:	8812      	ldrh	r2, [r2, #0]
 80077a4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2280      	movs	r2, #128	; 0x80
 80077aa:	589b      	ldr	r3, [r3, r2]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2220      	movs	r2, #32
 80077b2:	4013      	ands	r3, r2
 80077b4:	d170      	bne.n	8007898 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077b6:	f3ef 8310 	mrs	r3, PRIMASK
 80077ba:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80077bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077be:	67bb      	str	r3, [r7, #120]	; 0x78
 80077c0:	2301      	movs	r3, #1
 80077c2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c6:	f383 8810 	msr	PRIMASK, r3
}
 80077ca:	46c0      	nop			; (mov r8, r8)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	49b4      	ldr	r1, [pc, #720]	; (8007aa8 <HAL_UART_IRQHandler+0x640>)
 80077d8:	400a      	ands	r2, r1
 80077da:	601a      	str	r2, [r3, #0]
 80077dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077de:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e2:	f383 8810 	msr	PRIMASK, r3
}
 80077e6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077e8:	f3ef 8310 	mrs	r3, PRIMASK
 80077ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80077ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077f0:	677b      	str	r3, [r7, #116]	; 0x74
 80077f2:	2301      	movs	r3, #1
 80077f4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077f8:	f383 8810 	msr	PRIMASK, r3
}
 80077fc:	46c0      	nop			; (mov r8, r8)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	689a      	ldr	r2, [r3, #8]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2101      	movs	r1, #1
 800780a:	438a      	bics	r2, r1
 800780c:	609a      	str	r2, [r3, #8]
 800780e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007810:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007814:	f383 8810 	msr	PRIMASK, r3
}
 8007818:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800781a:	f3ef 8310 	mrs	r3, PRIMASK
 800781e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007820:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007822:	673b      	str	r3, [r7, #112]	; 0x70
 8007824:	2301      	movs	r3, #1
 8007826:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800782a:	f383 8810 	msr	PRIMASK, r3
}
 800782e:	46c0      	nop			; (mov r8, r8)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689a      	ldr	r2, [r3, #8]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2140      	movs	r1, #64	; 0x40
 800783c:	438a      	bics	r2, r1
 800783e:	609a      	str	r2, [r3, #8]
 8007840:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007842:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007846:	f383 8810 	msr	PRIMASK, r3
}
 800784a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	228c      	movs	r2, #140	; 0x8c
 8007850:	2120      	movs	r1, #32
 8007852:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800785a:	f3ef 8310 	mrs	r3, PRIMASK
 800785e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007860:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007862:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007864:	2301      	movs	r3, #1
 8007866:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007868:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800786a:	f383 8810 	msr	PRIMASK, r3
}
 800786e:	46c0      	nop			; (mov r8, r8)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2110      	movs	r1, #16
 800787c:	438a      	bics	r2, r1
 800787e:	601a      	str	r2, [r3, #0]
 8007880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007882:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007886:	f383 8810 	msr	PRIMASK, r3
}
 800788a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2280      	movs	r2, #128	; 0x80
 8007890:	589b      	ldr	r3, [r3, r2]
 8007892:	0018      	movs	r0, r3
 8007894:	f7fd f9bc 	bl	8004c10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2202      	movs	r2, #2
 800789c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	225c      	movs	r2, #92	; 0x5c
 80078a2:	5a9a      	ldrh	r2, [r3, r2]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	215e      	movs	r1, #94	; 0x5e
 80078a8:	5a5b      	ldrh	r3, [r3, r1]
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	0011      	movs	r1, r2
 80078b4:	0018      	movs	r0, r3
 80078b6:	f7fb fcc5 	bl	8003244 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078ba:	e0ed      	b.n	8007a98 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	225c      	movs	r2, #92	; 0x5c
 80078c0:	5a99      	ldrh	r1, [r3, r2]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	225e      	movs	r2, #94	; 0x5e
 80078c6:	5a9b      	ldrh	r3, [r3, r2]
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	208e      	movs	r0, #142	; 0x8e
 80078cc:	183b      	adds	r3, r7, r0
 80078ce:	1a8a      	subs	r2, r1, r2
 80078d0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	225e      	movs	r2, #94	; 0x5e
 80078d6:	5a9b      	ldrh	r3, [r3, r2]
 80078d8:	b29b      	uxth	r3, r3
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d100      	bne.n	80078e0 <HAL_UART_IRQHandler+0x478>
 80078de:	e0dd      	b.n	8007a9c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80078e0:	183b      	adds	r3, r7, r0
 80078e2:	881b      	ldrh	r3, [r3, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d100      	bne.n	80078ea <HAL_UART_IRQHandler+0x482>
 80078e8:	e0d8      	b.n	8007a9c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078ea:	f3ef 8310 	mrs	r3, PRIMASK
 80078ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80078f0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078f2:	2488      	movs	r4, #136	; 0x88
 80078f4:	193a      	adds	r2, r7, r4
 80078f6:	6013      	str	r3, [r2, #0]
 80078f8:	2301      	movs	r3, #1
 80078fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	f383 8810 	msr	PRIMASK, r3
}
 8007902:	46c0      	nop			; (mov r8, r8)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4967      	ldr	r1, [pc, #412]	; (8007aac <HAL_UART_IRQHandler+0x644>)
 8007910:	400a      	ands	r2, r1
 8007912:	601a      	str	r2, [r3, #0]
 8007914:	193b      	adds	r3, r7, r4
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	f383 8810 	msr	PRIMASK, r3
}
 8007920:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007922:	f3ef 8310 	mrs	r3, PRIMASK
 8007926:	61bb      	str	r3, [r7, #24]
  return(result);
 8007928:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800792a:	2484      	movs	r4, #132	; 0x84
 800792c:	193a      	adds	r2, r7, r4
 800792e:	6013      	str	r3, [r2, #0]
 8007930:	2301      	movs	r3, #1
 8007932:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	f383 8810 	msr	PRIMASK, r3
}
 800793a:	46c0      	nop			; (mov r8, r8)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	689a      	ldr	r2, [r3, #8]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	495a      	ldr	r1, [pc, #360]	; (8007ab0 <HAL_UART_IRQHandler+0x648>)
 8007948:	400a      	ands	r2, r1
 800794a:	609a      	str	r2, [r3, #8]
 800794c:	193b      	adds	r3, r7, r4
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007952:	6a3b      	ldr	r3, [r7, #32]
 8007954:	f383 8810 	msr	PRIMASK, r3
}
 8007958:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	228c      	movs	r2, #140	; 0x8c
 800795e:	2120      	movs	r1, #32
 8007960:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800796e:	f3ef 8310 	mrs	r3, PRIMASK
 8007972:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007974:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007976:	2480      	movs	r4, #128	; 0x80
 8007978:	193a      	adds	r2, r7, r4
 800797a:	6013      	str	r3, [r2, #0]
 800797c:	2301      	movs	r3, #1
 800797e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007982:	f383 8810 	msr	PRIMASK, r3
}
 8007986:	46c0      	nop			; (mov r8, r8)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2110      	movs	r1, #16
 8007994:	438a      	bics	r2, r1
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	193b      	adds	r3, r7, r4
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800799e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a0:	f383 8810 	msr	PRIMASK, r3
}
 80079a4:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2202      	movs	r2, #2
 80079aa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079ac:	183b      	adds	r3, r7, r0
 80079ae:	881a      	ldrh	r2, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	0011      	movs	r1, r2
 80079b4:	0018      	movs	r0, r3
 80079b6:	f7fb fc45 	bl	8003244 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079ba:	e06f      	b.n	8007a9c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80079bc:	23a4      	movs	r3, #164	; 0xa4
 80079be:	18fb      	adds	r3, r7, r3
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	2380      	movs	r3, #128	; 0x80
 80079c4:	035b      	lsls	r3, r3, #13
 80079c6:	4013      	ands	r3, r2
 80079c8:	d010      	beq.n	80079ec <HAL_UART_IRQHandler+0x584>
 80079ca:	239c      	movs	r3, #156	; 0x9c
 80079cc:	18fb      	adds	r3, r7, r3
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	2380      	movs	r3, #128	; 0x80
 80079d2:	03db      	lsls	r3, r3, #15
 80079d4:	4013      	ands	r3, r2
 80079d6:	d009      	beq.n	80079ec <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2280      	movs	r2, #128	; 0x80
 80079de:	0352      	lsls	r2, r2, #13
 80079e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	0018      	movs	r0, r3
 80079e6:	f001 faed 	bl	8008fc4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079ea:	e05a      	b.n	8007aa2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80079ec:	23a4      	movs	r3, #164	; 0xa4
 80079ee:	18fb      	adds	r3, r7, r3
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2280      	movs	r2, #128	; 0x80
 80079f4:	4013      	ands	r3, r2
 80079f6:	d016      	beq.n	8007a26 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80079f8:	23a0      	movs	r3, #160	; 0xa0
 80079fa:	18fb      	adds	r3, r7, r3
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2280      	movs	r2, #128	; 0x80
 8007a00:	4013      	ands	r3, r2
 8007a02:	d106      	bne.n	8007a12 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007a04:	239c      	movs	r3, #156	; 0x9c
 8007a06:	18fb      	adds	r3, r7, r3
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	2380      	movs	r3, #128	; 0x80
 8007a0c:	041b      	lsls	r3, r3, #16
 8007a0e:	4013      	ands	r3, r2
 8007a10:	d009      	beq.n	8007a26 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d042      	beq.n	8007aa0 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	0010      	movs	r0, r2
 8007a22:	4798      	blx	r3
    }
    return;
 8007a24:	e03c      	b.n	8007aa0 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a26:	23a4      	movs	r3, #164	; 0xa4
 8007a28:	18fb      	adds	r3, r7, r3
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2240      	movs	r2, #64	; 0x40
 8007a2e:	4013      	ands	r3, r2
 8007a30:	d00a      	beq.n	8007a48 <HAL_UART_IRQHandler+0x5e0>
 8007a32:	23a0      	movs	r3, #160	; 0xa0
 8007a34:	18fb      	adds	r3, r7, r3
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2240      	movs	r2, #64	; 0x40
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	d004      	beq.n	8007a48 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	0018      	movs	r0, r3
 8007a42:	f000 fe32 	bl	80086aa <UART_EndTransmit_IT>
    return;
 8007a46:	e02c      	b.n	8007aa2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007a48:	23a4      	movs	r3, #164	; 0xa4
 8007a4a:	18fb      	adds	r3, r7, r3
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	2380      	movs	r3, #128	; 0x80
 8007a50:	041b      	lsls	r3, r3, #16
 8007a52:	4013      	ands	r3, r2
 8007a54:	d00b      	beq.n	8007a6e <HAL_UART_IRQHandler+0x606>
 8007a56:	23a0      	movs	r3, #160	; 0xa0
 8007a58:	18fb      	adds	r3, r7, r3
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	2380      	movs	r3, #128	; 0x80
 8007a5e:	05db      	lsls	r3, r3, #23
 8007a60:	4013      	ands	r3, r2
 8007a62:	d004      	beq.n	8007a6e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	0018      	movs	r0, r3
 8007a68:	f001 fabc 	bl	8008fe4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a6c:	e019      	b.n	8007aa2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007a6e:	23a4      	movs	r3, #164	; 0xa4
 8007a70:	18fb      	adds	r3, r7, r3
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	2380      	movs	r3, #128	; 0x80
 8007a76:	045b      	lsls	r3, r3, #17
 8007a78:	4013      	ands	r3, r2
 8007a7a:	d012      	beq.n	8007aa2 <HAL_UART_IRQHandler+0x63a>
 8007a7c:	23a0      	movs	r3, #160	; 0xa0
 8007a7e:	18fb      	adds	r3, r7, r3
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	da0d      	bge.n	8007aa2 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	0018      	movs	r0, r3
 8007a8a:	f001 faa3 	bl	8008fd4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a8e:	e008      	b.n	8007aa2 <HAL_UART_IRQHandler+0x63a>
      return;
 8007a90:	46c0      	nop			; (mov r8, r8)
 8007a92:	e006      	b.n	8007aa2 <HAL_UART_IRQHandler+0x63a>
    return;
 8007a94:	46c0      	nop			; (mov r8, r8)
 8007a96:	e004      	b.n	8007aa2 <HAL_UART_IRQHandler+0x63a>
      return;
 8007a98:	46c0      	nop			; (mov r8, r8)
 8007a9a:	e002      	b.n	8007aa2 <HAL_UART_IRQHandler+0x63a>
      return;
 8007a9c:	46c0      	nop			; (mov r8, r8)
 8007a9e:	e000      	b.n	8007aa2 <HAL_UART_IRQHandler+0x63a>
    return;
 8007aa0:	46c0      	nop			; (mov r8, r8)
  }
}
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	b02a      	add	sp, #168	; 0xa8
 8007aa6:	bdb0      	pop	{r4, r5, r7, pc}
 8007aa8:	fffffeff 	.word	0xfffffeff
 8007aac:	fffffedf 	.word	0xfffffedf
 8007ab0:	effffffe 	.word	0xeffffffe

08007ab4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007abc:	46c0      	nop			; (mov r8, r8)
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	b002      	add	sp, #8
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007acc:	46c0      	nop			; (mov r8, r8)
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	b002      	add	sp, #8
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007adc:	46c0      	nop			; (mov r8, r8)
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	b002      	add	sp, #8
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ae4:	b5b0      	push	{r4, r5, r7, lr}
 8007ae6:	b090      	sub	sp, #64	; 0x40
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007aec:	231a      	movs	r3, #26
 8007aee:	2220      	movs	r2, #32
 8007af0:	189b      	adds	r3, r3, r2
 8007af2:	19db      	adds	r3, r3, r7
 8007af4:	2200      	movs	r2, #0
 8007af6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afa:	689a      	ldr	r2, [r3, #8]
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	431a      	orrs	r2, r3
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	431a      	orrs	r2, r3
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	69db      	ldr	r3, [r3, #28]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4ac4      	ldr	r2, [pc, #784]	; (8007e28 <UART_SetConfig+0x344>)
 8007b18:	4013      	ands	r3, r2
 8007b1a:	0019      	movs	r1, r3
 8007b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b22:	430b      	orrs	r3, r1
 8007b24:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	4abf      	ldr	r2, [pc, #764]	; (8007e2c <UART_SetConfig+0x348>)
 8007b2e:	4013      	ands	r3, r2
 8007b30:	0018      	movs	r0, r3
 8007b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b34:	68d9      	ldr	r1, [r3, #12]
 8007b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	0003      	movs	r3, r0
 8007b3c:	430b      	orrs	r3, r1
 8007b3e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4ab9      	ldr	r2, [pc, #740]	; (8007e30 <UART_SetConfig+0x34c>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d004      	beq.n	8007b5a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b52:	6a1b      	ldr	r3, [r3, #32]
 8007b54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b56:	4313      	orrs	r3, r2
 8007b58:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	4ab4      	ldr	r2, [pc, #720]	; (8007e34 <UART_SetConfig+0x350>)
 8007b62:	4013      	ands	r3, r2
 8007b64:	0019      	movs	r1, r3
 8007b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b6c:	430b      	orrs	r3, r1
 8007b6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b76:	220f      	movs	r2, #15
 8007b78:	4393      	bics	r3, r2
 8007b7a:	0018      	movs	r0, r3
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	0003      	movs	r3, r0
 8007b86:	430b      	orrs	r3, r1
 8007b88:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4aaa      	ldr	r2, [pc, #680]	; (8007e38 <UART_SetConfig+0x354>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d131      	bne.n	8007bf8 <UART_SetConfig+0x114>
 8007b94:	4ba9      	ldr	r3, [pc, #676]	; (8007e3c <UART_SetConfig+0x358>)
 8007b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b98:	2203      	movs	r2, #3
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d01d      	beq.n	8007bdc <UART_SetConfig+0xf8>
 8007ba0:	d823      	bhi.n	8007bea <UART_SetConfig+0x106>
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d00c      	beq.n	8007bc0 <UART_SetConfig+0xdc>
 8007ba6:	d820      	bhi.n	8007bea <UART_SetConfig+0x106>
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d002      	beq.n	8007bb2 <UART_SetConfig+0xce>
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d00e      	beq.n	8007bce <UART_SetConfig+0xea>
 8007bb0:	e01b      	b.n	8007bea <UART_SetConfig+0x106>
 8007bb2:	231b      	movs	r3, #27
 8007bb4:	2220      	movs	r2, #32
 8007bb6:	189b      	adds	r3, r3, r2
 8007bb8:	19db      	adds	r3, r3, r7
 8007bba:	2200      	movs	r2, #0
 8007bbc:	701a      	strb	r2, [r3, #0]
 8007bbe:	e071      	b.n	8007ca4 <UART_SetConfig+0x1c0>
 8007bc0:	231b      	movs	r3, #27
 8007bc2:	2220      	movs	r2, #32
 8007bc4:	189b      	adds	r3, r3, r2
 8007bc6:	19db      	adds	r3, r3, r7
 8007bc8:	2202      	movs	r2, #2
 8007bca:	701a      	strb	r2, [r3, #0]
 8007bcc:	e06a      	b.n	8007ca4 <UART_SetConfig+0x1c0>
 8007bce:	231b      	movs	r3, #27
 8007bd0:	2220      	movs	r2, #32
 8007bd2:	189b      	adds	r3, r3, r2
 8007bd4:	19db      	adds	r3, r3, r7
 8007bd6:	2204      	movs	r2, #4
 8007bd8:	701a      	strb	r2, [r3, #0]
 8007bda:	e063      	b.n	8007ca4 <UART_SetConfig+0x1c0>
 8007bdc:	231b      	movs	r3, #27
 8007bde:	2220      	movs	r2, #32
 8007be0:	189b      	adds	r3, r3, r2
 8007be2:	19db      	adds	r3, r3, r7
 8007be4:	2208      	movs	r2, #8
 8007be6:	701a      	strb	r2, [r3, #0]
 8007be8:	e05c      	b.n	8007ca4 <UART_SetConfig+0x1c0>
 8007bea:	231b      	movs	r3, #27
 8007bec:	2220      	movs	r2, #32
 8007bee:	189b      	adds	r3, r3, r2
 8007bf0:	19db      	adds	r3, r3, r7
 8007bf2:	2210      	movs	r2, #16
 8007bf4:	701a      	strb	r2, [r3, #0]
 8007bf6:	e055      	b.n	8007ca4 <UART_SetConfig+0x1c0>
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a90      	ldr	r2, [pc, #576]	; (8007e40 <UART_SetConfig+0x35c>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d106      	bne.n	8007c10 <UART_SetConfig+0x12c>
 8007c02:	231b      	movs	r3, #27
 8007c04:	2220      	movs	r2, #32
 8007c06:	189b      	adds	r3, r3, r2
 8007c08:	19db      	adds	r3, r3, r7
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	701a      	strb	r2, [r3, #0]
 8007c0e:	e049      	b.n	8007ca4 <UART_SetConfig+0x1c0>
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a86      	ldr	r2, [pc, #536]	; (8007e30 <UART_SetConfig+0x34c>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d13e      	bne.n	8007c98 <UART_SetConfig+0x1b4>
 8007c1a:	4b88      	ldr	r3, [pc, #544]	; (8007e3c <UART_SetConfig+0x358>)
 8007c1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c1e:	23c0      	movs	r3, #192	; 0xc0
 8007c20:	011b      	lsls	r3, r3, #4
 8007c22:	4013      	ands	r3, r2
 8007c24:	22c0      	movs	r2, #192	; 0xc0
 8007c26:	0112      	lsls	r2, r2, #4
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d027      	beq.n	8007c7c <UART_SetConfig+0x198>
 8007c2c:	22c0      	movs	r2, #192	; 0xc0
 8007c2e:	0112      	lsls	r2, r2, #4
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d82a      	bhi.n	8007c8a <UART_SetConfig+0x1a6>
 8007c34:	2280      	movs	r2, #128	; 0x80
 8007c36:	0112      	lsls	r2, r2, #4
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d011      	beq.n	8007c60 <UART_SetConfig+0x17c>
 8007c3c:	2280      	movs	r2, #128	; 0x80
 8007c3e:	0112      	lsls	r2, r2, #4
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d822      	bhi.n	8007c8a <UART_SetConfig+0x1a6>
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d004      	beq.n	8007c52 <UART_SetConfig+0x16e>
 8007c48:	2280      	movs	r2, #128	; 0x80
 8007c4a:	00d2      	lsls	r2, r2, #3
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d00e      	beq.n	8007c6e <UART_SetConfig+0x18a>
 8007c50:	e01b      	b.n	8007c8a <UART_SetConfig+0x1a6>
 8007c52:	231b      	movs	r3, #27
 8007c54:	2220      	movs	r2, #32
 8007c56:	189b      	adds	r3, r3, r2
 8007c58:	19db      	adds	r3, r3, r7
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	701a      	strb	r2, [r3, #0]
 8007c5e:	e021      	b.n	8007ca4 <UART_SetConfig+0x1c0>
 8007c60:	231b      	movs	r3, #27
 8007c62:	2220      	movs	r2, #32
 8007c64:	189b      	adds	r3, r3, r2
 8007c66:	19db      	adds	r3, r3, r7
 8007c68:	2202      	movs	r2, #2
 8007c6a:	701a      	strb	r2, [r3, #0]
 8007c6c:	e01a      	b.n	8007ca4 <UART_SetConfig+0x1c0>
 8007c6e:	231b      	movs	r3, #27
 8007c70:	2220      	movs	r2, #32
 8007c72:	189b      	adds	r3, r3, r2
 8007c74:	19db      	adds	r3, r3, r7
 8007c76:	2204      	movs	r2, #4
 8007c78:	701a      	strb	r2, [r3, #0]
 8007c7a:	e013      	b.n	8007ca4 <UART_SetConfig+0x1c0>
 8007c7c:	231b      	movs	r3, #27
 8007c7e:	2220      	movs	r2, #32
 8007c80:	189b      	adds	r3, r3, r2
 8007c82:	19db      	adds	r3, r3, r7
 8007c84:	2208      	movs	r2, #8
 8007c86:	701a      	strb	r2, [r3, #0]
 8007c88:	e00c      	b.n	8007ca4 <UART_SetConfig+0x1c0>
 8007c8a:	231b      	movs	r3, #27
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	189b      	adds	r3, r3, r2
 8007c90:	19db      	adds	r3, r3, r7
 8007c92:	2210      	movs	r2, #16
 8007c94:	701a      	strb	r2, [r3, #0]
 8007c96:	e005      	b.n	8007ca4 <UART_SetConfig+0x1c0>
 8007c98:	231b      	movs	r3, #27
 8007c9a:	2220      	movs	r2, #32
 8007c9c:	189b      	adds	r3, r3, r2
 8007c9e:	19db      	adds	r3, r3, r7
 8007ca0:	2210      	movs	r2, #16
 8007ca2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a61      	ldr	r2, [pc, #388]	; (8007e30 <UART_SetConfig+0x34c>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d000      	beq.n	8007cb0 <UART_SetConfig+0x1cc>
 8007cae:	e092      	b.n	8007dd6 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007cb0:	231b      	movs	r3, #27
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	189b      	adds	r3, r3, r2
 8007cb6:	19db      	adds	r3, r3, r7
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	2b08      	cmp	r3, #8
 8007cbc:	d015      	beq.n	8007cea <UART_SetConfig+0x206>
 8007cbe:	dc18      	bgt.n	8007cf2 <UART_SetConfig+0x20e>
 8007cc0:	2b04      	cmp	r3, #4
 8007cc2:	d00d      	beq.n	8007ce0 <UART_SetConfig+0x1fc>
 8007cc4:	dc15      	bgt.n	8007cf2 <UART_SetConfig+0x20e>
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d002      	beq.n	8007cd0 <UART_SetConfig+0x1ec>
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d005      	beq.n	8007cda <UART_SetConfig+0x1f6>
 8007cce:	e010      	b.n	8007cf2 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cd0:	f7fd ffcc 	bl	8005c6c <HAL_RCC_GetPCLK1Freq>
 8007cd4:	0003      	movs	r3, r0
 8007cd6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cd8:	e014      	b.n	8007d04 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cda:	4b5a      	ldr	r3, [pc, #360]	; (8007e44 <UART_SetConfig+0x360>)
 8007cdc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cde:	e011      	b.n	8007d04 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ce0:	f7fd ff38 	bl	8005b54 <HAL_RCC_GetSysClockFreq>
 8007ce4:	0003      	movs	r3, r0
 8007ce6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ce8:	e00c      	b.n	8007d04 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cea:	2380      	movs	r3, #128	; 0x80
 8007cec:	021b      	lsls	r3, r3, #8
 8007cee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cf0:	e008      	b.n	8007d04 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007cf6:	231a      	movs	r3, #26
 8007cf8:	2220      	movs	r2, #32
 8007cfa:	189b      	adds	r3, r3, r2
 8007cfc:	19db      	adds	r3, r3, r7
 8007cfe:	2201      	movs	r2, #1
 8007d00:	701a      	strb	r2, [r3, #0]
        break;
 8007d02:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d100      	bne.n	8007d0c <UART_SetConfig+0x228>
 8007d0a:	e147      	b.n	8007f9c <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d10:	4b4d      	ldr	r3, [pc, #308]	; (8007e48 <UART_SetConfig+0x364>)
 8007d12:	0052      	lsls	r2, r2, #1
 8007d14:	5ad3      	ldrh	r3, [r2, r3]
 8007d16:	0019      	movs	r1, r3
 8007d18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007d1a:	f7f8 fa0f 	bl	800013c <__udivsi3>
 8007d1e:	0003      	movs	r3, r0
 8007d20:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d24:	685a      	ldr	r2, [r3, #4]
 8007d26:	0013      	movs	r3, r2
 8007d28:	005b      	lsls	r3, r3, #1
 8007d2a:	189b      	adds	r3, r3, r2
 8007d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d305      	bcc.n	8007d3e <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d906      	bls.n	8007d4c <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8007d3e:	231a      	movs	r3, #26
 8007d40:	2220      	movs	r2, #32
 8007d42:	189b      	adds	r3, r3, r2
 8007d44:	19db      	adds	r3, r3, r7
 8007d46:	2201      	movs	r2, #1
 8007d48:	701a      	strb	r2, [r3, #0]
 8007d4a:	e127      	b.n	8007f9c <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d4e:	61bb      	str	r3, [r7, #24]
 8007d50:	2300      	movs	r3, #0
 8007d52:	61fb      	str	r3, [r7, #28]
 8007d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d58:	4b3b      	ldr	r3, [pc, #236]	; (8007e48 <UART_SetConfig+0x364>)
 8007d5a:	0052      	lsls	r2, r2, #1
 8007d5c:	5ad3      	ldrh	r3, [r2, r3]
 8007d5e:	613b      	str	r3, [r7, #16]
 8007d60:	2300      	movs	r3, #0
 8007d62:	617b      	str	r3, [r7, #20]
 8007d64:	693a      	ldr	r2, [r7, #16]
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	69b8      	ldr	r0, [r7, #24]
 8007d6a:	69f9      	ldr	r1, [r7, #28]
 8007d6c:	f7f8 fb9a 	bl	80004a4 <__aeabi_uldivmod>
 8007d70:	0002      	movs	r2, r0
 8007d72:	000b      	movs	r3, r1
 8007d74:	0e11      	lsrs	r1, r2, #24
 8007d76:	021d      	lsls	r5, r3, #8
 8007d78:	430d      	orrs	r5, r1
 8007d7a:	0214      	lsls	r4, r2, #8
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	085b      	lsrs	r3, r3, #1
 8007d82:	60bb      	str	r3, [r7, #8]
 8007d84:	2300      	movs	r3, #0
 8007d86:	60fb      	str	r3, [r7, #12]
 8007d88:	68b8      	ldr	r0, [r7, #8]
 8007d8a:	68f9      	ldr	r1, [r7, #12]
 8007d8c:	1900      	adds	r0, r0, r4
 8007d8e:	4169      	adcs	r1, r5
 8007d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	603b      	str	r3, [r7, #0]
 8007d96:	2300      	movs	r3, #0
 8007d98:	607b      	str	r3, [r7, #4]
 8007d9a:	683a      	ldr	r2, [r7, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f7f8 fb81 	bl	80004a4 <__aeabi_uldivmod>
 8007da2:	0002      	movs	r2, r0
 8007da4:	000b      	movs	r3, r1
 8007da6:	0013      	movs	r3, r2
 8007da8:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007daa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dac:	23c0      	movs	r3, #192	; 0xc0
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d309      	bcc.n	8007dc8 <UART_SetConfig+0x2e4>
 8007db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007db6:	2380      	movs	r3, #128	; 0x80
 8007db8:	035b      	lsls	r3, r3, #13
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d204      	bcs.n	8007dc8 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dc4:	60da      	str	r2, [r3, #12]
 8007dc6:	e0e9      	b.n	8007f9c <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8007dc8:	231a      	movs	r3, #26
 8007dca:	2220      	movs	r2, #32
 8007dcc:	189b      	adds	r3, r3, r2
 8007dce:	19db      	adds	r3, r3, r7
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	701a      	strb	r2, [r3, #0]
 8007dd4:	e0e2      	b.n	8007f9c <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd8:	69da      	ldr	r2, [r3, #28]
 8007dda:	2380      	movs	r3, #128	; 0x80
 8007ddc:	021b      	lsls	r3, r3, #8
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d000      	beq.n	8007de4 <UART_SetConfig+0x300>
 8007de2:	e083      	b.n	8007eec <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8007de4:	231b      	movs	r3, #27
 8007de6:	2220      	movs	r2, #32
 8007de8:	189b      	adds	r3, r3, r2
 8007dea:	19db      	adds	r3, r3, r7
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	2b08      	cmp	r3, #8
 8007df0:	d015      	beq.n	8007e1e <UART_SetConfig+0x33a>
 8007df2:	dc2b      	bgt.n	8007e4c <UART_SetConfig+0x368>
 8007df4:	2b04      	cmp	r3, #4
 8007df6:	d00d      	beq.n	8007e14 <UART_SetConfig+0x330>
 8007df8:	dc28      	bgt.n	8007e4c <UART_SetConfig+0x368>
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d002      	beq.n	8007e04 <UART_SetConfig+0x320>
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d005      	beq.n	8007e0e <UART_SetConfig+0x32a>
 8007e02:	e023      	b.n	8007e4c <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e04:	f7fd ff32 	bl	8005c6c <HAL_RCC_GetPCLK1Freq>
 8007e08:	0003      	movs	r3, r0
 8007e0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e0c:	e027      	b.n	8007e5e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e0e:	4b0d      	ldr	r3, [pc, #52]	; (8007e44 <UART_SetConfig+0x360>)
 8007e10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e12:	e024      	b.n	8007e5e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e14:	f7fd fe9e 	bl	8005b54 <HAL_RCC_GetSysClockFreq>
 8007e18:	0003      	movs	r3, r0
 8007e1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e1c:	e01f      	b.n	8007e5e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e1e:	2380      	movs	r3, #128	; 0x80
 8007e20:	021b      	lsls	r3, r3, #8
 8007e22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e24:	e01b      	b.n	8007e5e <UART_SetConfig+0x37a>
 8007e26:	46c0      	nop			; (mov r8, r8)
 8007e28:	cfff69f3 	.word	0xcfff69f3
 8007e2c:	ffffcfff 	.word	0xffffcfff
 8007e30:	40008000 	.word	0x40008000
 8007e34:	11fff4ff 	.word	0x11fff4ff
 8007e38:	40013800 	.word	0x40013800
 8007e3c:	40021000 	.word	0x40021000
 8007e40:	40004400 	.word	0x40004400
 8007e44:	00f42400 	.word	0x00f42400
 8007e48:	0800c130 	.word	0x0800c130
      default:
        pclk = 0U;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007e50:	231a      	movs	r3, #26
 8007e52:	2220      	movs	r2, #32
 8007e54:	189b      	adds	r3, r3, r2
 8007e56:	19db      	adds	r3, r3, r7
 8007e58:	2201      	movs	r2, #1
 8007e5a:	701a      	strb	r2, [r3, #0]
        break;
 8007e5c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d100      	bne.n	8007e66 <UART_SetConfig+0x382>
 8007e64:	e09a      	b.n	8007f9c <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e6a:	4b58      	ldr	r3, [pc, #352]	; (8007fcc <UART_SetConfig+0x4e8>)
 8007e6c:	0052      	lsls	r2, r2, #1
 8007e6e:	5ad3      	ldrh	r3, [r2, r3]
 8007e70:	0019      	movs	r1, r3
 8007e72:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007e74:	f7f8 f962 	bl	800013c <__udivsi3>
 8007e78:	0003      	movs	r3, r0
 8007e7a:	005a      	lsls	r2, r3, #1
 8007e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	085b      	lsrs	r3, r3, #1
 8007e82:	18d2      	adds	r2, r2, r3
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	0019      	movs	r1, r3
 8007e8a:	0010      	movs	r0, r2
 8007e8c:	f7f8 f956 	bl	800013c <__udivsi3>
 8007e90:	0003      	movs	r3, r0
 8007e92:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e96:	2b0f      	cmp	r3, #15
 8007e98:	d921      	bls.n	8007ede <UART_SetConfig+0x3fa>
 8007e9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e9c:	2380      	movs	r3, #128	; 0x80
 8007e9e:	025b      	lsls	r3, r3, #9
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d21c      	bcs.n	8007ede <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	200e      	movs	r0, #14
 8007eaa:	2420      	movs	r4, #32
 8007eac:	1903      	adds	r3, r0, r4
 8007eae:	19db      	adds	r3, r3, r7
 8007eb0:	210f      	movs	r1, #15
 8007eb2:	438a      	bics	r2, r1
 8007eb4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb8:	085b      	lsrs	r3, r3, #1
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	2207      	movs	r2, #7
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	b299      	uxth	r1, r3
 8007ec2:	1903      	adds	r3, r0, r4
 8007ec4:	19db      	adds	r3, r3, r7
 8007ec6:	1902      	adds	r2, r0, r4
 8007ec8:	19d2      	adds	r2, r2, r7
 8007eca:	8812      	ldrh	r2, [r2, #0]
 8007ecc:	430a      	orrs	r2, r1
 8007ece:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	1902      	adds	r2, r0, r4
 8007ed6:	19d2      	adds	r2, r2, r7
 8007ed8:	8812      	ldrh	r2, [r2, #0]
 8007eda:	60da      	str	r2, [r3, #12]
 8007edc:	e05e      	b.n	8007f9c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8007ede:	231a      	movs	r3, #26
 8007ee0:	2220      	movs	r2, #32
 8007ee2:	189b      	adds	r3, r3, r2
 8007ee4:	19db      	adds	r3, r3, r7
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	701a      	strb	r2, [r3, #0]
 8007eea:	e057      	b.n	8007f9c <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007eec:	231b      	movs	r3, #27
 8007eee:	2220      	movs	r2, #32
 8007ef0:	189b      	adds	r3, r3, r2
 8007ef2:	19db      	adds	r3, r3, r7
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	2b08      	cmp	r3, #8
 8007ef8:	d015      	beq.n	8007f26 <UART_SetConfig+0x442>
 8007efa:	dc18      	bgt.n	8007f2e <UART_SetConfig+0x44a>
 8007efc:	2b04      	cmp	r3, #4
 8007efe:	d00d      	beq.n	8007f1c <UART_SetConfig+0x438>
 8007f00:	dc15      	bgt.n	8007f2e <UART_SetConfig+0x44a>
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d002      	beq.n	8007f0c <UART_SetConfig+0x428>
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d005      	beq.n	8007f16 <UART_SetConfig+0x432>
 8007f0a:	e010      	b.n	8007f2e <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f0c:	f7fd feae 	bl	8005c6c <HAL_RCC_GetPCLK1Freq>
 8007f10:	0003      	movs	r3, r0
 8007f12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f14:	e014      	b.n	8007f40 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f16:	4b2e      	ldr	r3, [pc, #184]	; (8007fd0 <UART_SetConfig+0x4ec>)
 8007f18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f1a:	e011      	b.n	8007f40 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f1c:	f7fd fe1a 	bl	8005b54 <HAL_RCC_GetSysClockFreq>
 8007f20:	0003      	movs	r3, r0
 8007f22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f24:	e00c      	b.n	8007f40 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f26:	2380      	movs	r3, #128	; 0x80
 8007f28:	021b      	lsls	r3, r3, #8
 8007f2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f2c:	e008      	b.n	8007f40 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007f32:	231a      	movs	r3, #26
 8007f34:	2220      	movs	r2, #32
 8007f36:	189b      	adds	r3, r3, r2
 8007f38:	19db      	adds	r3, r3, r7
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	701a      	strb	r2, [r3, #0]
        break;
 8007f3e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d02a      	beq.n	8007f9c <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f4a:	4b20      	ldr	r3, [pc, #128]	; (8007fcc <UART_SetConfig+0x4e8>)
 8007f4c:	0052      	lsls	r2, r2, #1
 8007f4e:	5ad3      	ldrh	r3, [r2, r3]
 8007f50:	0019      	movs	r1, r3
 8007f52:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007f54:	f7f8 f8f2 	bl	800013c <__udivsi3>
 8007f58:	0003      	movs	r3, r0
 8007f5a:	001a      	movs	r2, r3
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	085b      	lsrs	r3, r3, #1
 8007f62:	18d2      	adds	r2, r2, r3
 8007f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	0019      	movs	r1, r3
 8007f6a:	0010      	movs	r0, r2
 8007f6c:	f7f8 f8e6 	bl	800013c <__udivsi3>
 8007f70:	0003      	movs	r3, r0
 8007f72:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f76:	2b0f      	cmp	r3, #15
 8007f78:	d90a      	bls.n	8007f90 <UART_SetConfig+0x4ac>
 8007f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f7c:	2380      	movs	r3, #128	; 0x80
 8007f7e:	025b      	lsls	r3, r3, #9
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d205      	bcs.n	8007f90 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	60da      	str	r2, [r3, #12]
 8007f8e:	e005      	b.n	8007f9c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8007f90:	231a      	movs	r3, #26
 8007f92:	2220      	movs	r2, #32
 8007f94:	189b      	adds	r3, r3, r2
 8007f96:	19db      	adds	r3, r3, r7
 8007f98:	2201      	movs	r2, #1
 8007f9a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9e:	226a      	movs	r2, #106	; 0x6a
 8007fa0:	2101      	movs	r1, #1
 8007fa2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa6:	2268      	movs	r2, #104	; 0x68
 8007fa8:	2101      	movs	r1, #1
 8007faa:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	2200      	movs	r2, #0
 8007fb0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007fb8:	231a      	movs	r3, #26
 8007fba:	2220      	movs	r2, #32
 8007fbc:	189b      	adds	r3, r3, r2
 8007fbe:	19db      	adds	r3, r3, r7
 8007fc0:	781b      	ldrb	r3, [r3, #0]
}
 8007fc2:	0018      	movs	r0, r3
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	b010      	add	sp, #64	; 0x40
 8007fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8007fca:	46c0      	nop			; (mov r8, r8)
 8007fcc:	0800c130 	.word	0x0800c130
 8007fd0:	00f42400 	.word	0x00f42400

08007fd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	d00b      	beq.n	8007ffe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	4a4a      	ldr	r2, [pc, #296]	; (8008118 <UART_AdvFeatureConfig+0x144>)
 8007fee:	4013      	ands	r3, r2
 8007ff0:	0019      	movs	r1, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008002:	2202      	movs	r2, #2
 8008004:	4013      	ands	r3, r2
 8008006:	d00b      	beq.n	8008020 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	4a43      	ldr	r2, [pc, #268]	; (800811c <UART_AdvFeatureConfig+0x148>)
 8008010:	4013      	ands	r3, r2
 8008012:	0019      	movs	r1, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	430a      	orrs	r2, r1
 800801e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008024:	2204      	movs	r2, #4
 8008026:	4013      	ands	r3, r2
 8008028:	d00b      	beq.n	8008042 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	4a3b      	ldr	r2, [pc, #236]	; (8008120 <UART_AdvFeatureConfig+0x14c>)
 8008032:	4013      	ands	r3, r2
 8008034:	0019      	movs	r1, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	430a      	orrs	r2, r1
 8008040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008046:	2208      	movs	r2, #8
 8008048:	4013      	ands	r3, r2
 800804a:	d00b      	beq.n	8008064 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	4a34      	ldr	r2, [pc, #208]	; (8008124 <UART_AdvFeatureConfig+0x150>)
 8008054:	4013      	ands	r3, r2
 8008056:	0019      	movs	r1, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	430a      	orrs	r2, r1
 8008062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008068:	2210      	movs	r2, #16
 800806a:	4013      	ands	r3, r2
 800806c:	d00b      	beq.n	8008086 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	4a2c      	ldr	r2, [pc, #176]	; (8008128 <UART_AdvFeatureConfig+0x154>)
 8008076:	4013      	ands	r3, r2
 8008078:	0019      	movs	r1, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	430a      	orrs	r2, r1
 8008084:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808a:	2220      	movs	r2, #32
 800808c:	4013      	ands	r3, r2
 800808e:	d00b      	beq.n	80080a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	4a25      	ldr	r2, [pc, #148]	; (800812c <UART_AdvFeatureConfig+0x158>)
 8008098:	4013      	ands	r3, r2
 800809a:	0019      	movs	r1, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	430a      	orrs	r2, r1
 80080a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ac:	2240      	movs	r2, #64	; 0x40
 80080ae:	4013      	ands	r3, r2
 80080b0:	d01d      	beq.n	80080ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	4a1d      	ldr	r2, [pc, #116]	; (8008130 <UART_AdvFeatureConfig+0x15c>)
 80080ba:	4013      	ands	r3, r2
 80080bc:	0019      	movs	r1, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	430a      	orrs	r2, r1
 80080c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080ce:	2380      	movs	r3, #128	; 0x80
 80080d0:	035b      	lsls	r3, r3, #13
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d10b      	bne.n	80080ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	4a15      	ldr	r2, [pc, #84]	; (8008134 <UART_AdvFeatureConfig+0x160>)
 80080de:	4013      	ands	r3, r2
 80080e0:	0019      	movs	r1, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	430a      	orrs	r2, r1
 80080ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f2:	2280      	movs	r2, #128	; 0x80
 80080f4:	4013      	ands	r3, r2
 80080f6:	d00b      	beq.n	8008110 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	4a0e      	ldr	r2, [pc, #56]	; (8008138 <UART_AdvFeatureConfig+0x164>)
 8008100:	4013      	ands	r3, r2
 8008102:	0019      	movs	r1, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	430a      	orrs	r2, r1
 800810e:	605a      	str	r2, [r3, #4]
  }
}
 8008110:	46c0      	nop			; (mov r8, r8)
 8008112:	46bd      	mov	sp, r7
 8008114:	b002      	add	sp, #8
 8008116:	bd80      	pop	{r7, pc}
 8008118:	fffdffff 	.word	0xfffdffff
 800811c:	fffeffff 	.word	0xfffeffff
 8008120:	fffbffff 	.word	0xfffbffff
 8008124:	ffff7fff 	.word	0xffff7fff
 8008128:	ffffefff 	.word	0xffffefff
 800812c:	ffffdfff 	.word	0xffffdfff
 8008130:	ffefffff 	.word	0xffefffff
 8008134:	ff9fffff 	.word	0xff9fffff
 8008138:	fff7ffff 	.word	0xfff7ffff

0800813c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b086      	sub	sp, #24
 8008140:	af02      	add	r7, sp, #8
 8008142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2290      	movs	r2, #144	; 0x90
 8008148:	2100      	movs	r1, #0
 800814a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800814c:	f7fc fc78 	bl	8004a40 <HAL_GetTick>
 8008150:	0003      	movs	r3, r0
 8008152:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2208      	movs	r2, #8
 800815c:	4013      	ands	r3, r2
 800815e:	2b08      	cmp	r3, #8
 8008160:	d10c      	bne.n	800817c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2280      	movs	r2, #128	; 0x80
 8008166:	0391      	lsls	r1, r2, #14
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	4a1a      	ldr	r2, [pc, #104]	; (80081d4 <UART_CheckIdleState+0x98>)
 800816c:	9200      	str	r2, [sp, #0]
 800816e:	2200      	movs	r2, #0
 8008170:	f000 f832 	bl	80081d8 <UART_WaitOnFlagUntilTimeout>
 8008174:	1e03      	subs	r3, r0, #0
 8008176:	d001      	beq.n	800817c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008178:	2303      	movs	r3, #3
 800817a:	e026      	b.n	80081ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2204      	movs	r2, #4
 8008184:	4013      	ands	r3, r2
 8008186:	2b04      	cmp	r3, #4
 8008188:	d10c      	bne.n	80081a4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2280      	movs	r2, #128	; 0x80
 800818e:	03d1      	lsls	r1, r2, #15
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	4a10      	ldr	r2, [pc, #64]	; (80081d4 <UART_CheckIdleState+0x98>)
 8008194:	9200      	str	r2, [sp, #0]
 8008196:	2200      	movs	r2, #0
 8008198:	f000 f81e 	bl	80081d8 <UART_WaitOnFlagUntilTimeout>
 800819c:	1e03      	subs	r3, r0, #0
 800819e:	d001      	beq.n	80081a4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e012      	b.n	80081ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2288      	movs	r2, #136	; 0x88
 80081a8:	2120      	movs	r1, #32
 80081aa:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	228c      	movs	r2, #140	; 0x8c
 80081b0:	2120      	movs	r1, #32
 80081b2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2284      	movs	r2, #132	; 0x84
 80081c4:	2100      	movs	r1, #0
 80081c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	0018      	movs	r0, r3
 80081cc:	46bd      	mov	sp, r7
 80081ce:	b004      	add	sp, #16
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	46c0      	nop			; (mov r8, r8)
 80081d4:	01ffffff 	.word	0x01ffffff

080081d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b094      	sub	sp, #80	; 0x50
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	603b      	str	r3, [r7, #0]
 80081e4:	1dfb      	adds	r3, r7, #7
 80081e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081e8:	e0a7      	b.n	800833a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081ec:	3301      	adds	r3, #1
 80081ee:	d100      	bne.n	80081f2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80081f0:	e0a3      	b.n	800833a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081f2:	f7fc fc25 	bl	8004a40 <HAL_GetTick>
 80081f6:	0002      	movs	r2, r0
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	1ad3      	subs	r3, r2, r3
 80081fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081fe:	429a      	cmp	r2, r3
 8008200:	d302      	bcc.n	8008208 <UART_WaitOnFlagUntilTimeout+0x30>
 8008202:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008204:	2b00      	cmp	r3, #0
 8008206:	d13f      	bne.n	8008288 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008208:	f3ef 8310 	mrs	r3, PRIMASK
 800820c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800820e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008210:	647b      	str	r3, [r7, #68]	; 0x44
 8008212:	2301      	movs	r3, #1
 8008214:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008218:	f383 8810 	msr	PRIMASK, r3
}
 800821c:	46c0      	nop			; (mov r8, r8)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	494e      	ldr	r1, [pc, #312]	; (8008364 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800822a:	400a      	ands	r2, r1
 800822c:	601a      	str	r2, [r3, #0]
 800822e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008230:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008234:	f383 8810 	msr	PRIMASK, r3
}
 8008238:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800823a:	f3ef 8310 	mrs	r3, PRIMASK
 800823e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008242:	643b      	str	r3, [r7, #64]	; 0x40
 8008244:	2301      	movs	r3, #1
 8008246:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824a:	f383 8810 	msr	PRIMASK, r3
}
 800824e:	46c0      	nop			; (mov r8, r8)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	689a      	ldr	r2, [r3, #8]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2101      	movs	r1, #1
 800825c:	438a      	bics	r2, r1
 800825e:	609a      	str	r2, [r3, #8]
 8008260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008262:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008266:	f383 8810 	msr	PRIMASK, r3
}
 800826a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2288      	movs	r2, #136	; 0x88
 8008270:	2120      	movs	r1, #32
 8008272:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	228c      	movs	r2, #140	; 0x8c
 8008278:	2120      	movs	r1, #32
 800827a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2284      	movs	r2, #132	; 0x84
 8008280:	2100      	movs	r1, #0
 8008282:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	e069      	b.n	800835c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2204      	movs	r2, #4
 8008290:	4013      	ands	r3, r2
 8008292:	d052      	beq.n	800833a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	69da      	ldr	r2, [r3, #28]
 800829a:	2380      	movs	r3, #128	; 0x80
 800829c:	011b      	lsls	r3, r3, #4
 800829e:	401a      	ands	r2, r3
 80082a0:	2380      	movs	r3, #128	; 0x80
 80082a2:	011b      	lsls	r3, r3, #4
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d148      	bne.n	800833a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2280      	movs	r2, #128	; 0x80
 80082ae:	0112      	lsls	r2, r2, #4
 80082b0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082b2:	f3ef 8310 	mrs	r3, PRIMASK
 80082b6:	613b      	str	r3, [r7, #16]
  return(result);
 80082b8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80082ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082bc:	2301      	movs	r3, #1
 80082be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	f383 8810 	msr	PRIMASK, r3
}
 80082c6:	46c0      	nop			; (mov r8, r8)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4924      	ldr	r1, [pc, #144]	; (8008364 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80082d4:	400a      	ands	r2, r1
 80082d6:	601a      	str	r2, [r3, #0]
 80082d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	f383 8810 	msr	PRIMASK, r3
}
 80082e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082e4:	f3ef 8310 	mrs	r3, PRIMASK
 80082e8:	61fb      	str	r3, [r7, #28]
  return(result);
 80082ea:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80082ee:	2301      	movs	r3, #1
 80082f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082f2:	6a3b      	ldr	r3, [r7, #32]
 80082f4:	f383 8810 	msr	PRIMASK, r3
}
 80082f8:	46c0      	nop			; (mov r8, r8)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	689a      	ldr	r2, [r3, #8]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2101      	movs	r1, #1
 8008306:	438a      	bics	r2, r1
 8008308:	609a      	str	r2, [r3, #8]
 800830a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800830c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800830e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008310:	f383 8810 	msr	PRIMASK, r3
}
 8008314:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2288      	movs	r2, #136	; 0x88
 800831a:	2120      	movs	r1, #32
 800831c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	228c      	movs	r2, #140	; 0x8c
 8008322:	2120      	movs	r1, #32
 8008324:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2290      	movs	r2, #144	; 0x90
 800832a:	2120      	movs	r1, #32
 800832c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2284      	movs	r2, #132	; 0x84
 8008332:	2100      	movs	r1, #0
 8008334:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e010      	b.n	800835c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	69db      	ldr	r3, [r3, #28]
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	4013      	ands	r3, r2
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	425a      	negs	r2, r3
 800834a:	4153      	adcs	r3, r2
 800834c:	b2db      	uxtb	r3, r3
 800834e:	001a      	movs	r2, r3
 8008350:	1dfb      	adds	r3, r7, #7
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	429a      	cmp	r2, r3
 8008356:	d100      	bne.n	800835a <UART_WaitOnFlagUntilTimeout+0x182>
 8008358:	e747      	b.n	80081ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	0018      	movs	r0, r3
 800835e:	46bd      	mov	sp, r7
 8008360:	b014      	add	sp, #80	; 0x50
 8008362:	bd80      	pop	{r7, pc}
 8008364:	fffffe5f 	.word	0xfffffe5f

08008368 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b098      	sub	sp, #96	; 0x60
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	1dbb      	adds	r3, r7, #6
 8008374:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	1dba      	adds	r2, r7, #6
 8008380:	215c      	movs	r1, #92	; 0x5c
 8008382:	8812      	ldrh	r2, [r2, #0]
 8008384:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	1dba      	adds	r2, r7, #6
 800838a:	215e      	movs	r1, #94	; 0x5e
 800838c:	8812      	ldrh	r2, [r2, #0]
 800838e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	689a      	ldr	r2, [r3, #8]
 800839a:	2380      	movs	r3, #128	; 0x80
 800839c:	015b      	lsls	r3, r3, #5
 800839e:	429a      	cmp	r2, r3
 80083a0:	d10d      	bne.n	80083be <UART_Start_Receive_IT+0x56>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d104      	bne.n	80083b4 <UART_Start_Receive_IT+0x4c>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2260      	movs	r2, #96	; 0x60
 80083ae:	497b      	ldr	r1, [pc, #492]	; (800859c <UART_Start_Receive_IT+0x234>)
 80083b0:	5299      	strh	r1, [r3, r2]
 80083b2:	e02e      	b.n	8008412 <UART_Start_Receive_IT+0xaa>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2260      	movs	r2, #96	; 0x60
 80083b8:	21ff      	movs	r1, #255	; 0xff
 80083ba:	5299      	strh	r1, [r3, r2]
 80083bc:	e029      	b.n	8008412 <UART_Start_Receive_IT+0xaa>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10d      	bne.n	80083e2 <UART_Start_Receive_IT+0x7a>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d104      	bne.n	80083d8 <UART_Start_Receive_IT+0x70>
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2260      	movs	r2, #96	; 0x60
 80083d2:	21ff      	movs	r1, #255	; 0xff
 80083d4:	5299      	strh	r1, [r3, r2]
 80083d6:	e01c      	b.n	8008412 <UART_Start_Receive_IT+0xaa>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2260      	movs	r2, #96	; 0x60
 80083dc:	217f      	movs	r1, #127	; 0x7f
 80083de:	5299      	strh	r1, [r3, r2]
 80083e0:	e017      	b.n	8008412 <UART_Start_Receive_IT+0xaa>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	689a      	ldr	r2, [r3, #8]
 80083e6:	2380      	movs	r3, #128	; 0x80
 80083e8:	055b      	lsls	r3, r3, #21
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d10d      	bne.n	800840a <UART_Start_Receive_IT+0xa2>
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d104      	bne.n	8008400 <UART_Start_Receive_IT+0x98>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2260      	movs	r2, #96	; 0x60
 80083fa:	217f      	movs	r1, #127	; 0x7f
 80083fc:	5299      	strh	r1, [r3, r2]
 80083fe:	e008      	b.n	8008412 <UART_Start_Receive_IT+0xaa>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2260      	movs	r2, #96	; 0x60
 8008404:	213f      	movs	r1, #63	; 0x3f
 8008406:	5299      	strh	r1, [r3, r2]
 8008408:	e003      	b.n	8008412 <UART_Start_Receive_IT+0xaa>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2260      	movs	r2, #96	; 0x60
 800840e:	2100      	movs	r1, #0
 8008410:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2290      	movs	r2, #144	; 0x90
 8008416:	2100      	movs	r1, #0
 8008418:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	228c      	movs	r2, #140	; 0x8c
 800841e:	2122      	movs	r1, #34	; 0x22
 8008420:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008422:	f3ef 8310 	mrs	r3, PRIMASK
 8008426:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8008428:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800842a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800842c:	2301      	movs	r3, #1
 800842e:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008432:	f383 8810 	msr	PRIMASK, r3
}
 8008436:	46c0      	nop			; (mov r8, r8)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	689a      	ldr	r2, [r3, #8]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2101      	movs	r1, #1
 8008444:	430a      	orrs	r2, r1
 8008446:	609a      	str	r2, [r3, #8]
 8008448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800844a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800844c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800844e:	f383 8810 	msr	PRIMASK, r3
}
 8008452:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008458:	2380      	movs	r3, #128	; 0x80
 800845a:	059b      	lsls	r3, r3, #22
 800845c:	429a      	cmp	r2, r3
 800845e:	d150      	bne.n	8008502 <UART_Start_Receive_IT+0x19a>
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2268      	movs	r2, #104	; 0x68
 8008464:	5a9b      	ldrh	r3, [r3, r2]
 8008466:	1dba      	adds	r2, r7, #6
 8008468:	8812      	ldrh	r2, [r2, #0]
 800846a:	429a      	cmp	r2, r3
 800846c:	d349      	bcc.n	8008502 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	689a      	ldr	r2, [r3, #8]
 8008472:	2380      	movs	r3, #128	; 0x80
 8008474:	015b      	lsls	r3, r3, #5
 8008476:	429a      	cmp	r2, r3
 8008478:	d107      	bne.n	800848a <UART_Start_Receive_IT+0x122>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d103      	bne.n	800848a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	4a46      	ldr	r2, [pc, #280]	; (80085a0 <UART_Start_Receive_IT+0x238>)
 8008486:	675a      	str	r2, [r3, #116]	; 0x74
 8008488:	e002      	b.n	8008490 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	4a45      	ldr	r2, [pc, #276]	; (80085a4 <UART_Start_Receive_IT+0x23c>)
 800848e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d019      	beq.n	80084cc <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008498:	f3ef 8310 	mrs	r3, PRIMASK
 800849c:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800849e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80084a2:	2301      	movs	r3, #1
 80084a4:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a8:	f383 8810 	msr	PRIMASK, r3
}
 80084ac:	46c0      	nop			; (mov r8, r8)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2180      	movs	r1, #128	; 0x80
 80084ba:	0049      	lsls	r1, r1, #1
 80084bc:	430a      	orrs	r2, r1
 80084be:	601a      	str	r2, [r3, #0]
 80084c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084c6:	f383 8810 	msr	PRIMASK, r3
}
 80084ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084cc:	f3ef 8310 	mrs	r3, PRIMASK
 80084d0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80084d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80084d4:	657b      	str	r3, [r7, #84]	; 0x54
 80084d6:	2301      	movs	r3, #1
 80084d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084dc:	f383 8810 	msr	PRIMASK, r3
}
 80084e0:	46c0      	nop			; (mov r8, r8)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	689a      	ldr	r2, [r3, #8]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2180      	movs	r1, #128	; 0x80
 80084ee:	0549      	lsls	r1, r1, #21
 80084f0:	430a      	orrs	r2, r1
 80084f2:	609a      	str	r2, [r3, #8]
 80084f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084f6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fa:	f383 8810 	msr	PRIMASK, r3
}
 80084fe:	46c0      	nop			; (mov r8, r8)
 8008500:	e047      	b.n	8008592 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	689a      	ldr	r2, [r3, #8]
 8008506:	2380      	movs	r3, #128	; 0x80
 8008508:	015b      	lsls	r3, r3, #5
 800850a:	429a      	cmp	r2, r3
 800850c:	d107      	bne.n	800851e <UART_Start_Receive_IT+0x1b6>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d103      	bne.n	800851e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	4a23      	ldr	r2, [pc, #140]	; (80085a8 <UART_Start_Receive_IT+0x240>)
 800851a:	675a      	str	r2, [r3, #116]	; 0x74
 800851c:	e002      	b.n	8008524 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	4a22      	ldr	r2, [pc, #136]	; (80085ac <UART_Start_Receive_IT+0x244>)
 8008522:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d019      	beq.n	8008560 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800852c:	f3ef 8310 	mrs	r3, PRIMASK
 8008530:	61fb      	str	r3, [r7, #28]
  return(result);
 8008532:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008534:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008536:	2301      	movs	r3, #1
 8008538:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800853a:	6a3b      	ldr	r3, [r7, #32]
 800853c:	f383 8810 	msr	PRIMASK, r3
}
 8008540:	46c0      	nop			; (mov r8, r8)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2190      	movs	r1, #144	; 0x90
 800854e:	0049      	lsls	r1, r1, #1
 8008550:	430a      	orrs	r2, r1
 8008552:	601a      	str	r2, [r3, #0]
 8008554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008556:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855a:	f383 8810 	msr	PRIMASK, r3
}
 800855e:	e018      	b.n	8008592 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008560:	f3ef 8310 	mrs	r3, PRIMASK
 8008564:	613b      	str	r3, [r7, #16]
  return(result);
 8008566:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008568:	653b      	str	r3, [r7, #80]	; 0x50
 800856a:	2301      	movs	r3, #1
 800856c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	f383 8810 	msr	PRIMASK, r3
}
 8008574:	46c0      	nop			; (mov r8, r8)
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2120      	movs	r1, #32
 8008582:	430a      	orrs	r2, r1
 8008584:	601a      	str	r2, [r3, #0]
 8008586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008588:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	f383 8810 	msr	PRIMASK, r3
}
 8008590:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	0018      	movs	r0, r3
 8008596:	46bd      	mov	sp, r7
 8008598:	b018      	add	sp, #96	; 0x60
 800859a:	bd80      	pop	{r7, pc}
 800859c:	000001ff 	.word	0x000001ff
 80085a0:	08008cd9 	.word	0x08008cd9
 80085a4:	080089ed 	.word	0x080089ed
 80085a8:	08008879 	.word	0x08008879
 80085ac:	08008705 	.word	0x08008705

080085b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b08e      	sub	sp, #56	; 0x38
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085b8:	f3ef 8310 	mrs	r3, PRIMASK
 80085bc:	617b      	str	r3, [r7, #20]
  return(result);
 80085be:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085c0:	637b      	str	r3, [r7, #52]	; 0x34
 80085c2:	2301      	movs	r3, #1
 80085c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	f383 8810 	msr	PRIMASK, r3
}
 80085cc:	46c0      	nop			; (mov r8, r8)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4926      	ldr	r1, [pc, #152]	; (8008674 <UART_EndRxTransfer+0xc4>)
 80085da:	400a      	ands	r2, r1
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	f383 8810 	msr	PRIMASK, r3
}
 80085e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085ea:	f3ef 8310 	mrs	r3, PRIMASK
 80085ee:	623b      	str	r3, [r7, #32]
  return(result);
 80085f0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085f2:	633b      	str	r3, [r7, #48]	; 0x30
 80085f4:	2301      	movs	r3, #1
 80085f6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fa:	f383 8810 	msr	PRIMASK, r3
}
 80085fe:	46c0      	nop			; (mov r8, r8)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	689a      	ldr	r2, [r3, #8]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	491b      	ldr	r1, [pc, #108]	; (8008678 <UART_EndRxTransfer+0xc8>)
 800860c:	400a      	ands	r2, r1
 800860e:	609a      	str	r2, [r3, #8]
 8008610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008612:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008616:	f383 8810 	msr	PRIMASK, r3
}
 800861a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008620:	2b01      	cmp	r3, #1
 8008622:	d118      	bne.n	8008656 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008624:	f3ef 8310 	mrs	r3, PRIMASK
 8008628:	60bb      	str	r3, [r7, #8]
  return(result);
 800862a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800862c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800862e:	2301      	movs	r3, #1
 8008630:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f383 8810 	msr	PRIMASK, r3
}
 8008638:	46c0      	nop			; (mov r8, r8)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2110      	movs	r1, #16
 8008646:	438a      	bics	r2, r1
 8008648:	601a      	str	r2, [r3, #0]
 800864a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800864c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	f383 8810 	msr	PRIMASK, r3
}
 8008654:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	228c      	movs	r2, #140	; 0x8c
 800865a:	2120      	movs	r1, #32
 800865c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	675a      	str	r2, [r3, #116]	; 0x74
}
 800866a:	46c0      	nop			; (mov r8, r8)
 800866c:	46bd      	mov	sp, r7
 800866e:	b00e      	add	sp, #56	; 0x38
 8008670:	bd80      	pop	{r7, pc}
 8008672:	46c0      	nop			; (mov r8, r8)
 8008674:	fffffedf 	.word	0xfffffedf
 8008678:	effffffe 	.word	0xeffffffe

0800867c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008688:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	225e      	movs	r2, #94	; 0x5e
 800868e:	2100      	movs	r1, #0
 8008690:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2256      	movs	r2, #86	; 0x56
 8008696:	2100      	movs	r1, #0
 8008698:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	0018      	movs	r0, r3
 800869e:	f7ff fa19 	bl	8007ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086a2:	46c0      	nop			; (mov r8, r8)
 80086a4:	46bd      	mov	sp, r7
 80086a6:	b004      	add	sp, #16
 80086a8:	bd80      	pop	{r7, pc}

080086aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b086      	sub	sp, #24
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086b2:	f3ef 8310 	mrs	r3, PRIMASK
 80086b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80086b8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086ba:	617b      	str	r3, [r7, #20]
 80086bc:	2301      	movs	r3, #1
 80086be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f383 8810 	msr	PRIMASK, r3
}
 80086c6:	46c0      	nop			; (mov r8, r8)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2140      	movs	r1, #64	; 0x40
 80086d4:	438a      	bics	r2, r1
 80086d6:	601a      	str	r2, [r3, #0]
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	f383 8810 	msr	PRIMASK, r3
}
 80086e2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2288      	movs	r2, #136	; 0x88
 80086e8:	2120      	movs	r1, #32
 80086ea:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	0018      	movs	r0, r3
 80086f6:	f7ff f9dd 	bl	8007ab4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086fa:	46c0      	nop			; (mov r8, r8)
 80086fc:	46bd      	mov	sp, r7
 80086fe:	b006      	add	sp, #24
 8008700:	bd80      	pop	{r7, pc}
	...

08008704 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b090      	sub	sp, #64	; 0x40
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800870c:	203e      	movs	r0, #62	; 0x3e
 800870e:	183b      	adds	r3, r7, r0
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	2160      	movs	r1, #96	; 0x60
 8008714:	5a52      	ldrh	r2, [r2, r1]
 8008716:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	228c      	movs	r2, #140	; 0x8c
 800871c:	589b      	ldr	r3, [r3, r2]
 800871e:	2b22      	cmp	r3, #34	; 0x22
 8008720:	d000      	beq.n	8008724 <UART_RxISR_8BIT+0x20>
 8008722:	e09a      	b.n	800885a <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800872a:	213c      	movs	r1, #60	; 0x3c
 800872c:	187b      	adds	r3, r7, r1
 800872e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008730:	187b      	adds	r3, r7, r1
 8008732:	881b      	ldrh	r3, [r3, #0]
 8008734:	b2da      	uxtb	r2, r3
 8008736:	183b      	adds	r3, r7, r0
 8008738:	881b      	ldrh	r3, [r3, #0]
 800873a:	b2d9      	uxtb	r1, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008740:	400a      	ands	r2, r1
 8008742:	b2d2      	uxtb	r2, r2
 8008744:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800874a:	1c5a      	adds	r2, r3, #1
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	225e      	movs	r2, #94	; 0x5e
 8008754:	5a9b      	ldrh	r3, [r3, r2]
 8008756:	b29b      	uxth	r3, r3
 8008758:	3b01      	subs	r3, #1
 800875a:	b299      	uxth	r1, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	225e      	movs	r2, #94	; 0x5e
 8008760:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	225e      	movs	r2, #94	; 0x5e
 8008766:	5a9b      	ldrh	r3, [r3, r2]
 8008768:	b29b      	uxth	r3, r3
 800876a:	2b00      	cmp	r3, #0
 800876c:	d000      	beq.n	8008770 <UART_RxISR_8BIT+0x6c>
 800876e:	e07c      	b.n	800886a <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008770:	f3ef 8310 	mrs	r3, PRIMASK
 8008774:	61bb      	str	r3, [r7, #24]
  return(result);
 8008776:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008778:	63bb      	str	r3, [r7, #56]	; 0x38
 800877a:	2301      	movs	r3, #1
 800877c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	f383 8810 	msr	PRIMASK, r3
}
 8008784:	46c0      	nop			; (mov r8, r8)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4938      	ldr	r1, [pc, #224]	; (8008874 <UART_RxISR_8BIT+0x170>)
 8008792:	400a      	ands	r2, r1
 8008794:	601a      	str	r2, [r3, #0]
 8008796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008798:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800879a:	6a3b      	ldr	r3, [r7, #32]
 800879c:	f383 8810 	msr	PRIMASK, r3
}
 80087a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087a2:	f3ef 8310 	mrs	r3, PRIMASK
 80087a6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80087a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087aa:	637b      	str	r3, [r7, #52]	; 0x34
 80087ac:	2301      	movs	r3, #1
 80087ae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b2:	f383 8810 	msr	PRIMASK, r3
}
 80087b6:	46c0      	nop			; (mov r8, r8)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	689a      	ldr	r2, [r3, #8]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2101      	movs	r1, #1
 80087c4:	438a      	bics	r2, r1
 80087c6:	609a      	str	r2, [r3, #8]
 80087c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ce:	f383 8810 	msr	PRIMASK, r3
}
 80087d2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	228c      	movs	r2, #140	; 0x8c
 80087d8:	2120      	movs	r1, #32
 80087da:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d12f      	bne.n	8008850 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087f6:	f3ef 8310 	mrs	r3, PRIMASK
 80087fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80087fc:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087fe:	633b      	str	r3, [r7, #48]	; 0x30
 8008800:	2301      	movs	r3, #1
 8008802:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	f383 8810 	msr	PRIMASK, r3
}
 800880a:	46c0      	nop			; (mov r8, r8)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2110      	movs	r1, #16
 8008818:	438a      	bics	r2, r1
 800881a:	601a      	str	r2, [r3, #0]
 800881c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	f383 8810 	msr	PRIMASK, r3
}
 8008826:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	69db      	ldr	r3, [r3, #28]
 800882e:	2210      	movs	r2, #16
 8008830:	4013      	ands	r3, r2
 8008832:	2b10      	cmp	r3, #16
 8008834:	d103      	bne.n	800883e <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2210      	movs	r2, #16
 800883c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	225c      	movs	r2, #92	; 0x5c
 8008842:	5a9a      	ldrh	r2, [r3, r2]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	0011      	movs	r1, r2
 8008848:	0018      	movs	r0, r3
 800884a:	f7fa fcfb 	bl	8003244 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800884e:	e00c      	b.n	800886a <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	0018      	movs	r0, r3
 8008854:	f7ff f936 	bl	8007ac4 <HAL_UART_RxCpltCallback>
}
 8008858:	e007      	b.n	800886a <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	699a      	ldr	r2, [r3, #24]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2108      	movs	r1, #8
 8008866:	430a      	orrs	r2, r1
 8008868:	619a      	str	r2, [r3, #24]
}
 800886a:	46c0      	nop			; (mov r8, r8)
 800886c:	46bd      	mov	sp, r7
 800886e:	b010      	add	sp, #64	; 0x40
 8008870:	bd80      	pop	{r7, pc}
 8008872:	46c0      	nop			; (mov r8, r8)
 8008874:	fffffedf 	.word	0xfffffedf

08008878 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b090      	sub	sp, #64	; 0x40
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008880:	203e      	movs	r0, #62	; 0x3e
 8008882:	183b      	adds	r3, r7, r0
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	2160      	movs	r1, #96	; 0x60
 8008888:	5a52      	ldrh	r2, [r2, r1]
 800888a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	228c      	movs	r2, #140	; 0x8c
 8008890:	589b      	ldr	r3, [r3, r2]
 8008892:	2b22      	cmp	r3, #34	; 0x22
 8008894:	d000      	beq.n	8008898 <UART_RxISR_16BIT+0x20>
 8008896:	e09a      	b.n	80089ce <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800889e:	213c      	movs	r1, #60	; 0x3c
 80088a0:	187b      	adds	r3, r7, r1
 80088a2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088a8:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80088aa:	187b      	adds	r3, r7, r1
 80088ac:	183a      	adds	r2, r7, r0
 80088ae:	881b      	ldrh	r3, [r3, #0]
 80088b0:	8812      	ldrh	r2, [r2, #0]
 80088b2:	4013      	ands	r3, r2
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088be:	1c9a      	adds	r2, r3, #2
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	225e      	movs	r2, #94	; 0x5e
 80088c8:	5a9b      	ldrh	r3, [r3, r2]
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	3b01      	subs	r3, #1
 80088ce:	b299      	uxth	r1, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	225e      	movs	r2, #94	; 0x5e
 80088d4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	225e      	movs	r2, #94	; 0x5e
 80088da:	5a9b      	ldrh	r3, [r3, r2]
 80088dc:	b29b      	uxth	r3, r3
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d000      	beq.n	80088e4 <UART_RxISR_16BIT+0x6c>
 80088e2:	e07c      	b.n	80089de <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088e4:	f3ef 8310 	mrs	r3, PRIMASK
 80088e8:	617b      	str	r3, [r7, #20]
  return(result);
 80088ea:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088ec:	637b      	str	r3, [r7, #52]	; 0x34
 80088ee:	2301      	movs	r3, #1
 80088f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	f383 8810 	msr	PRIMASK, r3
}
 80088f8:	46c0      	nop			; (mov r8, r8)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4938      	ldr	r1, [pc, #224]	; (80089e8 <UART_RxISR_16BIT+0x170>)
 8008906:	400a      	ands	r2, r1
 8008908:	601a      	str	r2, [r3, #0]
 800890a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800890c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	f383 8810 	msr	PRIMASK, r3
}
 8008914:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008916:	f3ef 8310 	mrs	r3, PRIMASK
 800891a:	623b      	str	r3, [r7, #32]
  return(result);
 800891c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800891e:	633b      	str	r3, [r7, #48]	; 0x30
 8008920:	2301      	movs	r3, #1
 8008922:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008926:	f383 8810 	msr	PRIMASK, r3
}
 800892a:	46c0      	nop			; (mov r8, r8)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	689a      	ldr	r2, [r3, #8]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2101      	movs	r1, #1
 8008938:	438a      	bics	r2, r1
 800893a:	609a      	str	r2, [r3, #8]
 800893c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008942:	f383 8810 	msr	PRIMASK, r3
}
 8008946:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	228c      	movs	r2, #140	; 0x8c
 800894c:	2120      	movs	r1, #32
 800894e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008960:	2b01      	cmp	r3, #1
 8008962:	d12f      	bne.n	80089c4 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800896a:	f3ef 8310 	mrs	r3, PRIMASK
 800896e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008970:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008974:	2301      	movs	r3, #1
 8008976:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f383 8810 	msr	PRIMASK, r3
}
 800897e:	46c0      	nop			; (mov r8, r8)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2110      	movs	r1, #16
 800898c:	438a      	bics	r2, r1
 800898e:	601a      	str	r2, [r3, #0]
 8008990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008992:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	f383 8810 	msr	PRIMASK, r3
}
 800899a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	69db      	ldr	r3, [r3, #28]
 80089a2:	2210      	movs	r2, #16
 80089a4:	4013      	ands	r3, r2
 80089a6:	2b10      	cmp	r3, #16
 80089a8:	d103      	bne.n	80089b2 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2210      	movs	r2, #16
 80089b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	225c      	movs	r2, #92	; 0x5c
 80089b6:	5a9a      	ldrh	r2, [r3, r2]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	0011      	movs	r1, r2
 80089bc:	0018      	movs	r0, r3
 80089be:	f7fa fc41 	bl	8003244 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089c2:	e00c      	b.n	80089de <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	0018      	movs	r0, r3
 80089c8:	f7ff f87c 	bl	8007ac4 <HAL_UART_RxCpltCallback>
}
 80089cc:	e007      	b.n	80089de <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	699a      	ldr	r2, [r3, #24]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2108      	movs	r1, #8
 80089da:	430a      	orrs	r2, r1
 80089dc:	619a      	str	r2, [r3, #24]
}
 80089de:	46c0      	nop			; (mov r8, r8)
 80089e0:	46bd      	mov	sp, r7
 80089e2:	b010      	add	sp, #64	; 0x40
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	46c0      	nop			; (mov r8, r8)
 80089e8:	fffffedf 	.word	0xfffffedf

080089ec <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b09c      	sub	sp, #112	; 0x70
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80089f4:	236a      	movs	r3, #106	; 0x6a
 80089f6:	18fb      	adds	r3, r7, r3
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	2160      	movs	r1, #96	; 0x60
 80089fc:	5a52      	ldrh	r2, [r2, r1]
 80089fe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	69db      	ldr	r3, [r3, #28]
 8008a06:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	228c      	movs	r2, #140	; 0x8c
 8008a1c:	589b      	ldr	r3, [r3, r2]
 8008a1e:	2b22      	cmp	r3, #34	; 0x22
 8008a20:	d000      	beq.n	8008a24 <UART_RxISR_8BIT_FIFOEN+0x38>
 8008a22:	e144      	b.n	8008cae <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008a24:	235e      	movs	r3, #94	; 0x5e
 8008a26:	18fb      	adds	r3, r7, r3
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	2168      	movs	r1, #104	; 0x68
 8008a2c:	5a52      	ldrh	r2, [r2, r1]
 8008a2e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a30:	e0eb      	b.n	8008c0a <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a38:	215c      	movs	r1, #92	; 0x5c
 8008a3a:	187b      	adds	r3, r7, r1
 8008a3c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a3e:	187b      	adds	r3, r7, r1
 8008a40:	881b      	ldrh	r3, [r3, #0]
 8008a42:	b2da      	uxtb	r2, r3
 8008a44:	236a      	movs	r3, #106	; 0x6a
 8008a46:	18fb      	adds	r3, r7, r3
 8008a48:	881b      	ldrh	r3, [r3, #0]
 8008a4a:	b2d9      	uxtb	r1, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a50:	400a      	ands	r2, r1
 8008a52:	b2d2      	uxtb	r2, r2
 8008a54:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a5a:	1c5a      	adds	r2, r3, #1
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	225e      	movs	r2, #94	; 0x5e
 8008a64:	5a9b      	ldrh	r3, [r3, r2]
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	b299      	uxth	r1, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	225e      	movs	r2, #94	; 0x5e
 8008a70:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	69db      	ldr	r3, [r3, #28]
 8008a78:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a7c:	2207      	movs	r2, #7
 8008a7e:	4013      	ands	r3, r2
 8008a80:	d049      	beq.n	8008b16 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a84:	2201      	movs	r2, #1
 8008a86:	4013      	ands	r3, r2
 8008a88:	d010      	beq.n	8008aac <UART_RxISR_8BIT_FIFOEN+0xc0>
 8008a8a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008a8c:	2380      	movs	r3, #128	; 0x80
 8008a8e:	005b      	lsls	r3, r3, #1
 8008a90:	4013      	ands	r3, r2
 8008a92:	d00b      	beq.n	8008aac <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2290      	movs	r2, #144	; 0x90
 8008aa0:	589b      	ldr	r3, [r3, r2]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	431a      	orrs	r2, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2190      	movs	r1, #144	; 0x90
 8008aaa:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aae:	2202      	movs	r2, #2
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	d00f      	beq.n	8008ad4 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8008ab4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	4013      	ands	r3, r2
 8008aba:	d00b      	beq.n	8008ad4 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2202      	movs	r2, #2
 8008ac2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2290      	movs	r2, #144	; 0x90
 8008ac8:	589b      	ldr	r3, [r3, r2]
 8008aca:	2204      	movs	r2, #4
 8008acc:	431a      	orrs	r2, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2190      	movs	r1, #144	; 0x90
 8008ad2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ad6:	2204      	movs	r2, #4
 8008ad8:	4013      	ands	r3, r2
 8008ada:	d00f      	beq.n	8008afc <UART_RxISR_8BIT_FIFOEN+0x110>
 8008adc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ade:	2201      	movs	r2, #1
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	d00b      	beq.n	8008afc <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2204      	movs	r2, #4
 8008aea:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2290      	movs	r2, #144	; 0x90
 8008af0:	589b      	ldr	r3, [r3, r2]
 8008af2:	2202      	movs	r2, #2
 8008af4:	431a      	orrs	r2, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2190      	movs	r1, #144	; 0x90
 8008afa:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2290      	movs	r2, #144	; 0x90
 8008b00:	589b      	ldr	r3, [r3, r2]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d007      	beq.n	8008b16 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	0018      	movs	r0, r3
 8008b0a:	f7fe ffe3 	bl	8007ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2290      	movs	r2, #144	; 0x90
 8008b12:	2100      	movs	r1, #0
 8008b14:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	225e      	movs	r2, #94	; 0x5e
 8008b1a:	5a9b      	ldrh	r3, [r3, r2]
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d173      	bne.n	8008c0a <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b22:	f3ef 8310 	mrs	r3, PRIMASK
 8008b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8008b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b32:	f383 8810 	msr	PRIMASK, r3
}
 8008b36:	46c0      	nop			; (mov r8, r8)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4961      	ldr	r1, [pc, #388]	; (8008cc8 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8008b44:	400a      	ands	r2, r1
 8008b46:	601a      	str	r2, [r3, #0]
 8008b48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b4a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b4e:	f383 8810 	msr	PRIMASK, r3
}
 8008b52:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b54:	f3ef 8310 	mrs	r3, PRIMASK
 8008b58:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8008b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b5c:	657b      	str	r3, [r7, #84]	; 0x54
 8008b5e:	2301      	movs	r3, #1
 8008b60:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b64:	f383 8810 	msr	PRIMASK, r3
}
 8008b68:	46c0      	nop			; (mov r8, r8)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	689a      	ldr	r2, [r3, #8]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4955      	ldr	r1, [pc, #340]	; (8008ccc <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8008b76:	400a      	ands	r2, r1
 8008b78:	609a      	str	r2, [r3, #8]
 8008b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b7c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b80:	f383 8810 	msr	PRIMASK, r3
}
 8008b84:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	228c      	movs	r2, #140	; 0x8c
 8008b8a:	2120      	movs	r1, #32
 8008b8c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d12f      	bne.n	8008c02 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8008bac:	623b      	str	r3, [r7, #32]
  return(result);
 8008bae:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bb0:	653b      	str	r3, [r7, #80]	; 0x50
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb8:	f383 8810 	msr	PRIMASK, r3
}
 8008bbc:	46c0      	nop			; (mov r8, r8)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2110      	movs	r1, #16
 8008bca:	438a      	bics	r2, r1
 8008bcc:	601a      	str	r2, [r3, #0]
 8008bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd4:	f383 8810 	msr	PRIMASK, r3
}
 8008bd8:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	69db      	ldr	r3, [r3, #28]
 8008be0:	2210      	movs	r2, #16
 8008be2:	4013      	ands	r3, r2
 8008be4:	2b10      	cmp	r3, #16
 8008be6:	d103      	bne.n	8008bf0 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2210      	movs	r2, #16
 8008bee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	225c      	movs	r2, #92	; 0x5c
 8008bf4:	5a9a      	ldrh	r2, [r3, r2]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	0011      	movs	r1, r2
 8008bfa:	0018      	movs	r0, r3
 8008bfc:	f7fa fb22 	bl	8003244 <HAL_UARTEx_RxEventCallback>
 8008c00:	e003      	b.n	8008c0a <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	0018      	movs	r0, r3
 8008c06:	f7fe ff5d 	bl	8007ac4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c0a:	235e      	movs	r3, #94	; 0x5e
 8008c0c:	18fb      	adds	r3, r7, r3
 8008c0e:	881b      	ldrh	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d004      	beq.n	8008c1e <UART_RxISR_8BIT_FIFOEN+0x232>
 8008c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c16:	2220      	movs	r2, #32
 8008c18:	4013      	ands	r3, r2
 8008c1a:	d000      	beq.n	8008c1e <UART_RxISR_8BIT_FIFOEN+0x232>
 8008c1c:	e709      	b.n	8008a32 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008c1e:	204e      	movs	r0, #78	; 0x4e
 8008c20:	183b      	adds	r3, r7, r0
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	215e      	movs	r1, #94	; 0x5e
 8008c26:	5a52      	ldrh	r2, [r2, r1]
 8008c28:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008c2a:	0001      	movs	r1, r0
 8008c2c:	187b      	adds	r3, r7, r1
 8008c2e:	881b      	ldrh	r3, [r3, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d044      	beq.n	8008cbe <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2268      	movs	r2, #104	; 0x68
 8008c38:	5a9b      	ldrh	r3, [r3, r2]
 8008c3a:	187a      	adds	r2, r7, r1
 8008c3c:	8812      	ldrh	r2, [r2, #0]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d23d      	bcs.n	8008cbe <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c42:	f3ef 8310 	mrs	r3, PRIMASK
 8008c46:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c48:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008c4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f383 8810 	msr	PRIMASK, r3
}
 8008c56:	46c0      	nop			; (mov r8, r8)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	689a      	ldr	r2, [r3, #8]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	491b      	ldr	r1, [pc, #108]	; (8008cd0 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8008c64:	400a      	ands	r2, r1
 8008c66:	609a      	str	r2, [r3, #8]
 8008c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	f383 8810 	msr	PRIMASK, r3
}
 8008c72:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a17      	ldr	r2, [pc, #92]	; (8008cd4 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8008c78:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c7a:	f3ef 8310 	mrs	r3, PRIMASK
 8008c7e:	617b      	str	r3, [r7, #20]
  return(result);
 8008c80:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008c82:	647b      	str	r3, [r7, #68]	; 0x44
 8008c84:	2301      	movs	r3, #1
 8008c86:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	f383 8810 	msr	PRIMASK, r3
}
 8008c8e:	46c0      	nop			; (mov r8, r8)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2120      	movs	r1, #32
 8008c9c:	430a      	orrs	r2, r1
 8008c9e:	601a      	str	r2, [r3, #0]
 8008ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ca2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	f383 8810 	msr	PRIMASK, r3
}
 8008caa:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008cac:	e007      	b.n	8008cbe <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	699a      	ldr	r2, [r3, #24]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2108      	movs	r1, #8
 8008cba:	430a      	orrs	r2, r1
 8008cbc:	619a      	str	r2, [r3, #24]
}
 8008cbe:	46c0      	nop			; (mov r8, r8)
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	b01c      	add	sp, #112	; 0x70
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	46c0      	nop			; (mov r8, r8)
 8008cc8:	fffffeff 	.word	0xfffffeff
 8008ccc:	effffffe 	.word	0xeffffffe
 8008cd0:	efffffff 	.word	0xefffffff
 8008cd4:	08008705 	.word	0x08008705

08008cd8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b09e      	sub	sp, #120	; 0x78
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008ce0:	2372      	movs	r3, #114	; 0x72
 8008ce2:	18fb      	adds	r3, r7, r3
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	2160      	movs	r1, #96	; 0x60
 8008ce8:	5a52      	ldrh	r2, [r2, r1]
 8008cea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	69db      	ldr	r3, [r3, #28]
 8008cf2:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	228c      	movs	r2, #140	; 0x8c
 8008d08:	589b      	ldr	r3, [r3, r2]
 8008d0a:	2b22      	cmp	r3, #34	; 0x22
 8008d0c:	d000      	beq.n	8008d10 <UART_RxISR_16BIT_FIFOEN+0x38>
 8008d0e:	e144      	b.n	8008f9a <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008d10:	2366      	movs	r3, #102	; 0x66
 8008d12:	18fb      	adds	r3, r7, r3
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	2168      	movs	r1, #104	; 0x68
 8008d18:	5a52      	ldrh	r2, [r2, r1]
 8008d1a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008d1c:	e0eb      	b.n	8008ef6 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d24:	2164      	movs	r1, #100	; 0x64
 8008d26:	187b      	adds	r3, r7, r1
 8008d28:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d2e:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8008d30:	187b      	adds	r3, r7, r1
 8008d32:	2272      	movs	r2, #114	; 0x72
 8008d34:	18ba      	adds	r2, r7, r2
 8008d36:	881b      	ldrh	r3, [r3, #0]
 8008d38:	8812      	ldrh	r2, [r2, #0]
 8008d3a:	4013      	ands	r3, r2
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d46:	1c9a      	adds	r2, r3, #2
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	225e      	movs	r2, #94	; 0x5e
 8008d50:	5a9b      	ldrh	r3, [r3, r2]
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	3b01      	subs	r3, #1
 8008d56:	b299      	uxth	r1, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	225e      	movs	r2, #94	; 0x5e
 8008d5c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	69db      	ldr	r3, [r3, #28]
 8008d64:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d68:	2207      	movs	r2, #7
 8008d6a:	4013      	ands	r3, r2
 8008d6c:	d049      	beq.n	8008e02 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d70:	2201      	movs	r2, #1
 8008d72:	4013      	ands	r3, r2
 8008d74:	d010      	beq.n	8008d98 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8008d76:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008d78:	2380      	movs	r3, #128	; 0x80
 8008d7a:	005b      	lsls	r3, r3, #1
 8008d7c:	4013      	ands	r3, r2
 8008d7e:	d00b      	beq.n	8008d98 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2201      	movs	r2, #1
 8008d86:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2290      	movs	r2, #144	; 0x90
 8008d8c:	589b      	ldr	r3, [r3, r2]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	431a      	orrs	r2, r3
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2190      	movs	r1, #144	; 0x90
 8008d96:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	d00f      	beq.n	8008dc0 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8008da0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008da2:	2201      	movs	r2, #1
 8008da4:	4013      	ands	r3, r2
 8008da6:	d00b      	beq.n	8008dc0 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2202      	movs	r2, #2
 8008dae:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2290      	movs	r2, #144	; 0x90
 8008db4:	589b      	ldr	r3, [r3, r2]
 8008db6:	2204      	movs	r2, #4
 8008db8:	431a      	orrs	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2190      	movs	r1, #144	; 0x90
 8008dbe:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008dc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dc2:	2204      	movs	r2, #4
 8008dc4:	4013      	ands	r3, r2
 8008dc6:	d00f      	beq.n	8008de8 <UART_RxISR_16BIT_FIFOEN+0x110>
 8008dc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008dca:	2201      	movs	r2, #1
 8008dcc:	4013      	ands	r3, r2
 8008dce:	d00b      	beq.n	8008de8 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2204      	movs	r2, #4
 8008dd6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2290      	movs	r2, #144	; 0x90
 8008ddc:	589b      	ldr	r3, [r3, r2]
 8008dde:	2202      	movs	r2, #2
 8008de0:	431a      	orrs	r2, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2190      	movs	r1, #144	; 0x90
 8008de6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2290      	movs	r2, #144	; 0x90
 8008dec:	589b      	ldr	r3, [r3, r2]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d007      	beq.n	8008e02 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	0018      	movs	r0, r3
 8008df6:	f7fe fe6d 	bl	8007ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2290      	movs	r2, #144	; 0x90
 8008dfe:	2100      	movs	r1, #0
 8008e00:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	225e      	movs	r2, #94	; 0x5e
 8008e06:	5a9b      	ldrh	r3, [r3, r2]
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d173      	bne.n	8008ef6 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8008e12:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e18:	2301      	movs	r3, #1
 8008e1a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e1e:	f383 8810 	msr	PRIMASK, r3
}
 8008e22:	46c0      	nop			; (mov r8, r8)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4961      	ldr	r1, [pc, #388]	; (8008fb4 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8008e30:	400a      	ands	r2, r1
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e36:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3a:	f383 8810 	msr	PRIMASK, r3
}
 8008e3e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e40:	f3ef 8310 	mrs	r3, PRIMASK
 8008e44:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8008e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e48:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e50:	f383 8810 	msr	PRIMASK, r3
}
 8008e54:	46c0      	nop			; (mov r8, r8)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	689a      	ldr	r2, [r3, #8]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4955      	ldr	r1, [pc, #340]	; (8008fb8 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8008e62:	400a      	ands	r2, r1
 8008e64:	609a      	str	r2, [r3, #8]
 8008e66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e68:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e6c:	f383 8810 	msr	PRIMASK, r3
}
 8008e70:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	228c      	movs	r2, #140	; 0x8c
 8008e76:	2120      	movs	r1, #32
 8008e78:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d12f      	bne.n	8008eee <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e94:	f3ef 8310 	mrs	r3, PRIMASK
 8008e98:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e9c:	657b      	str	r3, [r7, #84]	; 0x54
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea4:	f383 8810 	msr	PRIMASK, r3
}
 8008ea8:	46c0      	nop			; (mov r8, r8)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2110      	movs	r1, #16
 8008eb6:	438a      	bics	r2, r1
 8008eb8:	601a      	str	r2, [r3, #0]
 8008eba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec0:	f383 8810 	msr	PRIMASK, r3
}
 8008ec4:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	69db      	ldr	r3, [r3, #28]
 8008ecc:	2210      	movs	r2, #16
 8008ece:	4013      	ands	r3, r2
 8008ed0:	2b10      	cmp	r3, #16
 8008ed2:	d103      	bne.n	8008edc <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2210      	movs	r2, #16
 8008eda:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	225c      	movs	r2, #92	; 0x5c
 8008ee0:	5a9a      	ldrh	r2, [r3, r2]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	0011      	movs	r1, r2
 8008ee6:	0018      	movs	r0, r3
 8008ee8:	f7fa f9ac 	bl	8003244 <HAL_UARTEx_RxEventCallback>
 8008eec:	e003      	b.n	8008ef6 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	0018      	movs	r0, r3
 8008ef2:	f7fe fde7 	bl	8007ac4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008ef6:	2366      	movs	r3, #102	; 0x66
 8008ef8:	18fb      	adds	r3, r7, r3
 8008efa:	881b      	ldrh	r3, [r3, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d004      	beq.n	8008f0a <UART_RxISR_16BIT_FIFOEN+0x232>
 8008f00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f02:	2220      	movs	r2, #32
 8008f04:	4013      	ands	r3, r2
 8008f06:	d000      	beq.n	8008f0a <UART_RxISR_16BIT_FIFOEN+0x232>
 8008f08:	e709      	b.n	8008d1e <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008f0a:	2052      	movs	r0, #82	; 0x52
 8008f0c:	183b      	adds	r3, r7, r0
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	215e      	movs	r1, #94	; 0x5e
 8008f12:	5a52      	ldrh	r2, [r2, r1]
 8008f14:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008f16:	0001      	movs	r1, r0
 8008f18:	187b      	adds	r3, r7, r1
 8008f1a:	881b      	ldrh	r3, [r3, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d044      	beq.n	8008faa <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2268      	movs	r2, #104	; 0x68
 8008f24:	5a9b      	ldrh	r3, [r3, r2]
 8008f26:	187a      	adds	r2, r7, r1
 8008f28:	8812      	ldrh	r2, [r2, #0]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d23d      	bcs.n	8008faa <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f2e:	f3ef 8310 	mrs	r3, PRIMASK
 8008f32:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f34:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f38:	2301      	movs	r3, #1
 8008f3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	f383 8810 	msr	PRIMASK, r3
}
 8008f42:	46c0      	nop			; (mov r8, r8)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	689a      	ldr	r2, [r3, #8]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	491b      	ldr	r1, [pc, #108]	; (8008fbc <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8008f50:	400a      	ands	r2, r1
 8008f52:	609a      	str	r2, [r3, #8]
 8008f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	f383 8810 	msr	PRIMASK, r3
}
 8008f5e:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	4a17      	ldr	r2, [pc, #92]	; (8008fc0 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8008f64:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f66:	f3ef 8310 	mrs	r3, PRIMASK
 8008f6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8008f6c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008f6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f70:	2301      	movs	r3, #1
 8008f72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	f383 8810 	msr	PRIMASK, r3
}
 8008f7a:	46c0      	nop			; (mov r8, r8)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2120      	movs	r1, #32
 8008f88:	430a      	orrs	r2, r1
 8008f8a:	601a      	str	r2, [r3, #0]
 8008f8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f8e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f90:	6a3b      	ldr	r3, [r7, #32]
 8008f92:	f383 8810 	msr	PRIMASK, r3
}
 8008f96:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f98:	e007      	b.n	8008faa <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	699a      	ldr	r2, [r3, #24]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2108      	movs	r1, #8
 8008fa6:	430a      	orrs	r2, r1
 8008fa8:	619a      	str	r2, [r3, #24]
}
 8008faa:	46c0      	nop			; (mov r8, r8)
 8008fac:	46bd      	mov	sp, r7
 8008fae:	b01e      	add	sp, #120	; 0x78
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	46c0      	nop			; (mov r8, r8)
 8008fb4:	fffffeff 	.word	0xfffffeff
 8008fb8:	effffffe 	.word	0xeffffffe
 8008fbc:	efffffff 	.word	0xefffffff
 8008fc0:	08008879 	.word	0x08008879

08008fc4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008fcc:	46c0      	nop			; (mov r8, r8)
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	b002      	add	sp, #8
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008fdc:	46c0      	nop			; (mov r8, r8)
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	b002      	add	sp, #8
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008fec:	46c0      	nop			; (mov r8, r8)
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	b002      	add	sp, #8
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2284      	movs	r2, #132	; 0x84
 8009000:	5c9b      	ldrb	r3, [r3, r2]
 8009002:	2b01      	cmp	r3, #1
 8009004:	d101      	bne.n	800900a <HAL_UARTEx_DisableFifoMode+0x16>
 8009006:	2302      	movs	r3, #2
 8009008:	e027      	b.n	800905a <HAL_UARTEx_DisableFifoMode+0x66>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2284      	movs	r2, #132	; 0x84
 800900e:	2101      	movs	r1, #1
 8009010:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2288      	movs	r2, #136	; 0x88
 8009016:	2124      	movs	r1, #36	; 0x24
 8009018:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2101      	movs	r1, #1
 800902e:	438a      	bics	r2, r1
 8009030:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	4a0b      	ldr	r2, [pc, #44]	; (8009064 <HAL_UARTEx_DisableFifoMode+0x70>)
 8009036:	4013      	ands	r3, r2
 8009038:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2288      	movs	r2, #136	; 0x88
 800904c:	2120      	movs	r1, #32
 800904e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2284      	movs	r2, #132	; 0x84
 8009054:	2100      	movs	r1, #0
 8009056:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009058:	2300      	movs	r3, #0
}
 800905a:	0018      	movs	r0, r3
 800905c:	46bd      	mov	sp, r7
 800905e:	b004      	add	sp, #16
 8009060:	bd80      	pop	{r7, pc}
 8009062:	46c0      	nop			; (mov r8, r8)
 8009064:	dfffffff 	.word	0xdfffffff

08009068 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2284      	movs	r2, #132	; 0x84
 8009076:	5c9b      	ldrb	r3, [r3, r2]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d101      	bne.n	8009080 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800907c:	2302      	movs	r3, #2
 800907e:	e02e      	b.n	80090de <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2284      	movs	r2, #132	; 0x84
 8009084:	2101      	movs	r1, #1
 8009086:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2288      	movs	r2, #136	; 0x88
 800908c:	2124      	movs	r1, #36	; 0x24
 800908e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2101      	movs	r1, #1
 80090a4:	438a      	bics	r2, r1
 80090a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	00db      	lsls	r3, r3, #3
 80090b0:	08d9      	lsrs	r1, r3, #3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	430a      	orrs	r2, r1
 80090ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	0018      	movs	r0, r3
 80090c0:	f000 f8bc 	bl	800923c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2288      	movs	r2, #136	; 0x88
 80090d0:	2120      	movs	r1, #32
 80090d2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2284      	movs	r2, #132	; 0x84
 80090d8:	2100      	movs	r1, #0
 80090da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	0018      	movs	r0, r3
 80090e0:	46bd      	mov	sp, r7
 80090e2:	b004      	add	sp, #16
 80090e4:	bd80      	pop	{r7, pc}
	...

080090e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2284      	movs	r2, #132	; 0x84
 80090f6:	5c9b      	ldrb	r3, [r3, r2]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d101      	bne.n	8009100 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80090fc:	2302      	movs	r3, #2
 80090fe:	e02f      	b.n	8009160 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2284      	movs	r2, #132	; 0x84
 8009104:	2101      	movs	r1, #1
 8009106:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2288      	movs	r2, #136	; 0x88
 800910c:	2124      	movs	r1, #36	; 0x24
 800910e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2101      	movs	r1, #1
 8009124:	438a      	bics	r2, r1
 8009126:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	4a0e      	ldr	r2, [pc, #56]	; (8009168 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009130:	4013      	ands	r3, r2
 8009132:	0019      	movs	r1, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	683a      	ldr	r2, [r7, #0]
 800913a:	430a      	orrs	r2, r1
 800913c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	0018      	movs	r0, r3
 8009142:	f000 f87b 	bl	800923c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68fa      	ldr	r2, [r7, #12]
 800914c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2288      	movs	r2, #136	; 0x88
 8009152:	2120      	movs	r1, #32
 8009154:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2284      	movs	r2, #132	; 0x84
 800915a:	2100      	movs	r1, #0
 800915c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	0018      	movs	r0, r3
 8009162:	46bd      	mov	sp, r7
 8009164:	b004      	add	sp, #16
 8009166:	bd80      	pop	{r7, pc}
 8009168:	f1ffffff 	.word	0xf1ffffff

0800916c <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800916c:	b5b0      	push	{r4, r5, r7, lr}
 800916e:	b08a      	sub	sp, #40	; 0x28
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	1dbb      	adds	r3, r7, #6
 8009178:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	228c      	movs	r2, #140	; 0x8c
 800917e:	589b      	ldr	r3, [r3, r2]
 8009180:	2b20      	cmp	r3, #32
 8009182:	d156      	bne.n	8009232 <HAL_UARTEx_ReceiveToIdle_IT+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d003      	beq.n	8009192 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800918a:	1dbb      	adds	r3, r7, #6
 800918c:	881b      	ldrh	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d101      	bne.n	8009196 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	e04e      	b.n	8009234 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	689a      	ldr	r2, [r3, #8]
 800919a:	2380      	movs	r3, #128	; 0x80
 800919c:	015b      	lsls	r3, r3, #5
 800919e:	429a      	cmp	r2, r3
 80091a0:	d109      	bne.n	80091b6 <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d105      	bne.n	80091b6 <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	2201      	movs	r2, #1
 80091ae:	4013      	ands	r3, r2
 80091b0:	d001      	beq.n	80091b6 <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
      {
        return  HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	e03e      	b.n	8009234 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2201      	movs	r2, #1
 80091ba:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2200      	movs	r2, #0
 80091c0:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80091c2:	2527      	movs	r5, #39	; 0x27
 80091c4:	197c      	adds	r4, r7, r5
 80091c6:	1dbb      	adds	r3, r7, #6
 80091c8:	881a      	ldrh	r2, [r3, #0]
 80091ca:	68b9      	ldr	r1, [r7, #8]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	0018      	movs	r0, r3
 80091d0:	f7ff f8ca 	bl	8008368 <UART_Start_Receive_IT>
 80091d4:	0003      	movs	r3, r0
 80091d6:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80091d8:	197b      	adds	r3, r7, r5
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d124      	bne.n	800922a <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d11c      	bne.n	8009222 <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2210      	movs	r2, #16
 80091ee:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091f0:	f3ef 8310 	mrs	r3, PRIMASK
 80091f4:	617b      	str	r3, [r7, #20]
  return(result);
 80091f6:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091f8:	623b      	str	r3, [r7, #32]
 80091fa:	2301      	movs	r3, #1
 80091fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	f383 8810 	msr	PRIMASK, r3
}
 8009204:	46c0      	nop			; (mov r8, r8)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2110      	movs	r1, #16
 8009212:	430a      	orrs	r2, r1
 8009214:	601a      	str	r2, [r3, #0]
 8009216:	6a3b      	ldr	r3, [r7, #32]
 8009218:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800921a:	69fb      	ldr	r3, [r7, #28]
 800921c:	f383 8810 	msr	PRIMASK, r3
}
 8009220:	e003      	b.n	800922a <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009222:	2327      	movs	r3, #39	; 0x27
 8009224:	18fb      	adds	r3, r7, r3
 8009226:	2201      	movs	r2, #1
 8009228:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800922a:	2327      	movs	r3, #39	; 0x27
 800922c:	18fb      	adds	r3, r7, r3
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	e000      	b.n	8009234 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8009232:	2302      	movs	r3, #2
  }
}
 8009234:	0018      	movs	r0, r3
 8009236:	46bd      	mov	sp, r7
 8009238:	b00a      	add	sp, #40	; 0x28
 800923a:	bdb0      	pop	{r4, r5, r7, pc}

0800923c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800923c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009248:	2b00      	cmp	r3, #0
 800924a:	d108      	bne.n	800925e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	226a      	movs	r2, #106	; 0x6a
 8009250:	2101      	movs	r1, #1
 8009252:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2268      	movs	r2, #104	; 0x68
 8009258:	2101      	movs	r1, #1
 800925a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800925c:	e043      	b.n	80092e6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800925e:	260f      	movs	r6, #15
 8009260:	19bb      	adds	r3, r7, r6
 8009262:	2208      	movs	r2, #8
 8009264:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009266:	200e      	movs	r0, #14
 8009268:	183b      	adds	r3, r7, r0
 800926a:	2208      	movs	r2, #8
 800926c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	0e5b      	lsrs	r3, r3, #25
 8009276:	b2da      	uxtb	r2, r3
 8009278:	240d      	movs	r4, #13
 800927a:	193b      	adds	r3, r7, r4
 800927c:	2107      	movs	r1, #7
 800927e:	400a      	ands	r2, r1
 8009280:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	0f5b      	lsrs	r3, r3, #29
 800928a:	b2da      	uxtb	r2, r3
 800928c:	250c      	movs	r5, #12
 800928e:	197b      	adds	r3, r7, r5
 8009290:	2107      	movs	r1, #7
 8009292:	400a      	ands	r2, r1
 8009294:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009296:	183b      	adds	r3, r7, r0
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	197a      	adds	r2, r7, r5
 800929c:	7812      	ldrb	r2, [r2, #0]
 800929e:	4914      	ldr	r1, [pc, #80]	; (80092f0 <UARTEx_SetNbDataToProcess+0xb4>)
 80092a0:	5c8a      	ldrb	r2, [r1, r2]
 80092a2:	435a      	muls	r2, r3
 80092a4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80092a6:	197b      	adds	r3, r7, r5
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	4a12      	ldr	r2, [pc, #72]	; (80092f4 <UARTEx_SetNbDataToProcess+0xb8>)
 80092ac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80092ae:	0019      	movs	r1, r3
 80092b0:	f7f6 ffce 	bl	8000250 <__divsi3>
 80092b4:	0003      	movs	r3, r0
 80092b6:	b299      	uxth	r1, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	226a      	movs	r2, #106	; 0x6a
 80092bc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80092be:	19bb      	adds	r3, r7, r6
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	193a      	adds	r2, r7, r4
 80092c4:	7812      	ldrb	r2, [r2, #0]
 80092c6:	490a      	ldr	r1, [pc, #40]	; (80092f0 <UARTEx_SetNbDataToProcess+0xb4>)
 80092c8:	5c8a      	ldrb	r2, [r1, r2]
 80092ca:	435a      	muls	r2, r3
 80092cc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80092ce:	193b      	adds	r3, r7, r4
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	4a08      	ldr	r2, [pc, #32]	; (80092f4 <UARTEx_SetNbDataToProcess+0xb8>)
 80092d4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80092d6:	0019      	movs	r1, r3
 80092d8:	f7f6 ffba 	bl	8000250 <__divsi3>
 80092dc:	0003      	movs	r3, r0
 80092de:	b299      	uxth	r1, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2268      	movs	r2, #104	; 0x68
 80092e4:	5299      	strh	r1, [r3, r2]
}
 80092e6:	46c0      	nop			; (mov r8, r8)
 80092e8:	46bd      	mov	sp, r7
 80092ea:	b005      	add	sp, #20
 80092ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092ee:	46c0      	nop			; (mov r8, r8)
 80092f0:	0800c148 	.word	0x0800c148
 80092f4:	0800c150 	.word	0x0800c150

080092f8 <__cvt>:
 80092f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092fa:	001e      	movs	r6, r3
 80092fc:	2300      	movs	r3, #0
 80092fe:	0014      	movs	r4, r2
 8009300:	b08b      	sub	sp, #44	; 0x2c
 8009302:	429e      	cmp	r6, r3
 8009304:	da04      	bge.n	8009310 <__cvt+0x18>
 8009306:	2180      	movs	r1, #128	; 0x80
 8009308:	0609      	lsls	r1, r1, #24
 800930a:	1873      	adds	r3, r6, r1
 800930c:	001e      	movs	r6, r3
 800930e:	232d      	movs	r3, #45	; 0x2d
 8009310:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009312:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009314:	7013      	strb	r3, [r2, #0]
 8009316:	2320      	movs	r3, #32
 8009318:	2203      	movs	r2, #3
 800931a:	439f      	bics	r7, r3
 800931c:	2f46      	cmp	r7, #70	; 0x46
 800931e:	d007      	beq.n	8009330 <__cvt+0x38>
 8009320:	003b      	movs	r3, r7
 8009322:	3b45      	subs	r3, #69	; 0x45
 8009324:	4259      	negs	r1, r3
 8009326:	414b      	adcs	r3, r1
 8009328:	9910      	ldr	r1, [sp, #64]	; 0x40
 800932a:	3a01      	subs	r2, #1
 800932c:	18cb      	adds	r3, r1, r3
 800932e:	9310      	str	r3, [sp, #64]	; 0x40
 8009330:	ab09      	add	r3, sp, #36	; 0x24
 8009332:	9304      	str	r3, [sp, #16]
 8009334:	ab08      	add	r3, sp, #32
 8009336:	9303      	str	r3, [sp, #12]
 8009338:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800933a:	9200      	str	r2, [sp, #0]
 800933c:	9302      	str	r3, [sp, #8]
 800933e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009340:	0022      	movs	r2, r4
 8009342:	9301      	str	r3, [sp, #4]
 8009344:	0033      	movs	r3, r6
 8009346:	f000 fe97 	bl	800a078 <_dtoa_r>
 800934a:	0005      	movs	r5, r0
 800934c:	2f47      	cmp	r7, #71	; 0x47
 800934e:	d102      	bne.n	8009356 <__cvt+0x5e>
 8009350:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009352:	07db      	lsls	r3, r3, #31
 8009354:	d528      	bpl.n	80093a8 <__cvt+0xb0>
 8009356:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009358:	18eb      	adds	r3, r5, r3
 800935a:	9307      	str	r3, [sp, #28]
 800935c:	2f46      	cmp	r7, #70	; 0x46
 800935e:	d114      	bne.n	800938a <__cvt+0x92>
 8009360:	782b      	ldrb	r3, [r5, #0]
 8009362:	2b30      	cmp	r3, #48	; 0x30
 8009364:	d10c      	bne.n	8009380 <__cvt+0x88>
 8009366:	2200      	movs	r2, #0
 8009368:	2300      	movs	r3, #0
 800936a:	0020      	movs	r0, r4
 800936c:	0031      	movs	r1, r6
 800936e:	f7f7 f86b 	bl	8000448 <__aeabi_dcmpeq>
 8009372:	2800      	cmp	r0, #0
 8009374:	d104      	bne.n	8009380 <__cvt+0x88>
 8009376:	2301      	movs	r3, #1
 8009378:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800937a:	1a9b      	subs	r3, r3, r2
 800937c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800937e:	6013      	str	r3, [r2, #0]
 8009380:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009382:	9a07      	ldr	r2, [sp, #28]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	18d3      	adds	r3, r2, r3
 8009388:	9307      	str	r3, [sp, #28]
 800938a:	2200      	movs	r2, #0
 800938c:	2300      	movs	r3, #0
 800938e:	0020      	movs	r0, r4
 8009390:	0031      	movs	r1, r6
 8009392:	f7f7 f859 	bl	8000448 <__aeabi_dcmpeq>
 8009396:	2800      	cmp	r0, #0
 8009398:	d001      	beq.n	800939e <__cvt+0xa6>
 800939a:	9b07      	ldr	r3, [sp, #28]
 800939c:	9309      	str	r3, [sp, #36]	; 0x24
 800939e:	2230      	movs	r2, #48	; 0x30
 80093a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093a2:	9907      	ldr	r1, [sp, #28]
 80093a4:	428b      	cmp	r3, r1
 80093a6:	d306      	bcc.n	80093b6 <__cvt+0xbe>
 80093a8:	0028      	movs	r0, r5
 80093aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80093ae:	1b5b      	subs	r3, r3, r5
 80093b0:	6013      	str	r3, [r2, #0]
 80093b2:	b00b      	add	sp, #44	; 0x2c
 80093b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093b6:	1c59      	adds	r1, r3, #1
 80093b8:	9109      	str	r1, [sp, #36]	; 0x24
 80093ba:	701a      	strb	r2, [r3, #0]
 80093bc:	e7f0      	b.n	80093a0 <__cvt+0xa8>

080093be <__exponent>:
 80093be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093c0:	1c83      	adds	r3, r0, #2
 80093c2:	b087      	sub	sp, #28
 80093c4:	9303      	str	r3, [sp, #12]
 80093c6:	0005      	movs	r5, r0
 80093c8:	000c      	movs	r4, r1
 80093ca:	232b      	movs	r3, #43	; 0x2b
 80093cc:	7002      	strb	r2, [r0, #0]
 80093ce:	2900      	cmp	r1, #0
 80093d0:	da01      	bge.n	80093d6 <__exponent+0x18>
 80093d2:	424c      	negs	r4, r1
 80093d4:	3302      	adds	r3, #2
 80093d6:	706b      	strb	r3, [r5, #1]
 80093d8:	2c09      	cmp	r4, #9
 80093da:	dd2f      	ble.n	800943c <__exponent+0x7e>
 80093dc:	270a      	movs	r7, #10
 80093de:	ab04      	add	r3, sp, #16
 80093e0:	1dde      	adds	r6, r3, #7
 80093e2:	0020      	movs	r0, r4
 80093e4:	0039      	movs	r1, r7
 80093e6:	9601      	str	r6, [sp, #4]
 80093e8:	f7f7 f818 	bl	800041c <__aeabi_idivmod>
 80093ec:	3e01      	subs	r6, #1
 80093ee:	3130      	adds	r1, #48	; 0x30
 80093f0:	0020      	movs	r0, r4
 80093f2:	7031      	strb	r1, [r6, #0]
 80093f4:	0039      	movs	r1, r7
 80093f6:	9402      	str	r4, [sp, #8]
 80093f8:	f7f6 ff2a 	bl	8000250 <__divsi3>
 80093fc:	9b02      	ldr	r3, [sp, #8]
 80093fe:	0004      	movs	r4, r0
 8009400:	2b63      	cmp	r3, #99	; 0x63
 8009402:	dcee      	bgt.n	80093e2 <__exponent+0x24>
 8009404:	9b01      	ldr	r3, [sp, #4]
 8009406:	3430      	adds	r4, #48	; 0x30
 8009408:	1e9a      	subs	r2, r3, #2
 800940a:	0013      	movs	r3, r2
 800940c:	9903      	ldr	r1, [sp, #12]
 800940e:	7014      	strb	r4, [r2, #0]
 8009410:	a804      	add	r0, sp, #16
 8009412:	3007      	adds	r0, #7
 8009414:	4298      	cmp	r0, r3
 8009416:	d80c      	bhi.n	8009432 <__exponent+0x74>
 8009418:	2300      	movs	r3, #0
 800941a:	4282      	cmp	r2, r0
 800941c:	d804      	bhi.n	8009428 <__exponent+0x6a>
 800941e:	aa04      	add	r2, sp, #16
 8009420:	3309      	adds	r3, #9
 8009422:	189b      	adds	r3, r3, r2
 8009424:	9a01      	ldr	r2, [sp, #4]
 8009426:	1a9b      	subs	r3, r3, r2
 8009428:	9a03      	ldr	r2, [sp, #12]
 800942a:	18d3      	adds	r3, r2, r3
 800942c:	1b58      	subs	r0, r3, r5
 800942e:	b007      	add	sp, #28
 8009430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009432:	7818      	ldrb	r0, [r3, #0]
 8009434:	3301      	adds	r3, #1
 8009436:	7008      	strb	r0, [r1, #0]
 8009438:	3101      	adds	r1, #1
 800943a:	e7e9      	b.n	8009410 <__exponent+0x52>
 800943c:	2330      	movs	r3, #48	; 0x30
 800943e:	3430      	adds	r4, #48	; 0x30
 8009440:	70ab      	strb	r3, [r5, #2]
 8009442:	70ec      	strb	r4, [r5, #3]
 8009444:	1d2b      	adds	r3, r5, #4
 8009446:	e7f1      	b.n	800942c <__exponent+0x6e>

08009448 <_printf_float>:
 8009448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800944a:	b095      	sub	sp, #84	; 0x54
 800944c:	000c      	movs	r4, r1
 800944e:	9208      	str	r2, [sp, #32]
 8009450:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8009452:	9309      	str	r3, [sp, #36]	; 0x24
 8009454:	0007      	movs	r7, r0
 8009456:	f000 fcf5 	bl	8009e44 <_localeconv_r>
 800945a:	6803      	ldr	r3, [r0, #0]
 800945c:	0018      	movs	r0, r3
 800945e:	930c      	str	r3, [sp, #48]	; 0x30
 8009460:	f7f6 fe50 	bl	8000104 <strlen>
 8009464:	2300      	movs	r3, #0
 8009466:	9312      	str	r3, [sp, #72]	; 0x48
 8009468:	7e23      	ldrb	r3, [r4, #24]
 800946a:	2207      	movs	r2, #7
 800946c:	930a      	str	r3, [sp, #40]	; 0x28
 800946e:	6823      	ldr	r3, [r4, #0]
 8009470:	900d      	str	r0, [sp, #52]	; 0x34
 8009472:	930b      	str	r3, [sp, #44]	; 0x2c
 8009474:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009476:	682b      	ldr	r3, [r5, #0]
 8009478:	05c9      	lsls	r1, r1, #23
 800947a:	d547      	bpl.n	800950c <_printf_float+0xc4>
 800947c:	189b      	adds	r3, r3, r2
 800947e:	4393      	bics	r3, r2
 8009480:	001a      	movs	r2, r3
 8009482:	3208      	adds	r2, #8
 8009484:	602a      	str	r2, [r5, #0]
 8009486:	681e      	ldr	r6, [r3, #0]
 8009488:	685d      	ldr	r5, [r3, #4]
 800948a:	0032      	movs	r2, r6
 800948c:	002b      	movs	r3, r5
 800948e:	64a2      	str	r2, [r4, #72]	; 0x48
 8009490:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009492:	2201      	movs	r2, #1
 8009494:	006b      	lsls	r3, r5, #1
 8009496:	085b      	lsrs	r3, r3, #1
 8009498:	930e      	str	r3, [sp, #56]	; 0x38
 800949a:	0030      	movs	r0, r6
 800949c:	4bab      	ldr	r3, [pc, #684]	; (800974c <_printf_float+0x304>)
 800949e:	990e      	ldr	r1, [sp, #56]	; 0x38
 80094a0:	4252      	negs	r2, r2
 80094a2:	f7f8 fe89 	bl	80021b8 <__aeabi_dcmpun>
 80094a6:	2800      	cmp	r0, #0
 80094a8:	d132      	bne.n	8009510 <_printf_float+0xc8>
 80094aa:	2201      	movs	r2, #1
 80094ac:	0030      	movs	r0, r6
 80094ae:	4ba7      	ldr	r3, [pc, #668]	; (800974c <_printf_float+0x304>)
 80094b0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80094b2:	4252      	negs	r2, r2
 80094b4:	f7f6 ffd8 	bl	8000468 <__aeabi_dcmple>
 80094b8:	2800      	cmp	r0, #0
 80094ba:	d129      	bne.n	8009510 <_printf_float+0xc8>
 80094bc:	2200      	movs	r2, #0
 80094be:	2300      	movs	r3, #0
 80094c0:	0030      	movs	r0, r6
 80094c2:	0029      	movs	r1, r5
 80094c4:	f7f6 ffc6 	bl	8000454 <__aeabi_dcmplt>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	d003      	beq.n	80094d4 <_printf_float+0x8c>
 80094cc:	0023      	movs	r3, r4
 80094ce:	222d      	movs	r2, #45	; 0x2d
 80094d0:	3343      	adds	r3, #67	; 0x43
 80094d2:	701a      	strb	r2, [r3, #0]
 80094d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094d6:	4d9e      	ldr	r5, [pc, #632]	; (8009750 <_printf_float+0x308>)
 80094d8:	2b47      	cmp	r3, #71	; 0x47
 80094da:	d900      	bls.n	80094de <_printf_float+0x96>
 80094dc:	4d9d      	ldr	r5, [pc, #628]	; (8009754 <_printf_float+0x30c>)
 80094de:	2303      	movs	r3, #3
 80094e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094e2:	6123      	str	r3, [r4, #16]
 80094e4:	3301      	adds	r3, #1
 80094e6:	439a      	bics	r2, r3
 80094e8:	2300      	movs	r3, #0
 80094ea:	6022      	str	r2, [r4, #0]
 80094ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80094ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094f0:	0021      	movs	r1, r4
 80094f2:	9300      	str	r3, [sp, #0]
 80094f4:	0038      	movs	r0, r7
 80094f6:	9b08      	ldr	r3, [sp, #32]
 80094f8:	aa13      	add	r2, sp, #76	; 0x4c
 80094fa:	f000 f9fb 	bl	80098f4 <_printf_common>
 80094fe:	3001      	adds	r0, #1
 8009500:	d000      	beq.n	8009504 <_printf_float+0xbc>
 8009502:	e0a3      	b.n	800964c <_printf_float+0x204>
 8009504:	2001      	movs	r0, #1
 8009506:	4240      	negs	r0, r0
 8009508:	b015      	add	sp, #84	; 0x54
 800950a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800950c:	3307      	adds	r3, #7
 800950e:	e7b6      	b.n	800947e <_printf_float+0x36>
 8009510:	0032      	movs	r2, r6
 8009512:	002b      	movs	r3, r5
 8009514:	0030      	movs	r0, r6
 8009516:	0029      	movs	r1, r5
 8009518:	f7f8 fe4e 	bl	80021b8 <__aeabi_dcmpun>
 800951c:	2800      	cmp	r0, #0
 800951e:	d00b      	beq.n	8009538 <_printf_float+0xf0>
 8009520:	2d00      	cmp	r5, #0
 8009522:	da03      	bge.n	800952c <_printf_float+0xe4>
 8009524:	0023      	movs	r3, r4
 8009526:	222d      	movs	r2, #45	; 0x2d
 8009528:	3343      	adds	r3, #67	; 0x43
 800952a:	701a      	strb	r2, [r3, #0]
 800952c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800952e:	4d8a      	ldr	r5, [pc, #552]	; (8009758 <_printf_float+0x310>)
 8009530:	2b47      	cmp	r3, #71	; 0x47
 8009532:	d9d4      	bls.n	80094de <_printf_float+0x96>
 8009534:	4d89      	ldr	r5, [pc, #548]	; (800975c <_printf_float+0x314>)
 8009536:	e7d2      	b.n	80094de <_printf_float+0x96>
 8009538:	2220      	movs	r2, #32
 800953a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800953c:	6863      	ldr	r3, [r4, #4]
 800953e:	4391      	bics	r1, r2
 8009540:	910e      	str	r1, [sp, #56]	; 0x38
 8009542:	1c5a      	adds	r2, r3, #1
 8009544:	d14a      	bne.n	80095dc <_printf_float+0x194>
 8009546:	3307      	adds	r3, #7
 8009548:	6063      	str	r3, [r4, #4]
 800954a:	2380      	movs	r3, #128	; 0x80
 800954c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800954e:	00db      	lsls	r3, r3, #3
 8009550:	4313      	orrs	r3, r2
 8009552:	2200      	movs	r2, #0
 8009554:	9206      	str	r2, [sp, #24]
 8009556:	aa12      	add	r2, sp, #72	; 0x48
 8009558:	9205      	str	r2, [sp, #20]
 800955a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800955c:	6023      	str	r3, [r4, #0]
 800955e:	9204      	str	r2, [sp, #16]
 8009560:	aa11      	add	r2, sp, #68	; 0x44
 8009562:	9203      	str	r2, [sp, #12]
 8009564:	2223      	movs	r2, #35	; 0x23
 8009566:	a908      	add	r1, sp, #32
 8009568:	9301      	str	r3, [sp, #4]
 800956a:	6863      	ldr	r3, [r4, #4]
 800956c:	1852      	adds	r2, r2, r1
 800956e:	9202      	str	r2, [sp, #8]
 8009570:	9300      	str	r3, [sp, #0]
 8009572:	0032      	movs	r2, r6
 8009574:	002b      	movs	r3, r5
 8009576:	0038      	movs	r0, r7
 8009578:	f7ff febe 	bl	80092f8 <__cvt>
 800957c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800957e:	0005      	movs	r5, r0
 8009580:	2b47      	cmp	r3, #71	; 0x47
 8009582:	d109      	bne.n	8009598 <_printf_float+0x150>
 8009584:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009586:	1cda      	adds	r2, r3, #3
 8009588:	db02      	blt.n	8009590 <_printf_float+0x148>
 800958a:	6862      	ldr	r2, [r4, #4]
 800958c:	4293      	cmp	r3, r2
 800958e:	dd49      	ble.n	8009624 <_printf_float+0x1dc>
 8009590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009592:	3b02      	subs	r3, #2
 8009594:	b2db      	uxtb	r3, r3
 8009596:	930a      	str	r3, [sp, #40]	; 0x28
 8009598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800959a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800959c:	2b65      	cmp	r3, #101	; 0x65
 800959e:	d824      	bhi.n	80095ea <_printf_float+0x1a2>
 80095a0:	0020      	movs	r0, r4
 80095a2:	001a      	movs	r2, r3
 80095a4:	3901      	subs	r1, #1
 80095a6:	3050      	adds	r0, #80	; 0x50
 80095a8:	9111      	str	r1, [sp, #68]	; 0x44
 80095aa:	f7ff ff08 	bl	80093be <__exponent>
 80095ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80095b0:	900b      	str	r0, [sp, #44]	; 0x2c
 80095b2:	1813      	adds	r3, r2, r0
 80095b4:	6123      	str	r3, [r4, #16]
 80095b6:	2a01      	cmp	r2, #1
 80095b8:	dc02      	bgt.n	80095c0 <_printf_float+0x178>
 80095ba:	6822      	ldr	r2, [r4, #0]
 80095bc:	07d2      	lsls	r2, r2, #31
 80095be:	d501      	bpl.n	80095c4 <_printf_float+0x17c>
 80095c0:	3301      	adds	r3, #1
 80095c2:	6123      	str	r3, [r4, #16]
 80095c4:	2323      	movs	r3, #35	; 0x23
 80095c6:	aa08      	add	r2, sp, #32
 80095c8:	189b      	adds	r3, r3, r2
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d100      	bne.n	80095d2 <_printf_float+0x18a>
 80095d0:	e78d      	b.n	80094ee <_printf_float+0xa6>
 80095d2:	0023      	movs	r3, r4
 80095d4:	222d      	movs	r2, #45	; 0x2d
 80095d6:	3343      	adds	r3, #67	; 0x43
 80095d8:	701a      	strb	r2, [r3, #0]
 80095da:	e788      	b.n	80094ee <_printf_float+0xa6>
 80095dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095de:	2a47      	cmp	r2, #71	; 0x47
 80095e0:	d1b3      	bne.n	800954a <_printf_float+0x102>
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1b1      	bne.n	800954a <_printf_float+0x102>
 80095e6:	3301      	adds	r3, #1
 80095e8:	e7ae      	b.n	8009548 <_printf_float+0x100>
 80095ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095ec:	2b66      	cmp	r3, #102	; 0x66
 80095ee:	d11b      	bne.n	8009628 <_printf_float+0x1e0>
 80095f0:	6863      	ldr	r3, [r4, #4]
 80095f2:	2900      	cmp	r1, #0
 80095f4:	dd09      	ble.n	800960a <_printf_float+0x1c2>
 80095f6:	6121      	str	r1, [r4, #16]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d102      	bne.n	8009602 <_printf_float+0x1ba>
 80095fc:	6822      	ldr	r2, [r4, #0]
 80095fe:	07d2      	lsls	r2, r2, #31
 8009600:	d50b      	bpl.n	800961a <_printf_float+0x1d2>
 8009602:	3301      	adds	r3, #1
 8009604:	185b      	adds	r3, r3, r1
 8009606:	6123      	str	r3, [r4, #16]
 8009608:	e007      	b.n	800961a <_printf_float+0x1d2>
 800960a:	2b00      	cmp	r3, #0
 800960c:	d103      	bne.n	8009616 <_printf_float+0x1ce>
 800960e:	2201      	movs	r2, #1
 8009610:	6821      	ldr	r1, [r4, #0]
 8009612:	4211      	tst	r1, r2
 8009614:	d000      	beq.n	8009618 <_printf_float+0x1d0>
 8009616:	1c9a      	adds	r2, r3, #2
 8009618:	6122      	str	r2, [r4, #16]
 800961a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800961c:	65a3      	str	r3, [r4, #88]	; 0x58
 800961e:	2300      	movs	r3, #0
 8009620:	930b      	str	r3, [sp, #44]	; 0x2c
 8009622:	e7cf      	b.n	80095c4 <_printf_float+0x17c>
 8009624:	2367      	movs	r3, #103	; 0x67
 8009626:	930a      	str	r3, [sp, #40]	; 0x28
 8009628:	9911      	ldr	r1, [sp, #68]	; 0x44
 800962a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800962c:	4299      	cmp	r1, r3
 800962e:	db06      	blt.n	800963e <_printf_float+0x1f6>
 8009630:	6823      	ldr	r3, [r4, #0]
 8009632:	6121      	str	r1, [r4, #16]
 8009634:	07db      	lsls	r3, r3, #31
 8009636:	d5f0      	bpl.n	800961a <_printf_float+0x1d2>
 8009638:	3101      	adds	r1, #1
 800963a:	6121      	str	r1, [r4, #16]
 800963c:	e7ed      	b.n	800961a <_printf_float+0x1d2>
 800963e:	2201      	movs	r2, #1
 8009640:	2900      	cmp	r1, #0
 8009642:	dc01      	bgt.n	8009648 <_printf_float+0x200>
 8009644:	1892      	adds	r2, r2, r2
 8009646:	1a52      	subs	r2, r2, r1
 8009648:	189b      	adds	r3, r3, r2
 800964a:	e7dc      	b.n	8009606 <_printf_float+0x1be>
 800964c:	6822      	ldr	r2, [r4, #0]
 800964e:	0553      	lsls	r3, r2, #21
 8009650:	d408      	bmi.n	8009664 <_printf_float+0x21c>
 8009652:	6923      	ldr	r3, [r4, #16]
 8009654:	002a      	movs	r2, r5
 8009656:	0038      	movs	r0, r7
 8009658:	9908      	ldr	r1, [sp, #32]
 800965a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800965c:	47a8      	blx	r5
 800965e:	3001      	adds	r0, #1
 8009660:	d12a      	bne.n	80096b8 <_printf_float+0x270>
 8009662:	e74f      	b.n	8009504 <_printf_float+0xbc>
 8009664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009666:	2b65      	cmp	r3, #101	; 0x65
 8009668:	d800      	bhi.n	800966c <_printf_float+0x224>
 800966a:	e0ec      	b.n	8009846 <_printf_float+0x3fe>
 800966c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800966e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009670:	2200      	movs	r2, #0
 8009672:	2300      	movs	r3, #0
 8009674:	f7f6 fee8 	bl	8000448 <__aeabi_dcmpeq>
 8009678:	2800      	cmp	r0, #0
 800967a:	d034      	beq.n	80096e6 <_printf_float+0x29e>
 800967c:	2301      	movs	r3, #1
 800967e:	0038      	movs	r0, r7
 8009680:	4a37      	ldr	r2, [pc, #220]	; (8009760 <_printf_float+0x318>)
 8009682:	9908      	ldr	r1, [sp, #32]
 8009684:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009686:	47a8      	blx	r5
 8009688:	3001      	adds	r0, #1
 800968a:	d100      	bne.n	800968e <_printf_float+0x246>
 800968c:	e73a      	b.n	8009504 <_printf_float+0xbc>
 800968e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009690:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009692:	429a      	cmp	r2, r3
 8009694:	db02      	blt.n	800969c <_printf_float+0x254>
 8009696:	6823      	ldr	r3, [r4, #0]
 8009698:	07db      	lsls	r3, r3, #31
 800969a:	d50d      	bpl.n	80096b8 <_printf_float+0x270>
 800969c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800969e:	0038      	movs	r0, r7
 80096a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096a4:	9908      	ldr	r1, [sp, #32]
 80096a6:	47a8      	blx	r5
 80096a8:	2500      	movs	r5, #0
 80096aa:	3001      	adds	r0, #1
 80096ac:	d100      	bne.n	80096b0 <_printf_float+0x268>
 80096ae:	e729      	b.n	8009504 <_printf_float+0xbc>
 80096b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096b2:	3b01      	subs	r3, #1
 80096b4:	42ab      	cmp	r3, r5
 80096b6:	dc0a      	bgt.n	80096ce <_printf_float+0x286>
 80096b8:	6823      	ldr	r3, [r4, #0]
 80096ba:	079b      	lsls	r3, r3, #30
 80096bc:	d500      	bpl.n	80096c0 <_printf_float+0x278>
 80096be:	e116      	b.n	80098ee <_printf_float+0x4a6>
 80096c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096c2:	68e0      	ldr	r0, [r4, #12]
 80096c4:	4298      	cmp	r0, r3
 80096c6:	db00      	blt.n	80096ca <_printf_float+0x282>
 80096c8:	e71e      	b.n	8009508 <_printf_float+0xc0>
 80096ca:	0018      	movs	r0, r3
 80096cc:	e71c      	b.n	8009508 <_printf_float+0xc0>
 80096ce:	0022      	movs	r2, r4
 80096d0:	2301      	movs	r3, #1
 80096d2:	0038      	movs	r0, r7
 80096d4:	9908      	ldr	r1, [sp, #32]
 80096d6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80096d8:	321a      	adds	r2, #26
 80096da:	47b0      	blx	r6
 80096dc:	3001      	adds	r0, #1
 80096de:	d100      	bne.n	80096e2 <_printf_float+0x29a>
 80096e0:	e710      	b.n	8009504 <_printf_float+0xbc>
 80096e2:	3501      	adds	r5, #1
 80096e4:	e7e4      	b.n	80096b0 <_printf_float+0x268>
 80096e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	dc3b      	bgt.n	8009764 <_printf_float+0x31c>
 80096ec:	2301      	movs	r3, #1
 80096ee:	0038      	movs	r0, r7
 80096f0:	4a1b      	ldr	r2, [pc, #108]	; (8009760 <_printf_float+0x318>)
 80096f2:	9908      	ldr	r1, [sp, #32]
 80096f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80096f6:	47b0      	blx	r6
 80096f8:	3001      	adds	r0, #1
 80096fa:	d100      	bne.n	80096fe <_printf_float+0x2b6>
 80096fc:	e702      	b.n	8009504 <_printf_float+0xbc>
 80096fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009700:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009702:	4313      	orrs	r3, r2
 8009704:	d102      	bne.n	800970c <_printf_float+0x2c4>
 8009706:	6823      	ldr	r3, [r4, #0]
 8009708:	07db      	lsls	r3, r3, #31
 800970a:	d5d5      	bpl.n	80096b8 <_printf_float+0x270>
 800970c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800970e:	0038      	movs	r0, r7
 8009710:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009712:	9908      	ldr	r1, [sp, #32]
 8009714:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009716:	47b0      	blx	r6
 8009718:	2300      	movs	r3, #0
 800971a:	3001      	adds	r0, #1
 800971c:	d100      	bne.n	8009720 <_printf_float+0x2d8>
 800971e:	e6f1      	b.n	8009504 <_printf_float+0xbc>
 8009720:	930a      	str	r3, [sp, #40]	; 0x28
 8009722:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009724:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009726:	425b      	negs	r3, r3
 8009728:	4293      	cmp	r3, r2
 800972a:	dc01      	bgt.n	8009730 <_printf_float+0x2e8>
 800972c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800972e:	e791      	b.n	8009654 <_printf_float+0x20c>
 8009730:	0022      	movs	r2, r4
 8009732:	2301      	movs	r3, #1
 8009734:	0038      	movs	r0, r7
 8009736:	9908      	ldr	r1, [sp, #32]
 8009738:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800973a:	321a      	adds	r2, #26
 800973c:	47b0      	blx	r6
 800973e:	3001      	adds	r0, #1
 8009740:	d100      	bne.n	8009744 <_printf_float+0x2fc>
 8009742:	e6df      	b.n	8009504 <_printf_float+0xbc>
 8009744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009746:	3301      	adds	r3, #1
 8009748:	e7ea      	b.n	8009720 <_printf_float+0x2d8>
 800974a:	46c0      	nop			; (mov r8, r8)
 800974c:	7fefffff 	.word	0x7fefffff
 8009750:	0800c158 	.word	0x0800c158
 8009754:	0800c15c 	.word	0x0800c15c
 8009758:	0800c160 	.word	0x0800c160
 800975c:	0800c164 	.word	0x0800c164
 8009760:	0800c168 	.word	0x0800c168
 8009764:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009766:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009768:	920a      	str	r2, [sp, #40]	; 0x28
 800976a:	429a      	cmp	r2, r3
 800976c:	dd00      	ble.n	8009770 <_printf_float+0x328>
 800976e:	930a      	str	r3, [sp, #40]	; 0x28
 8009770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009772:	2b00      	cmp	r3, #0
 8009774:	dc3d      	bgt.n	80097f2 <_printf_float+0x3aa>
 8009776:	2300      	movs	r3, #0
 8009778:	930e      	str	r3, [sp, #56]	; 0x38
 800977a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800977c:	43db      	mvns	r3, r3
 800977e:	17db      	asrs	r3, r3, #31
 8009780:	930f      	str	r3, [sp, #60]	; 0x3c
 8009782:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009784:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009786:	930b      	str	r3, [sp, #44]	; 0x2c
 8009788:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800978a:	4013      	ands	r3, r2
 800978c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800978e:	1ad3      	subs	r3, r2, r3
 8009790:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009792:	4293      	cmp	r3, r2
 8009794:	dc36      	bgt.n	8009804 <_printf_float+0x3bc>
 8009796:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009798:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800979a:	429a      	cmp	r2, r3
 800979c:	db40      	blt.n	8009820 <_printf_float+0x3d8>
 800979e:	6823      	ldr	r3, [r4, #0]
 80097a0:	07db      	lsls	r3, r3, #31
 80097a2:	d43d      	bmi.n	8009820 <_printf_float+0x3d8>
 80097a4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80097a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80097a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097aa:	1af3      	subs	r3, r6, r3
 80097ac:	1ab6      	subs	r6, r6, r2
 80097ae:	429e      	cmp	r6, r3
 80097b0:	dd00      	ble.n	80097b4 <_printf_float+0x36c>
 80097b2:	001e      	movs	r6, r3
 80097b4:	2e00      	cmp	r6, #0
 80097b6:	dc3c      	bgt.n	8009832 <_printf_float+0x3ea>
 80097b8:	2300      	movs	r3, #0
 80097ba:	930a      	str	r3, [sp, #40]	; 0x28
 80097bc:	43f3      	mvns	r3, r6
 80097be:	17db      	asrs	r3, r3, #31
 80097c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80097c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80097c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80097c6:	1a9b      	subs	r3, r3, r2
 80097c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097ca:	4032      	ands	r2, r6
 80097cc:	1a9b      	subs	r3, r3, r2
 80097ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097d0:	4293      	cmp	r3, r2
 80097d2:	dc00      	bgt.n	80097d6 <_printf_float+0x38e>
 80097d4:	e770      	b.n	80096b8 <_printf_float+0x270>
 80097d6:	0022      	movs	r2, r4
 80097d8:	2301      	movs	r3, #1
 80097da:	0038      	movs	r0, r7
 80097dc:	9908      	ldr	r1, [sp, #32]
 80097de:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80097e0:	321a      	adds	r2, #26
 80097e2:	47a8      	blx	r5
 80097e4:	3001      	adds	r0, #1
 80097e6:	d100      	bne.n	80097ea <_printf_float+0x3a2>
 80097e8:	e68c      	b.n	8009504 <_printf_float+0xbc>
 80097ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097ec:	3301      	adds	r3, #1
 80097ee:	930a      	str	r3, [sp, #40]	; 0x28
 80097f0:	e7e7      	b.n	80097c2 <_printf_float+0x37a>
 80097f2:	002a      	movs	r2, r5
 80097f4:	0038      	movs	r0, r7
 80097f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097f8:	9908      	ldr	r1, [sp, #32]
 80097fa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80097fc:	47b0      	blx	r6
 80097fe:	3001      	adds	r0, #1
 8009800:	d1b9      	bne.n	8009776 <_printf_float+0x32e>
 8009802:	e67f      	b.n	8009504 <_printf_float+0xbc>
 8009804:	0022      	movs	r2, r4
 8009806:	2301      	movs	r3, #1
 8009808:	0038      	movs	r0, r7
 800980a:	9908      	ldr	r1, [sp, #32]
 800980c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800980e:	321a      	adds	r2, #26
 8009810:	47b0      	blx	r6
 8009812:	3001      	adds	r0, #1
 8009814:	d100      	bne.n	8009818 <_printf_float+0x3d0>
 8009816:	e675      	b.n	8009504 <_printf_float+0xbc>
 8009818:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800981a:	3301      	adds	r3, #1
 800981c:	930e      	str	r3, [sp, #56]	; 0x38
 800981e:	e7b0      	b.n	8009782 <_printf_float+0x33a>
 8009820:	0038      	movs	r0, r7
 8009822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009824:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009826:	9908      	ldr	r1, [sp, #32]
 8009828:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800982a:	47b0      	blx	r6
 800982c:	3001      	adds	r0, #1
 800982e:	d1b9      	bne.n	80097a4 <_printf_float+0x35c>
 8009830:	e668      	b.n	8009504 <_printf_float+0xbc>
 8009832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009834:	0038      	movs	r0, r7
 8009836:	18ea      	adds	r2, r5, r3
 8009838:	9908      	ldr	r1, [sp, #32]
 800983a:	0033      	movs	r3, r6
 800983c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800983e:	47a8      	blx	r5
 8009840:	3001      	adds	r0, #1
 8009842:	d1b9      	bne.n	80097b8 <_printf_float+0x370>
 8009844:	e65e      	b.n	8009504 <_printf_float+0xbc>
 8009846:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009848:	2b01      	cmp	r3, #1
 800984a:	dc02      	bgt.n	8009852 <_printf_float+0x40a>
 800984c:	2301      	movs	r3, #1
 800984e:	421a      	tst	r2, r3
 8009850:	d03a      	beq.n	80098c8 <_printf_float+0x480>
 8009852:	2301      	movs	r3, #1
 8009854:	002a      	movs	r2, r5
 8009856:	0038      	movs	r0, r7
 8009858:	9908      	ldr	r1, [sp, #32]
 800985a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800985c:	47b0      	blx	r6
 800985e:	3001      	adds	r0, #1
 8009860:	d100      	bne.n	8009864 <_printf_float+0x41c>
 8009862:	e64f      	b.n	8009504 <_printf_float+0xbc>
 8009864:	0038      	movs	r0, r7
 8009866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009868:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800986a:	9908      	ldr	r1, [sp, #32]
 800986c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800986e:	47b0      	blx	r6
 8009870:	3001      	adds	r0, #1
 8009872:	d100      	bne.n	8009876 <_printf_float+0x42e>
 8009874:	e646      	b.n	8009504 <_printf_float+0xbc>
 8009876:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009878:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800987a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800987c:	2200      	movs	r2, #0
 800987e:	001e      	movs	r6, r3
 8009880:	2300      	movs	r3, #0
 8009882:	f7f6 fde1 	bl	8000448 <__aeabi_dcmpeq>
 8009886:	2800      	cmp	r0, #0
 8009888:	d11c      	bne.n	80098c4 <_printf_float+0x47c>
 800988a:	0033      	movs	r3, r6
 800988c:	1c6a      	adds	r2, r5, #1
 800988e:	3b01      	subs	r3, #1
 8009890:	0038      	movs	r0, r7
 8009892:	9908      	ldr	r1, [sp, #32]
 8009894:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009896:	47a8      	blx	r5
 8009898:	3001      	adds	r0, #1
 800989a:	d10f      	bne.n	80098bc <_printf_float+0x474>
 800989c:	e632      	b.n	8009504 <_printf_float+0xbc>
 800989e:	0022      	movs	r2, r4
 80098a0:	2301      	movs	r3, #1
 80098a2:	0038      	movs	r0, r7
 80098a4:	9908      	ldr	r1, [sp, #32]
 80098a6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80098a8:	321a      	adds	r2, #26
 80098aa:	47b0      	blx	r6
 80098ac:	3001      	adds	r0, #1
 80098ae:	d100      	bne.n	80098b2 <_printf_float+0x46a>
 80098b0:	e628      	b.n	8009504 <_printf_float+0xbc>
 80098b2:	3501      	adds	r5, #1
 80098b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80098b6:	3b01      	subs	r3, #1
 80098b8:	42ab      	cmp	r3, r5
 80098ba:	dcf0      	bgt.n	800989e <_printf_float+0x456>
 80098bc:	0022      	movs	r2, r4
 80098be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098c0:	3250      	adds	r2, #80	; 0x50
 80098c2:	e6c8      	b.n	8009656 <_printf_float+0x20e>
 80098c4:	2500      	movs	r5, #0
 80098c6:	e7f5      	b.n	80098b4 <_printf_float+0x46c>
 80098c8:	002a      	movs	r2, r5
 80098ca:	e7e1      	b.n	8009890 <_printf_float+0x448>
 80098cc:	0022      	movs	r2, r4
 80098ce:	2301      	movs	r3, #1
 80098d0:	0038      	movs	r0, r7
 80098d2:	9908      	ldr	r1, [sp, #32]
 80098d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80098d6:	3219      	adds	r2, #25
 80098d8:	47b0      	blx	r6
 80098da:	3001      	adds	r0, #1
 80098dc:	d100      	bne.n	80098e0 <_printf_float+0x498>
 80098de:	e611      	b.n	8009504 <_printf_float+0xbc>
 80098e0:	3501      	adds	r5, #1
 80098e2:	68e3      	ldr	r3, [r4, #12]
 80098e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80098e6:	1a9b      	subs	r3, r3, r2
 80098e8:	42ab      	cmp	r3, r5
 80098ea:	dcef      	bgt.n	80098cc <_printf_float+0x484>
 80098ec:	e6e8      	b.n	80096c0 <_printf_float+0x278>
 80098ee:	2500      	movs	r5, #0
 80098f0:	e7f7      	b.n	80098e2 <_printf_float+0x49a>
 80098f2:	46c0      	nop			; (mov r8, r8)

080098f4 <_printf_common>:
 80098f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098f6:	0016      	movs	r6, r2
 80098f8:	9301      	str	r3, [sp, #4]
 80098fa:	688a      	ldr	r2, [r1, #8]
 80098fc:	690b      	ldr	r3, [r1, #16]
 80098fe:	000c      	movs	r4, r1
 8009900:	9000      	str	r0, [sp, #0]
 8009902:	4293      	cmp	r3, r2
 8009904:	da00      	bge.n	8009908 <_printf_common+0x14>
 8009906:	0013      	movs	r3, r2
 8009908:	0022      	movs	r2, r4
 800990a:	6033      	str	r3, [r6, #0]
 800990c:	3243      	adds	r2, #67	; 0x43
 800990e:	7812      	ldrb	r2, [r2, #0]
 8009910:	2a00      	cmp	r2, #0
 8009912:	d001      	beq.n	8009918 <_printf_common+0x24>
 8009914:	3301      	adds	r3, #1
 8009916:	6033      	str	r3, [r6, #0]
 8009918:	6823      	ldr	r3, [r4, #0]
 800991a:	069b      	lsls	r3, r3, #26
 800991c:	d502      	bpl.n	8009924 <_printf_common+0x30>
 800991e:	6833      	ldr	r3, [r6, #0]
 8009920:	3302      	adds	r3, #2
 8009922:	6033      	str	r3, [r6, #0]
 8009924:	6822      	ldr	r2, [r4, #0]
 8009926:	2306      	movs	r3, #6
 8009928:	0015      	movs	r5, r2
 800992a:	401d      	ands	r5, r3
 800992c:	421a      	tst	r2, r3
 800992e:	d027      	beq.n	8009980 <_printf_common+0x8c>
 8009930:	0023      	movs	r3, r4
 8009932:	3343      	adds	r3, #67	; 0x43
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	1e5a      	subs	r2, r3, #1
 8009938:	4193      	sbcs	r3, r2
 800993a:	6822      	ldr	r2, [r4, #0]
 800993c:	0692      	lsls	r2, r2, #26
 800993e:	d430      	bmi.n	80099a2 <_printf_common+0xae>
 8009940:	0022      	movs	r2, r4
 8009942:	9901      	ldr	r1, [sp, #4]
 8009944:	9800      	ldr	r0, [sp, #0]
 8009946:	9d08      	ldr	r5, [sp, #32]
 8009948:	3243      	adds	r2, #67	; 0x43
 800994a:	47a8      	blx	r5
 800994c:	3001      	adds	r0, #1
 800994e:	d025      	beq.n	800999c <_printf_common+0xa8>
 8009950:	2206      	movs	r2, #6
 8009952:	6823      	ldr	r3, [r4, #0]
 8009954:	2500      	movs	r5, #0
 8009956:	4013      	ands	r3, r2
 8009958:	2b04      	cmp	r3, #4
 800995a:	d105      	bne.n	8009968 <_printf_common+0x74>
 800995c:	6833      	ldr	r3, [r6, #0]
 800995e:	68e5      	ldr	r5, [r4, #12]
 8009960:	1aed      	subs	r5, r5, r3
 8009962:	43eb      	mvns	r3, r5
 8009964:	17db      	asrs	r3, r3, #31
 8009966:	401d      	ands	r5, r3
 8009968:	68a3      	ldr	r3, [r4, #8]
 800996a:	6922      	ldr	r2, [r4, #16]
 800996c:	4293      	cmp	r3, r2
 800996e:	dd01      	ble.n	8009974 <_printf_common+0x80>
 8009970:	1a9b      	subs	r3, r3, r2
 8009972:	18ed      	adds	r5, r5, r3
 8009974:	2600      	movs	r6, #0
 8009976:	42b5      	cmp	r5, r6
 8009978:	d120      	bne.n	80099bc <_printf_common+0xc8>
 800997a:	2000      	movs	r0, #0
 800997c:	e010      	b.n	80099a0 <_printf_common+0xac>
 800997e:	3501      	adds	r5, #1
 8009980:	68e3      	ldr	r3, [r4, #12]
 8009982:	6832      	ldr	r2, [r6, #0]
 8009984:	1a9b      	subs	r3, r3, r2
 8009986:	42ab      	cmp	r3, r5
 8009988:	ddd2      	ble.n	8009930 <_printf_common+0x3c>
 800998a:	0022      	movs	r2, r4
 800998c:	2301      	movs	r3, #1
 800998e:	9901      	ldr	r1, [sp, #4]
 8009990:	9800      	ldr	r0, [sp, #0]
 8009992:	9f08      	ldr	r7, [sp, #32]
 8009994:	3219      	adds	r2, #25
 8009996:	47b8      	blx	r7
 8009998:	3001      	adds	r0, #1
 800999a:	d1f0      	bne.n	800997e <_printf_common+0x8a>
 800999c:	2001      	movs	r0, #1
 800999e:	4240      	negs	r0, r0
 80099a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80099a2:	2030      	movs	r0, #48	; 0x30
 80099a4:	18e1      	adds	r1, r4, r3
 80099a6:	3143      	adds	r1, #67	; 0x43
 80099a8:	7008      	strb	r0, [r1, #0]
 80099aa:	0021      	movs	r1, r4
 80099ac:	1c5a      	adds	r2, r3, #1
 80099ae:	3145      	adds	r1, #69	; 0x45
 80099b0:	7809      	ldrb	r1, [r1, #0]
 80099b2:	18a2      	adds	r2, r4, r2
 80099b4:	3243      	adds	r2, #67	; 0x43
 80099b6:	3302      	adds	r3, #2
 80099b8:	7011      	strb	r1, [r2, #0]
 80099ba:	e7c1      	b.n	8009940 <_printf_common+0x4c>
 80099bc:	0022      	movs	r2, r4
 80099be:	2301      	movs	r3, #1
 80099c0:	9901      	ldr	r1, [sp, #4]
 80099c2:	9800      	ldr	r0, [sp, #0]
 80099c4:	9f08      	ldr	r7, [sp, #32]
 80099c6:	321a      	adds	r2, #26
 80099c8:	47b8      	blx	r7
 80099ca:	3001      	adds	r0, #1
 80099cc:	d0e6      	beq.n	800999c <_printf_common+0xa8>
 80099ce:	3601      	adds	r6, #1
 80099d0:	e7d1      	b.n	8009976 <_printf_common+0x82>
	...

080099d4 <_printf_i>:
 80099d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099d6:	b08b      	sub	sp, #44	; 0x2c
 80099d8:	9206      	str	r2, [sp, #24]
 80099da:	000a      	movs	r2, r1
 80099dc:	3243      	adds	r2, #67	; 0x43
 80099de:	9307      	str	r3, [sp, #28]
 80099e0:	9005      	str	r0, [sp, #20]
 80099e2:	9204      	str	r2, [sp, #16]
 80099e4:	7e0a      	ldrb	r2, [r1, #24]
 80099e6:	000c      	movs	r4, r1
 80099e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099ea:	2a78      	cmp	r2, #120	; 0x78
 80099ec:	d809      	bhi.n	8009a02 <_printf_i+0x2e>
 80099ee:	2a62      	cmp	r2, #98	; 0x62
 80099f0:	d80b      	bhi.n	8009a0a <_printf_i+0x36>
 80099f2:	2a00      	cmp	r2, #0
 80099f4:	d100      	bne.n	80099f8 <_printf_i+0x24>
 80099f6:	e0be      	b.n	8009b76 <_printf_i+0x1a2>
 80099f8:	497c      	ldr	r1, [pc, #496]	; (8009bec <_printf_i+0x218>)
 80099fa:	9103      	str	r1, [sp, #12]
 80099fc:	2a58      	cmp	r2, #88	; 0x58
 80099fe:	d100      	bne.n	8009a02 <_printf_i+0x2e>
 8009a00:	e093      	b.n	8009b2a <_printf_i+0x156>
 8009a02:	0026      	movs	r6, r4
 8009a04:	3642      	adds	r6, #66	; 0x42
 8009a06:	7032      	strb	r2, [r6, #0]
 8009a08:	e022      	b.n	8009a50 <_printf_i+0x7c>
 8009a0a:	0010      	movs	r0, r2
 8009a0c:	3863      	subs	r0, #99	; 0x63
 8009a0e:	2815      	cmp	r0, #21
 8009a10:	d8f7      	bhi.n	8009a02 <_printf_i+0x2e>
 8009a12:	f7f6 fb89 	bl	8000128 <__gnu_thumb1_case_shi>
 8009a16:	0016      	.short	0x0016
 8009a18:	fff6001f 	.word	0xfff6001f
 8009a1c:	fff6fff6 	.word	0xfff6fff6
 8009a20:	001ffff6 	.word	0x001ffff6
 8009a24:	fff6fff6 	.word	0xfff6fff6
 8009a28:	fff6fff6 	.word	0xfff6fff6
 8009a2c:	003600a3 	.word	0x003600a3
 8009a30:	fff60083 	.word	0xfff60083
 8009a34:	00b4fff6 	.word	0x00b4fff6
 8009a38:	0036fff6 	.word	0x0036fff6
 8009a3c:	fff6fff6 	.word	0xfff6fff6
 8009a40:	0087      	.short	0x0087
 8009a42:	0026      	movs	r6, r4
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	3642      	adds	r6, #66	; 0x42
 8009a48:	1d11      	adds	r1, r2, #4
 8009a4a:	6019      	str	r1, [r3, #0]
 8009a4c:	6813      	ldr	r3, [r2, #0]
 8009a4e:	7033      	strb	r3, [r6, #0]
 8009a50:	2301      	movs	r3, #1
 8009a52:	e0a2      	b.n	8009b9a <_printf_i+0x1c6>
 8009a54:	6818      	ldr	r0, [r3, #0]
 8009a56:	6809      	ldr	r1, [r1, #0]
 8009a58:	1d02      	adds	r2, r0, #4
 8009a5a:	060d      	lsls	r5, r1, #24
 8009a5c:	d50b      	bpl.n	8009a76 <_printf_i+0xa2>
 8009a5e:	6805      	ldr	r5, [r0, #0]
 8009a60:	601a      	str	r2, [r3, #0]
 8009a62:	2d00      	cmp	r5, #0
 8009a64:	da03      	bge.n	8009a6e <_printf_i+0x9a>
 8009a66:	232d      	movs	r3, #45	; 0x2d
 8009a68:	9a04      	ldr	r2, [sp, #16]
 8009a6a:	426d      	negs	r5, r5
 8009a6c:	7013      	strb	r3, [r2, #0]
 8009a6e:	4b5f      	ldr	r3, [pc, #380]	; (8009bec <_printf_i+0x218>)
 8009a70:	270a      	movs	r7, #10
 8009a72:	9303      	str	r3, [sp, #12]
 8009a74:	e01b      	b.n	8009aae <_printf_i+0xda>
 8009a76:	6805      	ldr	r5, [r0, #0]
 8009a78:	601a      	str	r2, [r3, #0]
 8009a7a:	0649      	lsls	r1, r1, #25
 8009a7c:	d5f1      	bpl.n	8009a62 <_printf_i+0x8e>
 8009a7e:	b22d      	sxth	r5, r5
 8009a80:	e7ef      	b.n	8009a62 <_printf_i+0x8e>
 8009a82:	680d      	ldr	r5, [r1, #0]
 8009a84:	6819      	ldr	r1, [r3, #0]
 8009a86:	1d08      	adds	r0, r1, #4
 8009a88:	6018      	str	r0, [r3, #0]
 8009a8a:	062e      	lsls	r6, r5, #24
 8009a8c:	d501      	bpl.n	8009a92 <_printf_i+0xbe>
 8009a8e:	680d      	ldr	r5, [r1, #0]
 8009a90:	e003      	b.n	8009a9a <_printf_i+0xc6>
 8009a92:	066d      	lsls	r5, r5, #25
 8009a94:	d5fb      	bpl.n	8009a8e <_printf_i+0xba>
 8009a96:	680d      	ldr	r5, [r1, #0]
 8009a98:	b2ad      	uxth	r5, r5
 8009a9a:	4b54      	ldr	r3, [pc, #336]	; (8009bec <_printf_i+0x218>)
 8009a9c:	2708      	movs	r7, #8
 8009a9e:	9303      	str	r3, [sp, #12]
 8009aa0:	2a6f      	cmp	r2, #111	; 0x6f
 8009aa2:	d000      	beq.n	8009aa6 <_printf_i+0xd2>
 8009aa4:	3702      	adds	r7, #2
 8009aa6:	0023      	movs	r3, r4
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	3343      	adds	r3, #67	; 0x43
 8009aac:	701a      	strb	r2, [r3, #0]
 8009aae:	6863      	ldr	r3, [r4, #4]
 8009ab0:	60a3      	str	r3, [r4, #8]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	db03      	blt.n	8009abe <_printf_i+0xea>
 8009ab6:	2104      	movs	r1, #4
 8009ab8:	6822      	ldr	r2, [r4, #0]
 8009aba:	438a      	bics	r2, r1
 8009abc:	6022      	str	r2, [r4, #0]
 8009abe:	2d00      	cmp	r5, #0
 8009ac0:	d102      	bne.n	8009ac8 <_printf_i+0xf4>
 8009ac2:	9e04      	ldr	r6, [sp, #16]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d00c      	beq.n	8009ae2 <_printf_i+0x10e>
 8009ac8:	9e04      	ldr	r6, [sp, #16]
 8009aca:	0028      	movs	r0, r5
 8009acc:	0039      	movs	r1, r7
 8009ace:	f7f6 fbbb 	bl	8000248 <__aeabi_uidivmod>
 8009ad2:	9b03      	ldr	r3, [sp, #12]
 8009ad4:	3e01      	subs	r6, #1
 8009ad6:	5c5b      	ldrb	r3, [r3, r1]
 8009ad8:	7033      	strb	r3, [r6, #0]
 8009ada:	002b      	movs	r3, r5
 8009adc:	0005      	movs	r5, r0
 8009ade:	429f      	cmp	r7, r3
 8009ae0:	d9f3      	bls.n	8009aca <_printf_i+0xf6>
 8009ae2:	2f08      	cmp	r7, #8
 8009ae4:	d109      	bne.n	8009afa <_printf_i+0x126>
 8009ae6:	6823      	ldr	r3, [r4, #0]
 8009ae8:	07db      	lsls	r3, r3, #31
 8009aea:	d506      	bpl.n	8009afa <_printf_i+0x126>
 8009aec:	6862      	ldr	r2, [r4, #4]
 8009aee:	6923      	ldr	r3, [r4, #16]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	dc02      	bgt.n	8009afa <_printf_i+0x126>
 8009af4:	2330      	movs	r3, #48	; 0x30
 8009af6:	3e01      	subs	r6, #1
 8009af8:	7033      	strb	r3, [r6, #0]
 8009afa:	9b04      	ldr	r3, [sp, #16]
 8009afc:	1b9b      	subs	r3, r3, r6
 8009afe:	6123      	str	r3, [r4, #16]
 8009b00:	9b07      	ldr	r3, [sp, #28]
 8009b02:	0021      	movs	r1, r4
 8009b04:	9300      	str	r3, [sp, #0]
 8009b06:	9805      	ldr	r0, [sp, #20]
 8009b08:	9b06      	ldr	r3, [sp, #24]
 8009b0a:	aa09      	add	r2, sp, #36	; 0x24
 8009b0c:	f7ff fef2 	bl	80098f4 <_printf_common>
 8009b10:	3001      	adds	r0, #1
 8009b12:	d147      	bne.n	8009ba4 <_printf_i+0x1d0>
 8009b14:	2001      	movs	r0, #1
 8009b16:	4240      	negs	r0, r0
 8009b18:	b00b      	add	sp, #44	; 0x2c
 8009b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b1c:	2220      	movs	r2, #32
 8009b1e:	6809      	ldr	r1, [r1, #0]
 8009b20:	430a      	orrs	r2, r1
 8009b22:	6022      	str	r2, [r4, #0]
 8009b24:	2278      	movs	r2, #120	; 0x78
 8009b26:	4932      	ldr	r1, [pc, #200]	; (8009bf0 <_printf_i+0x21c>)
 8009b28:	9103      	str	r1, [sp, #12]
 8009b2a:	0021      	movs	r1, r4
 8009b2c:	3145      	adds	r1, #69	; 0x45
 8009b2e:	700a      	strb	r2, [r1, #0]
 8009b30:	6819      	ldr	r1, [r3, #0]
 8009b32:	6822      	ldr	r2, [r4, #0]
 8009b34:	c920      	ldmia	r1!, {r5}
 8009b36:	0610      	lsls	r0, r2, #24
 8009b38:	d402      	bmi.n	8009b40 <_printf_i+0x16c>
 8009b3a:	0650      	lsls	r0, r2, #25
 8009b3c:	d500      	bpl.n	8009b40 <_printf_i+0x16c>
 8009b3e:	b2ad      	uxth	r5, r5
 8009b40:	6019      	str	r1, [r3, #0]
 8009b42:	07d3      	lsls	r3, r2, #31
 8009b44:	d502      	bpl.n	8009b4c <_printf_i+0x178>
 8009b46:	2320      	movs	r3, #32
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	6023      	str	r3, [r4, #0]
 8009b4c:	2710      	movs	r7, #16
 8009b4e:	2d00      	cmp	r5, #0
 8009b50:	d1a9      	bne.n	8009aa6 <_printf_i+0xd2>
 8009b52:	2220      	movs	r2, #32
 8009b54:	6823      	ldr	r3, [r4, #0]
 8009b56:	4393      	bics	r3, r2
 8009b58:	6023      	str	r3, [r4, #0]
 8009b5a:	e7a4      	b.n	8009aa6 <_printf_i+0xd2>
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	680d      	ldr	r5, [r1, #0]
 8009b60:	1d10      	adds	r0, r2, #4
 8009b62:	6949      	ldr	r1, [r1, #20]
 8009b64:	6018      	str	r0, [r3, #0]
 8009b66:	6813      	ldr	r3, [r2, #0]
 8009b68:	062e      	lsls	r6, r5, #24
 8009b6a:	d501      	bpl.n	8009b70 <_printf_i+0x19c>
 8009b6c:	6019      	str	r1, [r3, #0]
 8009b6e:	e002      	b.n	8009b76 <_printf_i+0x1a2>
 8009b70:	066d      	lsls	r5, r5, #25
 8009b72:	d5fb      	bpl.n	8009b6c <_printf_i+0x198>
 8009b74:	8019      	strh	r1, [r3, #0]
 8009b76:	2300      	movs	r3, #0
 8009b78:	9e04      	ldr	r6, [sp, #16]
 8009b7a:	6123      	str	r3, [r4, #16]
 8009b7c:	e7c0      	b.n	8009b00 <_printf_i+0x12c>
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	1d11      	adds	r1, r2, #4
 8009b82:	6019      	str	r1, [r3, #0]
 8009b84:	6816      	ldr	r6, [r2, #0]
 8009b86:	2100      	movs	r1, #0
 8009b88:	0030      	movs	r0, r6
 8009b8a:	6862      	ldr	r2, [r4, #4]
 8009b8c:	f000 f9d9 	bl	8009f42 <memchr>
 8009b90:	2800      	cmp	r0, #0
 8009b92:	d001      	beq.n	8009b98 <_printf_i+0x1c4>
 8009b94:	1b80      	subs	r0, r0, r6
 8009b96:	6060      	str	r0, [r4, #4]
 8009b98:	6863      	ldr	r3, [r4, #4]
 8009b9a:	6123      	str	r3, [r4, #16]
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	9a04      	ldr	r2, [sp, #16]
 8009ba0:	7013      	strb	r3, [r2, #0]
 8009ba2:	e7ad      	b.n	8009b00 <_printf_i+0x12c>
 8009ba4:	0032      	movs	r2, r6
 8009ba6:	6923      	ldr	r3, [r4, #16]
 8009ba8:	9906      	ldr	r1, [sp, #24]
 8009baa:	9805      	ldr	r0, [sp, #20]
 8009bac:	9d07      	ldr	r5, [sp, #28]
 8009bae:	47a8      	blx	r5
 8009bb0:	3001      	adds	r0, #1
 8009bb2:	d0af      	beq.n	8009b14 <_printf_i+0x140>
 8009bb4:	6823      	ldr	r3, [r4, #0]
 8009bb6:	079b      	lsls	r3, r3, #30
 8009bb8:	d415      	bmi.n	8009be6 <_printf_i+0x212>
 8009bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bbc:	68e0      	ldr	r0, [r4, #12]
 8009bbe:	4298      	cmp	r0, r3
 8009bc0:	daaa      	bge.n	8009b18 <_printf_i+0x144>
 8009bc2:	0018      	movs	r0, r3
 8009bc4:	e7a8      	b.n	8009b18 <_printf_i+0x144>
 8009bc6:	0022      	movs	r2, r4
 8009bc8:	2301      	movs	r3, #1
 8009bca:	9906      	ldr	r1, [sp, #24]
 8009bcc:	9805      	ldr	r0, [sp, #20]
 8009bce:	9e07      	ldr	r6, [sp, #28]
 8009bd0:	3219      	adds	r2, #25
 8009bd2:	47b0      	blx	r6
 8009bd4:	3001      	adds	r0, #1
 8009bd6:	d09d      	beq.n	8009b14 <_printf_i+0x140>
 8009bd8:	3501      	adds	r5, #1
 8009bda:	68e3      	ldr	r3, [r4, #12]
 8009bdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bde:	1a9b      	subs	r3, r3, r2
 8009be0:	42ab      	cmp	r3, r5
 8009be2:	dcf0      	bgt.n	8009bc6 <_printf_i+0x1f2>
 8009be4:	e7e9      	b.n	8009bba <_printf_i+0x1e6>
 8009be6:	2500      	movs	r5, #0
 8009be8:	e7f7      	b.n	8009bda <_printf_i+0x206>
 8009bea:	46c0      	nop			; (mov r8, r8)
 8009bec:	0800c16a 	.word	0x0800c16a
 8009bf0:	0800c17b 	.word	0x0800c17b

08009bf4 <std>:
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	b510      	push	{r4, lr}
 8009bf8:	0004      	movs	r4, r0
 8009bfa:	6003      	str	r3, [r0, #0]
 8009bfc:	6043      	str	r3, [r0, #4]
 8009bfe:	6083      	str	r3, [r0, #8]
 8009c00:	8181      	strh	r1, [r0, #12]
 8009c02:	6643      	str	r3, [r0, #100]	; 0x64
 8009c04:	81c2      	strh	r2, [r0, #14]
 8009c06:	6103      	str	r3, [r0, #16]
 8009c08:	6143      	str	r3, [r0, #20]
 8009c0a:	6183      	str	r3, [r0, #24]
 8009c0c:	0019      	movs	r1, r3
 8009c0e:	2208      	movs	r2, #8
 8009c10:	305c      	adds	r0, #92	; 0x5c
 8009c12:	f000 f90f 	bl	8009e34 <memset>
 8009c16:	4b0b      	ldr	r3, [pc, #44]	; (8009c44 <std+0x50>)
 8009c18:	6224      	str	r4, [r4, #32]
 8009c1a:	6263      	str	r3, [r4, #36]	; 0x24
 8009c1c:	4b0a      	ldr	r3, [pc, #40]	; (8009c48 <std+0x54>)
 8009c1e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c20:	4b0a      	ldr	r3, [pc, #40]	; (8009c4c <std+0x58>)
 8009c22:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c24:	4b0a      	ldr	r3, [pc, #40]	; (8009c50 <std+0x5c>)
 8009c26:	6323      	str	r3, [r4, #48]	; 0x30
 8009c28:	4b0a      	ldr	r3, [pc, #40]	; (8009c54 <std+0x60>)
 8009c2a:	429c      	cmp	r4, r3
 8009c2c:	d005      	beq.n	8009c3a <std+0x46>
 8009c2e:	4b0a      	ldr	r3, [pc, #40]	; (8009c58 <std+0x64>)
 8009c30:	429c      	cmp	r4, r3
 8009c32:	d002      	beq.n	8009c3a <std+0x46>
 8009c34:	4b09      	ldr	r3, [pc, #36]	; (8009c5c <std+0x68>)
 8009c36:	429c      	cmp	r4, r3
 8009c38:	d103      	bne.n	8009c42 <std+0x4e>
 8009c3a:	0020      	movs	r0, r4
 8009c3c:	3058      	adds	r0, #88	; 0x58
 8009c3e:	f000 f97d 	bl	8009f3c <__retarget_lock_init_recursive>
 8009c42:	bd10      	pop	{r4, pc}
 8009c44:	08009d9d 	.word	0x08009d9d
 8009c48:	08009dc5 	.word	0x08009dc5
 8009c4c:	08009dfd 	.word	0x08009dfd
 8009c50:	08009e29 	.word	0x08009e29
 8009c54:	20000558 	.word	0x20000558
 8009c58:	200005c0 	.word	0x200005c0
 8009c5c:	20000628 	.word	0x20000628

08009c60 <stdio_exit_handler>:
 8009c60:	b510      	push	{r4, lr}
 8009c62:	4a03      	ldr	r2, [pc, #12]	; (8009c70 <stdio_exit_handler+0x10>)
 8009c64:	4903      	ldr	r1, [pc, #12]	; (8009c74 <stdio_exit_handler+0x14>)
 8009c66:	4804      	ldr	r0, [pc, #16]	; (8009c78 <stdio_exit_handler+0x18>)
 8009c68:	f000 f86c 	bl	8009d44 <_fwalk_sglue>
 8009c6c:	bd10      	pop	{r4, pc}
 8009c6e:	46c0      	nop			; (mov r8, r8)
 8009c70:	2000003c 	.word	0x2000003c
 8009c74:	0800b975 	.word	0x0800b975
 8009c78:	20000048 	.word	0x20000048

08009c7c <cleanup_stdio>:
 8009c7c:	6841      	ldr	r1, [r0, #4]
 8009c7e:	4b0b      	ldr	r3, [pc, #44]	; (8009cac <cleanup_stdio+0x30>)
 8009c80:	b510      	push	{r4, lr}
 8009c82:	0004      	movs	r4, r0
 8009c84:	4299      	cmp	r1, r3
 8009c86:	d001      	beq.n	8009c8c <cleanup_stdio+0x10>
 8009c88:	f001 fe74 	bl	800b974 <_fflush_r>
 8009c8c:	68a1      	ldr	r1, [r4, #8]
 8009c8e:	4b08      	ldr	r3, [pc, #32]	; (8009cb0 <cleanup_stdio+0x34>)
 8009c90:	4299      	cmp	r1, r3
 8009c92:	d002      	beq.n	8009c9a <cleanup_stdio+0x1e>
 8009c94:	0020      	movs	r0, r4
 8009c96:	f001 fe6d 	bl	800b974 <_fflush_r>
 8009c9a:	68e1      	ldr	r1, [r4, #12]
 8009c9c:	4b05      	ldr	r3, [pc, #20]	; (8009cb4 <cleanup_stdio+0x38>)
 8009c9e:	4299      	cmp	r1, r3
 8009ca0:	d002      	beq.n	8009ca8 <cleanup_stdio+0x2c>
 8009ca2:	0020      	movs	r0, r4
 8009ca4:	f001 fe66 	bl	800b974 <_fflush_r>
 8009ca8:	bd10      	pop	{r4, pc}
 8009caa:	46c0      	nop			; (mov r8, r8)
 8009cac:	20000558 	.word	0x20000558
 8009cb0:	200005c0 	.word	0x200005c0
 8009cb4:	20000628 	.word	0x20000628

08009cb8 <global_stdio_init.part.0>:
 8009cb8:	b510      	push	{r4, lr}
 8009cba:	4b09      	ldr	r3, [pc, #36]	; (8009ce0 <global_stdio_init.part.0+0x28>)
 8009cbc:	4a09      	ldr	r2, [pc, #36]	; (8009ce4 <global_stdio_init.part.0+0x2c>)
 8009cbe:	2104      	movs	r1, #4
 8009cc0:	601a      	str	r2, [r3, #0]
 8009cc2:	4809      	ldr	r0, [pc, #36]	; (8009ce8 <global_stdio_init.part.0+0x30>)
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f7ff ff95 	bl	8009bf4 <std>
 8009cca:	2201      	movs	r2, #1
 8009ccc:	2109      	movs	r1, #9
 8009cce:	4807      	ldr	r0, [pc, #28]	; (8009cec <global_stdio_init.part.0+0x34>)
 8009cd0:	f7ff ff90 	bl	8009bf4 <std>
 8009cd4:	2202      	movs	r2, #2
 8009cd6:	2112      	movs	r1, #18
 8009cd8:	4805      	ldr	r0, [pc, #20]	; (8009cf0 <global_stdio_init.part.0+0x38>)
 8009cda:	f7ff ff8b 	bl	8009bf4 <std>
 8009cde:	bd10      	pop	{r4, pc}
 8009ce0:	20000690 	.word	0x20000690
 8009ce4:	08009c61 	.word	0x08009c61
 8009ce8:	20000558 	.word	0x20000558
 8009cec:	200005c0 	.word	0x200005c0
 8009cf0:	20000628 	.word	0x20000628

08009cf4 <__sfp_lock_acquire>:
 8009cf4:	b510      	push	{r4, lr}
 8009cf6:	4802      	ldr	r0, [pc, #8]	; (8009d00 <__sfp_lock_acquire+0xc>)
 8009cf8:	f000 f921 	bl	8009f3e <__retarget_lock_acquire_recursive>
 8009cfc:	bd10      	pop	{r4, pc}
 8009cfe:	46c0      	nop			; (mov r8, r8)
 8009d00:	20000699 	.word	0x20000699

08009d04 <__sfp_lock_release>:
 8009d04:	b510      	push	{r4, lr}
 8009d06:	4802      	ldr	r0, [pc, #8]	; (8009d10 <__sfp_lock_release+0xc>)
 8009d08:	f000 f91a 	bl	8009f40 <__retarget_lock_release_recursive>
 8009d0c:	bd10      	pop	{r4, pc}
 8009d0e:	46c0      	nop			; (mov r8, r8)
 8009d10:	20000699 	.word	0x20000699

08009d14 <__sinit>:
 8009d14:	b510      	push	{r4, lr}
 8009d16:	0004      	movs	r4, r0
 8009d18:	f7ff ffec 	bl	8009cf4 <__sfp_lock_acquire>
 8009d1c:	6a23      	ldr	r3, [r4, #32]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d002      	beq.n	8009d28 <__sinit+0x14>
 8009d22:	f7ff ffef 	bl	8009d04 <__sfp_lock_release>
 8009d26:	bd10      	pop	{r4, pc}
 8009d28:	4b04      	ldr	r3, [pc, #16]	; (8009d3c <__sinit+0x28>)
 8009d2a:	6223      	str	r3, [r4, #32]
 8009d2c:	4b04      	ldr	r3, [pc, #16]	; (8009d40 <__sinit+0x2c>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1f6      	bne.n	8009d22 <__sinit+0xe>
 8009d34:	f7ff ffc0 	bl	8009cb8 <global_stdio_init.part.0>
 8009d38:	e7f3      	b.n	8009d22 <__sinit+0xe>
 8009d3a:	46c0      	nop			; (mov r8, r8)
 8009d3c:	08009c7d 	.word	0x08009c7d
 8009d40:	20000690 	.word	0x20000690

08009d44 <_fwalk_sglue>:
 8009d44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d46:	0014      	movs	r4, r2
 8009d48:	2600      	movs	r6, #0
 8009d4a:	9000      	str	r0, [sp, #0]
 8009d4c:	9101      	str	r1, [sp, #4]
 8009d4e:	68a5      	ldr	r5, [r4, #8]
 8009d50:	6867      	ldr	r7, [r4, #4]
 8009d52:	3f01      	subs	r7, #1
 8009d54:	d504      	bpl.n	8009d60 <_fwalk_sglue+0x1c>
 8009d56:	6824      	ldr	r4, [r4, #0]
 8009d58:	2c00      	cmp	r4, #0
 8009d5a:	d1f8      	bne.n	8009d4e <_fwalk_sglue+0xa>
 8009d5c:	0030      	movs	r0, r6
 8009d5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009d60:	89ab      	ldrh	r3, [r5, #12]
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d908      	bls.n	8009d78 <_fwalk_sglue+0x34>
 8009d66:	220e      	movs	r2, #14
 8009d68:	5eab      	ldrsh	r3, [r5, r2]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	d004      	beq.n	8009d78 <_fwalk_sglue+0x34>
 8009d6e:	0029      	movs	r1, r5
 8009d70:	9800      	ldr	r0, [sp, #0]
 8009d72:	9b01      	ldr	r3, [sp, #4]
 8009d74:	4798      	blx	r3
 8009d76:	4306      	orrs	r6, r0
 8009d78:	3568      	adds	r5, #104	; 0x68
 8009d7a:	e7ea      	b.n	8009d52 <_fwalk_sglue+0xe>

08009d7c <iprintf>:
 8009d7c:	b40f      	push	{r0, r1, r2, r3}
 8009d7e:	b507      	push	{r0, r1, r2, lr}
 8009d80:	4905      	ldr	r1, [pc, #20]	; (8009d98 <iprintf+0x1c>)
 8009d82:	ab04      	add	r3, sp, #16
 8009d84:	6808      	ldr	r0, [r1, #0]
 8009d86:	cb04      	ldmia	r3!, {r2}
 8009d88:	6881      	ldr	r1, [r0, #8]
 8009d8a:	9301      	str	r3, [sp, #4]
 8009d8c:	f001 fc4c 	bl	800b628 <_vfiprintf_r>
 8009d90:	b003      	add	sp, #12
 8009d92:	bc08      	pop	{r3}
 8009d94:	b004      	add	sp, #16
 8009d96:	4718      	bx	r3
 8009d98:	20000094 	.word	0x20000094

08009d9c <__sread>:
 8009d9c:	b570      	push	{r4, r5, r6, lr}
 8009d9e:	000c      	movs	r4, r1
 8009da0:	250e      	movs	r5, #14
 8009da2:	5f49      	ldrsh	r1, [r1, r5]
 8009da4:	f000 f878 	bl	8009e98 <_read_r>
 8009da8:	2800      	cmp	r0, #0
 8009daa:	db03      	blt.n	8009db4 <__sread+0x18>
 8009dac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009dae:	181b      	adds	r3, r3, r0
 8009db0:	6563      	str	r3, [r4, #84]	; 0x54
 8009db2:	bd70      	pop	{r4, r5, r6, pc}
 8009db4:	89a3      	ldrh	r3, [r4, #12]
 8009db6:	4a02      	ldr	r2, [pc, #8]	; (8009dc0 <__sread+0x24>)
 8009db8:	4013      	ands	r3, r2
 8009dba:	81a3      	strh	r3, [r4, #12]
 8009dbc:	e7f9      	b.n	8009db2 <__sread+0x16>
 8009dbe:	46c0      	nop			; (mov r8, r8)
 8009dc0:	ffffefff 	.word	0xffffefff

08009dc4 <__swrite>:
 8009dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dc6:	001f      	movs	r7, r3
 8009dc8:	898b      	ldrh	r3, [r1, #12]
 8009dca:	0005      	movs	r5, r0
 8009dcc:	000c      	movs	r4, r1
 8009dce:	0016      	movs	r6, r2
 8009dd0:	05db      	lsls	r3, r3, #23
 8009dd2:	d505      	bpl.n	8009de0 <__swrite+0x1c>
 8009dd4:	230e      	movs	r3, #14
 8009dd6:	5ec9      	ldrsh	r1, [r1, r3]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	2302      	movs	r3, #2
 8009ddc:	f000 f848 	bl	8009e70 <_lseek_r>
 8009de0:	89a3      	ldrh	r3, [r4, #12]
 8009de2:	4a05      	ldr	r2, [pc, #20]	; (8009df8 <__swrite+0x34>)
 8009de4:	0028      	movs	r0, r5
 8009de6:	4013      	ands	r3, r2
 8009de8:	81a3      	strh	r3, [r4, #12]
 8009dea:	0032      	movs	r2, r6
 8009dec:	230e      	movs	r3, #14
 8009dee:	5ee1      	ldrsh	r1, [r4, r3]
 8009df0:	003b      	movs	r3, r7
 8009df2:	f000 f865 	bl	8009ec0 <_write_r>
 8009df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009df8:	ffffefff 	.word	0xffffefff

08009dfc <__sseek>:
 8009dfc:	b570      	push	{r4, r5, r6, lr}
 8009dfe:	000c      	movs	r4, r1
 8009e00:	250e      	movs	r5, #14
 8009e02:	5f49      	ldrsh	r1, [r1, r5]
 8009e04:	f000 f834 	bl	8009e70 <_lseek_r>
 8009e08:	89a3      	ldrh	r3, [r4, #12]
 8009e0a:	1c42      	adds	r2, r0, #1
 8009e0c:	d103      	bne.n	8009e16 <__sseek+0x1a>
 8009e0e:	4a05      	ldr	r2, [pc, #20]	; (8009e24 <__sseek+0x28>)
 8009e10:	4013      	ands	r3, r2
 8009e12:	81a3      	strh	r3, [r4, #12]
 8009e14:	bd70      	pop	{r4, r5, r6, pc}
 8009e16:	2280      	movs	r2, #128	; 0x80
 8009e18:	0152      	lsls	r2, r2, #5
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	81a3      	strh	r3, [r4, #12]
 8009e1e:	6560      	str	r0, [r4, #84]	; 0x54
 8009e20:	e7f8      	b.n	8009e14 <__sseek+0x18>
 8009e22:	46c0      	nop			; (mov r8, r8)
 8009e24:	ffffefff 	.word	0xffffefff

08009e28 <__sclose>:
 8009e28:	b510      	push	{r4, lr}
 8009e2a:	230e      	movs	r3, #14
 8009e2c:	5ec9      	ldrsh	r1, [r1, r3]
 8009e2e:	f000 f80d 	bl	8009e4c <_close_r>
 8009e32:	bd10      	pop	{r4, pc}

08009e34 <memset>:
 8009e34:	0003      	movs	r3, r0
 8009e36:	1882      	adds	r2, r0, r2
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d100      	bne.n	8009e3e <memset+0xa>
 8009e3c:	4770      	bx	lr
 8009e3e:	7019      	strb	r1, [r3, #0]
 8009e40:	3301      	adds	r3, #1
 8009e42:	e7f9      	b.n	8009e38 <memset+0x4>

08009e44 <_localeconv_r>:
 8009e44:	4800      	ldr	r0, [pc, #0]	; (8009e48 <_localeconv_r+0x4>)
 8009e46:	4770      	bx	lr
 8009e48:	20000188 	.word	0x20000188

08009e4c <_close_r>:
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	b570      	push	{r4, r5, r6, lr}
 8009e50:	4d06      	ldr	r5, [pc, #24]	; (8009e6c <_close_r+0x20>)
 8009e52:	0004      	movs	r4, r0
 8009e54:	0008      	movs	r0, r1
 8009e56:	602b      	str	r3, [r5, #0]
 8009e58:	f7fa fce3 	bl	8004822 <_close>
 8009e5c:	1c43      	adds	r3, r0, #1
 8009e5e:	d103      	bne.n	8009e68 <_close_r+0x1c>
 8009e60:	682b      	ldr	r3, [r5, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d000      	beq.n	8009e68 <_close_r+0x1c>
 8009e66:	6023      	str	r3, [r4, #0]
 8009e68:	bd70      	pop	{r4, r5, r6, pc}
 8009e6a:	46c0      	nop			; (mov r8, r8)
 8009e6c:	20000694 	.word	0x20000694

08009e70 <_lseek_r>:
 8009e70:	b570      	push	{r4, r5, r6, lr}
 8009e72:	0004      	movs	r4, r0
 8009e74:	0008      	movs	r0, r1
 8009e76:	0011      	movs	r1, r2
 8009e78:	001a      	movs	r2, r3
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	4d05      	ldr	r5, [pc, #20]	; (8009e94 <_lseek_r+0x24>)
 8009e7e:	602b      	str	r3, [r5, #0]
 8009e80:	f7fa fcf0 	bl	8004864 <_lseek>
 8009e84:	1c43      	adds	r3, r0, #1
 8009e86:	d103      	bne.n	8009e90 <_lseek_r+0x20>
 8009e88:	682b      	ldr	r3, [r5, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d000      	beq.n	8009e90 <_lseek_r+0x20>
 8009e8e:	6023      	str	r3, [r4, #0]
 8009e90:	bd70      	pop	{r4, r5, r6, pc}
 8009e92:	46c0      	nop			; (mov r8, r8)
 8009e94:	20000694 	.word	0x20000694

08009e98 <_read_r>:
 8009e98:	b570      	push	{r4, r5, r6, lr}
 8009e9a:	0004      	movs	r4, r0
 8009e9c:	0008      	movs	r0, r1
 8009e9e:	0011      	movs	r1, r2
 8009ea0:	001a      	movs	r2, r3
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	4d05      	ldr	r5, [pc, #20]	; (8009ebc <_read_r+0x24>)
 8009ea6:	602b      	str	r3, [r5, #0]
 8009ea8:	f7fa fc82 	bl	80047b0 <_read>
 8009eac:	1c43      	adds	r3, r0, #1
 8009eae:	d103      	bne.n	8009eb8 <_read_r+0x20>
 8009eb0:	682b      	ldr	r3, [r5, #0]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d000      	beq.n	8009eb8 <_read_r+0x20>
 8009eb6:	6023      	str	r3, [r4, #0]
 8009eb8:	bd70      	pop	{r4, r5, r6, pc}
 8009eba:	46c0      	nop			; (mov r8, r8)
 8009ebc:	20000694 	.word	0x20000694

08009ec0 <_write_r>:
 8009ec0:	b570      	push	{r4, r5, r6, lr}
 8009ec2:	0004      	movs	r4, r0
 8009ec4:	0008      	movs	r0, r1
 8009ec6:	0011      	movs	r1, r2
 8009ec8:	001a      	movs	r2, r3
 8009eca:	2300      	movs	r3, #0
 8009ecc:	4d05      	ldr	r5, [pc, #20]	; (8009ee4 <_write_r+0x24>)
 8009ece:	602b      	str	r3, [r5, #0]
 8009ed0:	f7fa fc8b 	bl	80047ea <_write>
 8009ed4:	1c43      	adds	r3, r0, #1
 8009ed6:	d103      	bne.n	8009ee0 <_write_r+0x20>
 8009ed8:	682b      	ldr	r3, [r5, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d000      	beq.n	8009ee0 <_write_r+0x20>
 8009ede:	6023      	str	r3, [r4, #0]
 8009ee0:	bd70      	pop	{r4, r5, r6, pc}
 8009ee2:	46c0      	nop			; (mov r8, r8)
 8009ee4:	20000694 	.word	0x20000694

08009ee8 <__errno>:
 8009ee8:	4b01      	ldr	r3, [pc, #4]	; (8009ef0 <__errno+0x8>)
 8009eea:	6818      	ldr	r0, [r3, #0]
 8009eec:	4770      	bx	lr
 8009eee:	46c0      	nop			; (mov r8, r8)
 8009ef0:	20000094 	.word	0x20000094

08009ef4 <__libc_init_array>:
 8009ef4:	b570      	push	{r4, r5, r6, lr}
 8009ef6:	2600      	movs	r6, #0
 8009ef8:	4c0c      	ldr	r4, [pc, #48]	; (8009f2c <__libc_init_array+0x38>)
 8009efa:	4d0d      	ldr	r5, [pc, #52]	; (8009f30 <__libc_init_array+0x3c>)
 8009efc:	1b64      	subs	r4, r4, r5
 8009efe:	10a4      	asrs	r4, r4, #2
 8009f00:	42a6      	cmp	r6, r4
 8009f02:	d109      	bne.n	8009f18 <__libc_init_array+0x24>
 8009f04:	2600      	movs	r6, #0
 8009f06:	f001 ff79 	bl	800bdfc <_init>
 8009f0a:	4c0a      	ldr	r4, [pc, #40]	; (8009f34 <__libc_init_array+0x40>)
 8009f0c:	4d0a      	ldr	r5, [pc, #40]	; (8009f38 <__libc_init_array+0x44>)
 8009f0e:	1b64      	subs	r4, r4, r5
 8009f10:	10a4      	asrs	r4, r4, #2
 8009f12:	42a6      	cmp	r6, r4
 8009f14:	d105      	bne.n	8009f22 <__libc_init_array+0x2e>
 8009f16:	bd70      	pop	{r4, r5, r6, pc}
 8009f18:	00b3      	lsls	r3, r6, #2
 8009f1a:	58eb      	ldr	r3, [r5, r3]
 8009f1c:	4798      	blx	r3
 8009f1e:	3601      	adds	r6, #1
 8009f20:	e7ee      	b.n	8009f00 <__libc_init_array+0xc>
 8009f22:	00b3      	lsls	r3, r6, #2
 8009f24:	58eb      	ldr	r3, [r5, r3]
 8009f26:	4798      	blx	r3
 8009f28:	3601      	adds	r6, #1
 8009f2a:	e7f2      	b.n	8009f12 <__libc_init_array+0x1e>
 8009f2c:	0800c4d4 	.word	0x0800c4d4
 8009f30:	0800c4d4 	.word	0x0800c4d4
 8009f34:	0800c4d8 	.word	0x0800c4d8
 8009f38:	0800c4d4 	.word	0x0800c4d4

08009f3c <__retarget_lock_init_recursive>:
 8009f3c:	4770      	bx	lr

08009f3e <__retarget_lock_acquire_recursive>:
 8009f3e:	4770      	bx	lr

08009f40 <__retarget_lock_release_recursive>:
 8009f40:	4770      	bx	lr

08009f42 <memchr>:
 8009f42:	b2c9      	uxtb	r1, r1
 8009f44:	1882      	adds	r2, r0, r2
 8009f46:	4290      	cmp	r0, r2
 8009f48:	d101      	bne.n	8009f4e <memchr+0xc>
 8009f4a:	2000      	movs	r0, #0
 8009f4c:	4770      	bx	lr
 8009f4e:	7803      	ldrb	r3, [r0, #0]
 8009f50:	428b      	cmp	r3, r1
 8009f52:	d0fb      	beq.n	8009f4c <memchr+0xa>
 8009f54:	3001      	adds	r0, #1
 8009f56:	e7f6      	b.n	8009f46 <memchr+0x4>

08009f58 <quorem>:
 8009f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f5a:	6902      	ldr	r2, [r0, #16]
 8009f5c:	690b      	ldr	r3, [r1, #16]
 8009f5e:	b089      	sub	sp, #36	; 0x24
 8009f60:	0007      	movs	r7, r0
 8009f62:	9104      	str	r1, [sp, #16]
 8009f64:	2000      	movs	r0, #0
 8009f66:	429a      	cmp	r2, r3
 8009f68:	db69      	blt.n	800a03e <quorem+0xe6>
 8009f6a:	3b01      	subs	r3, #1
 8009f6c:	009c      	lsls	r4, r3, #2
 8009f6e:	9301      	str	r3, [sp, #4]
 8009f70:	000b      	movs	r3, r1
 8009f72:	3314      	adds	r3, #20
 8009f74:	9306      	str	r3, [sp, #24]
 8009f76:	191b      	adds	r3, r3, r4
 8009f78:	9305      	str	r3, [sp, #20]
 8009f7a:	003b      	movs	r3, r7
 8009f7c:	3314      	adds	r3, #20
 8009f7e:	9303      	str	r3, [sp, #12]
 8009f80:	191c      	adds	r4, r3, r4
 8009f82:	9b05      	ldr	r3, [sp, #20]
 8009f84:	6826      	ldr	r6, [r4, #0]
 8009f86:	681d      	ldr	r5, [r3, #0]
 8009f88:	0030      	movs	r0, r6
 8009f8a:	3501      	adds	r5, #1
 8009f8c:	0029      	movs	r1, r5
 8009f8e:	f7f6 f8d5 	bl	800013c <__udivsi3>
 8009f92:	9002      	str	r0, [sp, #8]
 8009f94:	42ae      	cmp	r6, r5
 8009f96:	d329      	bcc.n	8009fec <quorem+0x94>
 8009f98:	9b06      	ldr	r3, [sp, #24]
 8009f9a:	2600      	movs	r6, #0
 8009f9c:	469c      	mov	ip, r3
 8009f9e:	9d03      	ldr	r5, [sp, #12]
 8009fa0:	9606      	str	r6, [sp, #24]
 8009fa2:	4662      	mov	r2, ip
 8009fa4:	ca08      	ldmia	r2!, {r3}
 8009fa6:	6828      	ldr	r0, [r5, #0]
 8009fa8:	4694      	mov	ip, r2
 8009faa:	9a02      	ldr	r2, [sp, #8]
 8009fac:	b299      	uxth	r1, r3
 8009fae:	4351      	muls	r1, r2
 8009fb0:	0c1b      	lsrs	r3, r3, #16
 8009fb2:	4353      	muls	r3, r2
 8009fb4:	1989      	adds	r1, r1, r6
 8009fb6:	0c0a      	lsrs	r2, r1, #16
 8009fb8:	189b      	adds	r3, r3, r2
 8009fba:	9307      	str	r3, [sp, #28]
 8009fbc:	0c1e      	lsrs	r6, r3, #16
 8009fbe:	9b06      	ldr	r3, [sp, #24]
 8009fc0:	b282      	uxth	r2, r0
 8009fc2:	18d2      	adds	r2, r2, r3
 8009fc4:	466b      	mov	r3, sp
 8009fc6:	b289      	uxth	r1, r1
 8009fc8:	8b9b      	ldrh	r3, [r3, #28]
 8009fca:	1a52      	subs	r2, r2, r1
 8009fcc:	0c01      	lsrs	r1, r0, #16
 8009fce:	1ac9      	subs	r1, r1, r3
 8009fd0:	1413      	asrs	r3, r2, #16
 8009fd2:	18cb      	adds	r3, r1, r3
 8009fd4:	1419      	asrs	r1, r3, #16
 8009fd6:	b292      	uxth	r2, r2
 8009fd8:	041b      	lsls	r3, r3, #16
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	c508      	stmia	r5!, {r3}
 8009fde:	9b05      	ldr	r3, [sp, #20]
 8009fe0:	9106      	str	r1, [sp, #24]
 8009fe2:	4563      	cmp	r3, ip
 8009fe4:	d2dd      	bcs.n	8009fa2 <quorem+0x4a>
 8009fe6:	6823      	ldr	r3, [r4, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d030      	beq.n	800a04e <quorem+0xf6>
 8009fec:	0038      	movs	r0, r7
 8009fee:	9904      	ldr	r1, [sp, #16]
 8009ff0:	f001 f9de 	bl	800b3b0 <__mcmp>
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	db21      	blt.n	800a03c <quorem+0xe4>
 8009ff8:	0038      	movs	r0, r7
 8009ffa:	2600      	movs	r6, #0
 8009ffc:	9b02      	ldr	r3, [sp, #8]
 8009ffe:	9c04      	ldr	r4, [sp, #16]
 800a000:	3301      	adds	r3, #1
 800a002:	9302      	str	r3, [sp, #8]
 800a004:	3014      	adds	r0, #20
 800a006:	3414      	adds	r4, #20
 800a008:	6803      	ldr	r3, [r0, #0]
 800a00a:	cc02      	ldmia	r4!, {r1}
 800a00c:	b29d      	uxth	r5, r3
 800a00e:	19ad      	adds	r5, r5, r6
 800a010:	b28a      	uxth	r2, r1
 800a012:	1aaa      	subs	r2, r5, r2
 800a014:	0c09      	lsrs	r1, r1, #16
 800a016:	0c1b      	lsrs	r3, r3, #16
 800a018:	1a5b      	subs	r3, r3, r1
 800a01a:	1411      	asrs	r1, r2, #16
 800a01c:	185b      	adds	r3, r3, r1
 800a01e:	141e      	asrs	r6, r3, #16
 800a020:	b292      	uxth	r2, r2
 800a022:	041b      	lsls	r3, r3, #16
 800a024:	4313      	orrs	r3, r2
 800a026:	c008      	stmia	r0!, {r3}
 800a028:	9b05      	ldr	r3, [sp, #20]
 800a02a:	42a3      	cmp	r3, r4
 800a02c:	d2ec      	bcs.n	800a008 <quorem+0xb0>
 800a02e:	9b01      	ldr	r3, [sp, #4]
 800a030:	9a03      	ldr	r2, [sp, #12]
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	18d3      	adds	r3, r2, r3
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	2a00      	cmp	r2, #0
 800a03a:	d015      	beq.n	800a068 <quorem+0x110>
 800a03c:	9802      	ldr	r0, [sp, #8]
 800a03e:	b009      	add	sp, #36	; 0x24
 800a040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a042:	6823      	ldr	r3, [r4, #0]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d106      	bne.n	800a056 <quorem+0xfe>
 800a048:	9b01      	ldr	r3, [sp, #4]
 800a04a:	3b01      	subs	r3, #1
 800a04c:	9301      	str	r3, [sp, #4]
 800a04e:	9b03      	ldr	r3, [sp, #12]
 800a050:	3c04      	subs	r4, #4
 800a052:	42a3      	cmp	r3, r4
 800a054:	d3f5      	bcc.n	800a042 <quorem+0xea>
 800a056:	9b01      	ldr	r3, [sp, #4]
 800a058:	613b      	str	r3, [r7, #16]
 800a05a:	e7c7      	b.n	8009fec <quorem+0x94>
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	2a00      	cmp	r2, #0
 800a060:	d106      	bne.n	800a070 <quorem+0x118>
 800a062:	9a01      	ldr	r2, [sp, #4]
 800a064:	3a01      	subs	r2, #1
 800a066:	9201      	str	r2, [sp, #4]
 800a068:	9a03      	ldr	r2, [sp, #12]
 800a06a:	3b04      	subs	r3, #4
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d3f5      	bcc.n	800a05c <quorem+0x104>
 800a070:	9b01      	ldr	r3, [sp, #4]
 800a072:	613b      	str	r3, [r7, #16]
 800a074:	e7e2      	b.n	800a03c <quorem+0xe4>
	...

0800a078 <_dtoa_r>:
 800a078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a07a:	0014      	movs	r4, r2
 800a07c:	001d      	movs	r5, r3
 800a07e:	69c6      	ldr	r6, [r0, #28]
 800a080:	b09d      	sub	sp, #116	; 0x74
 800a082:	9408      	str	r4, [sp, #32]
 800a084:	9509      	str	r5, [sp, #36]	; 0x24
 800a086:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800a088:	9004      	str	r0, [sp, #16]
 800a08a:	2e00      	cmp	r6, #0
 800a08c:	d10f      	bne.n	800a0ae <_dtoa_r+0x36>
 800a08e:	2010      	movs	r0, #16
 800a090:	f000 fe4a 	bl	800ad28 <malloc>
 800a094:	9b04      	ldr	r3, [sp, #16]
 800a096:	1e02      	subs	r2, r0, #0
 800a098:	61d8      	str	r0, [r3, #28]
 800a09a:	d104      	bne.n	800a0a6 <_dtoa_r+0x2e>
 800a09c:	21ef      	movs	r1, #239	; 0xef
 800a09e:	4bc6      	ldr	r3, [pc, #792]	; (800a3b8 <_dtoa_r+0x340>)
 800a0a0:	48c6      	ldr	r0, [pc, #792]	; (800a3bc <_dtoa_r+0x344>)
 800a0a2:	f001 fd55 	bl	800bb50 <__assert_func>
 800a0a6:	6046      	str	r6, [r0, #4]
 800a0a8:	6086      	str	r6, [r0, #8]
 800a0aa:	6006      	str	r6, [r0, #0]
 800a0ac:	60c6      	str	r6, [r0, #12]
 800a0ae:	9b04      	ldr	r3, [sp, #16]
 800a0b0:	69db      	ldr	r3, [r3, #28]
 800a0b2:	6819      	ldr	r1, [r3, #0]
 800a0b4:	2900      	cmp	r1, #0
 800a0b6:	d00b      	beq.n	800a0d0 <_dtoa_r+0x58>
 800a0b8:	685a      	ldr	r2, [r3, #4]
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	4093      	lsls	r3, r2
 800a0be:	604a      	str	r2, [r1, #4]
 800a0c0:	608b      	str	r3, [r1, #8]
 800a0c2:	9804      	ldr	r0, [sp, #16]
 800a0c4:	f000 ff32 	bl	800af2c <_Bfree>
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	9b04      	ldr	r3, [sp, #16]
 800a0cc:	69db      	ldr	r3, [r3, #28]
 800a0ce:	601a      	str	r2, [r3, #0]
 800a0d0:	2d00      	cmp	r5, #0
 800a0d2:	da1e      	bge.n	800a112 <_dtoa_r+0x9a>
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	603b      	str	r3, [r7, #0]
 800a0d8:	006b      	lsls	r3, r5, #1
 800a0da:	085b      	lsrs	r3, r3, #1
 800a0dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a0de:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a0e0:	4bb7      	ldr	r3, [pc, #732]	; (800a3c0 <_dtoa_r+0x348>)
 800a0e2:	4ab7      	ldr	r2, [pc, #732]	; (800a3c0 <_dtoa_r+0x348>)
 800a0e4:	403b      	ands	r3, r7
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d116      	bne.n	800a118 <_dtoa_r+0xa0>
 800a0ea:	4bb6      	ldr	r3, [pc, #728]	; (800a3c4 <_dtoa_r+0x34c>)
 800a0ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a0ee:	6013      	str	r3, [r2, #0]
 800a0f0:	033b      	lsls	r3, r7, #12
 800a0f2:	0b1b      	lsrs	r3, r3, #12
 800a0f4:	4323      	orrs	r3, r4
 800a0f6:	d101      	bne.n	800a0fc <_dtoa_r+0x84>
 800a0f8:	f000 fdb5 	bl	800ac66 <_dtoa_r+0xbee>
 800a0fc:	4bb2      	ldr	r3, [pc, #712]	; (800a3c8 <_dtoa_r+0x350>)
 800a0fe:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a100:	9306      	str	r3, [sp, #24]
 800a102:	2a00      	cmp	r2, #0
 800a104:	d002      	beq.n	800a10c <_dtoa_r+0x94>
 800a106:	4bb1      	ldr	r3, [pc, #708]	; (800a3cc <_dtoa_r+0x354>)
 800a108:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a10a:	6013      	str	r3, [r2, #0]
 800a10c:	9806      	ldr	r0, [sp, #24]
 800a10e:	b01d      	add	sp, #116	; 0x74
 800a110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a112:	2300      	movs	r3, #0
 800a114:	603b      	str	r3, [r7, #0]
 800a116:	e7e2      	b.n	800a0de <_dtoa_r+0x66>
 800a118:	9a08      	ldr	r2, [sp, #32]
 800a11a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a11c:	9210      	str	r2, [sp, #64]	; 0x40
 800a11e:	9311      	str	r3, [sp, #68]	; 0x44
 800a120:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a122:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a124:	2200      	movs	r2, #0
 800a126:	2300      	movs	r3, #0
 800a128:	f7f6 f98e 	bl	8000448 <__aeabi_dcmpeq>
 800a12c:	1e06      	subs	r6, r0, #0
 800a12e:	d009      	beq.n	800a144 <_dtoa_r+0xcc>
 800a130:	2301      	movs	r3, #1
 800a132:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a134:	6013      	str	r3, [r2, #0]
 800a136:	4ba6      	ldr	r3, [pc, #664]	; (800a3d0 <_dtoa_r+0x358>)
 800a138:	9306      	str	r3, [sp, #24]
 800a13a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d0e5      	beq.n	800a10c <_dtoa_r+0x94>
 800a140:	4ba4      	ldr	r3, [pc, #656]	; (800a3d4 <_dtoa_r+0x35c>)
 800a142:	e7e1      	b.n	800a108 <_dtoa_r+0x90>
 800a144:	ab1a      	add	r3, sp, #104	; 0x68
 800a146:	9301      	str	r3, [sp, #4]
 800a148:	ab1b      	add	r3, sp, #108	; 0x6c
 800a14a:	9300      	str	r3, [sp, #0]
 800a14c:	9804      	ldr	r0, [sp, #16]
 800a14e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a150:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a152:	f001 f9e1 	bl	800b518 <__d2b>
 800a156:	007a      	lsls	r2, r7, #1
 800a158:	9005      	str	r0, [sp, #20]
 800a15a:	0d52      	lsrs	r2, r2, #21
 800a15c:	d100      	bne.n	800a160 <_dtoa_r+0xe8>
 800a15e:	e07b      	b.n	800a258 <_dtoa_r+0x1e0>
 800a160:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a162:	9617      	str	r6, [sp, #92]	; 0x5c
 800a164:	0319      	lsls	r1, r3, #12
 800a166:	4b9c      	ldr	r3, [pc, #624]	; (800a3d8 <_dtoa_r+0x360>)
 800a168:	0b09      	lsrs	r1, r1, #12
 800a16a:	430b      	orrs	r3, r1
 800a16c:	499b      	ldr	r1, [pc, #620]	; (800a3dc <_dtoa_r+0x364>)
 800a16e:	1857      	adds	r7, r2, r1
 800a170:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a172:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a174:	0019      	movs	r1, r3
 800a176:	2200      	movs	r2, #0
 800a178:	4b99      	ldr	r3, [pc, #612]	; (800a3e0 <_dtoa_r+0x368>)
 800a17a:	f7f7 fc9b 	bl	8001ab4 <__aeabi_dsub>
 800a17e:	4a99      	ldr	r2, [pc, #612]	; (800a3e4 <_dtoa_r+0x36c>)
 800a180:	4b99      	ldr	r3, [pc, #612]	; (800a3e8 <_dtoa_r+0x370>)
 800a182:	f7f7 f9d5 	bl	8001530 <__aeabi_dmul>
 800a186:	4a99      	ldr	r2, [pc, #612]	; (800a3ec <_dtoa_r+0x374>)
 800a188:	4b99      	ldr	r3, [pc, #612]	; (800a3f0 <_dtoa_r+0x378>)
 800a18a:	f7f6 fa77 	bl	800067c <__aeabi_dadd>
 800a18e:	0004      	movs	r4, r0
 800a190:	0038      	movs	r0, r7
 800a192:	000d      	movs	r5, r1
 800a194:	f7f8 f864 	bl	8002260 <__aeabi_i2d>
 800a198:	4a96      	ldr	r2, [pc, #600]	; (800a3f4 <_dtoa_r+0x37c>)
 800a19a:	4b97      	ldr	r3, [pc, #604]	; (800a3f8 <_dtoa_r+0x380>)
 800a19c:	f7f7 f9c8 	bl	8001530 <__aeabi_dmul>
 800a1a0:	0002      	movs	r2, r0
 800a1a2:	000b      	movs	r3, r1
 800a1a4:	0020      	movs	r0, r4
 800a1a6:	0029      	movs	r1, r5
 800a1a8:	f7f6 fa68 	bl	800067c <__aeabi_dadd>
 800a1ac:	0004      	movs	r4, r0
 800a1ae:	000d      	movs	r5, r1
 800a1b0:	f7f8 f820 	bl	80021f4 <__aeabi_d2iz>
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	9003      	str	r0, [sp, #12]
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	0020      	movs	r0, r4
 800a1bc:	0029      	movs	r1, r5
 800a1be:	f7f6 f949 	bl	8000454 <__aeabi_dcmplt>
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	d00b      	beq.n	800a1de <_dtoa_r+0x166>
 800a1c6:	9803      	ldr	r0, [sp, #12]
 800a1c8:	f7f8 f84a 	bl	8002260 <__aeabi_i2d>
 800a1cc:	002b      	movs	r3, r5
 800a1ce:	0022      	movs	r2, r4
 800a1d0:	f7f6 f93a 	bl	8000448 <__aeabi_dcmpeq>
 800a1d4:	4243      	negs	r3, r0
 800a1d6:	4158      	adcs	r0, r3
 800a1d8:	9b03      	ldr	r3, [sp, #12]
 800a1da:	1a1b      	subs	r3, r3, r0
 800a1dc:	9303      	str	r3, [sp, #12]
 800a1de:	2301      	movs	r3, #1
 800a1e0:	9316      	str	r3, [sp, #88]	; 0x58
 800a1e2:	9b03      	ldr	r3, [sp, #12]
 800a1e4:	2b16      	cmp	r3, #22
 800a1e6:	d810      	bhi.n	800a20a <_dtoa_r+0x192>
 800a1e8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a1ea:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a1ec:	9a03      	ldr	r2, [sp, #12]
 800a1ee:	4b83      	ldr	r3, [pc, #524]	; (800a3fc <_dtoa_r+0x384>)
 800a1f0:	00d2      	lsls	r2, r2, #3
 800a1f2:	189b      	adds	r3, r3, r2
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	f7f6 f92c 	bl	8000454 <__aeabi_dcmplt>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	d047      	beq.n	800a290 <_dtoa_r+0x218>
 800a200:	9b03      	ldr	r3, [sp, #12]
 800a202:	3b01      	subs	r3, #1
 800a204:	9303      	str	r3, [sp, #12]
 800a206:	2300      	movs	r3, #0
 800a208:	9316      	str	r3, [sp, #88]	; 0x58
 800a20a:	2200      	movs	r2, #0
 800a20c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a20e:	920a      	str	r2, [sp, #40]	; 0x28
 800a210:	1bdb      	subs	r3, r3, r7
 800a212:	1e5a      	subs	r2, r3, #1
 800a214:	d53e      	bpl.n	800a294 <_dtoa_r+0x21c>
 800a216:	2201      	movs	r2, #1
 800a218:	1ad3      	subs	r3, r2, r3
 800a21a:	930a      	str	r3, [sp, #40]	; 0x28
 800a21c:	2300      	movs	r3, #0
 800a21e:	930c      	str	r3, [sp, #48]	; 0x30
 800a220:	9b03      	ldr	r3, [sp, #12]
 800a222:	2b00      	cmp	r3, #0
 800a224:	db38      	blt.n	800a298 <_dtoa_r+0x220>
 800a226:	9a03      	ldr	r2, [sp, #12]
 800a228:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a22a:	4694      	mov	ip, r2
 800a22c:	4463      	add	r3, ip
 800a22e:	930c      	str	r3, [sp, #48]	; 0x30
 800a230:	2300      	movs	r3, #0
 800a232:	9213      	str	r2, [sp, #76]	; 0x4c
 800a234:	930d      	str	r3, [sp, #52]	; 0x34
 800a236:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a238:	2401      	movs	r4, #1
 800a23a:	2b09      	cmp	r3, #9
 800a23c:	d867      	bhi.n	800a30e <_dtoa_r+0x296>
 800a23e:	2b05      	cmp	r3, #5
 800a240:	dd02      	ble.n	800a248 <_dtoa_r+0x1d0>
 800a242:	2400      	movs	r4, #0
 800a244:	3b04      	subs	r3, #4
 800a246:	9322      	str	r3, [sp, #136]	; 0x88
 800a248:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a24a:	1e98      	subs	r0, r3, #2
 800a24c:	2803      	cmp	r0, #3
 800a24e:	d867      	bhi.n	800a320 <_dtoa_r+0x2a8>
 800a250:	f7f5 ff60 	bl	8000114 <__gnu_thumb1_case_uqi>
 800a254:	5b383a2b 	.word	0x5b383a2b
 800a258:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a25a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800a25c:	18f6      	adds	r6, r6, r3
 800a25e:	4b68      	ldr	r3, [pc, #416]	; (800a400 <_dtoa_r+0x388>)
 800a260:	18f2      	adds	r2, r6, r3
 800a262:	2a20      	cmp	r2, #32
 800a264:	dd0f      	ble.n	800a286 <_dtoa_r+0x20e>
 800a266:	2340      	movs	r3, #64	; 0x40
 800a268:	1a9b      	subs	r3, r3, r2
 800a26a:	409f      	lsls	r7, r3
 800a26c:	4b65      	ldr	r3, [pc, #404]	; (800a404 <_dtoa_r+0x38c>)
 800a26e:	0038      	movs	r0, r7
 800a270:	18f3      	adds	r3, r6, r3
 800a272:	40dc      	lsrs	r4, r3
 800a274:	4320      	orrs	r0, r4
 800a276:	f7f8 f823 	bl	80022c0 <__aeabi_ui2d>
 800a27a:	2201      	movs	r2, #1
 800a27c:	4b62      	ldr	r3, [pc, #392]	; (800a408 <_dtoa_r+0x390>)
 800a27e:	1e77      	subs	r7, r6, #1
 800a280:	18cb      	adds	r3, r1, r3
 800a282:	9217      	str	r2, [sp, #92]	; 0x5c
 800a284:	e776      	b.n	800a174 <_dtoa_r+0xfc>
 800a286:	2320      	movs	r3, #32
 800a288:	0020      	movs	r0, r4
 800a28a:	1a9b      	subs	r3, r3, r2
 800a28c:	4098      	lsls	r0, r3
 800a28e:	e7f2      	b.n	800a276 <_dtoa_r+0x1fe>
 800a290:	9016      	str	r0, [sp, #88]	; 0x58
 800a292:	e7ba      	b.n	800a20a <_dtoa_r+0x192>
 800a294:	920c      	str	r2, [sp, #48]	; 0x30
 800a296:	e7c3      	b.n	800a220 <_dtoa_r+0x1a8>
 800a298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a29a:	9a03      	ldr	r2, [sp, #12]
 800a29c:	1a9b      	subs	r3, r3, r2
 800a29e:	930a      	str	r3, [sp, #40]	; 0x28
 800a2a0:	4253      	negs	r3, r2
 800a2a2:	930d      	str	r3, [sp, #52]	; 0x34
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	9313      	str	r3, [sp, #76]	; 0x4c
 800a2a8:	e7c5      	b.n	800a236 <_dtoa_r+0x1be>
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a2b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2b2:	9307      	str	r3, [sp, #28]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	dc13      	bgt.n	800a2e0 <_dtoa_r+0x268>
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	001a      	movs	r2, r3
 800a2bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2be:	9307      	str	r3, [sp, #28]
 800a2c0:	9223      	str	r2, [sp, #140]	; 0x8c
 800a2c2:	e00d      	b.n	800a2e0 <_dtoa_r+0x268>
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e7f1      	b.n	800a2ac <_dtoa_r+0x234>
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a2cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2ce:	4694      	mov	ip, r2
 800a2d0:	9b03      	ldr	r3, [sp, #12]
 800a2d2:	4463      	add	r3, ip
 800a2d4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	9307      	str	r3, [sp, #28]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	dc00      	bgt.n	800a2e0 <_dtoa_r+0x268>
 800a2de:	2301      	movs	r3, #1
 800a2e0:	9a04      	ldr	r2, [sp, #16]
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	69d0      	ldr	r0, [r2, #28]
 800a2e6:	2204      	movs	r2, #4
 800a2e8:	0015      	movs	r5, r2
 800a2ea:	3514      	adds	r5, #20
 800a2ec:	429d      	cmp	r5, r3
 800a2ee:	d91b      	bls.n	800a328 <_dtoa_r+0x2b0>
 800a2f0:	6041      	str	r1, [r0, #4]
 800a2f2:	9804      	ldr	r0, [sp, #16]
 800a2f4:	f000 fdd6 	bl	800aea4 <_Balloc>
 800a2f8:	9006      	str	r0, [sp, #24]
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	d117      	bne.n	800a32e <_dtoa_r+0x2b6>
 800a2fe:	21b0      	movs	r1, #176	; 0xb0
 800a300:	4b42      	ldr	r3, [pc, #264]	; (800a40c <_dtoa_r+0x394>)
 800a302:	482e      	ldr	r0, [pc, #184]	; (800a3bc <_dtoa_r+0x344>)
 800a304:	9a06      	ldr	r2, [sp, #24]
 800a306:	31ff      	adds	r1, #255	; 0xff
 800a308:	e6cb      	b.n	800a0a2 <_dtoa_r+0x2a>
 800a30a:	2301      	movs	r3, #1
 800a30c:	e7dd      	b.n	800a2ca <_dtoa_r+0x252>
 800a30e:	2300      	movs	r3, #0
 800a310:	940f      	str	r4, [sp, #60]	; 0x3c
 800a312:	9322      	str	r3, [sp, #136]	; 0x88
 800a314:	3b01      	subs	r3, #1
 800a316:	930b      	str	r3, [sp, #44]	; 0x2c
 800a318:	9307      	str	r3, [sp, #28]
 800a31a:	2200      	movs	r2, #0
 800a31c:	3313      	adds	r3, #19
 800a31e:	e7cf      	b.n	800a2c0 <_dtoa_r+0x248>
 800a320:	2301      	movs	r3, #1
 800a322:	930f      	str	r3, [sp, #60]	; 0x3c
 800a324:	3b02      	subs	r3, #2
 800a326:	e7f6      	b.n	800a316 <_dtoa_r+0x29e>
 800a328:	3101      	adds	r1, #1
 800a32a:	0052      	lsls	r2, r2, #1
 800a32c:	e7dc      	b.n	800a2e8 <_dtoa_r+0x270>
 800a32e:	9b04      	ldr	r3, [sp, #16]
 800a330:	9a06      	ldr	r2, [sp, #24]
 800a332:	69db      	ldr	r3, [r3, #28]
 800a334:	601a      	str	r2, [r3, #0]
 800a336:	9b07      	ldr	r3, [sp, #28]
 800a338:	2b0e      	cmp	r3, #14
 800a33a:	d900      	bls.n	800a33e <_dtoa_r+0x2c6>
 800a33c:	e0e5      	b.n	800a50a <_dtoa_r+0x492>
 800a33e:	2c00      	cmp	r4, #0
 800a340:	d100      	bne.n	800a344 <_dtoa_r+0x2cc>
 800a342:	e0e2      	b.n	800a50a <_dtoa_r+0x492>
 800a344:	9b03      	ldr	r3, [sp, #12]
 800a346:	2b00      	cmp	r3, #0
 800a348:	dd64      	ble.n	800a414 <_dtoa_r+0x39c>
 800a34a:	210f      	movs	r1, #15
 800a34c:	9a03      	ldr	r2, [sp, #12]
 800a34e:	4b2b      	ldr	r3, [pc, #172]	; (800a3fc <_dtoa_r+0x384>)
 800a350:	400a      	ands	r2, r1
 800a352:	00d2      	lsls	r2, r2, #3
 800a354:	189b      	adds	r3, r3, r2
 800a356:	681e      	ldr	r6, [r3, #0]
 800a358:	685f      	ldr	r7, [r3, #4]
 800a35a:	9b03      	ldr	r3, [sp, #12]
 800a35c:	2402      	movs	r4, #2
 800a35e:	111d      	asrs	r5, r3, #4
 800a360:	05db      	lsls	r3, r3, #23
 800a362:	d50a      	bpl.n	800a37a <_dtoa_r+0x302>
 800a364:	4b2a      	ldr	r3, [pc, #168]	; (800a410 <_dtoa_r+0x398>)
 800a366:	400d      	ands	r5, r1
 800a368:	6a1a      	ldr	r2, [r3, #32]
 800a36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a36c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a36e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a370:	f7f6 fce4 	bl	8000d3c <__aeabi_ddiv>
 800a374:	9008      	str	r0, [sp, #32]
 800a376:	9109      	str	r1, [sp, #36]	; 0x24
 800a378:	3401      	adds	r4, #1
 800a37a:	4b25      	ldr	r3, [pc, #148]	; (800a410 <_dtoa_r+0x398>)
 800a37c:	930e      	str	r3, [sp, #56]	; 0x38
 800a37e:	2d00      	cmp	r5, #0
 800a380:	d108      	bne.n	800a394 <_dtoa_r+0x31c>
 800a382:	9808      	ldr	r0, [sp, #32]
 800a384:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a386:	0032      	movs	r2, r6
 800a388:	003b      	movs	r3, r7
 800a38a:	f7f6 fcd7 	bl	8000d3c <__aeabi_ddiv>
 800a38e:	9008      	str	r0, [sp, #32]
 800a390:	9109      	str	r1, [sp, #36]	; 0x24
 800a392:	e05a      	b.n	800a44a <_dtoa_r+0x3d2>
 800a394:	2301      	movs	r3, #1
 800a396:	421d      	tst	r5, r3
 800a398:	d009      	beq.n	800a3ae <_dtoa_r+0x336>
 800a39a:	18e4      	adds	r4, r4, r3
 800a39c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a39e:	0030      	movs	r0, r6
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	0039      	movs	r1, r7
 800a3a6:	f7f7 f8c3 	bl	8001530 <__aeabi_dmul>
 800a3aa:	0006      	movs	r6, r0
 800a3ac:	000f      	movs	r7, r1
 800a3ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3b0:	106d      	asrs	r5, r5, #1
 800a3b2:	3308      	adds	r3, #8
 800a3b4:	e7e2      	b.n	800a37c <_dtoa_r+0x304>
 800a3b6:	46c0      	nop			; (mov r8, r8)
 800a3b8:	0800c199 	.word	0x0800c199
 800a3bc:	0800c1b0 	.word	0x0800c1b0
 800a3c0:	7ff00000 	.word	0x7ff00000
 800a3c4:	0000270f 	.word	0x0000270f
 800a3c8:	0800c195 	.word	0x0800c195
 800a3cc:	0800c198 	.word	0x0800c198
 800a3d0:	0800c168 	.word	0x0800c168
 800a3d4:	0800c169 	.word	0x0800c169
 800a3d8:	3ff00000 	.word	0x3ff00000
 800a3dc:	fffffc01 	.word	0xfffffc01
 800a3e0:	3ff80000 	.word	0x3ff80000
 800a3e4:	636f4361 	.word	0x636f4361
 800a3e8:	3fd287a7 	.word	0x3fd287a7
 800a3ec:	8b60c8b3 	.word	0x8b60c8b3
 800a3f0:	3fc68a28 	.word	0x3fc68a28
 800a3f4:	509f79fb 	.word	0x509f79fb
 800a3f8:	3fd34413 	.word	0x3fd34413
 800a3fc:	0800c2a0 	.word	0x0800c2a0
 800a400:	00000432 	.word	0x00000432
 800a404:	00000412 	.word	0x00000412
 800a408:	fe100000 	.word	0xfe100000
 800a40c:	0800c208 	.word	0x0800c208
 800a410:	0800c278 	.word	0x0800c278
 800a414:	9b03      	ldr	r3, [sp, #12]
 800a416:	2402      	movs	r4, #2
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d016      	beq.n	800a44a <_dtoa_r+0x3d2>
 800a41c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a41e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a420:	220f      	movs	r2, #15
 800a422:	425d      	negs	r5, r3
 800a424:	402a      	ands	r2, r5
 800a426:	4bdd      	ldr	r3, [pc, #884]	; (800a79c <_dtoa_r+0x724>)
 800a428:	00d2      	lsls	r2, r2, #3
 800a42a:	189b      	adds	r3, r3, r2
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	f7f7 f87e 	bl	8001530 <__aeabi_dmul>
 800a434:	2701      	movs	r7, #1
 800a436:	2300      	movs	r3, #0
 800a438:	9008      	str	r0, [sp, #32]
 800a43a:	9109      	str	r1, [sp, #36]	; 0x24
 800a43c:	4ed8      	ldr	r6, [pc, #864]	; (800a7a0 <_dtoa_r+0x728>)
 800a43e:	112d      	asrs	r5, r5, #4
 800a440:	2d00      	cmp	r5, #0
 800a442:	d000      	beq.n	800a446 <_dtoa_r+0x3ce>
 800a444:	e091      	b.n	800a56a <_dtoa_r+0x4f2>
 800a446:	2b00      	cmp	r3, #0
 800a448:	d1a1      	bne.n	800a38e <_dtoa_r+0x316>
 800a44a:	9e08      	ldr	r6, [sp, #32]
 800a44c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a44e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a450:	2b00      	cmp	r3, #0
 800a452:	d100      	bne.n	800a456 <_dtoa_r+0x3de>
 800a454:	e094      	b.n	800a580 <_dtoa_r+0x508>
 800a456:	2200      	movs	r2, #0
 800a458:	0030      	movs	r0, r6
 800a45a:	0039      	movs	r1, r7
 800a45c:	4bd1      	ldr	r3, [pc, #836]	; (800a7a4 <_dtoa_r+0x72c>)
 800a45e:	f7f5 fff9 	bl	8000454 <__aeabi_dcmplt>
 800a462:	2800      	cmp	r0, #0
 800a464:	d100      	bne.n	800a468 <_dtoa_r+0x3f0>
 800a466:	e08b      	b.n	800a580 <_dtoa_r+0x508>
 800a468:	9b07      	ldr	r3, [sp, #28]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d100      	bne.n	800a470 <_dtoa_r+0x3f8>
 800a46e:	e087      	b.n	800a580 <_dtoa_r+0x508>
 800a470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a472:	2b00      	cmp	r3, #0
 800a474:	dd45      	ble.n	800a502 <_dtoa_r+0x48a>
 800a476:	9b03      	ldr	r3, [sp, #12]
 800a478:	2200      	movs	r2, #0
 800a47a:	3b01      	subs	r3, #1
 800a47c:	930e      	str	r3, [sp, #56]	; 0x38
 800a47e:	0030      	movs	r0, r6
 800a480:	4bc9      	ldr	r3, [pc, #804]	; (800a7a8 <_dtoa_r+0x730>)
 800a482:	0039      	movs	r1, r7
 800a484:	f7f7 f854 	bl	8001530 <__aeabi_dmul>
 800a488:	9008      	str	r0, [sp, #32]
 800a48a:	9109      	str	r1, [sp, #36]	; 0x24
 800a48c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a48e:	3401      	adds	r4, #1
 800a490:	0020      	movs	r0, r4
 800a492:	9e08      	ldr	r6, [sp, #32]
 800a494:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a496:	9312      	str	r3, [sp, #72]	; 0x48
 800a498:	f7f7 fee2 	bl	8002260 <__aeabi_i2d>
 800a49c:	0032      	movs	r2, r6
 800a49e:	003b      	movs	r3, r7
 800a4a0:	f7f7 f846 	bl	8001530 <__aeabi_dmul>
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	4bc1      	ldr	r3, [pc, #772]	; (800a7ac <_dtoa_r+0x734>)
 800a4a8:	f7f6 f8e8 	bl	800067c <__aeabi_dadd>
 800a4ac:	4ac0      	ldr	r2, [pc, #768]	; (800a7b0 <_dtoa_r+0x738>)
 800a4ae:	9014      	str	r0, [sp, #80]	; 0x50
 800a4b0:	9115      	str	r1, [sp, #84]	; 0x54
 800a4b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a4b4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800a4b6:	4694      	mov	ip, r2
 800a4b8:	9308      	str	r3, [sp, #32]
 800a4ba:	9409      	str	r4, [sp, #36]	; 0x24
 800a4bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4be:	4463      	add	r3, ip
 800a4c0:	9318      	str	r3, [sp, #96]	; 0x60
 800a4c2:	9309      	str	r3, [sp, #36]	; 0x24
 800a4c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d15e      	bne.n	800a588 <_dtoa_r+0x510>
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	4bb9      	ldr	r3, [pc, #740]	; (800a7b4 <_dtoa_r+0x73c>)
 800a4ce:	0030      	movs	r0, r6
 800a4d0:	0039      	movs	r1, r7
 800a4d2:	f7f7 faef 	bl	8001ab4 <__aeabi_dsub>
 800a4d6:	9a08      	ldr	r2, [sp, #32]
 800a4d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a4da:	0004      	movs	r4, r0
 800a4dc:	000d      	movs	r5, r1
 800a4de:	f7f5 ffcd 	bl	800047c <__aeabi_dcmpgt>
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	d000      	beq.n	800a4e8 <_dtoa_r+0x470>
 800a4e6:	e2b3      	b.n	800aa50 <_dtoa_r+0x9d8>
 800a4e8:	48b3      	ldr	r0, [pc, #716]	; (800a7b8 <_dtoa_r+0x740>)
 800a4ea:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a4ec:	4684      	mov	ip, r0
 800a4ee:	4461      	add	r1, ip
 800a4f0:	000b      	movs	r3, r1
 800a4f2:	0020      	movs	r0, r4
 800a4f4:	0029      	movs	r1, r5
 800a4f6:	9a08      	ldr	r2, [sp, #32]
 800a4f8:	f7f5 ffac 	bl	8000454 <__aeabi_dcmplt>
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	d000      	beq.n	800a502 <_dtoa_r+0x48a>
 800a500:	e2a3      	b.n	800aa4a <_dtoa_r+0x9d2>
 800a502:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a504:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800a506:	9308      	str	r3, [sp, #32]
 800a508:	9409      	str	r4, [sp, #36]	; 0x24
 800a50a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	da00      	bge.n	800a512 <_dtoa_r+0x49a>
 800a510:	e179      	b.n	800a806 <_dtoa_r+0x78e>
 800a512:	9a03      	ldr	r2, [sp, #12]
 800a514:	2a0e      	cmp	r2, #14
 800a516:	dd00      	ble.n	800a51a <_dtoa_r+0x4a2>
 800a518:	e175      	b.n	800a806 <_dtoa_r+0x78e>
 800a51a:	4ba0      	ldr	r3, [pc, #640]	; (800a79c <_dtoa_r+0x724>)
 800a51c:	00d2      	lsls	r2, r2, #3
 800a51e:	189b      	adds	r3, r3, r2
 800a520:	681e      	ldr	r6, [r3, #0]
 800a522:	685f      	ldr	r7, [r3, #4]
 800a524:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a526:	2b00      	cmp	r3, #0
 800a528:	db00      	blt.n	800a52c <_dtoa_r+0x4b4>
 800a52a:	e0e5      	b.n	800a6f8 <_dtoa_r+0x680>
 800a52c:	9b07      	ldr	r3, [sp, #28]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	dd00      	ble.n	800a534 <_dtoa_r+0x4bc>
 800a532:	e0e1      	b.n	800a6f8 <_dtoa_r+0x680>
 800a534:	d000      	beq.n	800a538 <_dtoa_r+0x4c0>
 800a536:	e288      	b.n	800aa4a <_dtoa_r+0x9d2>
 800a538:	2200      	movs	r2, #0
 800a53a:	0030      	movs	r0, r6
 800a53c:	0039      	movs	r1, r7
 800a53e:	4b9d      	ldr	r3, [pc, #628]	; (800a7b4 <_dtoa_r+0x73c>)
 800a540:	f7f6 fff6 	bl	8001530 <__aeabi_dmul>
 800a544:	9a08      	ldr	r2, [sp, #32]
 800a546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a548:	f7f5 ffa2 	bl	8000490 <__aeabi_dcmpge>
 800a54c:	9e07      	ldr	r6, [sp, #28]
 800a54e:	0037      	movs	r7, r6
 800a550:	2800      	cmp	r0, #0
 800a552:	d000      	beq.n	800a556 <_dtoa_r+0x4de>
 800a554:	e25f      	b.n	800aa16 <_dtoa_r+0x99e>
 800a556:	9b06      	ldr	r3, [sp, #24]
 800a558:	9a06      	ldr	r2, [sp, #24]
 800a55a:	3301      	adds	r3, #1
 800a55c:	9308      	str	r3, [sp, #32]
 800a55e:	2331      	movs	r3, #49	; 0x31
 800a560:	7013      	strb	r3, [r2, #0]
 800a562:	9b03      	ldr	r3, [sp, #12]
 800a564:	3301      	adds	r3, #1
 800a566:	9303      	str	r3, [sp, #12]
 800a568:	e25a      	b.n	800aa20 <_dtoa_r+0x9a8>
 800a56a:	423d      	tst	r5, r7
 800a56c:	d005      	beq.n	800a57a <_dtoa_r+0x502>
 800a56e:	6832      	ldr	r2, [r6, #0]
 800a570:	6873      	ldr	r3, [r6, #4]
 800a572:	f7f6 ffdd 	bl	8001530 <__aeabi_dmul>
 800a576:	003b      	movs	r3, r7
 800a578:	3401      	adds	r4, #1
 800a57a:	106d      	asrs	r5, r5, #1
 800a57c:	3608      	adds	r6, #8
 800a57e:	e75f      	b.n	800a440 <_dtoa_r+0x3c8>
 800a580:	9b03      	ldr	r3, [sp, #12]
 800a582:	930e      	str	r3, [sp, #56]	; 0x38
 800a584:	9b07      	ldr	r3, [sp, #28]
 800a586:	e783      	b.n	800a490 <_dtoa_r+0x418>
 800a588:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a58a:	4b84      	ldr	r3, [pc, #528]	; (800a79c <_dtoa_r+0x724>)
 800a58c:	3a01      	subs	r2, #1
 800a58e:	00d2      	lsls	r2, r2, #3
 800a590:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a592:	189b      	adds	r3, r3, r2
 800a594:	9c08      	ldr	r4, [sp, #32]
 800a596:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	2900      	cmp	r1, #0
 800a59e:	d051      	beq.n	800a644 <_dtoa_r+0x5cc>
 800a5a0:	2000      	movs	r0, #0
 800a5a2:	4986      	ldr	r1, [pc, #536]	; (800a7bc <_dtoa_r+0x744>)
 800a5a4:	f7f6 fbca 	bl	8000d3c <__aeabi_ddiv>
 800a5a8:	0022      	movs	r2, r4
 800a5aa:	002b      	movs	r3, r5
 800a5ac:	f7f7 fa82 	bl	8001ab4 <__aeabi_dsub>
 800a5b0:	9a06      	ldr	r2, [sp, #24]
 800a5b2:	0004      	movs	r4, r0
 800a5b4:	4694      	mov	ip, r2
 800a5b6:	000d      	movs	r5, r1
 800a5b8:	9b06      	ldr	r3, [sp, #24]
 800a5ba:	9314      	str	r3, [sp, #80]	; 0x50
 800a5bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a5be:	4463      	add	r3, ip
 800a5c0:	9318      	str	r3, [sp, #96]	; 0x60
 800a5c2:	0039      	movs	r1, r7
 800a5c4:	0030      	movs	r0, r6
 800a5c6:	f7f7 fe15 	bl	80021f4 <__aeabi_d2iz>
 800a5ca:	9012      	str	r0, [sp, #72]	; 0x48
 800a5cc:	f7f7 fe48 	bl	8002260 <__aeabi_i2d>
 800a5d0:	0002      	movs	r2, r0
 800a5d2:	000b      	movs	r3, r1
 800a5d4:	0030      	movs	r0, r6
 800a5d6:	0039      	movs	r1, r7
 800a5d8:	f7f7 fa6c 	bl	8001ab4 <__aeabi_dsub>
 800a5dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a5de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	9308      	str	r3, [sp, #32]
 800a5e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a5e6:	0006      	movs	r6, r0
 800a5e8:	3330      	adds	r3, #48	; 0x30
 800a5ea:	7013      	strb	r3, [r2, #0]
 800a5ec:	0022      	movs	r2, r4
 800a5ee:	002b      	movs	r3, r5
 800a5f0:	000f      	movs	r7, r1
 800a5f2:	f7f5 ff2f 	bl	8000454 <__aeabi_dcmplt>
 800a5f6:	2800      	cmp	r0, #0
 800a5f8:	d174      	bne.n	800a6e4 <_dtoa_r+0x66c>
 800a5fa:	0032      	movs	r2, r6
 800a5fc:	003b      	movs	r3, r7
 800a5fe:	2000      	movs	r0, #0
 800a600:	4968      	ldr	r1, [pc, #416]	; (800a7a4 <_dtoa_r+0x72c>)
 800a602:	f7f7 fa57 	bl	8001ab4 <__aeabi_dsub>
 800a606:	0022      	movs	r2, r4
 800a608:	002b      	movs	r3, r5
 800a60a:	f7f5 ff23 	bl	8000454 <__aeabi_dcmplt>
 800a60e:	2800      	cmp	r0, #0
 800a610:	d000      	beq.n	800a614 <_dtoa_r+0x59c>
 800a612:	e0d7      	b.n	800a7c4 <_dtoa_r+0x74c>
 800a614:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a616:	9a08      	ldr	r2, [sp, #32]
 800a618:	4293      	cmp	r3, r2
 800a61a:	d100      	bne.n	800a61e <_dtoa_r+0x5a6>
 800a61c:	e771      	b.n	800a502 <_dtoa_r+0x48a>
 800a61e:	2200      	movs	r2, #0
 800a620:	0020      	movs	r0, r4
 800a622:	0029      	movs	r1, r5
 800a624:	4b60      	ldr	r3, [pc, #384]	; (800a7a8 <_dtoa_r+0x730>)
 800a626:	f7f6 ff83 	bl	8001530 <__aeabi_dmul>
 800a62a:	4b5f      	ldr	r3, [pc, #380]	; (800a7a8 <_dtoa_r+0x730>)
 800a62c:	0004      	movs	r4, r0
 800a62e:	000d      	movs	r5, r1
 800a630:	0030      	movs	r0, r6
 800a632:	0039      	movs	r1, r7
 800a634:	2200      	movs	r2, #0
 800a636:	f7f6 ff7b 	bl	8001530 <__aeabi_dmul>
 800a63a:	9b08      	ldr	r3, [sp, #32]
 800a63c:	0006      	movs	r6, r0
 800a63e:	000f      	movs	r7, r1
 800a640:	9314      	str	r3, [sp, #80]	; 0x50
 800a642:	e7be      	b.n	800a5c2 <_dtoa_r+0x54a>
 800a644:	0020      	movs	r0, r4
 800a646:	0029      	movs	r1, r5
 800a648:	f7f6 ff72 	bl	8001530 <__aeabi_dmul>
 800a64c:	9a06      	ldr	r2, [sp, #24]
 800a64e:	9b06      	ldr	r3, [sp, #24]
 800a650:	4694      	mov	ip, r2
 800a652:	9308      	str	r3, [sp, #32]
 800a654:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a656:	9014      	str	r0, [sp, #80]	; 0x50
 800a658:	9115      	str	r1, [sp, #84]	; 0x54
 800a65a:	4463      	add	r3, ip
 800a65c:	9319      	str	r3, [sp, #100]	; 0x64
 800a65e:	0030      	movs	r0, r6
 800a660:	0039      	movs	r1, r7
 800a662:	f7f7 fdc7 	bl	80021f4 <__aeabi_d2iz>
 800a666:	9018      	str	r0, [sp, #96]	; 0x60
 800a668:	f7f7 fdfa 	bl	8002260 <__aeabi_i2d>
 800a66c:	0002      	movs	r2, r0
 800a66e:	000b      	movs	r3, r1
 800a670:	0030      	movs	r0, r6
 800a672:	0039      	movs	r1, r7
 800a674:	f7f7 fa1e 	bl	8001ab4 <__aeabi_dsub>
 800a678:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800a67a:	9b08      	ldr	r3, [sp, #32]
 800a67c:	3630      	adds	r6, #48	; 0x30
 800a67e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a680:	701e      	strb	r6, [r3, #0]
 800a682:	3301      	adds	r3, #1
 800a684:	0004      	movs	r4, r0
 800a686:	000d      	movs	r5, r1
 800a688:	9308      	str	r3, [sp, #32]
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d12d      	bne.n	800a6ea <_dtoa_r+0x672>
 800a68e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a690:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a692:	9a06      	ldr	r2, [sp, #24]
 800a694:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a696:	4694      	mov	ip, r2
 800a698:	4463      	add	r3, ip
 800a69a:	2200      	movs	r2, #0
 800a69c:	9308      	str	r3, [sp, #32]
 800a69e:	4b47      	ldr	r3, [pc, #284]	; (800a7bc <_dtoa_r+0x744>)
 800a6a0:	f7f5 ffec 	bl	800067c <__aeabi_dadd>
 800a6a4:	0002      	movs	r2, r0
 800a6a6:	000b      	movs	r3, r1
 800a6a8:	0020      	movs	r0, r4
 800a6aa:	0029      	movs	r1, r5
 800a6ac:	f7f5 fee6 	bl	800047c <__aeabi_dcmpgt>
 800a6b0:	2800      	cmp	r0, #0
 800a6b2:	d000      	beq.n	800a6b6 <_dtoa_r+0x63e>
 800a6b4:	e086      	b.n	800a7c4 <_dtoa_r+0x74c>
 800a6b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6ba:	2000      	movs	r0, #0
 800a6bc:	493f      	ldr	r1, [pc, #252]	; (800a7bc <_dtoa_r+0x744>)
 800a6be:	f7f7 f9f9 	bl	8001ab4 <__aeabi_dsub>
 800a6c2:	0002      	movs	r2, r0
 800a6c4:	000b      	movs	r3, r1
 800a6c6:	0020      	movs	r0, r4
 800a6c8:	0029      	movs	r1, r5
 800a6ca:	f7f5 fec3 	bl	8000454 <__aeabi_dcmplt>
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	d100      	bne.n	800a6d4 <_dtoa_r+0x65c>
 800a6d2:	e716      	b.n	800a502 <_dtoa_r+0x48a>
 800a6d4:	9b08      	ldr	r3, [sp, #32]
 800a6d6:	001a      	movs	r2, r3
 800a6d8:	3a01      	subs	r2, #1
 800a6da:	9208      	str	r2, [sp, #32]
 800a6dc:	7812      	ldrb	r2, [r2, #0]
 800a6de:	2a30      	cmp	r2, #48	; 0x30
 800a6e0:	d0f8      	beq.n	800a6d4 <_dtoa_r+0x65c>
 800a6e2:	9308      	str	r3, [sp, #32]
 800a6e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6e6:	9303      	str	r3, [sp, #12]
 800a6e8:	e046      	b.n	800a778 <_dtoa_r+0x700>
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	4b2e      	ldr	r3, [pc, #184]	; (800a7a8 <_dtoa_r+0x730>)
 800a6ee:	f7f6 ff1f 	bl	8001530 <__aeabi_dmul>
 800a6f2:	0006      	movs	r6, r0
 800a6f4:	000f      	movs	r7, r1
 800a6f6:	e7b2      	b.n	800a65e <_dtoa_r+0x5e6>
 800a6f8:	9b06      	ldr	r3, [sp, #24]
 800a6fa:	9a06      	ldr	r2, [sp, #24]
 800a6fc:	930a      	str	r3, [sp, #40]	; 0x28
 800a6fe:	9b07      	ldr	r3, [sp, #28]
 800a700:	9c08      	ldr	r4, [sp, #32]
 800a702:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a704:	3b01      	subs	r3, #1
 800a706:	189b      	adds	r3, r3, r2
 800a708:	930b      	str	r3, [sp, #44]	; 0x2c
 800a70a:	0032      	movs	r2, r6
 800a70c:	003b      	movs	r3, r7
 800a70e:	0020      	movs	r0, r4
 800a710:	0029      	movs	r1, r5
 800a712:	f7f6 fb13 	bl	8000d3c <__aeabi_ddiv>
 800a716:	f7f7 fd6d 	bl	80021f4 <__aeabi_d2iz>
 800a71a:	9007      	str	r0, [sp, #28]
 800a71c:	f7f7 fda0 	bl	8002260 <__aeabi_i2d>
 800a720:	0032      	movs	r2, r6
 800a722:	003b      	movs	r3, r7
 800a724:	f7f6 ff04 	bl	8001530 <__aeabi_dmul>
 800a728:	0002      	movs	r2, r0
 800a72a:	000b      	movs	r3, r1
 800a72c:	0020      	movs	r0, r4
 800a72e:	0029      	movs	r1, r5
 800a730:	f7f7 f9c0 	bl	8001ab4 <__aeabi_dsub>
 800a734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a736:	001a      	movs	r2, r3
 800a738:	3201      	adds	r2, #1
 800a73a:	920a      	str	r2, [sp, #40]	; 0x28
 800a73c:	9208      	str	r2, [sp, #32]
 800a73e:	9a07      	ldr	r2, [sp, #28]
 800a740:	3230      	adds	r2, #48	; 0x30
 800a742:	701a      	strb	r2, [r3, #0]
 800a744:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a746:	429a      	cmp	r2, r3
 800a748:	d14f      	bne.n	800a7ea <_dtoa_r+0x772>
 800a74a:	0002      	movs	r2, r0
 800a74c:	000b      	movs	r3, r1
 800a74e:	f7f5 ff95 	bl	800067c <__aeabi_dadd>
 800a752:	0032      	movs	r2, r6
 800a754:	003b      	movs	r3, r7
 800a756:	0004      	movs	r4, r0
 800a758:	000d      	movs	r5, r1
 800a75a:	f7f5 fe8f 	bl	800047c <__aeabi_dcmpgt>
 800a75e:	2800      	cmp	r0, #0
 800a760:	d12e      	bne.n	800a7c0 <_dtoa_r+0x748>
 800a762:	0032      	movs	r2, r6
 800a764:	003b      	movs	r3, r7
 800a766:	0020      	movs	r0, r4
 800a768:	0029      	movs	r1, r5
 800a76a:	f7f5 fe6d 	bl	8000448 <__aeabi_dcmpeq>
 800a76e:	2800      	cmp	r0, #0
 800a770:	d002      	beq.n	800a778 <_dtoa_r+0x700>
 800a772:	9b07      	ldr	r3, [sp, #28]
 800a774:	07de      	lsls	r6, r3, #31
 800a776:	d423      	bmi.n	800a7c0 <_dtoa_r+0x748>
 800a778:	9905      	ldr	r1, [sp, #20]
 800a77a:	9804      	ldr	r0, [sp, #16]
 800a77c:	f000 fbd6 	bl	800af2c <_Bfree>
 800a780:	2300      	movs	r3, #0
 800a782:	9a08      	ldr	r2, [sp, #32]
 800a784:	7013      	strb	r3, [r2, #0]
 800a786:	9b03      	ldr	r3, [sp, #12]
 800a788:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a78a:	3301      	adds	r3, #1
 800a78c:	6013      	str	r3, [r2, #0]
 800a78e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a790:	2b00      	cmp	r3, #0
 800a792:	d100      	bne.n	800a796 <_dtoa_r+0x71e>
 800a794:	e4ba      	b.n	800a10c <_dtoa_r+0x94>
 800a796:	9a08      	ldr	r2, [sp, #32]
 800a798:	601a      	str	r2, [r3, #0]
 800a79a:	e4b7      	b.n	800a10c <_dtoa_r+0x94>
 800a79c:	0800c2a0 	.word	0x0800c2a0
 800a7a0:	0800c278 	.word	0x0800c278
 800a7a4:	3ff00000 	.word	0x3ff00000
 800a7a8:	40240000 	.word	0x40240000
 800a7ac:	401c0000 	.word	0x401c0000
 800a7b0:	fcc00000 	.word	0xfcc00000
 800a7b4:	40140000 	.word	0x40140000
 800a7b8:	7cc00000 	.word	0x7cc00000
 800a7bc:	3fe00000 	.word	0x3fe00000
 800a7c0:	9b03      	ldr	r3, [sp, #12]
 800a7c2:	930e      	str	r3, [sp, #56]	; 0x38
 800a7c4:	9b08      	ldr	r3, [sp, #32]
 800a7c6:	9308      	str	r3, [sp, #32]
 800a7c8:	3b01      	subs	r3, #1
 800a7ca:	781a      	ldrb	r2, [r3, #0]
 800a7cc:	2a39      	cmp	r2, #57	; 0x39
 800a7ce:	d108      	bne.n	800a7e2 <_dtoa_r+0x76a>
 800a7d0:	9a06      	ldr	r2, [sp, #24]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d1f7      	bne.n	800a7c6 <_dtoa_r+0x74e>
 800a7d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a7d8:	9906      	ldr	r1, [sp, #24]
 800a7da:	3201      	adds	r2, #1
 800a7dc:	920e      	str	r2, [sp, #56]	; 0x38
 800a7de:	2230      	movs	r2, #48	; 0x30
 800a7e0:	700a      	strb	r2, [r1, #0]
 800a7e2:	781a      	ldrb	r2, [r3, #0]
 800a7e4:	3201      	adds	r2, #1
 800a7e6:	701a      	strb	r2, [r3, #0]
 800a7e8:	e77c      	b.n	800a6e4 <_dtoa_r+0x66c>
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	4ba9      	ldr	r3, [pc, #676]	; (800aa94 <_dtoa_r+0xa1c>)
 800a7ee:	f7f6 fe9f 	bl	8001530 <__aeabi_dmul>
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	0004      	movs	r4, r0
 800a7f8:	000d      	movs	r5, r1
 800a7fa:	f7f5 fe25 	bl	8000448 <__aeabi_dcmpeq>
 800a7fe:	2800      	cmp	r0, #0
 800a800:	d100      	bne.n	800a804 <_dtoa_r+0x78c>
 800a802:	e782      	b.n	800a70a <_dtoa_r+0x692>
 800a804:	e7b8      	b.n	800a778 <_dtoa_r+0x700>
 800a806:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800a808:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a80a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a80c:	2f00      	cmp	r7, #0
 800a80e:	d012      	beq.n	800a836 <_dtoa_r+0x7be>
 800a810:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a812:	2a01      	cmp	r2, #1
 800a814:	dc6e      	bgt.n	800a8f4 <_dtoa_r+0x87c>
 800a816:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a818:	2a00      	cmp	r2, #0
 800a81a:	d065      	beq.n	800a8e8 <_dtoa_r+0x870>
 800a81c:	4a9e      	ldr	r2, [pc, #632]	; (800aa98 <_dtoa_r+0xa20>)
 800a81e:	189b      	adds	r3, r3, r2
 800a820:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a822:	2101      	movs	r1, #1
 800a824:	18d2      	adds	r2, r2, r3
 800a826:	920a      	str	r2, [sp, #40]	; 0x28
 800a828:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a82a:	9804      	ldr	r0, [sp, #16]
 800a82c:	18d3      	adds	r3, r2, r3
 800a82e:	930c      	str	r3, [sp, #48]	; 0x30
 800a830:	f000 fc2c 	bl	800b08c <__i2b>
 800a834:	0007      	movs	r7, r0
 800a836:	2c00      	cmp	r4, #0
 800a838:	d00e      	beq.n	800a858 <_dtoa_r+0x7e0>
 800a83a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	dd0b      	ble.n	800a858 <_dtoa_r+0x7e0>
 800a840:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a842:	0023      	movs	r3, r4
 800a844:	4294      	cmp	r4, r2
 800a846:	dd00      	ble.n	800a84a <_dtoa_r+0x7d2>
 800a848:	0013      	movs	r3, r2
 800a84a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a84c:	1ae4      	subs	r4, r4, r3
 800a84e:	1ad2      	subs	r2, r2, r3
 800a850:	920a      	str	r2, [sp, #40]	; 0x28
 800a852:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a854:	1ad3      	subs	r3, r2, r3
 800a856:	930c      	str	r3, [sp, #48]	; 0x30
 800a858:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d01e      	beq.n	800a89c <_dtoa_r+0x824>
 800a85e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a860:	2b00      	cmp	r3, #0
 800a862:	d05c      	beq.n	800a91e <_dtoa_r+0x8a6>
 800a864:	2d00      	cmp	r5, #0
 800a866:	dd10      	ble.n	800a88a <_dtoa_r+0x812>
 800a868:	0039      	movs	r1, r7
 800a86a:	002a      	movs	r2, r5
 800a86c:	9804      	ldr	r0, [sp, #16]
 800a86e:	f000 fcd5 	bl	800b21c <__pow5mult>
 800a872:	9a05      	ldr	r2, [sp, #20]
 800a874:	0001      	movs	r1, r0
 800a876:	0007      	movs	r7, r0
 800a878:	9804      	ldr	r0, [sp, #16]
 800a87a:	f000 fc1f 	bl	800b0bc <__multiply>
 800a87e:	0006      	movs	r6, r0
 800a880:	9905      	ldr	r1, [sp, #20]
 800a882:	9804      	ldr	r0, [sp, #16]
 800a884:	f000 fb52 	bl	800af2c <_Bfree>
 800a888:	9605      	str	r6, [sp, #20]
 800a88a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a88c:	1b5a      	subs	r2, r3, r5
 800a88e:	42ab      	cmp	r3, r5
 800a890:	d004      	beq.n	800a89c <_dtoa_r+0x824>
 800a892:	9905      	ldr	r1, [sp, #20]
 800a894:	9804      	ldr	r0, [sp, #16]
 800a896:	f000 fcc1 	bl	800b21c <__pow5mult>
 800a89a:	9005      	str	r0, [sp, #20]
 800a89c:	2101      	movs	r1, #1
 800a89e:	9804      	ldr	r0, [sp, #16]
 800a8a0:	f000 fbf4 	bl	800b08c <__i2b>
 800a8a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a8a6:	0006      	movs	r6, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	dd3a      	ble.n	800a922 <_dtoa_r+0x8aa>
 800a8ac:	001a      	movs	r2, r3
 800a8ae:	0001      	movs	r1, r0
 800a8b0:	9804      	ldr	r0, [sp, #16]
 800a8b2:	f000 fcb3 	bl	800b21c <__pow5mult>
 800a8b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8b8:	0006      	movs	r6, r0
 800a8ba:	2500      	movs	r5, #0
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	dc38      	bgt.n	800a932 <_dtoa_r+0x8ba>
 800a8c0:	2500      	movs	r5, #0
 800a8c2:	9b08      	ldr	r3, [sp, #32]
 800a8c4:	42ab      	cmp	r3, r5
 800a8c6:	d130      	bne.n	800a92a <_dtoa_r+0x8b2>
 800a8c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ca:	031b      	lsls	r3, r3, #12
 800a8cc:	42ab      	cmp	r3, r5
 800a8ce:	d12c      	bne.n	800a92a <_dtoa_r+0x8b2>
 800a8d0:	4b72      	ldr	r3, [pc, #456]	; (800aa9c <_dtoa_r+0xa24>)
 800a8d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8d4:	4213      	tst	r3, r2
 800a8d6:	d028      	beq.n	800a92a <_dtoa_r+0x8b2>
 800a8d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8da:	3501      	adds	r5, #1
 800a8dc:	3301      	adds	r3, #1
 800a8de:	930a      	str	r3, [sp, #40]	; 0x28
 800a8e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	930c      	str	r3, [sp, #48]	; 0x30
 800a8e6:	e020      	b.n	800a92a <_dtoa_r+0x8b2>
 800a8e8:	2336      	movs	r3, #54	; 0x36
 800a8ea:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a8ec:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a8ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a8f0:	1a9b      	subs	r3, r3, r2
 800a8f2:	e795      	b.n	800a820 <_dtoa_r+0x7a8>
 800a8f4:	9b07      	ldr	r3, [sp, #28]
 800a8f6:	1e5d      	subs	r5, r3, #1
 800a8f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8fa:	42ab      	cmp	r3, r5
 800a8fc:	db07      	blt.n	800a90e <_dtoa_r+0x896>
 800a8fe:	1b5d      	subs	r5, r3, r5
 800a900:	9b07      	ldr	r3, [sp, #28]
 800a902:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a904:	2b00      	cmp	r3, #0
 800a906:	da8b      	bge.n	800a820 <_dtoa_r+0x7a8>
 800a908:	1ae4      	subs	r4, r4, r3
 800a90a:	2300      	movs	r3, #0
 800a90c:	e788      	b.n	800a820 <_dtoa_r+0x7a8>
 800a90e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a910:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a912:	1aeb      	subs	r3, r5, r3
 800a914:	18d3      	adds	r3, r2, r3
 800a916:	950d      	str	r5, [sp, #52]	; 0x34
 800a918:	9313      	str	r3, [sp, #76]	; 0x4c
 800a91a:	2500      	movs	r5, #0
 800a91c:	e7f0      	b.n	800a900 <_dtoa_r+0x888>
 800a91e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a920:	e7b7      	b.n	800a892 <_dtoa_r+0x81a>
 800a922:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a924:	2500      	movs	r5, #0
 800a926:	2b01      	cmp	r3, #1
 800a928:	ddca      	ble.n	800a8c0 <_dtoa_r+0x848>
 800a92a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a92c:	2001      	movs	r0, #1
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d008      	beq.n	800a944 <_dtoa_r+0x8cc>
 800a932:	6933      	ldr	r3, [r6, #16]
 800a934:	3303      	adds	r3, #3
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	18f3      	adds	r3, r6, r3
 800a93a:	6858      	ldr	r0, [r3, #4]
 800a93c:	f000 fb5e 	bl	800affc <__hi0bits>
 800a940:	2320      	movs	r3, #32
 800a942:	1a18      	subs	r0, r3, r0
 800a944:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a946:	1818      	adds	r0, r3, r0
 800a948:	0002      	movs	r2, r0
 800a94a:	231f      	movs	r3, #31
 800a94c:	401a      	ands	r2, r3
 800a94e:	4218      	tst	r0, r3
 800a950:	d047      	beq.n	800a9e2 <_dtoa_r+0x96a>
 800a952:	3301      	adds	r3, #1
 800a954:	1a9b      	subs	r3, r3, r2
 800a956:	2b04      	cmp	r3, #4
 800a958:	dd3f      	ble.n	800a9da <_dtoa_r+0x962>
 800a95a:	231c      	movs	r3, #28
 800a95c:	1a9b      	subs	r3, r3, r2
 800a95e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a960:	18e4      	adds	r4, r4, r3
 800a962:	18d2      	adds	r2, r2, r3
 800a964:	920a      	str	r2, [sp, #40]	; 0x28
 800a966:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a968:	18d3      	adds	r3, r2, r3
 800a96a:	930c      	str	r3, [sp, #48]	; 0x30
 800a96c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a96e:	2b00      	cmp	r3, #0
 800a970:	dd05      	ble.n	800a97e <_dtoa_r+0x906>
 800a972:	001a      	movs	r2, r3
 800a974:	9905      	ldr	r1, [sp, #20]
 800a976:	9804      	ldr	r0, [sp, #16]
 800a978:	f000 fcac 	bl	800b2d4 <__lshift>
 800a97c:	9005      	str	r0, [sp, #20]
 800a97e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a980:	2b00      	cmp	r3, #0
 800a982:	dd05      	ble.n	800a990 <_dtoa_r+0x918>
 800a984:	0031      	movs	r1, r6
 800a986:	001a      	movs	r2, r3
 800a988:	9804      	ldr	r0, [sp, #16]
 800a98a:	f000 fca3 	bl	800b2d4 <__lshift>
 800a98e:	0006      	movs	r6, r0
 800a990:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a992:	2b00      	cmp	r3, #0
 800a994:	d027      	beq.n	800a9e6 <_dtoa_r+0x96e>
 800a996:	0031      	movs	r1, r6
 800a998:	9805      	ldr	r0, [sp, #20]
 800a99a:	f000 fd09 	bl	800b3b0 <__mcmp>
 800a99e:	2800      	cmp	r0, #0
 800a9a0:	da21      	bge.n	800a9e6 <_dtoa_r+0x96e>
 800a9a2:	9b03      	ldr	r3, [sp, #12]
 800a9a4:	220a      	movs	r2, #10
 800a9a6:	3b01      	subs	r3, #1
 800a9a8:	9303      	str	r3, [sp, #12]
 800a9aa:	9905      	ldr	r1, [sp, #20]
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	9804      	ldr	r0, [sp, #16]
 800a9b0:	f000 fae0 	bl	800af74 <__multadd>
 800a9b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9b6:	9005      	str	r0, [sp, #20]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d100      	bne.n	800a9be <_dtoa_r+0x946>
 800a9bc:	e15d      	b.n	800ac7a <_dtoa_r+0xc02>
 800a9be:	2300      	movs	r3, #0
 800a9c0:	0039      	movs	r1, r7
 800a9c2:	220a      	movs	r2, #10
 800a9c4:	9804      	ldr	r0, [sp, #16]
 800a9c6:	f000 fad5 	bl	800af74 <__multadd>
 800a9ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9cc:	0007      	movs	r7, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	dc49      	bgt.n	800aa66 <_dtoa_r+0x9ee>
 800a9d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a9d4:	2b02      	cmp	r3, #2
 800a9d6:	dc0e      	bgt.n	800a9f6 <_dtoa_r+0x97e>
 800a9d8:	e045      	b.n	800aa66 <_dtoa_r+0x9ee>
 800a9da:	2b04      	cmp	r3, #4
 800a9dc:	d0c6      	beq.n	800a96c <_dtoa_r+0x8f4>
 800a9de:	331c      	adds	r3, #28
 800a9e0:	e7bd      	b.n	800a95e <_dtoa_r+0x8e6>
 800a9e2:	0013      	movs	r3, r2
 800a9e4:	e7fb      	b.n	800a9de <_dtoa_r+0x966>
 800a9e6:	9b07      	ldr	r3, [sp, #28]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	dc36      	bgt.n	800aa5a <_dtoa_r+0x9e2>
 800a9ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a9ee:	2b02      	cmp	r3, #2
 800a9f0:	dd33      	ble.n	800aa5a <_dtoa_r+0x9e2>
 800a9f2:	9b07      	ldr	r3, [sp, #28]
 800a9f4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d10c      	bne.n	800aa16 <_dtoa_r+0x99e>
 800a9fc:	0031      	movs	r1, r6
 800a9fe:	2205      	movs	r2, #5
 800aa00:	9804      	ldr	r0, [sp, #16]
 800aa02:	f000 fab7 	bl	800af74 <__multadd>
 800aa06:	0006      	movs	r6, r0
 800aa08:	0001      	movs	r1, r0
 800aa0a:	9805      	ldr	r0, [sp, #20]
 800aa0c:	f000 fcd0 	bl	800b3b0 <__mcmp>
 800aa10:	2800      	cmp	r0, #0
 800aa12:	dd00      	ble.n	800aa16 <_dtoa_r+0x99e>
 800aa14:	e59f      	b.n	800a556 <_dtoa_r+0x4de>
 800aa16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aa18:	43db      	mvns	r3, r3
 800aa1a:	9303      	str	r3, [sp, #12]
 800aa1c:	9b06      	ldr	r3, [sp, #24]
 800aa1e:	9308      	str	r3, [sp, #32]
 800aa20:	2500      	movs	r5, #0
 800aa22:	0031      	movs	r1, r6
 800aa24:	9804      	ldr	r0, [sp, #16]
 800aa26:	f000 fa81 	bl	800af2c <_Bfree>
 800aa2a:	2f00      	cmp	r7, #0
 800aa2c:	d100      	bne.n	800aa30 <_dtoa_r+0x9b8>
 800aa2e:	e6a3      	b.n	800a778 <_dtoa_r+0x700>
 800aa30:	2d00      	cmp	r5, #0
 800aa32:	d005      	beq.n	800aa40 <_dtoa_r+0x9c8>
 800aa34:	42bd      	cmp	r5, r7
 800aa36:	d003      	beq.n	800aa40 <_dtoa_r+0x9c8>
 800aa38:	0029      	movs	r1, r5
 800aa3a:	9804      	ldr	r0, [sp, #16]
 800aa3c:	f000 fa76 	bl	800af2c <_Bfree>
 800aa40:	0039      	movs	r1, r7
 800aa42:	9804      	ldr	r0, [sp, #16]
 800aa44:	f000 fa72 	bl	800af2c <_Bfree>
 800aa48:	e696      	b.n	800a778 <_dtoa_r+0x700>
 800aa4a:	2600      	movs	r6, #0
 800aa4c:	0037      	movs	r7, r6
 800aa4e:	e7e2      	b.n	800aa16 <_dtoa_r+0x99e>
 800aa50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa52:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800aa54:	9303      	str	r3, [sp, #12]
 800aa56:	0037      	movs	r7, r6
 800aa58:	e57d      	b.n	800a556 <_dtoa_r+0x4de>
 800aa5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d100      	bne.n	800aa62 <_dtoa_r+0x9ea>
 800aa60:	e0c3      	b.n	800abea <_dtoa_r+0xb72>
 800aa62:	9b07      	ldr	r3, [sp, #28]
 800aa64:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa66:	2c00      	cmp	r4, #0
 800aa68:	dd05      	ble.n	800aa76 <_dtoa_r+0x9fe>
 800aa6a:	0039      	movs	r1, r7
 800aa6c:	0022      	movs	r2, r4
 800aa6e:	9804      	ldr	r0, [sp, #16]
 800aa70:	f000 fc30 	bl	800b2d4 <__lshift>
 800aa74:	0007      	movs	r7, r0
 800aa76:	0038      	movs	r0, r7
 800aa78:	2d00      	cmp	r5, #0
 800aa7a:	d024      	beq.n	800aac6 <_dtoa_r+0xa4e>
 800aa7c:	6879      	ldr	r1, [r7, #4]
 800aa7e:	9804      	ldr	r0, [sp, #16]
 800aa80:	f000 fa10 	bl	800aea4 <_Balloc>
 800aa84:	1e04      	subs	r4, r0, #0
 800aa86:	d111      	bne.n	800aaac <_dtoa_r+0xa34>
 800aa88:	0022      	movs	r2, r4
 800aa8a:	4b05      	ldr	r3, [pc, #20]	; (800aaa0 <_dtoa_r+0xa28>)
 800aa8c:	4805      	ldr	r0, [pc, #20]	; (800aaa4 <_dtoa_r+0xa2c>)
 800aa8e:	4906      	ldr	r1, [pc, #24]	; (800aaa8 <_dtoa_r+0xa30>)
 800aa90:	f7ff fb07 	bl	800a0a2 <_dtoa_r+0x2a>
 800aa94:	40240000 	.word	0x40240000
 800aa98:	00000433 	.word	0x00000433
 800aa9c:	7ff00000 	.word	0x7ff00000
 800aaa0:	0800c208 	.word	0x0800c208
 800aaa4:	0800c1b0 	.word	0x0800c1b0
 800aaa8:	000002ef 	.word	0x000002ef
 800aaac:	0039      	movs	r1, r7
 800aaae:	693a      	ldr	r2, [r7, #16]
 800aab0:	310c      	adds	r1, #12
 800aab2:	3202      	adds	r2, #2
 800aab4:	0092      	lsls	r2, r2, #2
 800aab6:	300c      	adds	r0, #12
 800aab8:	f001 f840 	bl	800bb3c <memcpy>
 800aabc:	2201      	movs	r2, #1
 800aabe:	0021      	movs	r1, r4
 800aac0:	9804      	ldr	r0, [sp, #16]
 800aac2:	f000 fc07 	bl	800b2d4 <__lshift>
 800aac6:	9b06      	ldr	r3, [sp, #24]
 800aac8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aaca:	9307      	str	r3, [sp, #28]
 800aacc:	3b01      	subs	r3, #1
 800aace:	189b      	adds	r3, r3, r2
 800aad0:	2201      	movs	r2, #1
 800aad2:	003d      	movs	r5, r7
 800aad4:	0007      	movs	r7, r0
 800aad6:	930e      	str	r3, [sp, #56]	; 0x38
 800aad8:	9b08      	ldr	r3, [sp, #32]
 800aada:	4013      	ands	r3, r2
 800aadc:	930d      	str	r3, [sp, #52]	; 0x34
 800aade:	0031      	movs	r1, r6
 800aae0:	9805      	ldr	r0, [sp, #20]
 800aae2:	f7ff fa39 	bl	8009f58 <quorem>
 800aae6:	0029      	movs	r1, r5
 800aae8:	0004      	movs	r4, r0
 800aaea:	900b      	str	r0, [sp, #44]	; 0x2c
 800aaec:	9805      	ldr	r0, [sp, #20]
 800aaee:	f000 fc5f 	bl	800b3b0 <__mcmp>
 800aaf2:	003a      	movs	r2, r7
 800aaf4:	900c      	str	r0, [sp, #48]	; 0x30
 800aaf6:	0031      	movs	r1, r6
 800aaf8:	9804      	ldr	r0, [sp, #16]
 800aafa:	f000 fc75 	bl	800b3e8 <__mdiff>
 800aafe:	2201      	movs	r2, #1
 800ab00:	68c3      	ldr	r3, [r0, #12]
 800ab02:	3430      	adds	r4, #48	; 0x30
 800ab04:	9008      	str	r0, [sp, #32]
 800ab06:	920a      	str	r2, [sp, #40]	; 0x28
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d104      	bne.n	800ab16 <_dtoa_r+0xa9e>
 800ab0c:	0001      	movs	r1, r0
 800ab0e:	9805      	ldr	r0, [sp, #20]
 800ab10:	f000 fc4e 	bl	800b3b0 <__mcmp>
 800ab14:	900a      	str	r0, [sp, #40]	; 0x28
 800ab16:	9908      	ldr	r1, [sp, #32]
 800ab18:	9804      	ldr	r0, [sp, #16]
 800ab1a:	f000 fa07 	bl	800af2c <_Bfree>
 800ab1e:	9b07      	ldr	r3, [sp, #28]
 800ab20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab22:	3301      	adds	r3, #1
 800ab24:	9308      	str	r3, [sp, #32]
 800ab26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	d109      	bne.n	800ab44 <_dtoa_r+0xacc>
 800ab30:	2c39      	cmp	r4, #57	; 0x39
 800ab32:	d022      	beq.n	800ab7a <_dtoa_r+0xb02>
 800ab34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	dd01      	ble.n	800ab3e <_dtoa_r+0xac6>
 800ab3a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ab3c:	3431      	adds	r4, #49	; 0x31
 800ab3e:	9b07      	ldr	r3, [sp, #28]
 800ab40:	701c      	strb	r4, [r3, #0]
 800ab42:	e76e      	b.n	800aa22 <_dtoa_r+0x9aa>
 800ab44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	db04      	blt.n	800ab54 <_dtoa_r+0xadc>
 800ab4a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab50:	4313      	orrs	r3, r2
 800ab52:	d11e      	bne.n	800ab92 <_dtoa_r+0xb1a>
 800ab54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	ddf1      	ble.n	800ab3e <_dtoa_r+0xac6>
 800ab5a:	9905      	ldr	r1, [sp, #20]
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	9804      	ldr	r0, [sp, #16]
 800ab60:	f000 fbb8 	bl	800b2d4 <__lshift>
 800ab64:	0031      	movs	r1, r6
 800ab66:	9005      	str	r0, [sp, #20]
 800ab68:	f000 fc22 	bl	800b3b0 <__mcmp>
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	dc02      	bgt.n	800ab76 <_dtoa_r+0xafe>
 800ab70:	d1e5      	bne.n	800ab3e <_dtoa_r+0xac6>
 800ab72:	07e3      	lsls	r3, r4, #31
 800ab74:	d5e3      	bpl.n	800ab3e <_dtoa_r+0xac6>
 800ab76:	2c39      	cmp	r4, #57	; 0x39
 800ab78:	d1df      	bne.n	800ab3a <_dtoa_r+0xac2>
 800ab7a:	2339      	movs	r3, #57	; 0x39
 800ab7c:	9a07      	ldr	r2, [sp, #28]
 800ab7e:	7013      	strb	r3, [r2, #0]
 800ab80:	9b08      	ldr	r3, [sp, #32]
 800ab82:	9308      	str	r3, [sp, #32]
 800ab84:	3b01      	subs	r3, #1
 800ab86:	781a      	ldrb	r2, [r3, #0]
 800ab88:	2a39      	cmp	r2, #57	; 0x39
 800ab8a:	d063      	beq.n	800ac54 <_dtoa_r+0xbdc>
 800ab8c:	3201      	adds	r2, #1
 800ab8e:	701a      	strb	r2, [r3, #0]
 800ab90:	e747      	b.n	800aa22 <_dtoa_r+0x9aa>
 800ab92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	dd03      	ble.n	800aba0 <_dtoa_r+0xb28>
 800ab98:	2c39      	cmp	r4, #57	; 0x39
 800ab9a:	d0ee      	beq.n	800ab7a <_dtoa_r+0xb02>
 800ab9c:	3401      	adds	r4, #1
 800ab9e:	e7ce      	b.n	800ab3e <_dtoa_r+0xac6>
 800aba0:	9b07      	ldr	r3, [sp, #28]
 800aba2:	9a07      	ldr	r2, [sp, #28]
 800aba4:	701c      	strb	r4, [r3, #0]
 800aba6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d03e      	beq.n	800ac2a <_dtoa_r+0xbb2>
 800abac:	2300      	movs	r3, #0
 800abae:	220a      	movs	r2, #10
 800abb0:	9905      	ldr	r1, [sp, #20]
 800abb2:	9804      	ldr	r0, [sp, #16]
 800abb4:	f000 f9de 	bl	800af74 <__multadd>
 800abb8:	2300      	movs	r3, #0
 800abba:	9005      	str	r0, [sp, #20]
 800abbc:	220a      	movs	r2, #10
 800abbe:	0029      	movs	r1, r5
 800abc0:	9804      	ldr	r0, [sp, #16]
 800abc2:	42bd      	cmp	r5, r7
 800abc4:	d106      	bne.n	800abd4 <_dtoa_r+0xb5c>
 800abc6:	f000 f9d5 	bl	800af74 <__multadd>
 800abca:	0005      	movs	r5, r0
 800abcc:	0007      	movs	r7, r0
 800abce:	9b08      	ldr	r3, [sp, #32]
 800abd0:	9307      	str	r3, [sp, #28]
 800abd2:	e784      	b.n	800aade <_dtoa_r+0xa66>
 800abd4:	f000 f9ce 	bl	800af74 <__multadd>
 800abd8:	0039      	movs	r1, r7
 800abda:	0005      	movs	r5, r0
 800abdc:	2300      	movs	r3, #0
 800abde:	220a      	movs	r2, #10
 800abe0:	9804      	ldr	r0, [sp, #16]
 800abe2:	f000 f9c7 	bl	800af74 <__multadd>
 800abe6:	0007      	movs	r7, r0
 800abe8:	e7f1      	b.n	800abce <_dtoa_r+0xb56>
 800abea:	9b07      	ldr	r3, [sp, #28]
 800abec:	930b      	str	r3, [sp, #44]	; 0x2c
 800abee:	2500      	movs	r5, #0
 800abf0:	0031      	movs	r1, r6
 800abf2:	9805      	ldr	r0, [sp, #20]
 800abf4:	f7ff f9b0 	bl	8009f58 <quorem>
 800abf8:	9b06      	ldr	r3, [sp, #24]
 800abfa:	3030      	adds	r0, #48	; 0x30
 800abfc:	5558      	strb	r0, [r3, r5]
 800abfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac00:	3501      	adds	r5, #1
 800ac02:	0004      	movs	r4, r0
 800ac04:	42ab      	cmp	r3, r5
 800ac06:	dd07      	ble.n	800ac18 <_dtoa_r+0xba0>
 800ac08:	2300      	movs	r3, #0
 800ac0a:	220a      	movs	r2, #10
 800ac0c:	9905      	ldr	r1, [sp, #20]
 800ac0e:	9804      	ldr	r0, [sp, #16]
 800ac10:	f000 f9b0 	bl	800af74 <__multadd>
 800ac14:	9005      	str	r0, [sp, #20]
 800ac16:	e7eb      	b.n	800abf0 <_dtoa_r+0xb78>
 800ac18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	2a00      	cmp	r2, #0
 800ac1e:	dd00      	ble.n	800ac22 <_dtoa_r+0xbaa>
 800ac20:	0013      	movs	r3, r2
 800ac22:	2500      	movs	r5, #0
 800ac24:	9a06      	ldr	r2, [sp, #24]
 800ac26:	18d3      	adds	r3, r2, r3
 800ac28:	9308      	str	r3, [sp, #32]
 800ac2a:	9905      	ldr	r1, [sp, #20]
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	9804      	ldr	r0, [sp, #16]
 800ac30:	f000 fb50 	bl	800b2d4 <__lshift>
 800ac34:	0031      	movs	r1, r6
 800ac36:	9005      	str	r0, [sp, #20]
 800ac38:	f000 fbba 	bl	800b3b0 <__mcmp>
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	dc9f      	bgt.n	800ab80 <_dtoa_r+0xb08>
 800ac40:	d101      	bne.n	800ac46 <_dtoa_r+0xbce>
 800ac42:	07e4      	lsls	r4, r4, #31
 800ac44:	d49c      	bmi.n	800ab80 <_dtoa_r+0xb08>
 800ac46:	9b08      	ldr	r3, [sp, #32]
 800ac48:	9308      	str	r3, [sp, #32]
 800ac4a:	3b01      	subs	r3, #1
 800ac4c:	781a      	ldrb	r2, [r3, #0]
 800ac4e:	2a30      	cmp	r2, #48	; 0x30
 800ac50:	d0fa      	beq.n	800ac48 <_dtoa_r+0xbd0>
 800ac52:	e6e6      	b.n	800aa22 <_dtoa_r+0x9aa>
 800ac54:	9a06      	ldr	r2, [sp, #24]
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d193      	bne.n	800ab82 <_dtoa_r+0xb0a>
 800ac5a:	9b03      	ldr	r3, [sp, #12]
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	9303      	str	r3, [sp, #12]
 800ac60:	2331      	movs	r3, #49	; 0x31
 800ac62:	7013      	strb	r3, [r2, #0]
 800ac64:	e6dd      	b.n	800aa22 <_dtoa_r+0x9aa>
 800ac66:	4b09      	ldr	r3, [pc, #36]	; (800ac8c <_dtoa_r+0xc14>)
 800ac68:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ac6a:	9306      	str	r3, [sp, #24]
 800ac6c:	4b08      	ldr	r3, [pc, #32]	; (800ac90 <_dtoa_r+0xc18>)
 800ac6e:	2a00      	cmp	r2, #0
 800ac70:	d001      	beq.n	800ac76 <_dtoa_r+0xbfe>
 800ac72:	f7ff fa49 	bl	800a108 <_dtoa_r+0x90>
 800ac76:	f7ff fa49 	bl	800a10c <_dtoa_r+0x94>
 800ac7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	dcb6      	bgt.n	800abee <_dtoa_r+0xb76>
 800ac80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac82:	2b02      	cmp	r3, #2
 800ac84:	dd00      	ble.n	800ac88 <_dtoa_r+0xc10>
 800ac86:	e6b6      	b.n	800a9f6 <_dtoa_r+0x97e>
 800ac88:	e7b1      	b.n	800abee <_dtoa_r+0xb76>
 800ac8a:	46c0      	nop			; (mov r8, r8)
 800ac8c:	0800c18c 	.word	0x0800c18c
 800ac90:	0800c194 	.word	0x0800c194

0800ac94 <_free_r>:
 800ac94:	b570      	push	{r4, r5, r6, lr}
 800ac96:	0005      	movs	r5, r0
 800ac98:	2900      	cmp	r1, #0
 800ac9a:	d010      	beq.n	800acbe <_free_r+0x2a>
 800ac9c:	1f0c      	subs	r4, r1, #4
 800ac9e:	6823      	ldr	r3, [r4, #0]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	da00      	bge.n	800aca6 <_free_r+0x12>
 800aca4:	18e4      	adds	r4, r4, r3
 800aca6:	0028      	movs	r0, r5
 800aca8:	f000 f8ec 	bl	800ae84 <__malloc_lock>
 800acac:	4a1d      	ldr	r2, [pc, #116]	; (800ad24 <_free_r+0x90>)
 800acae:	6813      	ldr	r3, [r2, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d105      	bne.n	800acc0 <_free_r+0x2c>
 800acb4:	6063      	str	r3, [r4, #4]
 800acb6:	6014      	str	r4, [r2, #0]
 800acb8:	0028      	movs	r0, r5
 800acba:	f000 f8eb 	bl	800ae94 <__malloc_unlock>
 800acbe:	bd70      	pop	{r4, r5, r6, pc}
 800acc0:	42a3      	cmp	r3, r4
 800acc2:	d908      	bls.n	800acd6 <_free_r+0x42>
 800acc4:	6820      	ldr	r0, [r4, #0]
 800acc6:	1821      	adds	r1, r4, r0
 800acc8:	428b      	cmp	r3, r1
 800acca:	d1f3      	bne.n	800acb4 <_free_r+0x20>
 800accc:	6819      	ldr	r1, [r3, #0]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	1809      	adds	r1, r1, r0
 800acd2:	6021      	str	r1, [r4, #0]
 800acd4:	e7ee      	b.n	800acb4 <_free_r+0x20>
 800acd6:	001a      	movs	r2, r3
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d001      	beq.n	800ace2 <_free_r+0x4e>
 800acde:	42a3      	cmp	r3, r4
 800ace0:	d9f9      	bls.n	800acd6 <_free_r+0x42>
 800ace2:	6811      	ldr	r1, [r2, #0]
 800ace4:	1850      	adds	r0, r2, r1
 800ace6:	42a0      	cmp	r0, r4
 800ace8:	d10b      	bne.n	800ad02 <_free_r+0x6e>
 800acea:	6820      	ldr	r0, [r4, #0]
 800acec:	1809      	adds	r1, r1, r0
 800acee:	1850      	adds	r0, r2, r1
 800acf0:	6011      	str	r1, [r2, #0]
 800acf2:	4283      	cmp	r3, r0
 800acf4:	d1e0      	bne.n	800acb8 <_free_r+0x24>
 800acf6:	6818      	ldr	r0, [r3, #0]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	1841      	adds	r1, r0, r1
 800acfc:	6011      	str	r1, [r2, #0]
 800acfe:	6053      	str	r3, [r2, #4]
 800ad00:	e7da      	b.n	800acb8 <_free_r+0x24>
 800ad02:	42a0      	cmp	r0, r4
 800ad04:	d902      	bls.n	800ad0c <_free_r+0x78>
 800ad06:	230c      	movs	r3, #12
 800ad08:	602b      	str	r3, [r5, #0]
 800ad0a:	e7d5      	b.n	800acb8 <_free_r+0x24>
 800ad0c:	6820      	ldr	r0, [r4, #0]
 800ad0e:	1821      	adds	r1, r4, r0
 800ad10:	428b      	cmp	r3, r1
 800ad12:	d103      	bne.n	800ad1c <_free_r+0x88>
 800ad14:	6819      	ldr	r1, [r3, #0]
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	1809      	adds	r1, r1, r0
 800ad1a:	6021      	str	r1, [r4, #0]
 800ad1c:	6063      	str	r3, [r4, #4]
 800ad1e:	6054      	str	r4, [r2, #4]
 800ad20:	e7ca      	b.n	800acb8 <_free_r+0x24>
 800ad22:	46c0      	nop			; (mov r8, r8)
 800ad24:	2000069c 	.word	0x2000069c

0800ad28 <malloc>:
 800ad28:	b510      	push	{r4, lr}
 800ad2a:	4b03      	ldr	r3, [pc, #12]	; (800ad38 <malloc+0x10>)
 800ad2c:	0001      	movs	r1, r0
 800ad2e:	6818      	ldr	r0, [r3, #0]
 800ad30:	f000 f826 	bl	800ad80 <_malloc_r>
 800ad34:	bd10      	pop	{r4, pc}
 800ad36:	46c0      	nop			; (mov r8, r8)
 800ad38:	20000094 	.word	0x20000094

0800ad3c <sbrk_aligned>:
 800ad3c:	b570      	push	{r4, r5, r6, lr}
 800ad3e:	4e0f      	ldr	r6, [pc, #60]	; (800ad7c <sbrk_aligned+0x40>)
 800ad40:	000d      	movs	r5, r1
 800ad42:	6831      	ldr	r1, [r6, #0]
 800ad44:	0004      	movs	r4, r0
 800ad46:	2900      	cmp	r1, #0
 800ad48:	d102      	bne.n	800ad50 <sbrk_aligned+0x14>
 800ad4a:	f000 fee5 	bl	800bb18 <_sbrk_r>
 800ad4e:	6030      	str	r0, [r6, #0]
 800ad50:	0029      	movs	r1, r5
 800ad52:	0020      	movs	r0, r4
 800ad54:	f000 fee0 	bl	800bb18 <_sbrk_r>
 800ad58:	1c43      	adds	r3, r0, #1
 800ad5a:	d00a      	beq.n	800ad72 <sbrk_aligned+0x36>
 800ad5c:	2303      	movs	r3, #3
 800ad5e:	1cc5      	adds	r5, r0, #3
 800ad60:	439d      	bics	r5, r3
 800ad62:	42a8      	cmp	r0, r5
 800ad64:	d007      	beq.n	800ad76 <sbrk_aligned+0x3a>
 800ad66:	1a29      	subs	r1, r5, r0
 800ad68:	0020      	movs	r0, r4
 800ad6a:	f000 fed5 	bl	800bb18 <_sbrk_r>
 800ad6e:	3001      	adds	r0, #1
 800ad70:	d101      	bne.n	800ad76 <sbrk_aligned+0x3a>
 800ad72:	2501      	movs	r5, #1
 800ad74:	426d      	negs	r5, r5
 800ad76:	0028      	movs	r0, r5
 800ad78:	bd70      	pop	{r4, r5, r6, pc}
 800ad7a:	46c0      	nop			; (mov r8, r8)
 800ad7c:	200006a0 	.word	0x200006a0

0800ad80 <_malloc_r>:
 800ad80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad82:	2203      	movs	r2, #3
 800ad84:	1ccb      	adds	r3, r1, #3
 800ad86:	4393      	bics	r3, r2
 800ad88:	3308      	adds	r3, #8
 800ad8a:	0006      	movs	r6, r0
 800ad8c:	001f      	movs	r7, r3
 800ad8e:	2b0c      	cmp	r3, #12
 800ad90:	d238      	bcs.n	800ae04 <_malloc_r+0x84>
 800ad92:	270c      	movs	r7, #12
 800ad94:	42b9      	cmp	r1, r7
 800ad96:	d837      	bhi.n	800ae08 <_malloc_r+0x88>
 800ad98:	0030      	movs	r0, r6
 800ad9a:	f000 f873 	bl	800ae84 <__malloc_lock>
 800ad9e:	4b38      	ldr	r3, [pc, #224]	; (800ae80 <_malloc_r+0x100>)
 800ada0:	9300      	str	r3, [sp, #0]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	001c      	movs	r4, r3
 800ada6:	2c00      	cmp	r4, #0
 800ada8:	d133      	bne.n	800ae12 <_malloc_r+0x92>
 800adaa:	0039      	movs	r1, r7
 800adac:	0030      	movs	r0, r6
 800adae:	f7ff ffc5 	bl	800ad3c <sbrk_aligned>
 800adb2:	0004      	movs	r4, r0
 800adb4:	1c43      	adds	r3, r0, #1
 800adb6:	d15e      	bne.n	800ae76 <_malloc_r+0xf6>
 800adb8:	9b00      	ldr	r3, [sp, #0]
 800adba:	681c      	ldr	r4, [r3, #0]
 800adbc:	0025      	movs	r5, r4
 800adbe:	2d00      	cmp	r5, #0
 800adc0:	d14e      	bne.n	800ae60 <_malloc_r+0xe0>
 800adc2:	2c00      	cmp	r4, #0
 800adc4:	d051      	beq.n	800ae6a <_malloc_r+0xea>
 800adc6:	6823      	ldr	r3, [r4, #0]
 800adc8:	0029      	movs	r1, r5
 800adca:	18e3      	adds	r3, r4, r3
 800adcc:	0030      	movs	r0, r6
 800adce:	9301      	str	r3, [sp, #4]
 800add0:	f000 fea2 	bl	800bb18 <_sbrk_r>
 800add4:	9b01      	ldr	r3, [sp, #4]
 800add6:	4283      	cmp	r3, r0
 800add8:	d147      	bne.n	800ae6a <_malloc_r+0xea>
 800adda:	6823      	ldr	r3, [r4, #0]
 800addc:	0030      	movs	r0, r6
 800adde:	1aff      	subs	r7, r7, r3
 800ade0:	0039      	movs	r1, r7
 800ade2:	f7ff ffab 	bl	800ad3c <sbrk_aligned>
 800ade6:	3001      	adds	r0, #1
 800ade8:	d03f      	beq.n	800ae6a <_malloc_r+0xea>
 800adea:	6823      	ldr	r3, [r4, #0]
 800adec:	19db      	adds	r3, r3, r7
 800adee:	6023      	str	r3, [r4, #0]
 800adf0:	9b00      	ldr	r3, [sp, #0]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d040      	beq.n	800ae7a <_malloc_r+0xfa>
 800adf8:	685a      	ldr	r2, [r3, #4]
 800adfa:	42a2      	cmp	r2, r4
 800adfc:	d133      	bne.n	800ae66 <_malloc_r+0xe6>
 800adfe:	2200      	movs	r2, #0
 800ae00:	605a      	str	r2, [r3, #4]
 800ae02:	e014      	b.n	800ae2e <_malloc_r+0xae>
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	dac5      	bge.n	800ad94 <_malloc_r+0x14>
 800ae08:	230c      	movs	r3, #12
 800ae0a:	2500      	movs	r5, #0
 800ae0c:	6033      	str	r3, [r6, #0]
 800ae0e:	0028      	movs	r0, r5
 800ae10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ae12:	6821      	ldr	r1, [r4, #0]
 800ae14:	1bc9      	subs	r1, r1, r7
 800ae16:	d420      	bmi.n	800ae5a <_malloc_r+0xda>
 800ae18:	290b      	cmp	r1, #11
 800ae1a:	d918      	bls.n	800ae4e <_malloc_r+0xce>
 800ae1c:	19e2      	adds	r2, r4, r7
 800ae1e:	6027      	str	r7, [r4, #0]
 800ae20:	42a3      	cmp	r3, r4
 800ae22:	d112      	bne.n	800ae4a <_malloc_r+0xca>
 800ae24:	9b00      	ldr	r3, [sp, #0]
 800ae26:	601a      	str	r2, [r3, #0]
 800ae28:	6863      	ldr	r3, [r4, #4]
 800ae2a:	6011      	str	r1, [r2, #0]
 800ae2c:	6053      	str	r3, [r2, #4]
 800ae2e:	0030      	movs	r0, r6
 800ae30:	0025      	movs	r5, r4
 800ae32:	f000 f82f 	bl	800ae94 <__malloc_unlock>
 800ae36:	2207      	movs	r2, #7
 800ae38:	350b      	adds	r5, #11
 800ae3a:	1d23      	adds	r3, r4, #4
 800ae3c:	4395      	bics	r5, r2
 800ae3e:	1aea      	subs	r2, r5, r3
 800ae40:	429d      	cmp	r5, r3
 800ae42:	d0e4      	beq.n	800ae0e <_malloc_r+0x8e>
 800ae44:	1b5b      	subs	r3, r3, r5
 800ae46:	50a3      	str	r3, [r4, r2]
 800ae48:	e7e1      	b.n	800ae0e <_malloc_r+0x8e>
 800ae4a:	605a      	str	r2, [r3, #4]
 800ae4c:	e7ec      	b.n	800ae28 <_malloc_r+0xa8>
 800ae4e:	6862      	ldr	r2, [r4, #4]
 800ae50:	42a3      	cmp	r3, r4
 800ae52:	d1d5      	bne.n	800ae00 <_malloc_r+0x80>
 800ae54:	9b00      	ldr	r3, [sp, #0]
 800ae56:	601a      	str	r2, [r3, #0]
 800ae58:	e7e9      	b.n	800ae2e <_malloc_r+0xae>
 800ae5a:	0023      	movs	r3, r4
 800ae5c:	6864      	ldr	r4, [r4, #4]
 800ae5e:	e7a2      	b.n	800ada6 <_malloc_r+0x26>
 800ae60:	002c      	movs	r4, r5
 800ae62:	686d      	ldr	r5, [r5, #4]
 800ae64:	e7ab      	b.n	800adbe <_malloc_r+0x3e>
 800ae66:	0013      	movs	r3, r2
 800ae68:	e7c4      	b.n	800adf4 <_malloc_r+0x74>
 800ae6a:	230c      	movs	r3, #12
 800ae6c:	0030      	movs	r0, r6
 800ae6e:	6033      	str	r3, [r6, #0]
 800ae70:	f000 f810 	bl	800ae94 <__malloc_unlock>
 800ae74:	e7cb      	b.n	800ae0e <_malloc_r+0x8e>
 800ae76:	6027      	str	r7, [r4, #0]
 800ae78:	e7d9      	b.n	800ae2e <_malloc_r+0xae>
 800ae7a:	605b      	str	r3, [r3, #4]
 800ae7c:	deff      	udf	#255	; 0xff
 800ae7e:	46c0      	nop			; (mov r8, r8)
 800ae80:	2000069c 	.word	0x2000069c

0800ae84 <__malloc_lock>:
 800ae84:	b510      	push	{r4, lr}
 800ae86:	4802      	ldr	r0, [pc, #8]	; (800ae90 <__malloc_lock+0xc>)
 800ae88:	f7ff f859 	bl	8009f3e <__retarget_lock_acquire_recursive>
 800ae8c:	bd10      	pop	{r4, pc}
 800ae8e:	46c0      	nop			; (mov r8, r8)
 800ae90:	20000698 	.word	0x20000698

0800ae94 <__malloc_unlock>:
 800ae94:	b510      	push	{r4, lr}
 800ae96:	4802      	ldr	r0, [pc, #8]	; (800aea0 <__malloc_unlock+0xc>)
 800ae98:	f7ff f852 	bl	8009f40 <__retarget_lock_release_recursive>
 800ae9c:	bd10      	pop	{r4, pc}
 800ae9e:	46c0      	nop			; (mov r8, r8)
 800aea0:	20000698 	.word	0x20000698

0800aea4 <_Balloc>:
 800aea4:	b570      	push	{r4, r5, r6, lr}
 800aea6:	69c5      	ldr	r5, [r0, #28]
 800aea8:	0006      	movs	r6, r0
 800aeaa:	000c      	movs	r4, r1
 800aeac:	2d00      	cmp	r5, #0
 800aeae:	d10e      	bne.n	800aece <_Balloc+0x2a>
 800aeb0:	2010      	movs	r0, #16
 800aeb2:	f7ff ff39 	bl	800ad28 <malloc>
 800aeb6:	1e02      	subs	r2, r0, #0
 800aeb8:	61f0      	str	r0, [r6, #28]
 800aeba:	d104      	bne.n	800aec6 <_Balloc+0x22>
 800aebc:	216b      	movs	r1, #107	; 0x6b
 800aebe:	4b19      	ldr	r3, [pc, #100]	; (800af24 <_Balloc+0x80>)
 800aec0:	4819      	ldr	r0, [pc, #100]	; (800af28 <_Balloc+0x84>)
 800aec2:	f000 fe45 	bl	800bb50 <__assert_func>
 800aec6:	6045      	str	r5, [r0, #4]
 800aec8:	6085      	str	r5, [r0, #8]
 800aeca:	6005      	str	r5, [r0, #0]
 800aecc:	60c5      	str	r5, [r0, #12]
 800aece:	69f5      	ldr	r5, [r6, #28]
 800aed0:	68eb      	ldr	r3, [r5, #12]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d013      	beq.n	800aefe <_Balloc+0x5a>
 800aed6:	69f3      	ldr	r3, [r6, #28]
 800aed8:	00a2      	lsls	r2, r4, #2
 800aeda:	68db      	ldr	r3, [r3, #12]
 800aedc:	189b      	adds	r3, r3, r2
 800aede:	6818      	ldr	r0, [r3, #0]
 800aee0:	2800      	cmp	r0, #0
 800aee2:	d118      	bne.n	800af16 <_Balloc+0x72>
 800aee4:	2101      	movs	r1, #1
 800aee6:	000d      	movs	r5, r1
 800aee8:	40a5      	lsls	r5, r4
 800aeea:	1d6a      	adds	r2, r5, #5
 800aeec:	0030      	movs	r0, r6
 800aeee:	0092      	lsls	r2, r2, #2
 800aef0:	f000 fe4c 	bl	800bb8c <_calloc_r>
 800aef4:	2800      	cmp	r0, #0
 800aef6:	d00c      	beq.n	800af12 <_Balloc+0x6e>
 800aef8:	6044      	str	r4, [r0, #4]
 800aefa:	6085      	str	r5, [r0, #8]
 800aefc:	e00d      	b.n	800af1a <_Balloc+0x76>
 800aefe:	2221      	movs	r2, #33	; 0x21
 800af00:	2104      	movs	r1, #4
 800af02:	0030      	movs	r0, r6
 800af04:	f000 fe42 	bl	800bb8c <_calloc_r>
 800af08:	69f3      	ldr	r3, [r6, #28]
 800af0a:	60e8      	str	r0, [r5, #12]
 800af0c:	68db      	ldr	r3, [r3, #12]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d1e1      	bne.n	800aed6 <_Balloc+0x32>
 800af12:	2000      	movs	r0, #0
 800af14:	bd70      	pop	{r4, r5, r6, pc}
 800af16:	6802      	ldr	r2, [r0, #0]
 800af18:	601a      	str	r2, [r3, #0]
 800af1a:	2300      	movs	r3, #0
 800af1c:	6103      	str	r3, [r0, #16]
 800af1e:	60c3      	str	r3, [r0, #12]
 800af20:	e7f8      	b.n	800af14 <_Balloc+0x70>
 800af22:	46c0      	nop			; (mov r8, r8)
 800af24:	0800c199 	.word	0x0800c199
 800af28:	0800c219 	.word	0x0800c219

0800af2c <_Bfree>:
 800af2c:	b570      	push	{r4, r5, r6, lr}
 800af2e:	69c6      	ldr	r6, [r0, #28]
 800af30:	0005      	movs	r5, r0
 800af32:	000c      	movs	r4, r1
 800af34:	2e00      	cmp	r6, #0
 800af36:	d10e      	bne.n	800af56 <_Bfree+0x2a>
 800af38:	2010      	movs	r0, #16
 800af3a:	f7ff fef5 	bl	800ad28 <malloc>
 800af3e:	1e02      	subs	r2, r0, #0
 800af40:	61e8      	str	r0, [r5, #28]
 800af42:	d104      	bne.n	800af4e <_Bfree+0x22>
 800af44:	218f      	movs	r1, #143	; 0x8f
 800af46:	4b09      	ldr	r3, [pc, #36]	; (800af6c <_Bfree+0x40>)
 800af48:	4809      	ldr	r0, [pc, #36]	; (800af70 <_Bfree+0x44>)
 800af4a:	f000 fe01 	bl	800bb50 <__assert_func>
 800af4e:	6046      	str	r6, [r0, #4]
 800af50:	6086      	str	r6, [r0, #8]
 800af52:	6006      	str	r6, [r0, #0]
 800af54:	60c6      	str	r6, [r0, #12]
 800af56:	2c00      	cmp	r4, #0
 800af58:	d007      	beq.n	800af6a <_Bfree+0x3e>
 800af5a:	69eb      	ldr	r3, [r5, #28]
 800af5c:	6862      	ldr	r2, [r4, #4]
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	0092      	lsls	r2, r2, #2
 800af62:	189b      	adds	r3, r3, r2
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	6022      	str	r2, [r4, #0]
 800af68:	601c      	str	r4, [r3, #0]
 800af6a:	bd70      	pop	{r4, r5, r6, pc}
 800af6c:	0800c199 	.word	0x0800c199
 800af70:	0800c219 	.word	0x0800c219

0800af74 <__multadd>:
 800af74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af76:	000e      	movs	r6, r1
 800af78:	9001      	str	r0, [sp, #4]
 800af7a:	000c      	movs	r4, r1
 800af7c:	001d      	movs	r5, r3
 800af7e:	2000      	movs	r0, #0
 800af80:	690f      	ldr	r7, [r1, #16]
 800af82:	3614      	adds	r6, #20
 800af84:	6833      	ldr	r3, [r6, #0]
 800af86:	3001      	adds	r0, #1
 800af88:	b299      	uxth	r1, r3
 800af8a:	4351      	muls	r1, r2
 800af8c:	0c1b      	lsrs	r3, r3, #16
 800af8e:	4353      	muls	r3, r2
 800af90:	1949      	adds	r1, r1, r5
 800af92:	0c0d      	lsrs	r5, r1, #16
 800af94:	195b      	adds	r3, r3, r5
 800af96:	0c1d      	lsrs	r5, r3, #16
 800af98:	b289      	uxth	r1, r1
 800af9a:	041b      	lsls	r3, r3, #16
 800af9c:	185b      	adds	r3, r3, r1
 800af9e:	c608      	stmia	r6!, {r3}
 800afa0:	4287      	cmp	r7, r0
 800afa2:	dcef      	bgt.n	800af84 <__multadd+0x10>
 800afa4:	2d00      	cmp	r5, #0
 800afa6:	d022      	beq.n	800afee <__multadd+0x7a>
 800afa8:	68a3      	ldr	r3, [r4, #8]
 800afaa:	42bb      	cmp	r3, r7
 800afac:	dc19      	bgt.n	800afe2 <__multadd+0x6e>
 800afae:	6861      	ldr	r1, [r4, #4]
 800afb0:	9801      	ldr	r0, [sp, #4]
 800afb2:	3101      	adds	r1, #1
 800afb4:	f7ff ff76 	bl	800aea4 <_Balloc>
 800afb8:	1e06      	subs	r6, r0, #0
 800afba:	d105      	bne.n	800afc8 <__multadd+0x54>
 800afbc:	0032      	movs	r2, r6
 800afbe:	21ba      	movs	r1, #186	; 0xba
 800afc0:	4b0c      	ldr	r3, [pc, #48]	; (800aff4 <__multadd+0x80>)
 800afc2:	480d      	ldr	r0, [pc, #52]	; (800aff8 <__multadd+0x84>)
 800afc4:	f000 fdc4 	bl	800bb50 <__assert_func>
 800afc8:	0021      	movs	r1, r4
 800afca:	6922      	ldr	r2, [r4, #16]
 800afcc:	310c      	adds	r1, #12
 800afce:	3202      	adds	r2, #2
 800afd0:	0092      	lsls	r2, r2, #2
 800afd2:	300c      	adds	r0, #12
 800afd4:	f000 fdb2 	bl	800bb3c <memcpy>
 800afd8:	0021      	movs	r1, r4
 800afda:	9801      	ldr	r0, [sp, #4]
 800afdc:	f7ff ffa6 	bl	800af2c <_Bfree>
 800afe0:	0034      	movs	r4, r6
 800afe2:	1d3b      	adds	r3, r7, #4
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	18e3      	adds	r3, r4, r3
 800afe8:	605d      	str	r5, [r3, #4]
 800afea:	1c7b      	adds	r3, r7, #1
 800afec:	6123      	str	r3, [r4, #16]
 800afee:	0020      	movs	r0, r4
 800aff0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aff2:	46c0      	nop			; (mov r8, r8)
 800aff4:	0800c208 	.word	0x0800c208
 800aff8:	0800c219 	.word	0x0800c219

0800affc <__hi0bits>:
 800affc:	0003      	movs	r3, r0
 800affe:	0c02      	lsrs	r2, r0, #16
 800b000:	2000      	movs	r0, #0
 800b002:	4282      	cmp	r2, r0
 800b004:	d101      	bne.n	800b00a <__hi0bits+0xe>
 800b006:	041b      	lsls	r3, r3, #16
 800b008:	3010      	adds	r0, #16
 800b00a:	0e1a      	lsrs	r2, r3, #24
 800b00c:	d101      	bne.n	800b012 <__hi0bits+0x16>
 800b00e:	3008      	adds	r0, #8
 800b010:	021b      	lsls	r3, r3, #8
 800b012:	0f1a      	lsrs	r2, r3, #28
 800b014:	d101      	bne.n	800b01a <__hi0bits+0x1e>
 800b016:	3004      	adds	r0, #4
 800b018:	011b      	lsls	r3, r3, #4
 800b01a:	0f9a      	lsrs	r2, r3, #30
 800b01c:	d101      	bne.n	800b022 <__hi0bits+0x26>
 800b01e:	3002      	adds	r0, #2
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	2b00      	cmp	r3, #0
 800b024:	db03      	blt.n	800b02e <__hi0bits+0x32>
 800b026:	3001      	adds	r0, #1
 800b028:	005b      	lsls	r3, r3, #1
 800b02a:	d400      	bmi.n	800b02e <__hi0bits+0x32>
 800b02c:	2020      	movs	r0, #32
 800b02e:	4770      	bx	lr

0800b030 <__lo0bits>:
 800b030:	6803      	ldr	r3, [r0, #0]
 800b032:	0001      	movs	r1, r0
 800b034:	2207      	movs	r2, #7
 800b036:	0018      	movs	r0, r3
 800b038:	4010      	ands	r0, r2
 800b03a:	4213      	tst	r3, r2
 800b03c:	d00d      	beq.n	800b05a <__lo0bits+0x2a>
 800b03e:	3a06      	subs	r2, #6
 800b040:	2000      	movs	r0, #0
 800b042:	4213      	tst	r3, r2
 800b044:	d105      	bne.n	800b052 <__lo0bits+0x22>
 800b046:	3002      	adds	r0, #2
 800b048:	4203      	tst	r3, r0
 800b04a:	d003      	beq.n	800b054 <__lo0bits+0x24>
 800b04c:	40d3      	lsrs	r3, r2
 800b04e:	0010      	movs	r0, r2
 800b050:	600b      	str	r3, [r1, #0]
 800b052:	4770      	bx	lr
 800b054:	089b      	lsrs	r3, r3, #2
 800b056:	600b      	str	r3, [r1, #0]
 800b058:	e7fb      	b.n	800b052 <__lo0bits+0x22>
 800b05a:	b29a      	uxth	r2, r3
 800b05c:	2a00      	cmp	r2, #0
 800b05e:	d101      	bne.n	800b064 <__lo0bits+0x34>
 800b060:	2010      	movs	r0, #16
 800b062:	0c1b      	lsrs	r3, r3, #16
 800b064:	b2da      	uxtb	r2, r3
 800b066:	2a00      	cmp	r2, #0
 800b068:	d101      	bne.n	800b06e <__lo0bits+0x3e>
 800b06a:	3008      	adds	r0, #8
 800b06c:	0a1b      	lsrs	r3, r3, #8
 800b06e:	071a      	lsls	r2, r3, #28
 800b070:	d101      	bne.n	800b076 <__lo0bits+0x46>
 800b072:	3004      	adds	r0, #4
 800b074:	091b      	lsrs	r3, r3, #4
 800b076:	079a      	lsls	r2, r3, #30
 800b078:	d101      	bne.n	800b07e <__lo0bits+0x4e>
 800b07a:	3002      	adds	r0, #2
 800b07c:	089b      	lsrs	r3, r3, #2
 800b07e:	07da      	lsls	r2, r3, #31
 800b080:	d4e9      	bmi.n	800b056 <__lo0bits+0x26>
 800b082:	3001      	adds	r0, #1
 800b084:	085b      	lsrs	r3, r3, #1
 800b086:	d1e6      	bne.n	800b056 <__lo0bits+0x26>
 800b088:	2020      	movs	r0, #32
 800b08a:	e7e2      	b.n	800b052 <__lo0bits+0x22>

0800b08c <__i2b>:
 800b08c:	b510      	push	{r4, lr}
 800b08e:	000c      	movs	r4, r1
 800b090:	2101      	movs	r1, #1
 800b092:	f7ff ff07 	bl	800aea4 <_Balloc>
 800b096:	2800      	cmp	r0, #0
 800b098:	d107      	bne.n	800b0aa <__i2b+0x1e>
 800b09a:	2146      	movs	r1, #70	; 0x46
 800b09c:	4c05      	ldr	r4, [pc, #20]	; (800b0b4 <__i2b+0x28>)
 800b09e:	0002      	movs	r2, r0
 800b0a0:	4b05      	ldr	r3, [pc, #20]	; (800b0b8 <__i2b+0x2c>)
 800b0a2:	0020      	movs	r0, r4
 800b0a4:	31ff      	adds	r1, #255	; 0xff
 800b0a6:	f000 fd53 	bl	800bb50 <__assert_func>
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	6144      	str	r4, [r0, #20]
 800b0ae:	6103      	str	r3, [r0, #16]
 800b0b0:	bd10      	pop	{r4, pc}
 800b0b2:	46c0      	nop			; (mov r8, r8)
 800b0b4:	0800c219 	.word	0x0800c219
 800b0b8:	0800c208 	.word	0x0800c208

0800b0bc <__multiply>:
 800b0bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0be:	0015      	movs	r5, r2
 800b0c0:	690a      	ldr	r2, [r1, #16]
 800b0c2:	692b      	ldr	r3, [r5, #16]
 800b0c4:	000c      	movs	r4, r1
 800b0c6:	b08b      	sub	sp, #44	; 0x2c
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	da01      	bge.n	800b0d0 <__multiply+0x14>
 800b0cc:	002c      	movs	r4, r5
 800b0ce:	000d      	movs	r5, r1
 800b0d0:	6927      	ldr	r7, [r4, #16]
 800b0d2:	692e      	ldr	r6, [r5, #16]
 800b0d4:	6861      	ldr	r1, [r4, #4]
 800b0d6:	19bb      	adds	r3, r7, r6
 800b0d8:	9303      	str	r3, [sp, #12]
 800b0da:	68a3      	ldr	r3, [r4, #8]
 800b0dc:	19ba      	adds	r2, r7, r6
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	da00      	bge.n	800b0e4 <__multiply+0x28>
 800b0e2:	3101      	adds	r1, #1
 800b0e4:	f7ff fede 	bl	800aea4 <_Balloc>
 800b0e8:	9002      	str	r0, [sp, #8]
 800b0ea:	2800      	cmp	r0, #0
 800b0ec:	d106      	bne.n	800b0fc <__multiply+0x40>
 800b0ee:	21b1      	movs	r1, #177	; 0xb1
 800b0f0:	4b48      	ldr	r3, [pc, #288]	; (800b214 <__multiply+0x158>)
 800b0f2:	4849      	ldr	r0, [pc, #292]	; (800b218 <__multiply+0x15c>)
 800b0f4:	9a02      	ldr	r2, [sp, #8]
 800b0f6:	0049      	lsls	r1, r1, #1
 800b0f8:	f000 fd2a 	bl	800bb50 <__assert_func>
 800b0fc:	9b02      	ldr	r3, [sp, #8]
 800b0fe:	2200      	movs	r2, #0
 800b100:	3314      	adds	r3, #20
 800b102:	469c      	mov	ip, r3
 800b104:	19bb      	adds	r3, r7, r6
 800b106:	009b      	lsls	r3, r3, #2
 800b108:	4463      	add	r3, ip
 800b10a:	9304      	str	r3, [sp, #16]
 800b10c:	4663      	mov	r3, ip
 800b10e:	9904      	ldr	r1, [sp, #16]
 800b110:	428b      	cmp	r3, r1
 800b112:	d32a      	bcc.n	800b16a <__multiply+0xae>
 800b114:	0023      	movs	r3, r4
 800b116:	00bf      	lsls	r7, r7, #2
 800b118:	3314      	adds	r3, #20
 800b11a:	3514      	adds	r5, #20
 800b11c:	9308      	str	r3, [sp, #32]
 800b11e:	00b6      	lsls	r6, r6, #2
 800b120:	19db      	adds	r3, r3, r7
 800b122:	9305      	str	r3, [sp, #20]
 800b124:	19ab      	adds	r3, r5, r6
 800b126:	9309      	str	r3, [sp, #36]	; 0x24
 800b128:	2304      	movs	r3, #4
 800b12a:	9306      	str	r3, [sp, #24]
 800b12c:	0023      	movs	r3, r4
 800b12e:	9a05      	ldr	r2, [sp, #20]
 800b130:	3315      	adds	r3, #21
 800b132:	9501      	str	r5, [sp, #4]
 800b134:	429a      	cmp	r2, r3
 800b136:	d305      	bcc.n	800b144 <__multiply+0x88>
 800b138:	1b13      	subs	r3, r2, r4
 800b13a:	3b15      	subs	r3, #21
 800b13c:	089b      	lsrs	r3, r3, #2
 800b13e:	3301      	adds	r3, #1
 800b140:	009b      	lsls	r3, r3, #2
 800b142:	9306      	str	r3, [sp, #24]
 800b144:	9b01      	ldr	r3, [sp, #4]
 800b146:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b148:	4293      	cmp	r3, r2
 800b14a:	d310      	bcc.n	800b16e <__multiply+0xb2>
 800b14c:	9b03      	ldr	r3, [sp, #12]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	dd05      	ble.n	800b15e <__multiply+0xa2>
 800b152:	9b04      	ldr	r3, [sp, #16]
 800b154:	3b04      	subs	r3, #4
 800b156:	9304      	str	r3, [sp, #16]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d056      	beq.n	800b20c <__multiply+0x150>
 800b15e:	9b02      	ldr	r3, [sp, #8]
 800b160:	9a03      	ldr	r2, [sp, #12]
 800b162:	0018      	movs	r0, r3
 800b164:	611a      	str	r2, [r3, #16]
 800b166:	b00b      	add	sp, #44	; 0x2c
 800b168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b16a:	c304      	stmia	r3!, {r2}
 800b16c:	e7cf      	b.n	800b10e <__multiply+0x52>
 800b16e:	9b01      	ldr	r3, [sp, #4]
 800b170:	6818      	ldr	r0, [r3, #0]
 800b172:	b280      	uxth	r0, r0
 800b174:	2800      	cmp	r0, #0
 800b176:	d01e      	beq.n	800b1b6 <__multiply+0xfa>
 800b178:	4667      	mov	r7, ip
 800b17a:	2500      	movs	r5, #0
 800b17c:	9e08      	ldr	r6, [sp, #32]
 800b17e:	ce02      	ldmia	r6!, {r1}
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	9307      	str	r3, [sp, #28]
 800b184:	b28b      	uxth	r3, r1
 800b186:	4343      	muls	r3, r0
 800b188:	001a      	movs	r2, r3
 800b18a:	466b      	mov	r3, sp
 800b18c:	8b9b      	ldrh	r3, [r3, #28]
 800b18e:	18d3      	adds	r3, r2, r3
 800b190:	195b      	adds	r3, r3, r5
 800b192:	0c0d      	lsrs	r5, r1, #16
 800b194:	4345      	muls	r5, r0
 800b196:	9a07      	ldr	r2, [sp, #28]
 800b198:	0c11      	lsrs	r1, r2, #16
 800b19a:	1869      	adds	r1, r5, r1
 800b19c:	0c1a      	lsrs	r2, r3, #16
 800b19e:	188a      	adds	r2, r1, r2
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	0c15      	lsrs	r5, r2, #16
 800b1a4:	0412      	lsls	r2, r2, #16
 800b1a6:	431a      	orrs	r2, r3
 800b1a8:	9b05      	ldr	r3, [sp, #20]
 800b1aa:	c704      	stmia	r7!, {r2}
 800b1ac:	42b3      	cmp	r3, r6
 800b1ae:	d8e6      	bhi.n	800b17e <__multiply+0xc2>
 800b1b0:	4663      	mov	r3, ip
 800b1b2:	9a06      	ldr	r2, [sp, #24]
 800b1b4:	509d      	str	r5, [r3, r2]
 800b1b6:	9b01      	ldr	r3, [sp, #4]
 800b1b8:	6818      	ldr	r0, [r3, #0]
 800b1ba:	0c00      	lsrs	r0, r0, #16
 800b1bc:	d020      	beq.n	800b200 <__multiply+0x144>
 800b1be:	4663      	mov	r3, ip
 800b1c0:	0025      	movs	r5, r4
 800b1c2:	4661      	mov	r1, ip
 800b1c4:	2700      	movs	r7, #0
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	3514      	adds	r5, #20
 800b1ca:	682a      	ldr	r2, [r5, #0]
 800b1cc:	680e      	ldr	r6, [r1, #0]
 800b1ce:	b292      	uxth	r2, r2
 800b1d0:	4342      	muls	r2, r0
 800b1d2:	0c36      	lsrs	r6, r6, #16
 800b1d4:	1992      	adds	r2, r2, r6
 800b1d6:	19d2      	adds	r2, r2, r7
 800b1d8:	0416      	lsls	r6, r2, #16
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	431e      	orrs	r6, r3
 800b1de:	600e      	str	r6, [r1, #0]
 800b1e0:	cd40      	ldmia	r5!, {r6}
 800b1e2:	684b      	ldr	r3, [r1, #4]
 800b1e4:	0c36      	lsrs	r6, r6, #16
 800b1e6:	4346      	muls	r6, r0
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	0c12      	lsrs	r2, r2, #16
 800b1ec:	18f3      	adds	r3, r6, r3
 800b1ee:	189b      	adds	r3, r3, r2
 800b1f0:	9a05      	ldr	r2, [sp, #20]
 800b1f2:	0c1f      	lsrs	r7, r3, #16
 800b1f4:	3104      	adds	r1, #4
 800b1f6:	42aa      	cmp	r2, r5
 800b1f8:	d8e7      	bhi.n	800b1ca <__multiply+0x10e>
 800b1fa:	4662      	mov	r2, ip
 800b1fc:	9906      	ldr	r1, [sp, #24]
 800b1fe:	5053      	str	r3, [r2, r1]
 800b200:	9b01      	ldr	r3, [sp, #4]
 800b202:	3304      	adds	r3, #4
 800b204:	9301      	str	r3, [sp, #4]
 800b206:	2304      	movs	r3, #4
 800b208:	449c      	add	ip, r3
 800b20a:	e79b      	b.n	800b144 <__multiply+0x88>
 800b20c:	9b03      	ldr	r3, [sp, #12]
 800b20e:	3b01      	subs	r3, #1
 800b210:	9303      	str	r3, [sp, #12]
 800b212:	e79b      	b.n	800b14c <__multiply+0x90>
 800b214:	0800c208 	.word	0x0800c208
 800b218:	0800c219 	.word	0x0800c219

0800b21c <__pow5mult>:
 800b21c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b21e:	2303      	movs	r3, #3
 800b220:	0015      	movs	r5, r2
 800b222:	0007      	movs	r7, r0
 800b224:	000e      	movs	r6, r1
 800b226:	401a      	ands	r2, r3
 800b228:	421d      	tst	r5, r3
 800b22a:	d008      	beq.n	800b23e <__pow5mult+0x22>
 800b22c:	4925      	ldr	r1, [pc, #148]	; (800b2c4 <__pow5mult+0xa8>)
 800b22e:	3a01      	subs	r2, #1
 800b230:	0092      	lsls	r2, r2, #2
 800b232:	5852      	ldr	r2, [r2, r1]
 800b234:	2300      	movs	r3, #0
 800b236:	0031      	movs	r1, r6
 800b238:	f7ff fe9c 	bl	800af74 <__multadd>
 800b23c:	0006      	movs	r6, r0
 800b23e:	10ad      	asrs	r5, r5, #2
 800b240:	d03d      	beq.n	800b2be <__pow5mult+0xa2>
 800b242:	69fc      	ldr	r4, [r7, #28]
 800b244:	2c00      	cmp	r4, #0
 800b246:	d10f      	bne.n	800b268 <__pow5mult+0x4c>
 800b248:	2010      	movs	r0, #16
 800b24a:	f7ff fd6d 	bl	800ad28 <malloc>
 800b24e:	1e02      	subs	r2, r0, #0
 800b250:	61f8      	str	r0, [r7, #28]
 800b252:	d105      	bne.n	800b260 <__pow5mult+0x44>
 800b254:	21b4      	movs	r1, #180	; 0xb4
 800b256:	4b1c      	ldr	r3, [pc, #112]	; (800b2c8 <__pow5mult+0xac>)
 800b258:	481c      	ldr	r0, [pc, #112]	; (800b2cc <__pow5mult+0xb0>)
 800b25a:	31ff      	adds	r1, #255	; 0xff
 800b25c:	f000 fc78 	bl	800bb50 <__assert_func>
 800b260:	6044      	str	r4, [r0, #4]
 800b262:	6084      	str	r4, [r0, #8]
 800b264:	6004      	str	r4, [r0, #0]
 800b266:	60c4      	str	r4, [r0, #12]
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	689c      	ldr	r4, [r3, #8]
 800b26c:	9301      	str	r3, [sp, #4]
 800b26e:	2c00      	cmp	r4, #0
 800b270:	d108      	bne.n	800b284 <__pow5mult+0x68>
 800b272:	0038      	movs	r0, r7
 800b274:	4916      	ldr	r1, [pc, #88]	; (800b2d0 <__pow5mult+0xb4>)
 800b276:	f7ff ff09 	bl	800b08c <__i2b>
 800b27a:	9b01      	ldr	r3, [sp, #4]
 800b27c:	0004      	movs	r4, r0
 800b27e:	6098      	str	r0, [r3, #8]
 800b280:	2300      	movs	r3, #0
 800b282:	6003      	str	r3, [r0, #0]
 800b284:	2301      	movs	r3, #1
 800b286:	421d      	tst	r5, r3
 800b288:	d00a      	beq.n	800b2a0 <__pow5mult+0x84>
 800b28a:	0031      	movs	r1, r6
 800b28c:	0022      	movs	r2, r4
 800b28e:	0038      	movs	r0, r7
 800b290:	f7ff ff14 	bl	800b0bc <__multiply>
 800b294:	0031      	movs	r1, r6
 800b296:	9001      	str	r0, [sp, #4]
 800b298:	0038      	movs	r0, r7
 800b29a:	f7ff fe47 	bl	800af2c <_Bfree>
 800b29e:	9e01      	ldr	r6, [sp, #4]
 800b2a0:	106d      	asrs	r5, r5, #1
 800b2a2:	d00c      	beq.n	800b2be <__pow5mult+0xa2>
 800b2a4:	6820      	ldr	r0, [r4, #0]
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	d107      	bne.n	800b2ba <__pow5mult+0x9e>
 800b2aa:	0022      	movs	r2, r4
 800b2ac:	0021      	movs	r1, r4
 800b2ae:	0038      	movs	r0, r7
 800b2b0:	f7ff ff04 	bl	800b0bc <__multiply>
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	6020      	str	r0, [r4, #0]
 800b2b8:	6003      	str	r3, [r0, #0]
 800b2ba:	0004      	movs	r4, r0
 800b2bc:	e7e2      	b.n	800b284 <__pow5mult+0x68>
 800b2be:	0030      	movs	r0, r6
 800b2c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b2c2:	46c0      	nop			; (mov r8, r8)
 800b2c4:	0800c368 	.word	0x0800c368
 800b2c8:	0800c199 	.word	0x0800c199
 800b2cc:	0800c219 	.word	0x0800c219
 800b2d0:	00000271 	.word	0x00000271

0800b2d4 <__lshift>:
 800b2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2d6:	000c      	movs	r4, r1
 800b2d8:	0017      	movs	r7, r2
 800b2da:	6923      	ldr	r3, [r4, #16]
 800b2dc:	1155      	asrs	r5, r2, #5
 800b2de:	b087      	sub	sp, #28
 800b2e0:	18eb      	adds	r3, r5, r3
 800b2e2:	9302      	str	r3, [sp, #8]
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	9301      	str	r3, [sp, #4]
 800b2e8:	6849      	ldr	r1, [r1, #4]
 800b2ea:	68a3      	ldr	r3, [r4, #8]
 800b2ec:	9004      	str	r0, [sp, #16]
 800b2ee:	9a01      	ldr	r2, [sp, #4]
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	db10      	blt.n	800b316 <__lshift+0x42>
 800b2f4:	9804      	ldr	r0, [sp, #16]
 800b2f6:	f7ff fdd5 	bl	800aea4 <_Balloc>
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	0002      	movs	r2, r0
 800b2fe:	0006      	movs	r6, r0
 800b300:	0019      	movs	r1, r3
 800b302:	3214      	adds	r2, #20
 800b304:	4298      	cmp	r0, r3
 800b306:	d10c      	bne.n	800b322 <__lshift+0x4e>
 800b308:	31df      	adds	r1, #223	; 0xdf
 800b30a:	0032      	movs	r2, r6
 800b30c:	4b26      	ldr	r3, [pc, #152]	; (800b3a8 <__lshift+0xd4>)
 800b30e:	4827      	ldr	r0, [pc, #156]	; (800b3ac <__lshift+0xd8>)
 800b310:	31ff      	adds	r1, #255	; 0xff
 800b312:	f000 fc1d 	bl	800bb50 <__assert_func>
 800b316:	3101      	adds	r1, #1
 800b318:	005b      	lsls	r3, r3, #1
 800b31a:	e7e8      	b.n	800b2ee <__lshift+0x1a>
 800b31c:	0098      	lsls	r0, r3, #2
 800b31e:	5011      	str	r1, [r2, r0]
 800b320:	3301      	adds	r3, #1
 800b322:	42ab      	cmp	r3, r5
 800b324:	dbfa      	blt.n	800b31c <__lshift+0x48>
 800b326:	43eb      	mvns	r3, r5
 800b328:	17db      	asrs	r3, r3, #31
 800b32a:	401d      	ands	r5, r3
 800b32c:	211f      	movs	r1, #31
 800b32e:	0023      	movs	r3, r4
 800b330:	0038      	movs	r0, r7
 800b332:	00ad      	lsls	r5, r5, #2
 800b334:	1955      	adds	r5, r2, r5
 800b336:	6922      	ldr	r2, [r4, #16]
 800b338:	3314      	adds	r3, #20
 800b33a:	0092      	lsls	r2, r2, #2
 800b33c:	4008      	ands	r0, r1
 800b33e:	4684      	mov	ip, r0
 800b340:	189a      	adds	r2, r3, r2
 800b342:	420f      	tst	r7, r1
 800b344:	d02a      	beq.n	800b39c <__lshift+0xc8>
 800b346:	3101      	adds	r1, #1
 800b348:	1a09      	subs	r1, r1, r0
 800b34a:	9105      	str	r1, [sp, #20]
 800b34c:	2100      	movs	r1, #0
 800b34e:	9503      	str	r5, [sp, #12]
 800b350:	4667      	mov	r7, ip
 800b352:	6818      	ldr	r0, [r3, #0]
 800b354:	40b8      	lsls	r0, r7
 800b356:	4308      	orrs	r0, r1
 800b358:	9903      	ldr	r1, [sp, #12]
 800b35a:	c101      	stmia	r1!, {r0}
 800b35c:	9103      	str	r1, [sp, #12]
 800b35e:	9805      	ldr	r0, [sp, #20]
 800b360:	cb02      	ldmia	r3!, {r1}
 800b362:	40c1      	lsrs	r1, r0
 800b364:	429a      	cmp	r2, r3
 800b366:	d8f3      	bhi.n	800b350 <__lshift+0x7c>
 800b368:	0020      	movs	r0, r4
 800b36a:	3015      	adds	r0, #21
 800b36c:	2304      	movs	r3, #4
 800b36e:	4282      	cmp	r2, r0
 800b370:	d304      	bcc.n	800b37c <__lshift+0xa8>
 800b372:	1b13      	subs	r3, r2, r4
 800b374:	3b15      	subs	r3, #21
 800b376:	089b      	lsrs	r3, r3, #2
 800b378:	3301      	adds	r3, #1
 800b37a:	009b      	lsls	r3, r3, #2
 800b37c:	50e9      	str	r1, [r5, r3]
 800b37e:	2900      	cmp	r1, #0
 800b380:	d002      	beq.n	800b388 <__lshift+0xb4>
 800b382:	9b02      	ldr	r3, [sp, #8]
 800b384:	3302      	adds	r3, #2
 800b386:	9301      	str	r3, [sp, #4]
 800b388:	9b01      	ldr	r3, [sp, #4]
 800b38a:	9804      	ldr	r0, [sp, #16]
 800b38c:	3b01      	subs	r3, #1
 800b38e:	0021      	movs	r1, r4
 800b390:	6133      	str	r3, [r6, #16]
 800b392:	f7ff fdcb 	bl	800af2c <_Bfree>
 800b396:	0030      	movs	r0, r6
 800b398:	b007      	add	sp, #28
 800b39a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b39c:	cb02      	ldmia	r3!, {r1}
 800b39e:	c502      	stmia	r5!, {r1}
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d8fb      	bhi.n	800b39c <__lshift+0xc8>
 800b3a4:	e7f0      	b.n	800b388 <__lshift+0xb4>
 800b3a6:	46c0      	nop			; (mov r8, r8)
 800b3a8:	0800c208 	.word	0x0800c208
 800b3ac:	0800c219 	.word	0x0800c219

0800b3b0 <__mcmp>:
 800b3b0:	b530      	push	{r4, r5, lr}
 800b3b2:	690b      	ldr	r3, [r1, #16]
 800b3b4:	6904      	ldr	r4, [r0, #16]
 800b3b6:	0002      	movs	r2, r0
 800b3b8:	1ae0      	subs	r0, r4, r3
 800b3ba:	429c      	cmp	r4, r3
 800b3bc:	d10e      	bne.n	800b3dc <__mcmp+0x2c>
 800b3be:	3214      	adds	r2, #20
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	3114      	adds	r1, #20
 800b3c4:	0014      	movs	r4, r2
 800b3c6:	18c9      	adds	r1, r1, r3
 800b3c8:	18d2      	adds	r2, r2, r3
 800b3ca:	3a04      	subs	r2, #4
 800b3cc:	3904      	subs	r1, #4
 800b3ce:	6815      	ldr	r5, [r2, #0]
 800b3d0:	680b      	ldr	r3, [r1, #0]
 800b3d2:	429d      	cmp	r5, r3
 800b3d4:	d003      	beq.n	800b3de <__mcmp+0x2e>
 800b3d6:	2001      	movs	r0, #1
 800b3d8:	429d      	cmp	r5, r3
 800b3da:	d303      	bcc.n	800b3e4 <__mcmp+0x34>
 800b3dc:	bd30      	pop	{r4, r5, pc}
 800b3de:	4294      	cmp	r4, r2
 800b3e0:	d3f3      	bcc.n	800b3ca <__mcmp+0x1a>
 800b3e2:	e7fb      	b.n	800b3dc <__mcmp+0x2c>
 800b3e4:	4240      	negs	r0, r0
 800b3e6:	e7f9      	b.n	800b3dc <__mcmp+0x2c>

0800b3e8 <__mdiff>:
 800b3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3ea:	000e      	movs	r6, r1
 800b3ec:	0007      	movs	r7, r0
 800b3ee:	0011      	movs	r1, r2
 800b3f0:	0030      	movs	r0, r6
 800b3f2:	b087      	sub	sp, #28
 800b3f4:	0014      	movs	r4, r2
 800b3f6:	f7ff ffdb 	bl	800b3b0 <__mcmp>
 800b3fa:	1e05      	subs	r5, r0, #0
 800b3fc:	d110      	bne.n	800b420 <__mdiff+0x38>
 800b3fe:	0001      	movs	r1, r0
 800b400:	0038      	movs	r0, r7
 800b402:	f7ff fd4f 	bl	800aea4 <_Balloc>
 800b406:	1e02      	subs	r2, r0, #0
 800b408:	d104      	bne.n	800b414 <__mdiff+0x2c>
 800b40a:	4b3f      	ldr	r3, [pc, #252]	; (800b508 <__mdiff+0x120>)
 800b40c:	483f      	ldr	r0, [pc, #252]	; (800b50c <__mdiff+0x124>)
 800b40e:	4940      	ldr	r1, [pc, #256]	; (800b510 <__mdiff+0x128>)
 800b410:	f000 fb9e 	bl	800bb50 <__assert_func>
 800b414:	2301      	movs	r3, #1
 800b416:	6145      	str	r5, [r0, #20]
 800b418:	6103      	str	r3, [r0, #16]
 800b41a:	0010      	movs	r0, r2
 800b41c:	b007      	add	sp, #28
 800b41e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b420:	2301      	movs	r3, #1
 800b422:	9301      	str	r3, [sp, #4]
 800b424:	2800      	cmp	r0, #0
 800b426:	db04      	blt.n	800b432 <__mdiff+0x4a>
 800b428:	0023      	movs	r3, r4
 800b42a:	0034      	movs	r4, r6
 800b42c:	001e      	movs	r6, r3
 800b42e:	2300      	movs	r3, #0
 800b430:	9301      	str	r3, [sp, #4]
 800b432:	0038      	movs	r0, r7
 800b434:	6861      	ldr	r1, [r4, #4]
 800b436:	f7ff fd35 	bl	800aea4 <_Balloc>
 800b43a:	1e02      	subs	r2, r0, #0
 800b43c:	d103      	bne.n	800b446 <__mdiff+0x5e>
 800b43e:	4b32      	ldr	r3, [pc, #200]	; (800b508 <__mdiff+0x120>)
 800b440:	4832      	ldr	r0, [pc, #200]	; (800b50c <__mdiff+0x124>)
 800b442:	4934      	ldr	r1, [pc, #208]	; (800b514 <__mdiff+0x12c>)
 800b444:	e7e4      	b.n	800b410 <__mdiff+0x28>
 800b446:	9b01      	ldr	r3, [sp, #4]
 800b448:	2700      	movs	r7, #0
 800b44a:	60c3      	str	r3, [r0, #12]
 800b44c:	6920      	ldr	r0, [r4, #16]
 800b44e:	3414      	adds	r4, #20
 800b450:	0083      	lsls	r3, r0, #2
 800b452:	18e3      	adds	r3, r4, r3
 800b454:	0021      	movs	r1, r4
 800b456:	9401      	str	r4, [sp, #4]
 800b458:	0034      	movs	r4, r6
 800b45a:	9302      	str	r3, [sp, #8]
 800b45c:	6933      	ldr	r3, [r6, #16]
 800b45e:	3414      	adds	r4, #20
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	18e3      	adds	r3, r4, r3
 800b464:	9303      	str	r3, [sp, #12]
 800b466:	0013      	movs	r3, r2
 800b468:	3314      	adds	r3, #20
 800b46a:	469c      	mov	ip, r3
 800b46c:	9305      	str	r3, [sp, #20]
 800b46e:	9104      	str	r1, [sp, #16]
 800b470:	9b04      	ldr	r3, [sp, #16]
 800b472:	cc02      	ldmia	r4!, {r1}
 800b474:	cb20      	ldmia	r3!, {r5}
 800b476:	9304      	str	r3, [sp, #16]
 800b478:	b2ab      	uxth	r3, r5
 800b47a:	19df      	adds	r7, r3, r7
 800b47c:	b28b      	uxth	r3, r1
 800b47e:	1afb      	subs	r3, r7, r3
 800b480:	0c09      	lsrs	r1, r1, #16
 800b482:	0c2d      	lsrs	r5, r5, #16
 800b484:	1a6d      	subs	r5, r5, r1
 800b486:	1419      	asrs	r1, r3, #16
 800b488:	1869      	adds	r1, r5, r1
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	140f      	asrs	r7, r1, #16
 800b48e:	0409      	lsls	r1, r1, #16
 800b490:	4319      	orrs	r1, r3
 800b492:	4663      	mov	r3, ip
 800b494:	c302      	stmia	r3!, {r1}
 800b496:	469c      	mov	ip, r3
 800b498:	9b03      	ldr	r3, [sp, #12]
 800b49a:	42a3      	cmp	r3, r4
 800b49c:	d8e8      	bhi.n	800b470 <__mdiff+0x88>
 800b49e:	0031      	movs	r1, r6
 800b4a0:	9c03      	ldr	r4, [sp, #12]
 800b4a2:	3115      	adds	r1, #21
 800b4a4:	2304      	movs	r3, #4
 800b4a6:	428c      	cmp	r4, r1
 800b4a8:	d304      	bcc.n	800b4b4 <__mdiff+0xcc>
 800b4aa:	1ba3      	subs	r3, r4, r6
 800b4ac:	3b15      	subs	r3, #21
 800b4ae:	089b      	lsrs	r3, r3, #2
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	9901      	ldr	r1, [sp, #4]
 800b4b6:	18cd      	adds	r5, r1, r3
 800b4b8:	9905      	ldr	r1, [sp, #20]
 800b4ba:	002e      	movs	r6, r5
 800b4bc:	18cb      	adds	r3, r1, r3
 800b4be:	469c      	mov	ip, r3
 800b4c0:	9902      	ldr	r1, [sp, #8]
 800b4c2:	428e      	cmp	r6, r1
 800b4c4:	d310      	bcc.n	800b4e8 <__mdiff+0x100>
 800b4c6:	9e02      	ldr	r6, [sp, #8]
 800b4c8:	1ee9      	subs	r1, r5, #3
 800b4ca:	2400      	movs	r4, #0
 800b4cc:	428e      	cmp	r6, r1
 800b4ce:	d304      	bcc.n	800b4da <__mdiff+0xf2>
 800b4d0:	0031      	movs	r1, r6
 800b4d2:	3103      	adds	r1, #3
 800b4d4:	1b49      	subs	r1, r1, r5
 800b4d6:	0889      	lsrs	r1, r1, #2
 800b4d8:	008c      	lsls	r4, r1, #2
 800b4da:	191b      	adds	r3, r3, r4
 800b4dc:	3b04      	subs	r3, #4
 800b4de:	6819      	ldr	r1, [r3, #0]
 800b4e0:	2900      	cmp	r1, #0
 800b4e2:	d00f      	beq.n	800b504 <__mdiff+0x11c>
 800b4e4:	6110      	str	r0, [r2, #16]
 800b4e6:	e798      	b.n	800b41a <__mdiff+0x32>
 800b4e8:	ce02      	ldmia	r6!, {r1}
 800b4ea:	b28c      	uxth	r4, r1
 800b4ec:	19e4      	adds	r4, r4, r7
 800b4ee:	0c0f      	lsrs	r7, r1, #16
 800b4f0:	1421      	asrs	r1, r4, #16
 800b4f2:	1879      	adds	r1, r7, r1
 800b4f4:	b2a4      	uxth	r4, r4
 800b4f6:	140f      	asrs	r7, r1, #16
 800b4f8:	0409      	lsls	r1, r1, #16
 800b4fa:	4321      	orrs	r1, r4
 800b4fc:	4664      	mov	r4, ip
 800b4fe:	c402      	stmia	r4!, {r1}
 800b500:	46a4      	mov	ip, r4
 800b502:	e7dd      	b.n	800b4c0 <__mdiff+0xd8>
 800b504:	3801      	subs	r0, #1
 800b506:	e7e9      	b.n	800b4dc <__mdiff+0xf4>
 800b508:	0800c208 	.word	0x0800c208
 800b50c:	0800c219 	.word	0x0800c219
 800b510:	00000237 	.word	0x00000237
 800b514:	00000245 	.word	0x00000245

0800b518 <__d2b>:
 800b518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b51a:	2101      	movs	r1, #1
 800b51c:	0014      	movs	r4, r2
 800b51e:	001d      	movs	r5, r3
 800b520:	9f08      	ldr	r7, [sp, #32]
 800b522:	f7ff fcbf 	bl	800aea4 <_Balloc>
 800b526:	1e06      	subs	r6, r0, #0
 800b528:	d105      	bne.n	800b536 <__d2b+0x1e>
 800b52a:	0032      	movs	r2, r6
 800b52c:	4b24      	ldr	r3, [pc, #144]	; (800b5c0 <__d2b+0xa8>)
 800b52e:	4825      	ldr	r0, [pc, #148]	; (800b5c4 <__d2b+0xac>)
 800b530:	4925      	ldr	r1, [pc, #148]	; (800b5c8 <__d2b+0xb0>)
 800b532:	f000 fb0d 	bl	800bb50 <__assert_func>
 800b536:	032b      	lsls	r3, r5, #12
 800b538:	006d      	lsls	r5, r5, #1
 800b53a:	0b1b      	lsrs	r3, r3, #12
 800b53c:	0d6d      	lsrs	r5, r5, #21
 800b53e:	d125      	bne.n	800b58c <__d2b+0x74>
 800b540:	9301      	str	r3, [sp, #4]
 800b542:	2c00      	cmp	r4, #0
 800b544:	d028      	beq.n	800b598 <__d2b+0x80>
 800b546:	4668      	mov	r0, sp
 800b548:	9400      	str	r4, [sp, #0]
 800b54a:	f7ff fd71 	bl	800b030 <__lo0bits>
 800b54e:	9b01      	ldr	r3, [sp, #4]
 800b550:	9900      	ldr	r1, [sp, #0]
 800b552:	2800      	cmp	r0, #0
 800b554:	d01e      	beq.n	800b594 <__d2b+0x7c>
 800b556:	2220      	movs	r2, #32
 800b558:	001c      	movs	r4, r3
 800b55a:	1a12      	subs	r2, r2, r0
 800b55c:	4094      	lsls	r4, r2
 800b55e:	0022      	movs	r2, r4
 800b560:	40c3      	lsrs	r3, r0
 800b562:	430a      	orrs	r2, r1
 800b564:	6172      	str	r2, [r6, #20]
 800b566:	9301      	str	r3, [sp, #4]
 800b568:	9c01      	ldr	r4, [sp, #4]
 800b56a:	61b4      	str	r4, [r6, #24]
 800b56c:	1e63      	subs	r3, r4, #1
 800b56e:	419c      	sbcs	r4, r3
 800b570:	3401      	adds	r4, #1
 800b572:	6134      	str	r4, [r6, #16]
 800b574:	2d00      	cmp	r5, #0
 800b576:	d017      	beq.n	800b5a8 <__d2b+0x90>
 800b578:	2435      	movs	r4, #53	; 0x35
 800b57a:	4b14      	ldr	r3, [pc, #80]	; (800b5cc <__d2b+0xb4>)
 800b57c:	18ed      	adds	r5, r5, r3
 800b57e:	182d      	adds	r5, r5, r0
 800b580:	603d      	str	r5, [r7, #0]
 800b582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b584:	1a24      	subs	r4, r4, r0
 800b586:	601c      	str	r4, [r3, #0]
 800b588:	0030      	movs	r0, r6
 800b58a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b58c:	2280      	movs	r2, #128	; 0x80
 800b58e:	0352      	lsls	r2, r2, #13
 800b590:	4313      	orrs	r3, r2
 800b592:	e7d5      	b.n	800b540 <__d2b+0x28>
 800b594:	6171      	str	r1, [r6, #20]
 800b596:	e7e7      	b.n	800b568 <__d2b+0x50>
 800b598:	a801      	add	r0, sp, #4
 800b59a:	f7ff fd49 	bl	800b030 <__lo0bits>
 800b59e:	9b01      	ldr	r3, [sp, #4]
 800b5a0:	2401      	movs	r4, #1
 800b5a2:	6173      	str	r3, [r6, #20]
 800b5a4:	3020      	adds	r0, #32
 800b5a6:	e7e4      	b.n	800b572 <__d2b+0x5a>
 800b5a8:	4b09      	ldr	r3, [pc, #36]	; (800b5d0 <__d2b+0xb8>)
 800b5aa:	18c0      	adds	r0, r0, r3
 800b5ac:	4b09      	ldr	r3, [pc, #36]	; (800b5d4 <__d2b+0xbc>)
 800b5ae:	6038      	str	r0, [r7, #0]
 800b5b0:	18e3      	adds	r3, r4, r3
 800b5b2:	009b      	lsls	r3, r3, #2
 800b5b4:	18f3      	adds	r3, r6, r3
 800b5b6:	6958      	ldr	r0, [r3, #20]
 800b5b8:	f7ff fd20 	bl	800affc <__hi0bits>
 800b5bc:	0164      	lsls	r4, r4, #5
 800b5be:	e7e0      	b.n	800b582 <__d2b+0x6a>
 800b5c0:	0800c208 	.word	0x0800c208
 800b5c4:	0800c219 	.word	0x0800c219
 800b5c8:	0000030f 	.word	0x0000030f
 800b5cc:	fffffbcd 	.word	0xfffffbcd
 800b5d0:	fffffbce 	.word	0xfffffbce
 800b5d4:	3fffffff 	.word	0x3fffffff

0800b5d8 <__sfputc_r>:
 800b5d8:	6893      	ldr	r3, [r2, #8]
 800b5da:	b510      	push	{r4, lr}
 800b5dc:	3b01      	subs	r3, #1
 800b5de:	6093      	str	r3, [r2, #8]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	da04      	bge.n	800b5ee <__sfputc_r+0x16>
 800b5e4:	6994      	ldr	r4, [r2, #24]
 800b5e6:	42a3      	cmp	r3, r4
 800b5e8:	db07      	blt.n	800b5fa <__sfputc_r+0x22>
 800b5ea:	290a      	cmp	r1, #10
 800b5ec:	d005      	beq.n	800b5fa <__sfputc_r+0x22>
 800b5ee:	6813      	ldr	r3, [r2, #0]
 800b5f0:	1c58      	adds	r0, r3, #1
 800b5f2:	6010      	str	r0, [r2, #0]
 800b5f4:	7019      	strb	r1, [r3, #0]
 800b5f6:	0008      	movs	r0, r1
 800b5f8:	bd10      	pop	{r4, pc}
 800b5fa:	f000 f9e6 	bl	800b9ca <__swbuf_r>
 800b5fe:	0001      	movs	r1, r0
 800b600:	e7f9      	b.n	800b5f6 <__sfputc_r+0x1e>

0800b602 <__sfputs_r>:
 800b602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b604:	0006      	movs	r6, r0
 800b606:	000f      	movs	r7, r1
 800b608:	0014      	movs	r4, r2
 800b60a:	18d5      	adds	r5, r2, r3
 800b60c:	42ac      	cmp	r4, r5
 800b60e:	d101      	bne.n	800b614 <__sfputs_r+0x12>
 800b610:	2000      	movs	r0, #0
 800b612:	e007      	b.n	800b624 <__sfputs_r+0x22>
 800b614:	7821      	ldrb	r1, [r4, #0]
 800b616:	003a      	movs	r2, r7
 800b618:	0030      	movs	r0, r6
 800b61a:	f7ff ffdd 	bl	800b5d8 <__sfputc_r>
 800b61e:	3401      	adds	r4, #1
 800b620:	1c43      	adds	r3, r0, #1
 800b622:	d1f3      	bne.n	800b60c <__sfputs_r+0xa>
 800b624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b628 <_vfiprintf_r>:
 800b628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b62a:	b0a1      	sub	sp, #132	; 0x84
 800b62c:	000f      	movs	r7, r1
 800b62e:	0015      	movs	r5, r2
 800b630:	001e      	movs	r6, r3
 800b632:	9003      	str	r0, [sp, #12]
 800b634:	2800      	cmp	r0, #0
 800b636:	d004      	beq.n	800b642 <_vfiprintf_r+0x1a>
 800b638:	6a03      	ldr	r3, [r0, #32]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d101      	bne.n	800b642 <_vfiprintf_r+0x1a>
 800b63e:	f7fe fb69 	bl	8009d14 <__sinit>
 800b642:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b644:	07db      	lsls	r3, r3, #31
 800b646:	d405      	bmi.n	800b654 <_vfiprintf_r+0x2c>
 800b648:	89bb      	ldrh	r3, [r7, #12]
 800b64a:	059b      	lsls	r3, r3, #22
 800b64c:	d402      	bmi.n	800b654 <_vfiprintf_r+0x2c>
 800b64e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b650:	f7fe fc75 	bl	8009f3e <__retarget_lock_acquire_recursive>
 800b654:	89bb      	ldrh	r3, [r7, #12]
 800b656:	071b      	lsls	r3, r3, #28
 800b658:	d502      	bpl.n	800b660 <_vfiprintf_r+0x38>
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d113      	bne.n	800b688 <_vfiprintf_r+0x60>
 800b660:	0039      	movs	r1, r7
 800b662:	9803      	ldr	r0, [sp, #12]
 800b664:	f000 f9f4 	bl	800ba50 <__swsetup_r>
 800b668:	2800      	cmp	r0, #0
 800b66a:	d00d      	beq.n	800b688 <_vfiprintf_r+0x60>
 800b66c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b66e:	07db      	lsls	r3, r3, #31
 800b670:	d503      	bpl.n	800b67a <_vfiprintf_r+0x52>
 800b672:	2001      	movs	r0, #1
 800b674:	4240      	negs	r0, r0
 800b676:	b021      	add	sp, #132	; 0x84
 800b678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b67a:	89bb      	ldrh	r3, [r7, #12]
 800b67c:	059b      	lsls	r3, r3, #22
 800b67e:	d4f8      	bmi.n	800b672 <_vfiprintf_r+0x4a>
 800b680:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b682:	f7fe fc5d 	bl	8009f40 <__retarget_lock_release_recursive>
 800b686:	e7f4      	b.n	800b672 <_vfiprintf_r+0x4a>
 800b688:	2300      	movs	r3, #0
 800b68a:	ac08      	add	r4, sp, #32
 800b68c:	6163      	str	r3, [r4, #20]
 800b68e:	3320      	adds	r3, #32
 800b690:	7663      	strb	r3, [r4, #25]
 800b692:	3310      	adds	r3, #16
 800b694:	76a3      	strb	r3, [r4, #26]
 800b696:	9607      	str	r6, [sp, #28]
 800b698:	002e      	movs	r6, r5
 800b69a:	7833      	ldrb	r3, [r6, #0]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d001      	beq.n	800b6a4 <_vfiprintf_r+0x7c>
 800b6a0:	2b25      	cmp	r3, #37	; 0x25
 800b6a2:	d148      	bne.n	800b736 <_vfiprintf_r+0x10e>
 800b6a4:	1b73      	subs	r3, r6, r5
 800b6a6:	9305      	str	r3, [sp, #20]
 800b6a8:	42ae      	cmp	r6, r5
 800b6aa:	d00b      	beq.n	800b6c4 <_vfiprintf_r+0x9c>
 800b6ac:	002a      	movs	r2, r5
 800b6ae:	0039      	movs	r1, r7
 800b6b0:	9803      	ldr	r0, [sp, #12]
 800b6b2:	f7ff ffa6 	bl	800b602 <__sfputs_r>
 800b6b6:	3001      	adds	r0, #1
 800b6b8:	d100      	bne.n	800b6bc <_vfiprintf_r+0x94>
 800b6ba:	e0af      	b.n	800b81c <_vfiprintf_r+0x1f4>
 800b6bc:	6963      	ldr	r3, [r4, #20]
 800b6be:	9a05      	ldr	r2, [sp, #20]
 800b6c0:	189b      	adds	r3, r3, r2
 800b6c2:	6163      	str	r3, [r4, #20]
 800b6c4:	7833      	ldrb	r3, [r6, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d100      	bne.n	800b6cc <_vfiprintf_r+0xa4>
 800b6ca:	e0a7      	b.n	800b81c <_vfiprintf_r+0x1f4>
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	4252      	negs	r2, r2
 800b6d2:	6062      	str	r2, [r4, #4]
 800b6d4:	a904      	add	r1, sp, #16
 800b6d6:	3254      	adds	r2, #84	; 0x54
 800b6d8:	1852      	adds	r2, r2, r1
 800b6da:	1c75      	adds	r5, r6, #1
 800b6dc:	6023      	str	r3, [r4, #0]
 800b6de:	60e3      	str	r3, [r4, #12]
 800b6e0:	60a3      	str	r3, [r4, #8]
 800b6e2:	7013      	strb	r3, [r2, #0]
 800b6e4:	65a3      	str	r3, [r4, #88]	; 0x58
 800b6e6:	4b59      	ldr	r3, [pc, #356]	; (800b84c <_vfiprintf_r+0x224>)
 800b6e8:	2205      	movs	r2, #5
 800b6ea:	0018      	movs	r0, r3
 800b6ec:	7829      	ldrb	r1, [r5, #0]
 800b6ee:	9305      	str	r3, [sp, #20]
 800b6f0:	f7fe fc27 	bl	8009f42 <memchr>
 800b6f4:	1c6e      	adds	r6, r5, #1
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	d11f      	bne.n	800b73a <_vfiprintf_r+0x112>
 800b6fa:	6822      	ldr	r2, [r4, #0]
 800b6fc:	06d3      	lsls	r3, r2, #27
 800b6fe:	d504      	bpl.n	800b70a <_vfiprintf_r+0xe2>
 800b700:	2353      	movs	r3, #83	; 0x53
 800b702:	a904      	add	r1, sp, #16
 800b704:	185b      	adds	r3, r3, r1
 800b706:	2120      	movs	r1, #32
 800b708:	7019      	strb	r1, [r3, #0]
 800b70a:	0713      	lsls	r3, r2, #28
 800b70c:	d504      	bpl.n	800b718 <_vfiprintf_r+0xf0>
 800b70e:	2353      	movs	r3, #83	; 0x53
 800b710:	a904      	add	r1, sp, #16
 800b712:	185b      	adds	r3, r3, r1
 800b714:	212b      	movs	r1, #43	; 0x2b
 800b716:	7019      	strb	r1, [r3, #0]
 800b718:	782b      	ldrb	r3, [r5, #0]
 800b71a:	2b2a      	cmp	r3, #42	; 0x2a
 800b71c:	d016      	beq.n	800b74c <_vfiprintf_r+0x124>
 800b71e:	002e      	movs	r6, r5
 800b720:	2100      	movs	r1, #0
 800b722:	200a      	movs	r0, #10
 800b724:	68e3      	ldr	r3, [r4, #12]
 800b726:	7832      	ldrb	r2, [r6, #0]
 800b728:	1c75      	adds	r5, r6, #1
 800b72a:	3a30      	subs	r2, #48	; 0x30
 800b72c:	2a09      	cmp	r2, #9
 800b72e:	d94e      	bls.n	800b7ce <_vfiprintf_r+0x1a6>
 800b730:	2900      	cmp	r1, #0
 800b732:	d111      	bne.n	800b758 <_vfiprintf_r+0x130>
 800b734:	e017      	b.n	800b766 <_vfiprintf_r+0x13e>
 800b736:	3601      	adds	r6, #1
 800b738:	e7af      	b.n	800b69a <_vfiprintf_r+0x72>
 800b73a:	9b05      	ldr	r3, [sp, #20]
 800b73c:	6822      	ldr	r2, [r4, #0]
 800b73e:	1ac0      	subs	r0, r0, r3
 800b740:	2301      	movs	r3, #1
 800b742:	4083      	lsls	r3, r0
 800b744:	4313      	orrs	r3, r2
 800b746:	0035      	movs	r5, r6
 800b748:	6023      	str	r3, [r4, #0]
 800b74a:	e7cc      	b.n	800b6e6 <_vfiprintf_r+0xbe>
 800b74c:	9b07      	ldr	r3, [sp, #28]
 800b74e:	1d19      	adds	r1, r3, #4
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	9107      	str	r1, [sp, #28]
 800b754:	2b00      	cmp	r3, #0
 800b756:	db01      	blt.n	800b75c <_vfiprintf_r+0x134>
 800b758:	930b      	str	r3, [sp, #44]	; 0x2c
 800b75a:	e004      	b.n	800b766 <_vfiprintf_r+0x13e>
 800b75c:	425b      	negs	r3, r3
 800b75e:	60e3      	str	r3, [r4, #12]
 800b760:	2302      	movs	r3, #2
 800b762:	4313      	orrs	r3, r2
 800b764:	6023      	str	r3, [r4, #0]
 800b766:	7833      	ldrb	r3, [r6, #0]
 800b768:	2b2e      	cmp	r3, #46	; 0x2e
 800b76a:	d10a      	bne.n	800b782 <_vfiprintf_r+0x15a>
 800b76c:	7873      	ldrb	r3, [r6, #1]
 800b76e:	2b2a      	cmp	r3, #42	; 0x2a
 800b770:	d135      	bne.n	800b7de <_vfiprintf_r+0x1b6>
 800b772:	9b07      	ldr	r3, [sp, #28]
 800b774:	3602      	adds	r6, #2
 800b776:	1d1a      	adds	r2, r3, #4
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	9207      	str	r2, [sp, #28]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	db2b      	blt.n	800b7d8 <_vfiprintf_r+0x1b0>
 800b780:	9309      	str	r3, [sp, #36]	; 0x24
 800b782:	4d33      	ldr	r5, [pc, #204]	; (800b850 <_vfiprintf_r+0x228>)
 800b784:	2203      	movs	r2, #3
 800b786:	0028      	movs	r0, r5
 800b788:	7831      	ldrb	r1, [r6, #0]
 800b78a:	f7fe fbda 	bl	8009f42 <memchr>
 800b78e:	2800      	cmp	r0, #0
 800b790:	d006      	beq.n	800b7a0 <_vfiprintf_r+0x178>
 800b792:	2340      	movs	r3, #64	; 0x40
 800b794:	1b40      	subs	r0, r0, r5
 800b796:	4083      	lsls	r3, r0
 800b798:	6822      	ldr	r2, [r4, #0]
 800b79a:	3601      	adds	r6, #1
 800b79c:	4313      	orrs	r3, r2
 800b79e:	6023      	str	r3, [r4, #0]
 800b7a0:	7831      	ldrb	r1, [r6, #0]
 800b7a2:	2206      	movs	r2, #6
 800b7a4:	482b      	ldr	r0, [pc, #172]	; (800b854 <_vfiprintf_r+0x22c>)
 800b7a6:	1c75      	adds	r5, r6, #1
 800b7a8:	7621      	strb	r1, [r4, #24]
 800b7aa:	f7fe fbca 	bl	8009f42 <memchr>
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	d043      	beq.n	800b83a <_vfiprintf_r+0x212>
 800b7b2:	4b29      	ldr	r3, [pc, #164]	; (800b858 <_vfiprintf_r+0x230>)
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d125      	bne.n	800b804 <_vfiprintf_r+0x1dc>
 800b7b8:	2207      	movs	r2, #7
 800b7ba:	9b07      	ldr	r3, [sp, #28]
 800b7bc:	3307      	adds	r3, #7
 800b7be:	4393      	bics	r3, r2
 800b7c0:	3308      	adds	r3, #8
 800b7c2:	9307      	str	r3, [sp, #28]
 800b7c4:	6963      	ldr	r3, [r4, #20]
 800b7c6:	9a04      	ldr	r2, [sp, #16]
 800b7c8:	189b      	adds	r3, r3, r2
 800b7ca:	6163      	str	r3, [r4, #20]
 800b7cc:	e764      	b.n	800b698 <_vfiprintf_r+0x70>
 800b7ce:	4343      	muls	r3, r0
 800b7d0:	002e      	movs	r6, r5
 800b7d2:	2101      	movs	r1, #1
 800b7d4:	189b      	adds	r3, r3, r2
 800b7d6:	e7a6      	b.n	800b726 <_vfiprintf_r+0xfe>
 800b7d8:	2301      	movs	r3, #1
 800b7da:	425b      	negs	r3, r3
 800b7dc:	e7d0      	b.n	800b780 <_vfiprintf_r+0x158>
 800b7de:	2300      	movs	r3, #0
 800b7e0:	200a      	movs	r0, #10
 800b7e2:	001a      	movs	r2, r3
 800b7e4:	3601      	adds	r6, #1
 800b7e6:	6063      	str	r3, [r4, #4]
 800b7e8:	7831      	ldrb	r1, [r6, #0]
 800b7ea:	1c75      	adds	r5, r6, #1
 800b7ec:	3930      	subs	r1, #48	; 0x30
 800b7ee:	2909      	cmp	r1, #9
 800b7f0:	d903      	bls.n	800b7fa <_vfiprintf_r+0x1d2>
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d0c5      	beq.n	800b782 <_vfiprintf_r+0x15a>
 800b7f6:	9209      	str	r2, [sp, #36]	; 0x24
 800b7f8:	e7c3      	b.n	800b782 <_vfiprintf_r+0x15a>
 800b7fa:	4342      	muls	r2, r0
 800b7fc:	002e      	movs	r6, r5
 800b7fe:	2301      	movs	r3, #1
 800b800:	1852      	adds	r2, r2, r1
 800b802:	e7f1      	b.n	800b7e8 <_vfiprintf_r+0x1c0>
 800b804:	aa07      	add	r2, sp, #28
 800b806:	9200      	str	r2, [sp, #0]
 800b808:	0021      	movs	r1, r4
 800b80a:	003a      	movs	r2, r7
 800b80c:	4b13      	ldr	r3, [pc, #76]	; (800b85c <_vfiprintf_r+0x234>)
 800b80e:	9803      	ldr	r0, [sp, #12]
 800b810:	f7fd fe1a 	bl	8009448 <_printf_float>
 800b814:	9004      	str	r0, [sp, #16]
 800b816:	9b04      	ldr	r3, [sp, #16]
 800b818:	3301      	adds	r3, #1
 800b81a:	d1d3      	bne.n	800b7c4 <_vfiprintf_r+0x19c>
 800b81c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b81e:	07db      	lsls	r3, r3, #31
 800b820:	d405      	bmi.n	800b82e <_vfiprintf_r+0x206>
 800b822:	89bb      	ldrh	r3, [r7, #12]
 800b824:	059b      	lsls	r3, r3, #22
 800b826:	d402      	bmi.n	800b82e <_vfiprintf_r+0x206>
 800b828:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b82a:	f7fe fb89 	bl	8009f40 <__retarget_lock_release_recursive>
 800b82e:	89bb      	ldrh	r3, [r7, #12]
 800b830:	065b      	lsls	r3, r3, #25
 800b832:	d500      	bpl.n	800b836 <_vfiprintf_r+0x20e>
 800b834:	e71d      	b.n	800b672 <_vfiprintf_r+0x4a>
 800b836:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b838:	e71d      	b.n	800b676 <_vfiprintf_r+0x4e>
 800b83a:	aa07      	add	r2, sp, #28
 800b83c:	9200      	str	r2, [sp, #0]
 800b83e:	0021      	movs	r1, r4
 800b840:	003a      	movs	r2, r7
 800b842:	4b06      	ldr	r3, [pc, #24]	; (800b85c <_vfiprintf_r+0x234>)
 800b844:	9803      	ldr	r0, [sp, #12]
 800b846:	f7fe f8c5 	bl	80099d4 <_printf_i>
 800b84a:	e7e3      	b.n	800b814 <_vfiprintf_r+0x1ec>
 800b84c:	0800c374 	.word	0x0800c374
 800b850:	0800c37a 	.word	0x0800c37a
 800b854:	0800c37e 	.word	0x0800c37e
 800b858:	08009449 	.word	0x08009449
 800b85c:	0800b603 	.word	0x0800b603

0800b860 <__sflush_r>:
 800b860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b862:	898b      	ldrh	r3, [r1, #12]
 800b864:	0005      	movs	r5, r0
 800b866:	000c      	movs	r4, r1
 800b868:	071a      	lsls	r2, r3, #28
 800b86a:	d45c      	bmi.n	800b926 <__sflush_r+0xc6>
 800b86c:	684a      	ldr	r2, [r1, #4]
 800b86e:	2a00      	cmp	r2, #0
 800b870:	dc04      	bgt.n	800b87c <__sflush_r+0x1c>
 800b872:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800b874:	2a00      	cmp	r2, #0
 800b876:	dc01      	bgt.n	800b87c <__sflush_r+0x1c>
 800b878:	2000      	movs	r0, #0
 800b87a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b87c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b87e:	2f00      	cmp	r7, #0
 800b880:	d0fa      	beq.n	800b878 <__sflush_r+0x18>
 800b882:	2200      	movs	r2, #0
 800b884:	2080      	movs	r0, #128	; 0x80
 800b886:	682e      	ldr	r6, [r5, #0]
 800b888:	602a      	str	r2, [r5, #0]
 800b88a:	001a      	movs	r2, r3
 800b88c:	0140      	lsls	r0, r0, #5
 800b88e:	6a21      	ldr	r1, [r4, #32]
 800b890:	4002      	ands	r2, r0
 800b892:	4203      	tst	r3, r0
 800b894:	d034      	beq.n	800b900 <__sflush_r+0xa0>
 800b896:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b898:	89a3      	ldrh	r3, [r4, #12]
 800b89a:	075b      	lsls	r3, r3, #29
 800b89c:	d506      	bpl.n	800b8ac <__sflush_r+0x4c>
 800b89e:	6863      	ldr	r3, [r4, #4]
 800b8a0:	1ac0      	subs	r0, r0, r3
 800b8a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d001      	beq.n	800b8ac <__sflush_r+0x4c>
 800b8a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b8aa:	1ac0      	subs	r0, r0, r3
 800b8ac:	0002      	movs	r2, r0
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	0028      	movs	r0, r5
 800b8b2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b8b4:	6a21      	ldr	r1, [r4, #32]
 800b8b6:	47b8      	blx	r7
 800b8b8:	89a2      	ldrh	r2, [r4, #12]
 800b8ba:	1c43      	adds	r3, r0, #1
 800b8bc:	d106      	bne.n	800b8cc <__sflush_r+0x6c>
 800b8be:	6829      	ldr	r1, [r5, #0]
 800b8c0:	291d      	cmp	r1, #29
 800b8c2:	d82c      	bhi.n	800b91e <__sflush_r+0xbe>
 800b8c4:	4b2a      	ldr	r3, [pc, #168]	; (800b970 <__sflush_r+0x110>)
 800b8c6:	410b      	asrs	r3, r1
 800b8c8:	07db      	lsls	r3, r3, #31
 800b8ca:	d428      	bmi.n	800b91e <__sflush_r+0xbe>
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	6063      	str	r3, [r4, #4]
 800b8d0:	6923      	ldr	r3, [r4, #16]
 800b8d2:	6023      	str	r3, [r4, #0]
 800b8d4:	04d2      	lsls	r2, r2, #19
 800b8d6:	d505      	bpl.n	800b8e4 <__sflush_r+0x84>
 800b8d8:	1c43      	adds	r3, r0, #1
 800b8da:	d102      	bne.n	800b8e2 <__sflush_r+0x82>
 800b8dc:	682b      	ldr	r3, [r5, #0]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d100      	bne.n	800b8e4 <__sflush_r+0x84>
 800b8e2:	6560      	str	r0, [r4, #84]	; 0x54
 800b8e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8e6:	602e      	str	r6, [r5, #0]
 800b8e8:	2900      	cmp	r1, #0
 800b8ea:	d0c5      	beq.n	800b878 <__sflush_r+0x18>
 800b8ec:	0023      	movs	r3, r4
 800b8ee:	3344      	adds	r3, #68	; 0x44
 800b8f0:	4299      	cmp	r1, r3
 800b8f2:	d002      	beq.n	800b8fa <__sflush_r+0x9a>
 800b8f4:	0028      	movs	r0, r5
 800b8f6:	f7ff f9cd 	bl	800ac94 <_free_r>
 800b8fa:	2000      	movs	r0, #0
 800b8fc:	6360      	str	r0, [r4, #52]	; 0x34
 800b8fe:	e7bc      	b.n	800b87a <__sflush_r+0x1a>
 800b900:	2301      	movs	r3, #1
 800b902:	0028      	movs	r0, r5
 800b904:	47b8      	blx	r7
 800b906:	1c43      	adds	r3, r0, #1
 800b908:	d1c6      	bne.n	800b898 <__sflush_r+0x38>
 800b90a:	682b      	ldr	r3, [r5, #0]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d0c3      	beq.n	800b898 <__sflush_r+0x38>
 800b910:	2b1d      	cmp	r3, #29
 800b912:	d001      	beq.n	800b918 <__sflush_r+0xb8>
 800b914:	2b16      	cmp	r3, #22
 800b916:	d101      	bne.n	800b91c <__sflush_r+0xbc>
 800b918:	602e      	str	r6, [r5, #0]
 800b91a:	e7ad      	b.n	800b878 <__sflush_r+0x18>
 800b91c:	89a2      	ldrh	r2, [r4, #12]
 800b91e:	2340      	movs	r3, #64	; 0x40
 800b920:	4313      	orrs	r3, r2
 800b922:	81a3      	strh	r3, [r4, #12]
 800b924:	e7a9      	b.n	800b87a <__sflush_r+0x1a>
 800b926:	690e      	ldr	r6, [r1, #16]
 800b928:	2e00      	cmp	r6, #0
 800b92a:	d0a5      	beq.n	800b878 <__sflush_r+0x18>
 800b92c:	680f      	ldr	r7, [r1, #0]
 800b92e:	600e      	str	r6, [r1, #0]
 800b930:	1bba      	subs	r2, r7, r6
 800b932:	9201      	str	r2, [sp, #4]
 800b934:	2200      	movs	r2, #0
 800b936:	079b      	lsls	r3, r3, #30
 800b938:	d100      	bne.n	800b93c <__sflush_r+0xdc>
 800b93a:	694a      	ldr	r2, [r1, #20]
 800b93c:	60a2      	str	r2, [r4, #8]
 800b93e:	9b01      	ldr	r3, [sp, #4]
 800b940:	2b00      	cmp	r3, #0
 800b942:	dd99      	ble.n	800b878 <__sflush_r+0x18>
 800b944:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b946:	0032      	movs	r2, r6
 800b948:	001f      	movs	r7, r3
 800b94a:	0028      	movs	r0, r5
 800b94c:	9b01      	ldr	r3, [sp, #4]
 800b94e:	6a21      	ldr	r1, [r4, #32]
 800b950:	47b8      	blx	r7
 800b952:	2800      	cmp	r0, #0
 800b954:	dc06      	bgt.n	800b964 <__sflush_r+0x104>
 800b956:	2340      	movs	r3, #64	; 0x40
 800b958:	2001      	movs	r0, #1
 800b95a:	89a2      	ldrh	r2, [r4, #12]
 800b95c:	4240      	negs	r0, r0
 800b95e:	4313      	orrs	r3, r2
 800b960:	81a3      	strh	r3, [r4, #12]
 800b962:	e78a      	b.n	800b87a <__sflush_r+0x1a>
 800b964:	9b01      	ldr	r3, [sp, #4]
 800b966:	1836      	adds	r6, r6, r0
 800b968:	1a1b      	subs	r3, r3, r0
 800b96a:	9301      	str	r3, [sp, #4]
 800b96c:	e7e7      	b.n	800b93e <__sflush_r+0xde>
 800b96e:	46c0      	nop			; (mov r8, r8)
 800b970:	dfbffffe 	.word	0xdfbffffe

0800b974 <_fflush_r>:
 800b974:	690b      	ldr	r3, [r1, #16]
 800b976:	b570      	push	{r4, r5, r6, lr}
 800b978:	0005      	movs	r5, r0
 800b97a:	000c      	movs	r4, r1
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d102      	bne.n	800b986 <_fflush_r+0x12>
 800b980:	2500      	movs	r5, #0
 800b982:	0028      	movs	r0, r5
 800b984:	bd70      	pop	{r4, r5, r6, pc}
 800b986:	2800      	cmp	r0, #0
 800b988:	d004      	beq.n	800b994 <_fflush_r+0x20>
 800b98a:	6a03      	ldr	r3, [r0, #32]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d101      	bne.n	800b994 <_fflush_r+0x20>
 800b990:	f7fe f9c0 	bl	8009d14 <__sinit>
 800b994:	220c      	movs	r2, #12
 800b996:	5ea3      	ldrsh	r3, [r4, r2]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d0f1      	beq.n	800b980 <_fflush_r+0xc>
 800b99c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b99e:	07d2      	lsls	r2, r2, #31
 800b9a0:	d404      	bmi.n	800b9ac <_fflush_r+0x38>
 800b9a2:	059b      	lsls	r3, r3, #22
 800b9a4:	d402      	bmi.n	800b9ac <_fflush_r+0x38>
 800b9a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9a8:	f7fe fac9 	bl	8009f3e <__retarget_lock_acquire_recursive>
 800b9ac:	0028      	movs	r0, r5
 800b9ae:	0021      	movs	r1, r4
 800b9b0:	f7ff ff56 	bl	800b860 <__sflush_r>
 800b9b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9b6:	0005      	movs	r5, r0
 800b9b8:	07db      	lsls	r3, r3, #31
 800b9ba:	d4e2      	bmi.n	800b982 <_fflush_r+0xe>
 800b9bc:	89a3      	ldrh	r3, [r4, #12]
 800b9be:	059b      	lsls	r3, r3, #22
 800b9c0:	d4df      	bmi.n	800b982 <_fflush_r+0xe>
 800b9c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9c4:	f7fe fabc 	bl	8009f40 <__retarget_lock_release_recursive>
 800b9c8:	e7db      	b.n	800b982 <_fflush_r+0xe>

0800b9ca <__swbuf_r>:
 800b9ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9cc:	0006      	movs	r6, r0
 800b9ce:	000d      	movs	r5, r1
 800b9d0:	0014      	movs	r4, r2
 800b9d2:	2800      	cmp	r0, #0
 800b9d4:	d004      	beq.n	800b9e0 <__swbuf_r+0x16>
 800b9d6:	6a03      	ldr	r3, [r0, #32]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d101      	bne.n	800b9e0 <__swbuf_r+0x16>
 800b9dc:	f7fe f99a 	bl	8009d14 <__sinit>
 800b9e0:	69a3      	ldr	r3, [r4, #24]
 800b9e2:	60a3      	str	r3, [r4, #8]
 800b9e4:	89a3      	ldrh	r3, [r4, #12]
 800b9e6:	071b      	lsls	r3, r3, #28
 800b9e8:	d528      	bpl.n	800ba3c <__swbuf_r+0x72>
 800b9ea:	6923      	ldr	r3, [r4, #16]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d025      	beq.n	800ba3c <__swbuf_r+0x72>
 800b9f0:	6923      	ldr	r3, [r4, #16]
 800b9f2:	6820      	ldr	r0, [r4, #0]
 800b9f4:	b2ef      	uxtb	r7, r5
 800b9f6:	1ac0      	subs	r0, r0, r3
 800b9f8:	6963      	ldr	r3, [r4, #20]
 800b9fa:	b2ed      	uxtb	r5, r5
 800b9fc:	4283      	cmp	r3, r0
 800b9fe:	dc05      	bgt.n	800ba0c <__swbuf_r+0x42>
 800ba00:	0021      	movs	r1, r4
 800ba02:	0030      	movs	r0, r6
 800ba04:	f7ff ffb6 	bl	800b974 <_fflush_r>
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	d11d      	bne.n	800ba48 <__swbuf_r+0x7e>
 800ba0c:	68a3      	ldr	r3, [r4, #8]
 800ba0e:	3001      	adds	r0, #1
 800ba10:	3b01      	subs	r3, #1
 800ba12:	60a3      	str	r3, [r4, #8]
 800ba14:	6823      	ldr	r3, [r4, #0]
 800ba16:	1c5a      	adds	r2, r3, #1
 800ba18:	6022      	str	r2, [r4, #0]
 800ba1a:	701f      	strb	r7, [r3, #0]
 800ba1c:	6963      	ldr	r3, [r4, #20]
 800ba1e:	4283      	cmp	r3, r0
 800ba20:	d004      	beq.n	800ba2c <__swbuf_r+0x62>
 800ba22:	89a3      	ldrh	r3, [r4, #12]
 800ba24:	07db      	lsls	r3, r3, #31
 800ba26:	d507      	bpl.n	800ba38 <__swbuf_r+0x6e>
 800ba28:	2d0a      	cmp	r5, #10
 800ba2a:	d105      	bne.n	800ba38 <__swbuf_r+0x6e>
 800ba2c:	0021      	movs	r1, r4
 800ba2e:	0030      	movs	r0, r6
 800ba30:	f7ff ffa0 	bl	800b974 <_fflush_r>
 800ba34:	2800      	cmp	r0, #0
 800ba36:	d107      	bne.n	800ba48 <__swbuf_r+0x7e>
 800ba38:	0028      	movs	r0, r5
 800ba3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba3c:	0021      	movs	r1, r4
 800ba3e:	0030      	movs	r0, r6
 800ba40:	f000 f806 	bl	800ba50 <__swsetup_r>
 800ba44:	2800      	cmp	r0, #0
 800ba46:	d0d3      	beq.n	800b9f0 <__swbuf_r+0x26>
 800ba48:	2501      	movs	r5, #1
 800ba4a:	426d      	negs	r5, r5
 800ba4c:	e7f4      	b.n	800ba38 <__swbuf_r+0x6e>
	...

0800ba50 <__swsetup_r>:
 800ba50:	4b30      	ldr	r3, [pc, #192]	; (800bb14 <__swsetup_r+0xc4>)
 800ba52:	b570      	push	{r4, r5, r6, lr}
 800ba54:	0005      	movs	r5, r0
 800ba56:	6818      	ldr	r0, [r3, #0]
 800ba58:	000c      	movs	r4, r1
 800ba5a:	2800      	cmp	r0, #0
 800ba5c:	d004      	beq.n	800ba68 <__swsetup_r+0x18>
 800ba5e:	6a03      	ldr	r3, [r0, #32]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d101      	bne.n	800ba68 <__swsetup_r+0x18>
 800ba64:	f7fe f956 	bl	8009d14 <__sinit>
 800ba68:	230c      	movs	r3, #12
 800ba6a:	5ee2      	ldrsh	r2, [r4, r3]
 800ba6c:	b293      	uxth	r3, r2
 800ba6e:	0711      	lsls	r1, r2, #28
 800ba70:	d423      	bmi.n	800baba <__swsetup_r+0x6a>
 800ba72:	06d9      	lsls	r1, r3, #27
 800ba74:	d407      	bmi.n	800ba86 <__swsetup_r+0x36>
 800ba76:	2309      	movs	r3, #9
 800ba78:	2001      	movs	r0, #1
 800ba7a:	602b      	str	r3, [r5, #0]
 800ba7c:	3337      	adds	r3, #55	; 0x37
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	81a3      	strh	r3, [r4, #12]
 800ba82:	4240      	negs	r0, r0
 800ba84:	bd70      	pop	{r4, r5, r6, pc}
 800ba86:	075b      	lsls	r3, r3, #29
 800ba88:	d513      	bpl.n	800bab2 <__swsetup_r+0x62>
 800ba8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba8c:	2900      	cmp	r1, #0
 800ba8e:	d008      	beq.n	800baa2 <__swsetup_r+0x52>
 800ba90:	0023      	movs	r3, r4
 800ba92:	3344      	adds	r3, #68	; 0x44
 800ba94:	4299      	cmp	r1, r3
 800ba96:	d002      	beq.n	800ba9e <__swsetup_r+0x4e>
 800ba98:	0028      	movs	r0, r5
 800ba9a:	f7ff f8fb 	bl	800ac94 <_free_r>
 800ba9e:	2300      	movs	r3, #0
 800baa0:	6363      	str	r3, [r4, #52]	; 0x34
 800baa2:	2224      	movs	r2, #36	; 0x24
 800baa4:	89a3      	ldrh	r3, [r4, #12]
 800baa6:	4393      	bics	r3, r2
 800baa8:	81a3      	strh	r3, [r4, #12]
 800baaa:	2300      	movs	r3, #0
 800baac:	6063      	str	r3, [r4, #4]
 800baae:	6923      	ldr	r3, [r4, #16]
 800bab0:	6023      	str	r3, [r4, #0]
 800bab2:	2308      	movs	r3, #8
 800bab4:	89a2      	ldrh	r2, [r4, #12]
 800bab6:	4313      	orrs	r3, r2
 800bab8:	81a3      	strh	r3, [r4, #12]
 800baba:	6923      	ldr	r3, [r4, #16]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d10b      	bne.n	800bad8 <__swsetup_r+0x88>
 800bac0:	21a0      	movs	r1, #160	; 0xa0
 800bac2:	2280      	movs	r2, #128	; 0x80
 800bac4:	89a3      	ldrh	r3, [r4, #12]
 800bac6:	0089      	lsls	r1, r1, #2
 800bac8:	0092      	lsls	r2, r2, #2
 800baca:	400b      	ands	r3, r1
 800bacc:	4293      	cmp	r3, r2
 800bace:	d003      	beq.n	800bad8 <__swsetup_r+0x88>
 800bad0:	0021      	movs	r1, r4
 800bad2:	0028      	movs	r0, r5
 800bad4:	f000 f8de 	bl	800bc94 <__smakebuf_r>
 800bad8:	220c      	movs	r2, #12
 800bada:	5ea3      	ldrsh	r3, [r4, r2]
 800badc:	2001      	movs	r0, #1
 800bade:	001a      	movs	r2, r3
 800bae0:	b299      	uxth	r1, r3
 800bae2:	4002      	ands	r2, r0
 800bae4:	4203      	tst	r3, r0
 800bae6:	d00f      	beq.n	800bb08 <__swsetup_r+0xb8>
 800bae8:	2200      	movs	r2, #0
 800baea:	60a2      	str	r2, [r4, #8]
 800baec:	6962      	ldr	r2, [r4, #20]
 800baee:	4252      	negs	r2, r2
 800baf0:	61a2      	str	r2, [r4, #24]
 800baf2:	2000      	movs	r0, #0
 800baf4:	6922      	ldr	r2, [r4, #16]
 800baf6:	4282      	cmp	r2, r0
 800baf8:	d1c4      	bne.n	800ba84 <__swsetup_r+0x34>
 800bafa:	0609      	lsls	r1, r1, #24
 800bafc:	d5c2      	bpl.n	800ba84 <__swsetup_r+0x34>
 800bafe:	2240      	movs	r2, #64	; 0x40
 800bb00:	4313      	orrs	r3, r2
 800bb02:	81a3      	strh	r3, [r4, #12]
 800bb04:	3801      	subs	r0, #1
 800bb06:	e7bd      	b.n	800ba84 <__swsetup_r+0x34>
 800bb08:	0788      	lsls	r0, r1, #30
 800bb0a:	d400      	bmi.n	800bb0e <__swsetup_r+0xbe>
 800bb0c:	6962      	ldr	r2, [r4, #20]
 800bb0e:	60a2      	str	r2, [r4, #8]
 800bb10:	e7ef      	b.n	800baf2 <__swsetup_r+0xa2>
 800bb12:	46c0      	nop			; (mov r8, r8)
 800bb14:	20000094 	.word	0x20000094

0800bb18 <_sbrk_r>:
 800bb18:	2300      	movs	r3, #0
 800bb1a:	b570      	push	{r4, r5, r6, lr}
 800bb1c:	4d06      	ldr	r5, [pc, #24]	; (800bb38 <_sbrk_r+0x20>)
 800bb1e:	0004      	movs	r4, r0
 800bb20:	0008      	movs	r0, r1
 800bb22:	602b      	str	r3, [r5, #0]
 800bb24:	f7f8 feaa 	bl	800487c <_sbrk>
 800bb28:	1c43      	adds	r3, r0, #1
 800bb2a:	d103      	bne.n	800bb34 <_sbrk_r+0x1c>
 800bb2c:	682b      	ldr	r3, [r5, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d000      	beq.n	800bb34 <_sbrk_r+0x1c>
 800bb32:	6023      	str	r3, [r4, #0]
 800bb34:	bd70      	pop	{r4, r5, r6, pc}
 800bb36:	46c0      	nop			; (mov r8, r8)
 800bb38:	20000694 	.word	0x20000694

0800bb3c <memcpy>:
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	b510      	push	{r4, lr}
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d100      	bne.n	800bb46 <memcpy+0xa>
 800bb44:	bd10      	pop	{r4, pc}
 800bb46:	5ccc      	ldrb	r4, [r1, r3]
 800bb48:	54c4      	strb	r4, [r0, r3]
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	e7f8      	b.n	800bb40 <memcpy+0x4>
	...

0800bb50 <__assert_func>:
 800bb50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800bb52:	0014      	movs	r4, r2
 800bb54:	001a      	movs	r2, r3
 800bb56:	4b09      	ldr	r3, [pc, #36]	; (800bb7c <__assert_func+0x2c>)
 800bb58:	0005      	movs	r5, r0
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	000e      	movs	r6, r1
 800bb5e:	68d8      	ldr	r0, [r3, #12]
 800bb60:	4b07      	ldr	r3, [pc, #28]	; (800bb80 <__assert_func+0x30>)
 800bb62:	2c00      	cmp	r4, #0
 800bb64:	d101      	bne.n	800bb6a <__assert_func+0x1a>
 800bb66:	4b07      	ldr	r3, [pc, #28]	; (800bb84 <__assert_func+0x34>)
 800bb68:	001c      	movs	r4, r3
 800bb6a:	4907      	ldr	r1, [pc, #28]	; (800bb88 <__assert_func+0x38>)
 800bb6c:	9301      	str	r3, [sp, #4]
 800bb6e:	9402      	str	r4, [sp, #8]
 800bb70:	002b      	movs	r3, r5
 800bb72:	9600      	str	r6, [sp, #0]
 800bb74:	f000 f856 	bl	800bc24 <fiprintf>
 800bb78:	f000 f8ee 	bl	800bd58 <abort>
 800bb7c:	20000094 	.word	0x20000094
 800bb80:	0800c38f 	.word	0x0800c38f
 800bb84:	0800c3ca 	.word	0x0800c3ca
 800bb88:	0800c39c 	.word	0x0800c39c

0800bb8c <_calloc_r>:
 800bb8c:	b570      	push	{r4, r5, r6, lr}
 800bb8e:	0c0b      	lsrs	r3, r1, #16
 800bb90:	0c15      	lsrs	r5, r2, #16
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d11e      	bne.n	800bbd4 <_calloc_r+0x48>
 800bb96:	2d00      	cmp	r5, #0
 800bb98:	d10c      	bne.n	800bbb4 <_calloc_r+0x28>
 800bb9a:	b289      	uxth	r1, r1
 800bb9c:	b294      	uxth	r4, r2
 800bb9e:	434c      	muls	r4, r1
 800bba0:	0021      	movs	r1, r4
 800bba2:	f7ff f8ed 	bl	800ad80 <_malloc_r>
 800bba6:	1e05      	subs	r5, r0, #0
 800bba8:	d01b      	beq.n	800bbe2 <_calloc_r+0x56>
 800bbaa:	0022      	movs	r2, r4
 800bbac:	2100      	movs	r1, #0
 800bbae:	f7fe f941 	bl	8009e34 <memset>
 800bbb2:	e016      	b.n	800bbe2 <_calloc_r+0x56>
 800bbb4:	1c2b      	adds	r3, r5, #0
 800bbb6:	1c0c      	adds	r4, r1, #0
 800bbb8:	b289      	uxth	r1, r1
 800bbba:	b292      	uxth	r2, r2
 800bbbc:	434a      	muls	r2, r1
 800bbbe:	b2a1      	uxth	r1, r4
 800bbc0:	b29c      	uxth	r4, r3
 800bbc2:	434c      	muls	r4, r1
 800bbc4:	0c13      	lsrs	r3, r2, #16
 800bbc6:	18e4      	adds	r4, r4, r3
 800bbc8:	0c23      	lsrs	r3, r4, #16
 800bbca:	d107      	bne.n	800bbdc <_calloc_r+0x50>
 800bbcc:	0424      	lsls	r4, r4, #16
 800bbce:	b292      	uxth	r2, r2
 800bbd0:	4314      	orrs	r4, r2
 800bbd2:	e7e5      	b.n	800bba0 <_calloc_r+0x14>
 800bbd4:	2d00      	cmp	r5, #0
 800bbd6:	d101      	bne.n	800bbdc <_calloc_r+0x50>
 800bbd8:	1c14      	adds	r4, r2, #0
 800bbda:	e7ed      	b.n	800bbb8 <_calloc_r+0x2c>
 800bbdc:	230c      	movs	r3, #12
 800bbde:	2500      	movs	r5, #0
 800bbe0:	6003      	str	r3, [r0, #0]
 800bbe2:	0028      	movs	r0, r5
 800bbe4:	bd70      	pop	{r4, r5, r6, pc}

0800bbe6 <__ascii_mbtowc>:
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	2900      	cmp	r1, #0
 800bbea:	d100      	bne.n	800bbee <__ascii_mbtowc+0x8>
 800bbec:	a901      	add	r1, sp, #4
 800bbee:	1e10      	subs	r0, r2, #0
 800bbf0:	d006      	beq.n	800bc00 <__ascii_mbtowc+0x1a>
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d006      	beq.n	800bc04 <__ascii_mbtowc+0x1e>
 800bbf6:	7813      	ldrb	r3, [r2, #0]
 800bbf8:	600b      	str	r3, [r1, #0]
 800bbfa:	7810      	ldrb	r0, [r2, #0]
 800bbfc:	1e43      	subs	r3, r0, #1
 800bbfe:	4198      	sbcs	r0, r3
 800bc00:	b002      	add	sp, #8
 800bc02:	4770      	bx	lr
 800bc04:	2002      	movs	r0, #2
 800bc06:	4240      	negs	r0, r0
 800bc08:	e7fa      	b.n	800bc00 <__ascii_mbtowc+0x1a>

0800bc0a <__ascii_wctomb>:
 800bc0a:	0003      	movs	r3, r0
 800bc0c:	1e08      	subs	r0, r1, #0
 800bc0e:	d005      	beq.n	800bc1c <__ascii_wctomb+0x12>
 800bc10:	2aff      	cmp	r2, #255	; 0xff
 800bc12:	d904      	bls.n	800bc1e <__ascii_wctomb+0x14>
 800bc14:	228a      	movs	r2, #138	; 0x8a
 800bc16:	2001      	movs	r0, #1
 800bc18:	601a      	str	r2, [r3, #0]
 800bc1a:	4240      	negs	r0, r0
 800bc1c:	4770      	bx	lr
 800bc1e:	2001      	movs	r0, #1
 800bc20:	700a      	strb	r2, [r1, #0]
 800bc22:	e7fb      	b.n	800bc1c <__ascii_wctomb+0x12>

0800bc24 <fiprintf>:
 800bc24:	b40e      	push	{r1, r2, r3}
 800bc26:	b517      	push	{r0, r1, r2, r4, lr}
 800bc28:	4c05      	ldr	r4, [pc, #20]	; (800bc40 <fiprintf+0x1c>)
 800bc2a:	ab05      	add	r3, sp, #20
 800bc2c:	cb04      	ldmia	r3!, {r2}
 800bc2e:	0001      	movs	r1, r0
 800bc30:	6820      	ldr	r0, [r4, #0]
 800bc32:	9301      	str	r3, [sp, #4]
 800bc34:	f7ff fcf8 	bl	800b628 <_vfiprintf_r>
 800bc38:	bc1e      	pop	{r1, r2, r3, r4}
 800bc3a:	bc08      	pop	{r3}
 800bc3c:	b003      	add	sp, #12
 800bc3e:	4718      	bx	r3
 800bc40:	20000094 	.word	0x20000094

0800bc44 <__swhatbuf_r>:
 800bc44:	b570      	push	{r4, r5, r6, lr}
 800bc46:	000e      	movs	r6, r1
 800bc48:	001d      	movs	r5, r3
 800bc4a:	230e      	movs	r3, #14
 800bc4c:	5ec9      	ldrsh	r1, [r1, r3]
 800bc4e:	0014      	movs	r4, r2
 800bc50:	b096      	sub	sp, #88	; 0x58
 800bc52:	2900      	cmp	r1, #0
 800bc54:	da0c      	bge.n	800bc70 <__swhatbuf_r+0x2c>
 800bc56:	89b2      	ldrh	r2, [r6, #12]
 800bc58:	2380      	movs	r3, #128	; 0x80
 800bc5a:	0011      	movs	r1, r2
 800bc5c:	4019      	ands	r1, r3
 800bc5e:	421a      	tst	r2, r3
 800bc60:	d013      	beq.n	800bc8a <__swhatbuf_r+0x46>
 800bc62:	2100      	movs	r1, #0
 800bc64:	3b40      	subs	r3, #64	; 0x40
 800bc66:	2000      	movs	r0, #0
 800bc68:	6029      	str	r1, [r5, #0]
 800bc6a:	6023      	str	r3, [r4, #0]
 800bc6c:	b016      	add	sp, #88	; 0x58
 800bc6e:	bd70      	pop	{r4, r5, r6, pc}
 800bc70:	466a      	mov	r2, sp
 800bc72:	f000 f84d 	bl	800bd10 <_fstat_r>
 800bc76:	2800      	cmp	r0, #0
 800bc78:	dbed      	blt.n	800bc56 <__swhatbuf_r+0x12>
 800bc7a:	23f0      	movs	r3, #240	; 0xf0
 800bc7c:	9901      	ldr	r1, [sp, #4]
 800bc7e:	021b      	lsls	r3, r3, #8
 800bc80:	4019      	ands	r1, r3
 800bc82:	4b03      	ldr	r3, [pc, #12]	; (800bc90 <__swhatbuf_r+0x4c>)
 800bc84:	18c9      	adds	r1, r1, r3
 800bc86:	424b      	negs	r3, r1
 800bc88:	4159      	adcs	r1, r3
 800bc8a:	2380      	movs	r3, #128	; 0x80
 800bc8c:	00db      	lsls	r3, r3, #3
 800bc8e:	e7ea      	b.n	800bc66 <__swhatbuf_r+0x22>
 800bc90:	ffffe000 	.word	0xffffe000

0800bc94 <__smakebuf_r>:
 800bc94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc96:	2602      	movs	r6, #2
 800bc98:	898b      	ldrh	r3, [r1, #12]
 800bc9a:	0005      	movs	r5, r0
 800bc9c:	000c      	movs	r4, r1
 800bc9e:	4233      	tst	r3, r6
 800bca0:	d006      	beq.n	800bcb0 <__smakebuf_r+0x1c>
 800bca2:	0023      	movs	r3, r4
 800bca4:	3347      	adds	r3, #71	; 0x47
 800bca6:	6023      	str	r3, [r4, #0]
 800bca8:	6123      	str	r3, [r4, #16]
 800bcaa:	2301      	movs	r3, #1
 800bcac:	6163      	str	r3, [r4, #20]
 800bcae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800bcb0:	466a      	mov	r2, sp
 800bcb2:	ab01      	add	r3, sp, #4
 800bcb4:	f7ff ffc6 	bl	800bc44 <__swhatbuf_r>
 800bcb8:	9900      	ldr	r1, [sp, #0]
 800bcba:	0007      	movs	r7, r0
 800bcbc:	0028      	movs	r0, r5
 800bcbe:	f7ff f85f 	bl	800ad80 <_malloc_r>
 800bcc2:	2800      	cmp	r0, #0
 800bcc4:	d108      	bne.n	800bcd8 <__smakebuf_r+0x44>
 800bcc6:	220c      	movs	r2, #12
 800bcc8:	5ea3      	ldrsh	r3, [r4, r2]
 800bcca:	059a      	lsls	r2, r3, #22
 800bccc:	d4ef      	bmi.n	800bcae <__smakebuf_r+0x1a>
 800bcce:	2203      	movs	r2, #3
 800bcd0:	4393      	bics	r3, r2
 800bcd2:	431e      	orrs	r6, r3
 800bcd4:	81a6      	strh	r6, [r4, #12]
 800bcd6:	e7e4      	b.n	800bca2 <__smakebuf_r+0xe>
 800bcd8:	2380      	movs	r3, #128	; 0x80
 800bcda:	89a2      	ldrh	r2, [r4, #12]
 800bcdc:	6020      	str	r0, [r4, #0]
 800bcde:	4313      	orrs	r3, r2
 800bce0:	81a3      	strh	r3, [r4, #12]
 800bce2:	9b00      	ldr	r3, [sp, #0]
 800bce4:	6120      	str	r0, [r4, #16]
 800bce6:	6163      	str	r3, [r4, #20]
 800bce8:	9b01      	ldr	r3, [sp, #4]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d00c      	beq.n	800bd08 <__smakebuf_r+0x74>
 800bcee:	0028      	movs	r0, r5
 800bcf0:	230e      	movs	r3, #14
 800bcf2:	5ee1      	ldrsh	r1, [r4, r3]
 800bcf4:	f000 f81e 	bl	800bd34 <_isatty_r>
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	d005      	beq.n	800bd08 <__smakebuf_r+0x74>
 800bcfc:	2303      	movs	r3, #3
 800bcfe:	89a2      	ldrh	r2, [r4, #12]
 800bd00:	439a      	bics	r2, r3
 800bd02:	3b02      	subs	r3, #2
 800bd04:	4313      	orrs	r3, r2
 800bd06:	81a3      	strh	r3, [r4, #12]
 800bd08:	89a3      	ldrh	r3, [r4, #12]
 800bd0a:	433b      	orrs	r3, r7
 800bd0c:	81a3      	strh	r3, [r4, #12]
 800bd0e:	e7ce      	b.n	800bcae <__smakebuf_r+0x1a>

0800bd10 <_fstat_r>:
 800bd10:	2300      	movs	r3, #0
 800bd12:	b570      	push	{r4, r5, r6, lr}
 800bd14:	4d06      	ldr	r5, [pc, #24]	; (800bd30 <_fstat_r+0x20>)
 800bd16:	0004      	movs	r4, r0
 800bd18:	0008      	movs	r0, r1
 800bd1a:	0011      	movs	r1, r2
 800bd1c:	602b      	str	r3, [r5, #0]
 800bd1e:	f7f8 fd8a 	bl	8004836 <_fstat>
 800bd22:	1c43      	adds	r3, r0, #1
 800bd24:	d103      	bne.n	800bd2e <_fstat_r+0x1e>
 800bd26:	682b      	ldr	r3, [r5, #0]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d000      	beq.n	800bd2e <_fstat_r+0x1e>
 800bd2c:	6023      	str	r3, [r4, #0]
 800bd2e:	bd70      	pop	{r4, r5, r6, pc}
 800bd30:	20000694 	.word	0x20000694

0800bd34 <_isatty_r>:
 800bd34:	2300      	movs	r3, #0
 800bd36:	b570      	push	{r4, r5, r6, lr}
 800bd38:	4d06      	ldr	r5, [pc, #24]	; (800bd54 <_isatty_r+0x20>)
 800bd3a:	0004      	movs	r4, r0
 800bd3c:	0008      	movs	r0, r1
 800bd3e:	602b      	str	r3, [r5, #0]
 800bd40:	f7f8 fd87 	bl	8004852 <_isatty>
 800bd44:	1c43      	adds	r3, r0, #1
 800bd46:	d103      	bne.n	800bd50 <_isatty_r+0x1c>
 800bd48:	682b      	ldr	r3, [r5, #0]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d000      	beq.n	800bd50 <_isatty_r+0x1c>
 800bd4e:	6023      	str	r3, [r4, #0]
 800bd50:	bd70      	pop	{r4, r5, r6, pc}
 800bd52:	46c0      	nop			; (mov r8, r8)
 800bd54:	20000694 	.word	0x20000694

0800bd58 <abort>:
 800bd58:	2006      	movs	r0, #6
 800bd5a:	b510      	push	{r4, lr}
 800bd5c:	f000 f82e 	bl	800bdbc <raise>
 800bd60:	2001      	movs	r0, #1
 800bd62:	f7f8 fd19 	bl	8004798 <_exit>

0800bd66 <_raise_r>:
 800bd66:	b570      	push	{r4, r5, r6, lr}
 800bd68:	0004      	movs	r4, r0
 800bd6a:	000d      	movs	r5, r1
 800bd6c:	291f      	cmp	r1, #31
 800bd6e:	d904      	bls.n	800bd7a <_raise_r+0x14>
 800bd70:	2316      	movs	r3, #22
 800bd72:	6003      	str	r3, [r0, #0]
 800bd74:	2001      	movs	r0, #1
 800bd76:	4240      	negs	r0, r0
 800bd78:	bd70      	pop	{r4, r5, r6, pc}
 800bd7a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d004      	beq.n	800bd8a <_raise_r+0x24>
 800bd80:	008a      	lsls	r2, r1, #2
 800bd82:	189b      	adds	r3, r3, r2
 800bd84:	681a      	ldr	r2, [r3, #0]
 800bd86:	2a00      	cmp	r2, #0
 800bd88:	d108      	bne.n	800bd9c <_raise_r+0x36>
 800bd8a:	0020      	movs	r0, r4
 800bd8c:	f000 f832 	bl	800bdf4 <_getpid_r>
 800bd90:	002a      	movs	r2, r5
 800bd92:	0001      	movs	r1, r0
 800bd94:	0020      	movs	r0, r4
 800bd96:	f000 f81b 	bl	800bdd0 <_kill_r>
 800bd9a:	e7ed      	b.n	800bd78 <_raise_r+0x12>
 800bd9c:	2000      	movs	r0, #0
 800bd9e:	2a01      	cmp	r2, #1
 800bda0:	d0ea      	beq.n	800bd78 <_raise_r+0x12>
 800bda2:	1c51      	adds	r1, r2, #1
 800bda4:	d103      	bne.n	800bdae <_raise_r+0x48>
 800bda6:	2316      	movs	r3, #22
 800bda8:	3001      	adds	r0, #1
 800bdaa:	6023      	str	r3, [r4, #0]
 800bdac:	e7e4      	b.n	800bd78 <_raise_r+0x12>
 800bdae:	2400      	movs	r4, #0
 800bdb0:	0028      	movs	r0, r5
 800bdb2:	601c      	str	r4, [r3, #0]
 800bdb4:	4790      	blx	r2
 800bdb6:	0020      	movs	r0, r4
 800bdb8:	e7de      	b.n	800bd78 <_raise_r+0x12>
	...

0800bdbc <raise>:
 800bdbc:	b510      	push	{r4, lr}
 800bdbe:	4b03      	ldr	r3, [pc, #12]	; (800bdcc <raise+0x10>)
 800bdc0:	0001      	movs	r1, r0
 800bdc2:	6818      	ldr	r0, [r3, #0]
 800bdc4:	f7ff ffcf 	bl	800bd66 <_raise_r>
 800bdc8:	bd10      	pop	{r4, pc}
 800bdca:	46c0      	nop			; (mov r8, r8)
 800bdcc:	20000094 	.word	0x20000094

0800bdd0 <_kill_r>:
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	b570      	push	{r4, r5, r6, lr}
 800bdd4:	4d06      	ldr	r5, [pc, #24]	; (800bdf0 <_kill_r+0x20>)
 800bdd6:	0004      	movs	r4, r0
 800bdd8:	0008      	movs	r0, r1
 800bdda:	0011      	movs	r1, r2
 800bddc:	602b      	str	r3, [r5, #0]
 800bdde:	f7f8 fccb 	bl	8004778 <_kill>
 800bde2:	1c43      	adds	r3, r0, #1
 800bde4:	d103      	bne.n	800bdee <_kill_r+0x1e>
 800bde6:	682b      	ldr	r3, [r5, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d000      	beq.n	800bdee <_kill_r+0x1e>
 800bdec:	6023      	str	r3, [r4, #0]
 800bdee:	bd70      	pop	{r4, r5, r6, pc}
 800bdf0:	20000694 	.word	0x20000694

0800bdf4 <_getpid_r>:
 800bdf4:	b510      	push	{r4, lr}
 800bdf6:	f7f8 fcb9 	bl	800476c <_getpid>
 800bdfa:	bd10      	pop	{r4, pc}

0800bdfc <_init>:
 800bdfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdfe:	46c0      	nop			; (mov r8, r8)
 800be00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be02:	bc08      	pop	{r3}
 800be04:	469e      	mov	lr, r3
 800be06:	4770      	bx	lr

0800be08 <_fini>:
 800be08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be0a:	46c0      	nop			; (mov r8, r8)
 800be0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be0e:	bc08      	pop	{r3}
 800be10:	469e      	mov	lr, r3
 800be12:	4770      	bx	lr
