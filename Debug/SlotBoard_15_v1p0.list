
SlotBoard_15_v1p0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf5c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000754  0800c018  0800c018  0001c018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c76c  0800c76c  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c76c  0800c76c  0001c76c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c774  0800c774  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c774  0800c774  0001c774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c778  0800c778  0001c778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800c77c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  2000020c  0800c988  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000204  2000056c  0800c988  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014cda  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ebe  00000000  00000000  00034f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  00037dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f98  00000000  00000000  00038ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000040af  00000000  00000000  00039e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b4b  00000000  00000000  0003dee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095497  00000000  00000000  00052a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7ec9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bf8  00000000  00000000  000e7f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000020c 	.word	0x2000020c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800c000 	.word	0x0800c000

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000210 	.word	0x20000210
 8000100:	0800c000 	.word	0x0800c000

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f000 fff9 	bl	8001430 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ff49 	bl	80012e0 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 ffeb 	bl	8001430 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 ffe1 	bl	8001430 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ff71 	bl	8001364 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 ff67 	bl	8001364 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f806 	bl	80004e4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__udivmoddi4>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	4657      	mov	r7, sl
 80004e8:	464e      	mov	r6, r9
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	b5e0      	push	{r5, r6, r7, lr}
 80004f0:	0004      	movs	r4, r0
 80004f2:	000d      	movs	r5, r1
 80004f4:	4692      	mov	sl, r2
 80004f6:	4699      	mov	r9, r3
 80004f8:	b083      	sub	sp, #12
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d830      	bhi.n	8000560 <__udivmoddi4+0x7c>
 80004fe:	d02d      	beq.n	800055c <__udivmoddi4+0x78>
 8000500:	4649      	mov	r1, r9
 8000502:	4650      	mov	r0, sl
 8000504:	f001 febe 	bl	8002284 <__clzdi2>
 8000508:	0029      	movs	r1, r5
 800050a:	0006      	movs	r6, r0
 800050c:	0020      	movs	r0, r4
 800050e:	f001 feb9 	bl	8002284 <__clzdi2>
 8000512:	1a33      	subs	r3, r6, r0
 8000514:	4698      	mov	r8, r3
 8000516:	3b20      	subs	r3, #32
 8000518:	469b      	mov	fp, r3
 800051a:	d433      	bmi.n	8000584 <__udivmoddi4+0xa0>
 800051c:	465a      	mov	r2, fp
 800051e:	4653      	mov	r3, sl
 8000520:	4093      	lsls	r3, r2
 8000522:	4642      	mov	r2, r8
 8000524:	001f      	movs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d83a      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 8000530:	42af      	cmp	r7, r5
 8000532:	d100      	bne.n	8000536 <__udivmoddi4+0x52>
 8000534:	e078      	b.n	8000628 <__udivmoddi4+0x144>
 8000536:	465b      	mov	r3, fp
 8000538:	1ba4      	subs	r4, r4, r6
 800053a:	41bd      	sbcs	r5, r7
 800053c:	2b00      	cmp	r3, #0
 800053e:	da00      	bge.n	8000542 <__udivmoddi4+0x5e>
 8000540:	e075      	b.n	800062e <__udivmoddi4+0x14a>
 8000542:	2200      	movs	r2, #0
 8000544:	2300      	movs	r3, #0
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	465a      	mov	r2, fp
 800054e:	4093      	lsls	r3, r2
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	4642      	mov	r2, r8
 8000556:	4093      	lsls	r3, r2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	e028      	b.n	80005ae <__udivmoddi4+0xca>
 800055c:	4282      	cmp	r2, r0
 800055e:	d9cf      	bls.n	8000500 <__udivmoddi4+0x1c>
 8000560:	2200      	movs	r2, #0
 8000562:	2300      	movs	r3, #0
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <__udivmoddi4+0x8e>
 800056e:	601c      	str	r4, [r3, #0]
 8000570:	605d      	str	r5, [r3, #4]
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	b003      	add	sp, #12
 8000578:	bcf0      	pop	{r4, r5, r6, r7}
 800057a:	46bb      	mov	fp, r7
 800057c:	46b2      	mov	sl, r6
 800057e:	46a9      	mov	r9, r5
 8000580:	46a0      	mov	r8, r4
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000584:	4642      	mov	r2, r8
 8000586:	2320      	movs	r3, #32
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	4652      	mov	r2, sl
 800058c:	40da      	lsrs	r2, r3
 800058e:	4641      	mov	r1, r8
 8000590:	0013      	movs	r3, r2
 8000592:	464a      	mov	r2, r9
 8000594:	408a      	lsls	r2, r1
 8000596:	0017      	movs	r7, r2
 8000598:	4642      	mov	r2, r8
 800059a:	431f      	orrs	r7, r3
 800059c:	4653      	mov	r3, sl
 800059e:	4093      	lsls	r3, r2
 80005a0:	001e      	movs	r6, r3
 80005a2:	42af      	cmp	r7, r5
 80005a4:	d9c4      	bls.n	8000530 <__udivmoddi4+0x4c>
 80005a6:	2200      	movs	r2, #0
 80005a8:	2300      	movs	r3, #0
 80005aa:	9200      	str	r2, [sp, #0]
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	4643      	mov	r3, r8
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d0d9      	beq.n	8000568 <__udivmoddi4+0x84>
 80005b4:	07fb      	lsls	r3, r7, #31
 80005b6:	0872      	lsrs	r2, r6, #1
 80005b8:	431a      	orrs	r2, r3
 80005ba:	4646      	mov	r6, r8
 80005bc:	087b      	lsrs	r3, r7, #1
 80005be:	e00e      	b.n	80005de <__udivmoddi4+0xfa>
 80005c0:	42ab      	cmp	r3, r5
 80005c2:	d101      	bne.n	80005c8 <__udivmoddi4+0xe4>
 80005c4:	42a2      	cmp	r2, r4
 80005c6:	d80c      	bhi.n	80005e2 <__udivmoddi4+0xfe>
 80005c8:	1aa4      	subs	r4, r4, r2
 80005ca:	419d      	sbcs	r5, r3
 80005cc:	2001      	movs	r0, #1
 80005ce:	1924      	adds	r4, r4, r4
 80005d0:	416d      	adcs	r5, r5
 80005d2:	2100      	movs	r1, #0
 80005d4:	3e01      	subs	r6, #1
 80005d6:	1824      	adds	r4, r4, r0
 80005d8:	414d      	adcs	r5, r1
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d006      	beq.n	80005ec <__udivmoddi4+0x108>
 80005de:	42ab      	cmp	r3, r5
 80005e0:	d9ee      	bls.n	80005c0 <__udivmoddi4+0xdc>
 80005e2:	3e01      	subs	r6, #1
 80005e4:	1924      	adds	r4, r4, r4
 80005e6:	416d      	adcs	r5, r5
 80005e8:	2e00      	cmp	r6, #0
 80005ea:	d1f8      	bne.n	80005de <__udivmoddi4+0xfa>
 80005ec:	9800      	ldr	r0, [sp, #0]
 80005ee:	9901      	ldr	r1, [sp, #4]
 80005f0:	465b      	mov	r3, fp
 80005f2:	1900      	adds	r0, r0, r4
 80005f4:	4169      	adcs	r1, r5
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	db24      	blt.n	8000644 <__udivmoddi4+0x160>
 80005fa:	002b      	movs	r3, r5
 80005fc:	465a      	mov	r2, fp
 80005fe:	4644      	mov	r4, r8
 8000600:	40d3      	lsrs	r3, r2
 8000602:	002a      	movs	r2, r5
 8000604:	40e2      	lsrs	r2, r4
 8000606:	001c      	movs	r4, r3
 8000608:	465b      	mov	r3, fp
 800060a:	0015      	movs	r5, r2
 800060c:	2b00      	cmp	r3, #0
 800060e:	db2a      	blt.n	8000666 <__udivmoddi4+0x182>
 8000610:	0026      	movs	r6, r4
 8000612:	409e      	lsls	r6, r3
 8000614:	0033      	movs	r3, r6
 8000616:	0026      	movs	r6, r4
 8000618:	4647      	mov	r7, r8
 800061a:	40be      	lsls	r6, r7
 800061c:	0032      	movs	r2, r6
 800061e:	1a80      	subs	r0, r0, r2
 8000620:	4199      	sbcs	r1, r3
 8000622:	9000      	str	r0, [sp, #0]
 8000624:	9101      	str	r1, [sp, #4]
 8000626:	e79f      	b.n	8000568 <__udivmoddi4+0x84>
 8000628:	42a3      	cmp	r3, r4
 800062a:	d8bc      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 800062c:	e783      	b.n	8000536 <__udivmoddi4+0x52>
 800062e:	4642      	mov	r2, r8
 8000630:	2320      	movs	r3, #32
 8000632:	2100      	movs	r1, #0
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	2200      	movs	r2, #0
 8000638:	9100      	str	r1, [sp, #0]
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	2201      	movs	r2, #1
 800063e:	40da      	lsrs	r2, r3
 8000640:	9201      	str	r2, [sp, #4]
 8000642:	e786      	b.n	8000552 <__udivmoddi4+0x6e>
 8000644:	4642      	mov	r2, r8
 8000646:	2320      	movs	r3, #32
 8000648:	1a9b      	subs	r3, r3, r2
 800064a:	002a      	movs	r2, r5
 800064c:	4646      	mov	r6, r8
 800064e:	409a      	lsls	r2, r3
 8000650:	0023      	movs	r3, r4
 8000652:	40f3      	lsrs	r3, r6
 8000654:	4644      	mov	r4, r8
 8000656:	4313      	orrs	r3, r2
 8000658:	002a      	movs	r2, r5
 800065a:	40e2      	lsrs	r2, r4
 800065c:	001c      	movs	r4, r3
 800065e:	465b      	mov	r3, fp
 8000660:	0015      	movs	r5, r2
 8000662:	2b00      	cmp	r3, #0
 8000664:	dad4      	bge.n	8000610 <__udivmoddi4+0x12c>
 8000666:	4642      	mov	r2, r8
 8000668:	002f      	movs	r7, r5
 800066a:	2320      	movs	r3, #32
 800066c:	0026      	movs	r6, r4
 800066e:	4097      	lsls	r7, r2
 8000670:	1a9b      	subs	r3, r3, r2
 8000672:	40de      	lsrs	r6, r3
 8000674:	003b      	movs	r3, r7
 8000676:	4333      	orrs	r3, r6
 8000678:	e7cd      	b.n	8000616 <__udivmoddi4+0x132>
 800067a:	46c0      	nop			; (mov r8, r8)

0800067c <__aeabi_dadd>:
 800067c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067e:	464f      	mov	r7, r9
 8000680:	4646      	mov	r6, r8
 8000682:	46d6      	mov	lr, sl
 8000684:	000d      	movs	r5, r1
 8000686:	0004      	movs	r4, r0
 8000688:	b5c0      	push	{r6, r7, lr}
 800068a:	001f      	movs	r7, r3
 800068c:	0011      	movs	r1, r2
 800068e:	0328      	lsls	r0, r5, #12
 8000690:	0f62      	lsrs	r2, r4, #29
 8000692:	0a40      	lsrs	r0, r0, #9
 8000694:	4310      	orrs	r0, r2
 8000696:	007a      	lsls	r2, r7, #1
 8000698:	0d52      	lsrs	r2, r2, #21
 800069a:	00e3      	lsls	r3, r4, #3
 800069c:	033c      	lsls	r4, r7, #12
 800069e:	4691      	mov	r9, r2
 80006a0:	0a64      	lsrs	r4, r4, #9
 80006a2:	0ffa      	lsrs	r2, r7, #31
 80006a4:	0f4f      	lsrs	r7, r1, #29
 80006a6:	006e      	lsls	r6, r5, #1
 80006a8:	4327      	orrs	r7, r4
 80006aa:	4692      	mov	sl, r2
 80006ac:	46b8      	mov	r8, r7
 80006ae:	0d76      	lsrs	r6, r6, #21
 80006b0:	0fed      	lsrs	r5, r5, #31
 80006b2:	00c9      	lsls	r1, r1, #3
 80006b4:	4295      	cmp	r5, r2
 80006b6:	d100      	bne.n	80006ba <__aeabi_dadd+0x3e>
 80006b8:	e099      	b.n	80007ee <__aeabi_dadd+0x172>
 80006ba:	464c      	mov	r4, r9
 80006bc:	1b34      	subs	r4, r6, r4
 80006be:	46a4      	mov	ip, r4
 80006c0:	2c00      	cmp	r4, #0
 80006c2:	dc00      	bgt.n	80006c6 <__aeabi_dadd+0x4a>
 80006c4:	e07c      	b.n	80007c0 <__aeabi_dadd+0x144>
 80006c6:	464a      	mov	r2, r9
 80006c8:	2a00      	cmp	r2, #0
 80006ca:	d100      	bne.n	80006ce <__aeabi_dadd+0x52>
 80006cc:	e0b8      	b.n	8000840 <__aeabi_dadd+0x1c4>
 80006ce:	4ac5      	ldr	r2, [pc, #788]	; (80009e4 <__aeabi_dadd+0x368>)
 80006d0:	4296      	cmp	r6, r2
 80006d2:	d100      	bne.n	80006d6 <__aeabi_dadd+0x5a>
 80006d4:	e11c      	b.n	8000910 <__aeabi_dadd+0x294>
 80006d6:	2280      	movs	r2, #128	; 0x80
 80006d8:	003c      	movs	r4, r7
 80006da:	0412      	lsls	r2, r2, #16
 80006dc:	4314      	orrs	r4, r2
 80006de:	46a0      	mov	r8, r4
 80006e0:	4662      	mov	r2, ip
 80006e2:	2a38      	cmp	r2, #56	; 0x38
 80006e4:	dd00      	ble.n	80006e8 <__aeabi_dadd+0x6c>
 80006e6:	e161      	b.n	80009ac <__aeabi_dadd+0x330>
 80006e8:	2a1f      	cmp	r2, #31
 80006ea:	dd00      	ble.n	80006ee <__aeabi_dadd+0x72>
 80006ec:	e1cc      	b.n	8000a88 <__aeabi_dadd+0x40c>
 80006ee:	4664      	mov	r4, ip
 80006f0:	2220      	movs	r2, #32
 80006f2:	1b12      	subs	r2, r2, r4
 80006f4:	4644      	mov	r4, r8
 80006f6:	4094      	lsls	r4, r2
 80006f8:	000f      	movs	r7, r1
 80006fa:	46a1      	mov	r9, r4
 80006fc:	4664      	mov	r4, ip
 80006fe:	4091      	lsls	r1, r2
 8000700:	40e7      	lsrs	r7, r4
 8000702:	464c      	mov	r4, r9
 8000704:	1e4a      	subs	r2, r1, #1
 8000706:	4191      	sbcs	r1, r2
 8000708:	433c      	orrs	r4, r7
 800070a:	4642      	mov	r2, r8
 800070c:	4321      	orrs	r1, r4
 800070e:	4664      	mov	r4, ip
 8000710:	40e2      	lsrs	r2, r4
 8000712:	1a80      	subs	r0, r0, r2
 8000714:	1a5c      	subs	r4, r3, r1
 8000716:	42a3      	cmp	r3, r4
 8000718:	419b      	sbcs	r3, r3
 800071a:	425f      	negs	r7, r3
 800071c:	1bc7      	subs	r7, r0, r7
 800071e:	023b      	lsls	r3, r7, #8
 8000720:	d400      	bmi.n	8000724 <__aeabi_dadd+0xa8>
 8000722:	e0d0      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000724:	027f      	lsls	r7, r7, #9
 8000726:	0a7f      	lsrs	r7, r7, #9
 8000728:	2f00      	cmp	r7, #0
 800072a:	d100      	bne.n	800072e <__aeabi_dadd+0xb2>
 800072c:	e0ff      	b.n	800092e <__aeabi_dadd+0x2b2>
 800072e:	0038      	movs	r0, r7
 8000730:	f001 fd8a 	bl	8002248 <__clzsi2>
 8000734:	0001      	movs	r1, r0
 8000736:	3908      	subs	r1, #8
 8000738:	2320      	movs	r3, #32
 800073a:	0022      	movs	r2, r4
 800073c:	1a5b      	subs	r3, r3, r1
 800073e:	408f      	lsls	r7, r1
 8000740:	40da      	lsrs	r2, r3
 8000742:	408c      	lsls	r4, r1
 8000744:	4317      	orrs	r7, r2
 8000746:	42b1      	cmp	r1, r6
 8000748:	da00      	bge.n	800074c <__aeabi_dadd+0xd0>
 800074a:	e0ff      	b.n	800094c <__aeabi_dadd+0x2d0>
 800074c:	1b89      	subs	r1, r1, r6
 800074e:	1c4b      	adds	r3, r1, #1
 8000750:	2b1f      	cmp	r3, #31
 8000752:	dd00      	ble.n	8000756 <__aeabi_dadd+0xda>
 8000754:	e0a8      	b.n	80008a8 <__aeabi_dadd+0x22c>
 8000756:	2220      	movs	r2, #32
 8000758:	0039      	movs	r1, r7
 800075a:	1ad2      	subs	r2, r2, r3
 800075c:	0020      	movs	r0, r4
 800075e:	4094      	lsls	r4, r2
 8000760:	4091      	lsls	r1, r2
 8000762:	40d8      	lsrs	r0, r3
 8000764:	1e62      	subs	r2, r4, #1
 8000766:	4194      	sbcs	r4, r2
 8000768:	40df      	lsrs	r7, r3
 800076a:	2600      	movs	r6, #0
 800076c:	4301      	orrs	r1, r0
 800076e:	430c      	orrs	r4, r1
 8000770:	0763      	lsls	r3, r4, #29
 8000772:	d009      	beq.n	8000788 <__aeabi_dadd+0x10c>
 8000774:	230f      	movs	r3, #15
 8000776:	4023      	ands	r3, r4
 8000778:	2b04      	cmp	r3, #4
 800077a:	d005      	beq.n	8000788 <__aeabi_dadd+0x10c>
 800077c:	1d23      	adds	r3, r4, #4
 800077e:	42a3      	cmp	r3, r4
 8000780:	41a4      	sbcs	r4, r4
 8000782:	4264      	negs	r4, r4
 8000784:	193f      	adds	r7, r7, r4
 8000786:	001c      	movs	r4, r3
 8000788:	023b      	lsls	r3, r7, #8
 800078a:	d400      	bmi.n	800078e <__aeabi_dadd+0x112>
 800078c:	e09e      	b.n	80008cc <__aeabi_dadd+0x250>
 800078e:	4b95      	ldr	r3, [pc, #596]	; (80009e4 <__aeabi_dadd+0x368>)
 8000790:	3601      	adds	r6, #1
 8000792:	429e      	cmp	r6, r3
 8000794:	d100      	bne.n	8000798 <__aeabi_dadd+0x11c>
 8000796:	e0b7      	b.n	8000908 <__aeabi_dadd+0x28c>
 8000798:	4a93      	ldr	r2, [pc, #588]	; (80009e8 <__aeabi_dadd+0x36c>)
 800079a:	08e4      	lsrs	r4, r4, #3
 800079c:	4017      	ands	r7, r2
 800079e:	077b      	lsls	r3, r7, #29
 80007a0:	0571      	lsls	r1, r6, #21
 80007a2:	027f      	lsls	r7, r7, #9
 80007a4:	4323      	orrs	r3, r4
 80007a6:	0b3f      	lsrs	r7, r7, #12
 80007a8:	0d4a      	lsrs	r2, r1, #21
 80007aa:	0512      	lsls	r2, r2, #20
 80007ac:	433a      	orrs	r2, r7
 80007ae:	07ed      	lsls	r5, r5, #31
 80007b0:	432a      	orrs	r2, r5
 80007b2:	0018      	movs	r0, r3
 80007b4:	0011      	movs	r1, r2
 80007b6:	bce0      	pop	{r5, r6, r7}
 80007b8:	46ba      	mov	sl, r7
 80007ba:	46b1      	mov	r9, r6
 80007bc:	46a8      	mov	r8, r5
 80007be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c0:	2c00      	cmp	r4, #0
 80007c2:	d04b      	beq.n	800085c <__aeabi_dadd+0x1e0>
 80007c4:	464c      	mov	r4, r9
 80007c6:	1ba4      	subs	r4, r4, r6
 80007c8:	46a4      	mov	ip, r4
 80007ca:	2e00      	cmp	r6, #0
 80007cc:	d000      	beq.n	80007d0 <__aeabi_dadd+0x154>
 80007ce:	e123      	b.n	8000a18 <__aeabi_dadd+0x39c>
 80007d0:	0004      	movs	r4, r0
 80007d2:	431c      	orrs	r4, r3
 80007d4:	d100      	bne.n	80007d8 <__aeabi_dadd+0x15c>
 80007d6:	e1af      	b.n	8000b38 <__aeabi_dadd+0x4bc>
 80007d8:	4662      	mov	r2, ip
 80007da:	1e54      	subs	r4, r2, #1
 80007dc:	2a01      	cmp	r2, #1
 80007de:	d100      	bne.n	80007e2 <__aeabi_dadd+0x166>
 80007e0:	e215      	b.n	8000c0e <__aeabi_dadd+0x592>
 80007e2:	4d80      	ldr	r5, [pc, #512]	; (80009e4 <__aeabi_dadd+0x368>)
 80007e4:	45ac      	cmp	ip, r5
 80007e6:	d100      	bne.n	80007ea <__aeabi_dadd+0x16e>
 80007e8:	e1c8      	b.n	8000b7c <__aeabi_dadd+0x500>
 80007ea:	46a4      	mov	ip, r4
 80007ec:	e11b      	b.n	8000a26 <__aeabi_dadd+0x3aa>
 80007ee:	464a      	mov	r2, r9
 80007f0:	1ab2      	subs	r2, r6, r2
 80007f2:	4694      	mov	ip, r2
 80007f4:	2a00      	cmp	r2, #0
 80007f6:	dc00      	bgt.n	80007fa <__aeabi_dadd+0x17e>
 80007f8:	e0ac      	b.n	8000954 <__aeabi_dadd+0x2d8>
 80007fa:	464a      	mov	r2, r9
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d043      	beq.n	8000888 <__aeabi_dadd+0x20c>
 8000800:	4a78      	ldr	r2, [pc, #480]	; (80009e4 <__aeabi_dadd+0x368>)
 8000802:	4296      	cmp	r6, r2
 8000804:	d100      	bne.n	8000808 <__aeabi_dadd+0x18c>
 8000806:	e1af      	b.n	8000b68 <__aeabi_dadd+0x4ec>
 8000808:	2280      	movs	r2, #128	; 0x80
 800080a:	003c      	movs	r4, r7
 800080c:	0412      	lsls	r2, r2, #16
 800080e:	4314      	orrs	r4, r2
 8000810:	46a0      	mov	r8, r4
 8000812:	4662      	mov	r2, ip
 8000814:	2a38      	cmp	r2, #56	; 0x38
 8000816:	dc67      	bgt.n	80008e8 <__aeabi_dadd+0x26c>
 8000818:	2a1f      	cmp	r2, #31
 800081a:	dc00      	bgt.n	800081e <__aeabi_dadd+0x1a2>
 800081c:	e15f      	b.n	8000ade <__aeabi_dadd+0x462>
 800081e:	4647      	mov	r7, r8
 8000820:	3a20      	subs	r2, #32
 8000822:	40d7      	lsrs	r7, r2
 8000824:	4662      	mov	r2, ip
 8000826:	2a20      	cmp	r2, #32
 8000828:	d005      	beq.n	8000836 <__aeabi_dadd+0x1ba>
 800082a:	4664      	mov	r4, ip
 800082c:	2240      	movs	r2, #64	; 0x40
 800082e:	1b12      	subs	r2, r2, r4
 8000830:	4644      	mov	r4, r8
 8000832:	4094      	lsls	r4, r2
 8000834:	4321      	orrs	r1, r4
 8000836:	1e4a      	subs	r2, r1, #1
 8000838:	4191      	sbcs	r1, r2
 800083a:	000c      	movs	r4, r1
 800083c:	433c      	orrs	r4, r7
 800083e:	e057      	b.n	80008f0 <__aeabi_dadd+0x274>
 8000840:	003a      	movs	r2, r7
 8000842:	430a      	orrs	r2, r1
 8000844:	d100      	bne.n	8000848 <__aeabi_dadd+0x1cc>
 8000846:	e105      	b.n	8000a54 <__aeabi_dadd+0x3d8>
 8000848:	0022      	movs	r2, r4
 800084a:	3a01      	subs	r2, #1
 800084c:	2c01      	cmp	r4, #1
 800084e:	d100      	bne.n	8000852 <__aeabi_dadd+0x1d6>
 8000850:	e182      	b.n	8000b58 <__aeabi_dadd+0x4dc>
 8000852:	4c64      	ldr	r4, [pc, #400]	; (80009e4 <__aeabi_dadd+0x368>)
 8000854:	45a4      	cmp	ip, r4
 8000856:	d05b      	beq.n	8000910 <__aeabi_dadd+0x294>
 8000858:	4694      	mov	ip, r2
 800085a:	e741      	b.n	80006e0 <__aeabi_dadd+0x64>
 800085c:	4c63      	ldr	r4, [pc, #396]	; (80009ec <__aeabi_dadd+0x370>)
 800085e:	1c77      	adds	r7, r6, #1
 8000860:	4227      	tst	r7, r4
 8000862:	d000      	beq.n	8000866 <__aeabi_dadd+0x1ea>
 8000864:	e0c4      	b.n	80009f0 <__aeabi_dadd+0x374>
 8000866:	0004      	movs	r4, r0
 8000868:	431c      	orrs	r4, r3
 800086a:	2e00      	cmp	r6, #0
 800086c:	d000      	beq.n	8000870 <__aeabi_dadd+0x1f4>
 800086e:	e169      	b.n	8000b44 <__aeabi_dadd+0x4c8>
 8000870:	2c00      	cmp	r4, #0
 8000872:	d100      	bne.n	8000876 <__aeabi_dadd+0x1fa>
 8000874:	e1bf      	b.n	8000bf6 <__aeabi_dadd+0x57a>
 8000876:	4644      	mov	r4, r8
 8000878:	430c      	orrs	r4, r1
 800087a:	d000      	beq.n	800087e <__aeabi_dadd+0x202>
 800087c:	e1d0      	b.n	8000c20 <__aeabi_dadd+0x5a4>
 800087e:	0742      	lsls	r2, r0, #29
 8000880:	08db      	lsrs	r3, r3, #3
 8000882:	4313      	orrs	r3, r2
 8000884:	08c0      	lsrs	r0, r0, #3
 8000886:	e029      	b.n	80008dc <__aeabi_dadd+0x260>
 8000888:	003a      	movs	r2, r7
 800088a:	430a      	orrs	r2, r1
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x214>
 800088e:	e170      	b.n	8000b72 <__aeabi_dadd+0x4f6>
 8000890:	4662      	mov	r2, ip
 8000892:	4664      	mov	r4, ip
 8000894:	3a01      	subs	r2, #1
 8000896:	2c01      	cmp	r4, #1
 8000898:	d100      	bne.n	800089c <__aeabi_dadd+0x220>
 800089a:	e0e0      	b.n	8000a5e <__aeabi_dadd+0x3e2>
 800089c:	4c51      	ldr	r4, [pc, #324]	; (80009e4 <__aeabi_dadd+0x368>)
 800089e:	45a4      	cmp	ip, r4
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dadd+0x228>
 80008a2:	e161      	b.n	8000b68 <__aeabi_dadd+0x4ec>
 80008a4:	4694      	mov	ip, r2
 80008a6:	e7b4      	b.n	8000812 <__aeabi_dadd+0x196>
 80008a8:	003a      	movs	r2, r7
 80008aa:	391f      	subs	r1, #31
 80008ac:	40ca      	lsrs	r2, r1
 80008ae:	0011      	movs	r1, r2
 80008b0:	2b20      	cmp	r3, #32
 80008b2:	d003      	beq.n	80008bc <__aeabi_dadd+0x240>
 80008b4:	2240      	movs	r2, #64	; 0x40
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	409f      	lsls	r7, r3
 80008ba:	433c      	orrs	r4, r7
 80008bc:	1e63      	subs	r3, r4, #1
 80008be:	419c      	sbcs	r4, r3
 80008c0:	2700      	movs	r7, #0
 80008c2:	2600      	movs	r6, #0
 80008c4:	430c      	orrs	r4, r1
 80008c6:	0763      	lsls	r3, r4, #29
 80008c8:	d000      	beq.n	80008cc <__aeabi_dadd+0x250>
 80008ca:	e753      	b.n	8000774 <__aeabi_dadd+0xf8>
 80008cc:	46b4      	mov	ip, r6
 80008ce:	08e4      	lsrs	r4, r4, #3
 80008d0:	077b      	lsls	r3, r7, #29
 80008d2:	4323      	orrs	r3, r4
 80008d4:	08f8      	lsrs	r0, r7, #3
 80008d6:	4a43      	ldr	r2, [pc, #268]	; (80009e4 <__aeabi_dadd+0x368>)
 80008d8:	4594      	cmp	ip, r2
 80008da:	d01d      	beq.n	8000918 <__aeabi_dadd+0x29c>
 80008dc:	4662      	mov	r2, ip
 80008de:	0307      	lsls	r7, r0, #12
 80008e0:	0552      	lsls	r2, r2, #21
 80008e2:	0b3f      	lsrs	r7, r7, #12
 80008e4:	0d52      	lsrs	r2, r2, #21
 80008e6:	e760      	b.n	80007aa <__aeabi_dadd+0x12e>
 80008e8:	4644      	mov	r4, r8
 80008ea:	430c      	orrs	r4, r1
 80008ec:	1e62      	subs	r2, r4, #1
 80008ee:	4194      	sbcs	r4, r2
 80008f0:	18e4      	adds	r4, r4, r3
 80008f2:	429c      	cmp	r4, r3
 80008f4:	419b      	sbcs	r3, r3
 80008f6:	425f      	negs	r7, r3
 80008f8:	183f      	adds	r7, r7, r0
 80008fa:	023b      	lsls	r3, r7, #8
 80008fc:	d5e3      	bpl.n	80008c6 <__aeabi_dadd+0x24a>
 80008fe:	4b39      	ldr	r3, [pc, #228]	; (80009e4 <__aeabi_dadd+0x368>)
 8000900:	3601      	adds	r6, #1
 8000902:	429e      	cmp	r6, r3
 8000904:	d000      	beq.n	8000908 <__aeabi_dadd+0x28c>
 8000906:	e0b5      	b.n	8000a74 <__aeabi_dadd+0x3f8>
 8000908:	0032      	movs	r2, r6
 800090a:	2700      	movs	r7, #0
 800090c:	2300      	movs	r3, #0
 800090e:	e74c      	b.n	80007aa <__aeabi_dadd+0x12e>
 8000910:	0742      	lsls	r2, r0, #29
 8000912:	08db      	lsrs	r3, r3, #3
 8000914:	4313      	orrs	r3, r2
 8000916:	08c0      	lsrs	r0, r0, #3
 8000918:	001a      	movs	r2, r3
 800091a:	4302      	orrs	r2, r0
 800091c:	d100      	bne.n	8000920 <__aeabi_dadd+0x2a4>
 800091e:	e1e1      	b.n	8000ce4 <__aeabi_dadd+0x668>
 8000920:	2780      	movs	r7, #128	; 0x80
 8000922:	033f      	lsls	r7, r7, #12
 8000924:	4307      	orrs	r7, r0
 8000926:	033f      	lsls	r7, r7, #12
 8000928:	4a2e      	ldr	r2, [pc, #184]	; (80009e4 <__aeabi_dadd+0x368>)
 800092a:	0b3f      	lsrs	r7, r7, #12
 800092c:	e73d      	b.n	80007aa <__aeabi_dadd+0x12e>
 800092e:	0020      	movs	r0, r4
 8000930:	f001 fc8a 	bl	8002248 <__clzsi2>
 8000934:	0001      	movs	r1, r0
 8000936:	3118      	adds	r1, #24
 8000938:	291f      	cmp	r1, #31
 800093a:	dc00      	bgt.n	800093e <__aeabi_dadd+0x2c2>
 800093c:	e6fc      	b.n	8000738 <__aeabi_dadd+0xbc>
 800093e:	3808      	subs	r0, #8
 8000940:	4084      	lsls	r4, r0
 8000942:	0027      	movs	r7, r4
 8000944:	2400      	movs	r4, #0
 8000946:	42b1      	cmp	r1, r6
 8000948:	db00      	blt.n	800094c <__aeabi_dadd+0x2d0>
 800094a:	e6ff      	b.n	800074c <__aeabi_dadd+0xd0>
 800094c:	4a26      	ldr	r2, [pc, #152]	; (80009e8 <__aeabi_dadd+0x36c>)
 800094e:	1a76      	subs	r6, r6, r1
 8000950:	4017      	ands	r7, r2
 8000952:	e70d      	b.n	8000770 <__aeabi_dadd+0xf4>
 8000954:	2a00      	cmp	r2, #0
 8000956:	d02f      	beq.n	80009b8 <__aeabi_dadd+0x33c>
 8000958:	464a      	mov	r2, r9
 800095a:	1b92      	subs	r2, r2, r6
 800095c:	4694      	mov	ip, r2
 800095e:	2e00      	cmp	r6, #0
 8000960:	d100      	bne.n	8000964 <__aeabi_dadd+0x2e8>
 8000962:	e0ad      	b.n	8000ac0 <__aeabi_dadd+0x444>
 8000964:	4a1f      	ldr	r2, [pc, #124]	; (80009e4 <__aeabi_dadd+0x368>)
 8000966:	4591      	cmp	r9, r2
 8000968:	d100      	bne.n	800096c <__aeabi_dadd+0x2f0>
 800096a:	e10f      	b.n	8000b8c <__aeabi_dadd+0x510>
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	0412      	lsls	r2, r2, #16
 8000970:	4310      	orrs	r0, r2
 8000972:	4662      	mov	r2, ip
 8000974:	2a38      	cmp	r2, #56	; 0x38
 8000976:	dd00      	ble.n	800097a <__aeabi_dadd+0x2fe>
 8000978:	e10f      	b.n	8000b9a <__aeabi_dadd+0x51e>
 800097a:	2a1f      	cmp	r2, #31
 800097c:	dd00      	ble.n	8000980 <__aeabi_dadd+0x304>
 800097e:	e180      	b.n	8000c82 <__aeabi_dadd+0x606>
 8000980:	4664      	mov	r4, ip
 8000982:	2220      	movs	r2, #32
 8000984:	001e      	movs	r6, r3
 8000986:	1b12      	subs	r2, r2, r4
 8000988:	4667      	mov	r7, ip
 800098a:	0004      	movs	r4, r0
 800098c:	4093      	lsls	r3, r2
 800098e:	4094      	lsls	r4, r2
 8000990:	40fe      	lsrs	r6, r7
 8000992:	1e5a      	subs	r2, r3, #1
 8000994:	4193      	sbcs	r3, r2
 8000996:	40f8      	lsrs	r0, r7
 8000998:	4334      	orrs	r4, r6
 800099a:	431c      	orrs	r4, r3
 800099c:	4480      	add	r8, r0
 800099e:	1864      	adds	r4, r4, r1
 80009a0:	428c      	cmp	r4, r1
 80009a2:	41bf      	sbcs	r7, r7
 80009a4:	427f      	negs	r7, r7
 80009a6:	464e      	mov	r6, r9
 80009a8:	4447      	add	r7, r8
 80009aa:	e7a6      	b.n	80008fa <__aeabi_dadd+0x27e>
 80009ac:	4642      	mov	r2, r8
 80009ae:	430a      	orrs	r2, r1
 80009b0:	0011      	movs	r1, r2
 80009b2:	1e4a      	subs	r2, r1, #1
 80009b4:	4191      	sbcs	r1, r2
 80009b6:	e6ad      	b.n	8000714 <__aeabi_dadd+0x98>
 80009b8:	4c0c      	ldr	r4, [pc, #48]	; (80009ec <__aeabi_dadd+0x370>)
 80009ba:	1c72      	adds	r2, r6, #1
 80009bc:	4222      	tst	r2, r4
 80009be:	d000      	beq.n	80009c2 <__aeabi_dadd+0x346>
 80009c0:	e0a1      	b.n	8000b06 <__aeabi_dadd+0x48a>
 80009c2:	0002      	movs	r2, r0
 80009c4:	431a      	orrs	r2, r3
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d000      	beq.n	80009cc <__aeabi_dadd+0x350>
 80009ca:	e0fa      	b.n	8000bc2 <__aeabi_dadd+0x546>
 80009cc:	2a00      	cmp	r2, #0
 80009ce:	d100      	bne.n	80009d2 <__aeabi_dadd+0x356>
 80009d0:	e145      	b.n	8000c5e <__aeabi_dadd+0x5e2>
 80009d2:	003a      	movs	r2, r7
 80009d4:	430a      	orrs	r2, r1
 80009d6:	d000      	beq.n	80009da <__aeabi_dadd+0x35e>
 80009d8:	e146      	b.n	8000c68 <__aeabi_dadd+0x5ec>
 80009da:	0742      	lsls	r2, r0, #29
 80009dc:	08db      	lsrs	r3, r3, #3
 80009de:	4313      	orrs	r3, r2
 80009e0:	08c0      	lsrs	r0, r0, #3
 80009e2:	e77b      	b.n	80008dc <__aeabi_dadd+0x260>
 80009e4:	000007ff 	.word	0x000007ff
 80009e8:	ff7fffff 	.word	0xff7fffff
 80009ec:	000007fe 	.word	0x000007fe
 80009f0:	4647      	mov	r7, r8
 80009f2:	1a5c      	subs	r4, r3, r1
 80009f4:	1bc2      	subs	r2, r0, r7
 80009f6:	42a3      	cmp	r3, r4
 80009f8:	41bf      	sbcs	r7, r7
 80009fa:	427f      	negs	r7, r7
 80009fc:	46b9      	mov	r9, r7
 80009fe:	0017      	movs	r7, r2
 8000a00:	464a      	mov	r2, r9
 8000a02:	1abf      	subs	r7, r7, r2
 8000a04:	023a      	lsls	r2, r7, #8
 8000a06:	d500      	bpl.n	8000a0a <__aeabi_dadd+0x38e>
 8000a08:	e08d      	b.n	8000b26 <__aeabi_dadd+0x4aa>
 8000a0a:	0023      	movs	r3, r4
 8000a0c:	433b      	orrs	r3, r7
 8000a0e:	d000      	beq.n	8000a12 <__aeabi_dadd+0x396>
 8000a10:	e68a      	b.n	8000728 <__aeabi_dadd+0xac>
 8000a12:	2000      	movs	r0, #0
 8000a14:	2500      	movs	r5, #0
 8000a16:	e761      	b.n	80008dc <__aeabi_dadd+0x260>
 8000a18:	4cb4      	ldr	r4, [pc, #720]	; (8000cec <__aeabi_dadd+0x670>)
 8000a1a:	45a1      	cmp	r9, r4
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_dadd+0x3a4>
 8000a1e:	e0ad      	b.n	8000b7c <__aeabi_dadd+0x500>
 8000a20:	2480      	movs	r4, #128	; 0x80
 8000a22:	0424      	lsls	r4, r4, #16
 8000a24:	4320      	orrs	r0, r4
 8000a26:	4664      	mov	r4, ip
 8000a28:	2c38      	cmp	r4, #56	; 0x38
 8000a2a:	dc3d      	bgt.n	8000aa8 <__aeabi_dadd+0x42c>
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	2c1f      	cmp	r4, #31
 8000a30:	dd00      	ble.n	8000a34 <__aeabi_dadd+0x3b8>
 8000a32:	e0b7      	b.n	8000ba4 <__aeabi_dadd+0x528>
 8000a34:	2520      	movs	r5, #32
 8000a36:	001e      	movs	r6, r3
 8000a38:	1b2d      	subs	r5, r5, r4
 8000a3a:	0004      	movs	r4, r0
 8000a3c:	40ab      	lsls	r3, r5
 8000a3e:	40ac      	lsls	r4, r5
 8000a40:	40d6      	lsrs	r6, r2
 8000a42:	40d0      	lsrs	r0, r2
 8000a44:	4642      	mov	r2, r8
 8000a46:	1e5d      	subs	r5, r3, #1
 8000a48:	41ab      	sbcs	r3, r5
 8000a4a:	4334      	orrs	r4, r6
 8000a4c:	1a12      	subs	r2, r2, r0
 8000a4e:	4690      	mov	r8, r2
 8000a50:	4323      	orrs	r3, r4
 8000a52:	e02c      	b.n	8000aae <__aeabi_dadd+0x432>
 8000a54:	0742      	lsls	r2, r0, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c0      	lsrs	r0, r0, #3
 8000a5c:	e73b      	b.n	80008d6 <__aeabi_dadd+0x25a>
 8000a5e:	185c      	adds	r4, r3, r1
 8000a60:	429c      	cmp	r4, r3
 8000a62:	419b      	sbcs	r3, r3
 8000a64:	4440      	add	r0, r8
 8000a66:	425b      	negs	r3, r3
 8000a68:	18c7      	adds	r7, r0, r3
 8000a6a:	2601      	movs	r6, #1
 8000a6c:	023b      	lsls	r3, r7, #8
 8000a6e:	d400      	bmi.n	8000a72 <__aeabi_dadd+0x3f6>
 8000a70:	e729      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000a72:	2602      	movs	r6, #2
 8000a74:	4a9e      	ldr	r2, [pc, #632]	; (8000cf0 <__aeabi_dadd+0x674>)
 8000a76:	0863      	lsrs	r3, r4, #1
 8000a78:	4017      	ands	r7, r2
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4014      	ands	r4, r2
 8000a7e:	431c      	orrs	r4, r3
 8000a80:	07fb      	lsls	r3, r7, #31
 8000a82:	431c      	orrs	r4, r3
 8000a84:	087f      	lsrs	r7, r7, #1
 8000a86:	e673      	b.n	8000770 <__aeabi_dadd+0xf4>
 8000a88:	4644      	mov	r4, r8
 8000a8a:	3a20      	subs	r2, #32
 8000a8c:	40d4      	lsrs	r4, r2
 8000a8e:	4662      	mov	r2, ip
 8000a90:	2a20      	cmp	r2, #32
 8000a92:	d005      	beq.n	8000aa0 <__aeabi_dadd+0x424>
 8000a94:	4667      	mov	r7, ip
 8000a96:	2240      	movs	r2, #64	; 0x40
 8000a98:	1bd2      	subs	r2, r2, r7
 8000a9a:	4647      	mov	r7, r8
 8000a9c:	4097      	lsls	r7, r2
 8000a9e:	4339      	orrs	r1, r7
 8000aa0:	1e4a      	subs	r2, r1, #1
 8000aa2:	4191      	sbcs	r1, r2
 8000aa4:	4321      	orrs	r1, r4
 8000aa6:	e635      	b.n	8000714 <__aeabi_dadd+0x98>
 8000aa8:	4303      	orrs	r3, r0
 8000aaa:	1e58      	subs	r0, r3, #1
 8000aac:	4183      	sbcs	r3, r0
 8000aae:	1acc      	subs	r4, r1, r3
 8000ab0:	42a1      	cmp	r1, r4
 8000ab2:	41bf      	sbcs	r7, r7
 8000ab4:	4643      	mov	r3, r8
 8000ab6:	427f      	negs	r7, r7
 8000ab8:	4655      	mov	r5, sl
 8000aba:	464e      	mov	r6, r9
 8000abc:	1bdf      	subs	r7, r3, r7
 8000abe:	e62e      	b.n	800071e <__aeabi_dadd+0xa2>
 8000ac0:	0002      	movs	r2, r0
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_dadd+0x44c>
 8000ac6:	e0bd      	b.n	8000c44 <__aeabi_dadd+0x5c8>
 8000ac8:	4662      	mov	r2, ip
 8000aca:	4664      	mov	r4, ip
 8000acc:	3a01      	subs	r2, #1
 8000ace:	2c01      	cmp	r4, #1
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_dadd+0x458>
 8000ad2:	e0e5      	b.n	8000ca0 <__aeabi_dadd+0x624>
 8000ad4:	4c85      	ldr	r4, [pc, #532]	; (8000cec <__aeabi_dadd+0x670>)
 8000ad6:	45a4      	cmp	ip, r4
 8000ad8:	d058      	beq.n	8000b8c <__aeabi_dadd+0x510>
 8000ada:	4694      	mov	ip, r2
 8000adc:	e749      	b.n	8000972 <__aeabi_dadd+0x2f6>
 8000ade:	4664      	mov	r4, ip
 8000ae0:	2220      	movs	r2, #32
 8000ae2:	1b12      	subs	r2, r2, r4
 8000ae4:	4644      	mov	r4, r8
 8000ae6:	4094      	lsls	r4, r2
 8000ae8:	000f      	movs	r7, r1
 8000aea:	46a1      	mov	r9, r4
 8000aec:	4664      	mov	r4, ip
 8000aee:	4091      	lsls	r1, r2
 8000af0:	40e7      	lsrs	r7, r4
 8000af2:	464c      	mov	r4, r9
 8000af4:	1e4a      	subs	r2, r1, #1
 8000af6:	4191      	sbcs	r1, r2
 8000af8:	433c      	orrs	r4, r7
 8000afa:	4642      	mov	r2, r8
 8000afc:	430c      	orrs	r4, r1
 8000afe:	4661      	mov	r1, ip
 8000b00:	40ca      	lsrs	r2, r1
 8000b02:	1880      	adds	r0, r0, r2
 8000b04:	e6f4      	b.n	80008f0 <__aeabi_dadd+0x274>
 8000b06:	4c79      	ldr	r4, [pc, #484]	; (8000cec <__aeabi_dadd+0x670>)
 8000b08:	42a2      	cmp	r2, r4
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_dadd+0x492>
 8000b0c:	e6fd      	b.n	800090a <__aeabi_dadd+0x28e>
 8000b0e:	1859      	adds	r1, r3, r1
 8000b10:	4299      	cmp	r1, r3
 8000b12:	419b      	sbcs	r3, r3
 8000b14:	4440      	add	r0, r8
 8000b16:	425f      	negs	r7, r3
 8000b18:	19c7      	adds	r7, r0, r7
 8000b1a:	07fc      	lsls	r4, r7, #31
 8000b1c:	0849      	lsrs	r1, r1, #1
 8000b1e:	0016      	movs	r6, r2
 8000b20:	430c      	orrs	r4, r1
 8000b22:	087f      	lsrs	r7, r7, #1
 8000b24:	e6cf      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000b26:	1acc      	subs	r4, r1, r3
 8000b28:	42a1      	cmp	r1, r4
 8000b2a:	41bf      	sbcs	r7, r7
 8000b2c:	4643      	mov	r3, r8
 8000b2e:	427f      	negs	r7, r7
 8000b30:	1a18      	subs	r0, r3, r0
 8000b32:	4655      	mov	r5, sl
 8000b34:	1bc7      	subs	r7, r0, r7
 8000b36:	e5f7      	b.n	8000728 <__aeabi_dadd+0xac>
 8000b38:	08c9      	lsrs	r1, r1, #3
 8000b3a:	077b      	lsls	r3, r7, #29
 8000b3c:	4655      	mov	r5, sl
 8000b3e:	430b      	orrs	r3, r1
 8000b40:	08f8      	lsrs	r0, r7, #3
 8000b42:	e6c8      	b.n	80008d6 <__aeabi_dadd+0x25a>
 8000b44:	2c00      	cmp	r4, #0
 8000b46:	d000      	beq.n	8000b4a <__aeabi_dadd+0x4ce>
 8000b48:	e081      	b.n	8000c4e <__aeabi_dadd+0x5d2>
 8000b4a:	4643      	mov	r3, r8
 8000b4c:	430b      	orrs	r3, r1
 8000b4e:	d115      	bne.n	8000b7c <__aeabi_dadd+0x500>
 8000b50:	2080      	movs	r0, #128	; 0x80
 8000b52:	2500      	movs	r5, #0
 8000b54:	0300      	lsls	r0, r0, #12
 8000b56:	e6e3      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000b58:	1a5c      	subs	r4, r3, r1
 8000b5a:	42a3      	cmp	r3, r4
 8000b5c:	419b      	sbcs	r3, r3
 8000b5e:	1bc7      	subs	r7, r0, r7
 8000b60:	425b      	negs	r3, r3
 8000b62:	2601      	movs	r6, #1
 8000b64:	1aff      	subs	r7, r7, r3
 8000b66:	e5da      	b.n	800071e <__aeabi_dadd+0xa2>
 8000b68:	0742      	lsls	r2, r0, #29
 8000b6a:	08db      	lsrs	r3, r3, #3
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	08c0      	lsrs	r0, r0, #3
 8000b70:	e6d2      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000b72:	0742      	lsls	r2, r0, #29
 8000b74:	08db      	lsrs	r3, r3, #3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	08c0      	lsrs	r0, r0, #3
 8000b7a:	e6ac      	b.n	80008d6 <__aeabi_dadd+0x25a>
 8000b7c:	4643      	mov	r3, r8
 8000b7e:	4642      	mov	r2, r8
 8000b80:	08c9      	lsrs	r1, r1, #3
 8000b82:	075b      	lsls	r3, r3, #29
 8000b84:	4655      	mov	r5, sl
 8000b86:	430b      	orrs	r3, r1
 8000b88:	08d0      	lsrs	r0, r2, #3
 8000b8a:	e6c5      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000b8c:	4643      	mov	r3, r8
 8000b8e:	4642      	mov	r2, r8
 8000b90:	075b      	lsls	r3, r3, #29
 8000b92:	08c9      	lsrs	r1, r1, #3
 8000b94:	430b      	orrs	r3, r1
 8000b96:	08d0      	lsrs	r0, r2, #3
 8000b98:	e6be      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000b9a:	4303      	orrs	r3, r0
 8000b9c:	001c      	movs	r4, r3
 8000b9e:	1e63      	subs	r3, r4, #1
 8000ba0:	419c      	sbcs	r4, r3
 8000ba2:	e6fc      	b.n	800099e <__aeabi_dadd+0x322>
 8000ba4:	0002      	movs	r2, r0
 8000ba6:	3c20      	subs	r4, #32
 8000ba8:	40e2      	lsrs	r2, r4
 8000baa:	0014      	movs	r4, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	2a20      	cmp	r2, #32
 8000bb0:	d003      	beq.n	8000bba <__aeabi_dadd+0x53e>
 8000bb2:	2540      	movs	r5, #64	; 0x40
 8000bb4:	1aad      	subs	r5, r5, r2
 8000bb6:	40a8      	lsls	r0, r5
 8000bb8:	4303      	orrs	r3, r0
 8000bba:	1e58      	subs	r0, r3, #1
 8000bbc:	4183      	sbcs	r3, r0
 8000bbe:	4323      	orrs	r3, r4
 8000bc0:	e775      	b.n	8000aae <__aeabi_dadd+0x432>
 8000bc2:	2a00      	cmp	r2, #0
 8000bc4:	d0e2      	beq.n	8000b8c <__aeabi_dadd+0x510>
 8000bc6:	003a      	movs	r2, r7
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	d0cd      	beq.n	8000b68 <__aeabi_dadd+0x4ec>
 8000bcc:	0742      	lsls	r2, r0, #29
 8000bce:	08db      	lsrs	r3, r3, #3
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	2280      	movs	r2, #128	; 0x80
 8000bd4:	08c0      	lsrs	r0, r0, #3
 8000bd6:	0312      	lsls	r2, r2, #12
 8000bd8:	4210      	tst	r0, r2
 8000bda:	d006      	beq.n	8000bea <__aeabi_dadd+0x56e>
 8000bdc:	08fc      	lsrs	r4, r7, #3
 8000bde:	4214      	tst	r4, r2
 8000be0:	d103      	bne.n	8000bea <__aeabi_dadd+0x56e>
 8000be2:	0020      	movs	r0, r4
 8000be4:	08cb      	lsrs	r3, r1, #3
 8000be6:	077a      	lsls	r2, r7, #29
 8000be8:	4313      	orrs	r3, r2
 8000bea:	0f5a      	lsrs	r2, r3, #29
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	0752      	lsls	r2, r2, #29
 8000bf0:	08db      	lsrs	r3, r3, #3
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	e690      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000bf6:	4643      	mov	r3, r8
 8000bf8:	430b      	orrs	r3, r1
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_dadd+0x582>
 8000bfc:	e709      	b.n	8000a12 <__aeabi_dadd+0x396>
 8000bfe:	4643      	mov	r3, r8
 8000c00:	4642      	mov	r2, r8
 8000c02:	08c9      	lsrs	r1, r1, #3
 8000c04:	075b      	lsls	r3, r3, #29
 8000c06:	4655      	mov	r5, sl
 8000c08:	430b      	orrs	r3, r1
 8000c0a:	08d0      	lsrs	r0, r2, #3
 8000c0c:	e666      	b.n	80008dc <__aeabi_dadd+0x260>
 8000c0e:	1acc      	subs	r4, r1, r3
 8000c10:	42a1      	cmp	r1, r4
 8000c12:	4189      	sbcs	r1, r1
 8000c14:	1a3f      	subs	r7, r7, r0
 8000c16:	4249      	negs	r1, r1
 8000c18:	4655      	mov	r5, sl
 8000c1a:	2601      	movs	r6, #1
 8000c1c:	1a7f      	subs	r7, r7, r1
 8000c1e:	e57e      	b.n	800071e <__aeabi_dadd+0xa2>
 8000c20:	4642      	mov	r2, r8
 8000c22:	1a5c      	subs	r4, r3, r1
 8000c24:	1a87      	subs	r7, r0, r2
 8000c26:	42a3      	cmp	r3, r4
 8000c28:	4192      	sbcs	r2, r2
 8000c2a:	4252      	negs	r2, r2
 8000c2c:	1abf      	subs	r7, r7, r2
 8000c2e:	023a      	lsls	r2, r7, #8
 8000c30:	d53d      	bpl.n	8000cae <__aeabi_dadd+0x632>
 8000c32:	1acc      	subs	r4, r1, r3
 8000c34:	42a1      	cmp	r1, r4
 8000c36:	4189      	sbcs	r1, r1
 8000c38:	4643      	mov	r3, r8
 8000c3a:	4249      	negs	r1, r1
 8000c3c:	1a1f      	subs	r7, r3, r0
 8000c3e:	4655      	mov	r5, sl
 8000c40:	1a7f      	subs	r7, r7, r1
 8000c42:	e595      	b.n	8000770 <__aeabi_dadd+0xf4>
 8000c44:	077b      	lsls	r3, r7, #29
 8000c46:	08c9      	lsrs	r1, r1, #3
 8000c48:	430b      	orrs	r3, r1
 8000c4a:	08f8      	lsrs	r0, r7, #3
 8000c4c:	e643      	b.n	80008d6 <__aeabi_dadd+0x25a>
 8000c4e:	4644      	mov	r4, r8
 8000c50:	08db      	lsrs	r3, r3, #3
 8000c52:	430c      	orrs	r4, r1
 8000c54:	d130      	bne.n	8000cb8 <__aeabi_dadd+0x63c>
 8000c56:	0742      	lsls	r2, r0, #29
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	08c0      	lsrs	r0, r0, #3
 8000c5c:	e65c      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000c5e:	077b      	lsls	r3, r7, #29
 8000c60:	08c9      	lsrs	r1, r1, #3
 8000c62:	430b      	orrs	r3, r1
 8000c64:	08f8      	lsrs	r0, r7, #3
 8000c66:	e639      	b.n	80008dc <__aeabi_dadd+0x260>
 8000c68:	185c      	adds	r4, r3, r1
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	419b      	sbcs	r3, r3
 8000c6e:	4440      	add	r0, r8
 8000c70:	425b      	negs	r3, r3
 8000c72:	18c7      	adds	r7, r0, r3
 8000c74:	023b      	lsls	r3, r7, #8
 8000c76:	d400      	bmi.n	8000c7a <__aeabi_dadd+0x5fe>
 8000c78:	e625      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <__aeabi_dadd+0x674>)
 8000c7c:	2601      	movs	r6, #1
 8000c7e:	401f      	ands	r7, r3
 8000c80:	e621      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000c82:	0004      	movs	r4, r0
 8000c84:	3a20      	subs	r2, #32
 8000c86:	40d4      	lsrs	r4, r2
 8000c88:	4662      	mov	r2, ip
 8000c8a:	2a20      	cmp	r2, #32
 8000c8c:	d004      	beq.n	8000c98 <__aeabi_dadd+0x61c>
 8000c8e:	2240      	movs	r2, #64	; 0x40
 8000c90:	4666      	mov	r6, ip
 8000c92:	1b92      	subs	r2, r2, r6
 8000c94:	4090      	lsls	r0, r2
 8000c96:	4303      	orrs	r3, r0
 8000c98:	1e5a      	subs	r2, r3, #1
 8000c9a:	4193      	sbcs	r3, r2
 8000c9c:	431c      	orrs	r4, r3
 8000c9e:	e67e      	b.n	800099e <__aeabi_dadd+0x322>
 8000ca0:	185c      	adds	r4, r3, r1
 8000ca2:	428c      	cmp	r4, r1
 8000ca4:	4189      	sbcs	r1, r1
 8000ca6:	4440      	add	r0, r8
 8000ca8:	4249      	negs	r1, r1
 8000caa:	1847      	adds	r7, r0, r1
 8000cac:	e6dd      	b.n	8000a6a <__aeabi_dadd+0x3ee>
 8000cae:	0023      	movs	r3, r4
 8000cb0:	433b      	orrs	r3, r7
 8000cb2:	d100      	bne.n	8000cb6 <__aeabi_dadd+0x63a>
 8000cb4:	e6ad      	b.n	8000a12 <__aeabi_dadd+0x396>
 8000cb6:	e606      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000cb8:	0744      	lsls	r4, r0, #29
 8000cba:	4323      	orrs	r3, r4
 8000cbc:	2480      	movs	r4, #128	; 0x80
 8000cbe:	08c0      	lsrs	r0, r0, #3
 8000cc0:	0324      	lsls	r4, r4, #12
 8000cc2:	4220      	tst	r0, r4
 8000cc4:	d008      	beq.n	8000cd8 <__aeabi_dadd+0x65c>
 8000cc6:	4642      	mov	r2, r8
 8000cc8:	08d6      	lsrs	r6, r2, #3
 8000cca:	4226      	tst	r6, r4
 8000ccc:	d104      	bne.n	8000cd8 <__aeabi_dadd+0x65c>
 8000cce:	4655      	mov	r5, sl
 8000cd0:	0030      	movs	r0, r6
 8000cd2:	08cb      	lsrs	r3, r1, #3
 8000cd4:	0751      	lsls	r1, r2, #29
 8000cd6:	430b      	orrs	r3, r1
 8000cd8:	0f5a      	lsrs	r2, r3, #29
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	08db      	lsrs	r3, r3, #3
 8000cde:	0752      	lsls	r2, r2, #29
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	e619      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	4a01      	ldr	r2, [pc, #4]	; (8000cec <__aeabi_dadd+0x670>)
 8000ce8:	001f      	movs	r7, r3
 8000cea:	e55e      	b.n	80007aa <__aeabi_dadd+0x12e>
 8000cec:	000007ff 	.word	0x000007ff
 8000cf0:	ff7fffff 	.word	0xff7fffff

08000cf4 <__aeabi_ddiv>:
 8000cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cf6:	4657      	mov	r7, sl
 8000cf8:	464e      	mov	r6, r9
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	46de      	mov	lr, fp
 8000cfe:	b5e0      	push	{r5, r6, r7, lr}
 8000d00:	4681      	mov	r9, r0
 8000d02:	0005      	movs	r5, r0
 8000d04:	030c      	lsls	r4, r1, #12
 8000d06:	0048      	lsls	r0, r1, #1
 8000d08:	4692      	mov	sl, r2
 8000d0a:	001f      	movs	r7, r3
 8000d0c:	b085      	sub	sp, #20
 8000d0e:	0b24      	lsrs	r4, r4, #12
 8000d10:	0d40      	lsrs	r0, r0, #21
 8000d12:	0fce      	lsrs	r6, r1, #31
 8000d14:	2800      	cmp	r0, #0
 8000d16:	d100      	bne.n	8000d1a <__aeabi_ddiv+0x26>
 8000d18:	e156      	b.n	8000fc8 <__aeabi_ddiv+0x2d4>
 8000d1a:	4bd4      	ldr	r3, [pc, #848]	; (800106c <__aeabi_ddiv+0x378>)
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_ddiv+0x2e>
 8000d20:	e172      	b.n	8001008 <__aeabi_ddiv+0x314>
 8000d22:	0f6b      	lsrs	r3, r5, #29
 8000d24:	00e4      	lsls	r4, r4, #3
 8000d26:	431c      	orrs	r4, r3
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	041b      	lsls	r3, r3, #16
 8000d2c:	4323      	orrs	r3, r4
 8000d2e:	4698      	mov	r8, r3
 8000d30:	4bcf      	ldr	r3, [pc, #828]	; (8001070 <__aeabi_ddiv+0x37c>)
 8000d32:	00ed      	lsls	r5, r5, #3
 8000d34:	469b      	mov	fp, r3
 8000d36:	2300      	movs	r3, #0
 8000d38:	4699      	mov	r9, r3
 8000d3a:	4483      	add	fp, r0
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	033c      	lsls	r4, r7, #12
 8000d40:	007b      	lsls	r3, r7, #1
 8000d42:	4650      	mov	r0, sl
 8000d44:	0b24      	lsrs	r4, r4, #12
 8000d46:	0d5b      	lsrs	r3, r3, #21
 8000d48:	0fff      	lsrs	r7, r7, #31
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_ddiv+0x5c>
 8000d4e:	e11f      	b.n	8000f90 <__aeabi_ddiv+0x29c>
 8000d50:	4ac6      	ldr	r2, [pc, #792]	; (800106c <__aeabi_ddiv+0x378>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d100      	bne.n	8000d58 <__aeabi_ddiv+0x64>
 8000d56:	e162      	b.n	800101e <__aeabi_ddiv+0x32a>
 8000d58:	49c5      	ldr	r1, [pc, #788]	; (8001070 <__aeabi_ddiv+0x37c>)
 8000d5a:	0f42      	lsrs	r2, r0, #29
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	00e4      	lsls	r4, r4, #3
 8000d60:	4659      	mov	r1, fp
 8000d62:	4314      	orrs	r4, r2
 8000d64:	2280      	movs	r2, #128	; 0x80
 8000d66:	4463      	add	r3, ip
 8000d68:	0412      	lsls	r2, r2, #16
 8000d6a:	1acb      	subs	r3, r1, r3
 8000d6c:	4314      	orrs	r4, r2
 8000d6e:	469b      	mov	fp, r3
 8000d70:	00c2      	lsls	r2, r0, #3
 8000d72:	2000      	movs	r0, #0
 8000d74:	0033      	movs	r3, r6
 8000d76:	407b      	eors	r3, r7
 8000d78:	469a      	mov	sl, r3
 8000d7a:	464b      	mov	r3, r9
 8000d7c:	2b0f      	cmp	r3, #15
 8000d7e:	d827      	bhi.n	8000dd0 <__aeabi_ddiv+0xdc>
 8000d80:	49bc      	ldr	r1, [pc, #752]	; (8001074 <__aeabi_ddiv+0x380>)
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	58cb      	ldr	r3, [r1, r3]
 8000d86:	469f      	mov	pc, r3
 8000d88:	46b2      	mov	sl, r6
 8000d8a:	9b00      	ldr	r3, [sp, #0]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d016      	beq.n	8000dbe <__aeabi_ddiv+0xca>
 8000d90:	2b03      	cmp	r3, #3
 8000d92:	d100      	bne.n	8000d96 <__aeabi_ddiv+0xa2>
 8000d94:	e28e      	b.n	80012b4 <__aeabi_ddiv+0x5c0>
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d000      	beq.n	8000d9c <__aeabi_ddiv+0xa8>
 8000d9a:	e0d9      	b.n	8000f50 <__aeabi_ddiv+0x25c>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	2400      	movs	r4, #0
 8000da0:	2500      	movs	r5, #0
 8000da2:	4652      	mov	r2, sl
 8000da4:	051b      	lsls	r3, r3, #20
 8000da6:	4323      	orrs	r3, r4
 8000da8:	07d2      	lsls	r2, r2, #31
 8000daa:	4313      	orrs	r3, r2
 8000dac:	0028      	movs	r0, r5
 8000dae:	0019      	movs	r1, r3
 8000db0:	b005      	add	sp, #20
 8000db2:	bcf0      	pop	{r4, r5, r6, r7}
 8000db4:	46bb      	mov	fp, r7
 8000db6:	46b2      	mov	sl, r6
 8000db8:	46a9      	mov	r9, r5
 8000dba:	46a0      	mov	r8, r4
 8000dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dbe:	2400      	movs	r4, #0
 8000dc0:	2500      	movs	r5, #0
 8000dc2:	4baa      	ldr	r3, [pc, #680]	; (800106c <__aeabi_ddiv+0x378>)
 8000dc4:	e7ed      	b.n	8000da2 <__aeabi_ddiv+0xae>
 8000dc6:	46ba      	mov	sl, r7
 8000dc8:	46a0      	mov	r8, r4
 8000dca:	0015      	movs	r5, r2
 8000dcc:	9000      	str	r0, [sp, #0]
 8000dce:	e7dc      	b.n	8000d8a <__aeabi_ddiv+0x96>
 8000dd0:	4544      	cmp	r4, r8
 8000dd2:	d200      	bcs.n	8000dd6 <__aeabi_ddiv+0xe2>
 8000dd4:	e1c7      	b.n	8001166 <__aeabi_ddiv+0x472>
 8000dd6:	d100      	bne.n	8000dda <__aeabi_ddiv+0xe6>
 8000dd8:	e1c2      	b.n	8001160 <__aeabi_ddiv+0x46c>
 8000dda:	2301      	movs	r3, #1
 8000ddc:	425b      	negs	r3, r3
 8000dde:	469c      	mov	ip, r3
 8000de0:	002e      	movs	r6, r5
 8000de2:	4640      	mov	r0, r8
 8000de4:	2500      	movs	r5, #0
 8000de6:	44e3      	add	fp, ip
 8000de8:	0223      	lsls	r3, r4, #8
 8000dea:	0e14      	lsrs	r4, r2, #24
 8000dec:	431c      	orrs	r4, r3
 8000dee:	0c1b      	lsrs	r3, r3, #16
 8000df0:	4699      	mov	r9, r3
 8000df2:	0423      	lsls	r3, r4, #16
 8000df4:	0c1f      	lsrs	r7, r3, #16
 8000df6:	0212      	lsls	r2, r2, #8
 8000df8:	4649      	mov	r1, r9
 8000dfa:	9200      	str	r2, [sp, #0]
 8000dfc:	9701      	str	r7, [sp, #4]
 8000dfe:	f7ff fa23 	bl	8000248 <__aeabi_uidivmod>
 8000e02:	0002      	movs	r2, r0
 8000e04:	437a      	muls	r2, r7
 8000e06:	040b      	lsls	r3, r1, #16
 8000e08:	0c31      	lsrs	r1, r6, #16
 8000e0a:	4680      	mov	r8, r0
 8000e0c:	4319      	orrs	r1, r3
 8000e0e:	428a      	cmp	r2, r1
 8000e10:	d907      	bls.n	8000e22 <__aeabi_ddiv+0x12e>
 8000e12:	2301      	movs	r3, #1
 8000e14:	425b      	negs	r3, r3
 8000e16:	469c      	mov	ip, r3
 8000e18:	1909      	adds	r1, r1, r4
 8000e1a:	44e0      	add	r8, ip
 8000e1c:	428c      	cmp	r4, r1
 8000e1e:	d800      	bhi.n	8000e22 <__aeabi_ddiv+0x12e>
 8000e20:	e207      	b.n	8001232 <__aeabi_ddiv+0x53e>
 8000e22:	1a88      	subs	r0, r1, r2
 8000e24:	4649      	mov	r1, r9
 8000e26:	f7ff fa0f 	bl	8000248 <__aeabi_uidivmod>
 8000e2a:	0409      	lsls	r1, r1, #16
 8000e2c:	468c      	mov	ip, r1
 8000e2e:	0431      	lsls	r1, r6, #16
 8000e30:	4666      	mov	r6, ip
 8000e32:	9a01      	ldr	r2, [sp, #4]
 8000e34:	0c09      	lsrs	r1, r1, #16
 8000e36:	4342      	muls	r2, r0
 8000e38:	0003      	movs	r3, r0
 8000e3a:	4331      	orrs	r1, r6
 8000e3c:	428a      	cmp	r2, r1
 8000e3e:	d904      	bls.n	8000e4a <__aeabi_ddiv+0x156>
 8000e40:	1909      	adds	r1, r1, r4
 8000e42:	3b01      	subs	r3, #1
 8000e44:	428c      	cmp	r4, r1
 8000e46:	d800      	bhi.n	8000e4a <__aeabi_ddiv+0x156>
 8000e48:	e1ed      	b.n	8001226 <__aeabi_ddiv+0x532>
 8000e4a:	1a88      	subs	r0, r1, r2
 8000e4c:	4642      	mov	r2, r8
 8000e4e:	0412      	lsls	r2, r2, #16
 8000e50:	431a      	orrs	r2, r3
 8000e52:	4690      	mov	r8, r2
 8000e54:	4641      	mov	r1, r8
 8000e56:	9b00      	ldr	r3, [sp, #0]
 8000e58:	040e      	lsls	r6, r1, #16
 8000e5a:	0c1b      	lsrs	r3, r3, #16
 8000e5c:	001f      	movs	r7, r3
 8000e5e:	9302      	str	r3, [sp, #8]
 8000e60:	9b00      	ldr	r3, [sp, #0]
 8000e62:	0c36      	lsrs	r6, r6, #16
 8000e64:	041b      	lsls	r3, r3, #16
 8000e66:	0c19      	lsrs	r1, r3, #16
 8000e68:	000b      	movs	r3, r1
 8000e6a:	4373      	muls	r3, r6
 8000e6c:	0c12      	lsrs	r2, r2, #16
 8000e6e:	437e      	muls	r6, r7
 8000e70:	9103      	str	r1, [sp, #12]
 8000e72:	4351      	muls	r1, r2
 8000e74:	437a      	muls	r2, r7
 8000e76:	0c1f      	lsrs	r7, r3, #16
 8000e78:	46bc      	mov	ip, r7
 8000e7a:	1876      	adds	r6, r6, r1
 8000e7c:	4466      	add	r6, ip
 8000e7e:	42b1      	cmp	r1, r6
 8000e80:	d903      	bls.n	8000e8a <__aeabi_ddiv+0x196>
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	0249      	lsls	r1, r1, #9
 8000e86:	468c      	mov	ip, r1
 8000e88:	4462      	add	r2, ip
 8000e8a:	0c31      	lsrs	r1, r6, #16
 8000e8c:	188a      	adds	r2, r1, r2
 8000e8e:	0431      	lsls	r1, r6, #16
 8000e90:	041e      	lsls	r6, r3, #16
 8000e92:	0c36      	lsrs	r6, r6, #16
 8000e94:	198e      	adds	r6, r1, r6
 8000e96:	4290      	cmp	r0, r2
 8000e98:	d302      	bcc.n	8000ea0 <__aeabi_ddiv+0x1ac>
 8000e9a:	d112      	bne.n	8000ec2 <__aeabi_ddiv+0x1ce>
 8000e9c:	42b5      	cmp	r5, r6
 8000e9e:	d210      	bcs.n	8000ec2 <__aeabi_ddiv+0x1ce>
 8000ea0:	4643      	mov	r3, r8
 8000ea2:	1e59      	subs	r1, r3, #1
 8000ea4:	9b00      	ldr	r3, [sp, #0]
 8000ea6:	469c      	mov	ip, r3
 8000ea8:	4465      	add	r5, ip
 8000eaa:	001f      	movs	r7, r3
 8000eac:	429d      	cmp	r5, r3
 8000eae:	419b      	sbcs	r3, r3
 8000eb0:	425b      	negs	r3, r3
 8000eb2:	191b      	adds	r3, r3, r4
 8000eb4:	18c0      	adds	r0, r0, r3
 8000eb6:	4284      	cmp	r4, r0
 8000eb8:	d200      	bcs.n	8000ebc <__aeabi_ddiv+0x1c8>
 8000eba:	e1a0      	b.n	80011fe <__aeabi_ddiv+0x50a>
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_ddiv+0x1cc>
 8000ebe:	e19b      	b.n	80011f8 <__aeabi_ddiv+0x504>
 8000ec0:	4688      	mov	r8, r1
 8000ec2:	1bae      	subs	r6, r5, r6
 8000ec4:	42b5      	cmp	r5, r6
 8000ec6:	41ad      	sbcs	r5, r5
 8000ec8:	1a80      	subs	r0, r0, r2
 8000eca:	426d      	negs	r5, r5
 8000ecc:	1b40      	subs	r0, r0, r5
 8000ece:	4284      	cmp	r4, r0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x1e0>
 8000ed2:	e1d5      	b.n	8001280 <__aeabi_ddiv+0x58c>
 8000ed4:	4649      	mov	r1, r9
 8000ed6:	f7ff f9b7 	bl	8000248 <__aeabi_uidivmod>
 8000eda:	9a01      	ldr	r2, [sp, #4]
 8000edc:	040b      	lsls	r3, r1, #16
 8000ede:	4342      	muls	r2, r0
 8000ee0:	0c31      	lsrs	r1, r6, #16
 8000ee2:	0005      	movs	r5, r0
 8000ee4:	4319      	orrs	r1, r3
 8000ee6:	428a      	cmp	r2, r1
 8000ee8:	d900      	bls.n	8000eec <__aeabi_ddiv+0x1f8>
 8000eea:	e16c      	b.n	80011c6 <__aeabi_ddiv+0x4d2>
 8000eec:	1a88      	subs	r0, r1, r2
 8000eee:	4649      	mov	r1, r9
 8000ef0:	f7ff f9aa 	bl	8000248 <__aeabi_uidivmod>
 8000ef4:	9a01      	ldr	r2, [sp, #4]
 8000ef6:	0436      	lsls	r6, r6, #16
 8000ef8:	4342      	muls	r2, r0
 8000efa:	0409      	lsls	r1, r1, #16
 8000efc:	0c36      	lsrs	r6, r6, #16
 8000efe:	0003      	movs	r3, r0
 8000f00:	430e      	orrs	r6, r1
 8000f02:	42b2      	cmp	r2, r6
 8000f04:	d900      	bls.n	8000f08 <__aeabi_ddiv+0x214>
 8000f06:	e153      	b.n	80011b0 <__aeabi_ddiv+0x4bc>
 8000f08:	9803      	ldr	r0, [sp, #12]
 8000f0a:	1ab6      	subs	r6, r6, r2
 8000f0c:	0002      	movs	r2, r0
 8000f0e:	042d      	lsls	r5, r5, #16
 8000f10:	431d      	orrs	r5, r3
 8000f12:	9f02      	ldr	r7, [sp, #8]
 8000f14:	042b      	lsls	r3, r5, #16
 8000f16:	0c1b      	lsrs	r3, r3, #16
 8000f18:	435a      	muls	r2, r3
 8000f1a:	437b      	muls	r3, r7
 8000f1c:	469c      	mov	ip, r3
 8000f1e:	0c29      	lsrs	r1, r5, #16
 8000f20:	4348      	muls	r0, r1
 8000f22:	0c13      	lsrs	r3, r2, #16
 8000f24:	4484      	add	ip, r0
 8000f26:	4463      	add	r3, ip
 8000f28:	4379      	muls	r1, r7
 8000f2a:	4298      	cmp	r0, r3
 8000f2c:	d903      	bls.n	8000f36 <__aeabi_ddiv+0x242>
 8000f2e:	2080      	movs	r0, #128	; 0x80
 8000f30:	0240      	lsls	r0, r0, #9
 8000f32:	4684      	mov	ip, r0
 8000f34:	4461      	add	r1, ip
 8000f36:	0c18      	lsrs	r0, r3, #16
 8000f38:	0412      	lsls	r2, r2, #16
 8000f3a:	041b      	lsls	r3, r3, #16
 8000f3c:	0c12      	lsrs	r2, r2, #16
 8000f3e:	1841      	adds	r1, r0, r1
 8000f40:	189b      	adds	r3, r3, r2
 8000f42:	428e      	cmp	r6, r1
 8000f44:	d200      	bcs.n	8000f48 <__aeabi_ddiv+0x254>
 8000f46:	e0ff      	b.n	8001148 <__aeabi_ddiv+0x454>
 8000f48:	d100      	bne.n	8000f4c <__aeabi_ddiv+0x258>
 8000f4a:	e0fa      	b.n	8001142 <__aeabi_ddiv+0x44e>
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	431d      	orrs	r5, r3
 8000f50:	4a49      	ldr	r2, [pc, #292]	; (8001078 <__aeabi_ddiv+0x384>)
 8000f52:	445a      	add	r2, fp
 8000f54:	2a00      	cmp	r2, #0
 8000f56:	dc00      	bgt.n	8000f5a <__aeabi_ddiv+0x266>
 8000f58:	e0aa      	b.n	80010b0 <__aeabi_ddiv+0x3bc>
 8000f5a:	076b      	lsls	r3, r5, #29
 8000f5c:	d000      	beq.n	8000f60 <__aeabi_ddiv+0x26c>
 8000f5e:	e13d      	b.n	80011dc <__aeabi_ddiv+0x4e8>
 8000f60:	08ed      	lsrs	r5, r5, #3
 8000f62:	4643      	mov	r3, r8
 8000f64:	01db      	lsls	r3, r3, #7
 8000f66:	d506      	bpl.n	8000f76 <__aeabi_ddiv+0x282>
 8000f68:	4642      	mov	r2, r8
 8000f6a:	4b44      	ldr	r3, [pc, #272]	; (800107c <__aeabi_ddiv+0x388>)
 8000f6c:	401a      	ands	r2, r3
 8000f6e:	4690      	mov	r8, r2
 8000f70:	2280      	movs	r2, #128	; 0x80
 8000f72:	00d2      	lsls	r2, r2, #3
 8000f74:	445a      	add	r2, fp
 8000f76:	4b42      	ldr	r3, [pc, #264]	; (8001080 <__aeabi_ddiv+0x38c>)
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	dd00      	ble.n	8000f7e <__aeabi_ddiv+0x28a>
 8000f7c:	e71f      	b.n	8000dbe <__aeabi_ddiv+0xca>
 8000f7e:	4643      	mov	r3, r8
 8000f80:	075b      	lsls	r3, r3, #29
 8000f82:	431d      	orrs	r5, r3
 8000f84:	4643      	mov	r3, r8
 8000f86:	0552      	lsls	r2, r2, #21
 8000f88:	025c      	lsls	r4, r3, #9
 8000f8a:	0b24      	lsrs	r4, r4, #12
 8000f8c:	0d53      	lsrs	r3, r2, #21
 8000f8e:	e708      	b.n	8000da2 <__aeabi_ddiv+0xae>
 8000f90:	4652      	mov	r2, sl
 8000f92:	4322      	orrs	r2, r4
 8000f94:	d100      	bne.n	8000f98 <__aeabi_ddiv+0x2a4>
 8000f96:	e07b      	b.n	8001090 <__aeabi_ddiv+0x39c>
 8000f98:	2c00      	cmp	r4, #0
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_ddiv+0x2aa>
 8000f9c:	e0fa      	b.n	8001194 <__aeabi_ddiv+0x4a0>
 8000f9e:	0020      	movs	r0, r4
 8000fa0:	f001 f952 	bl	8002248 <__clzsi2>
 8000fa4:	0002      	movs	r2, r0
 8000fa6:	3a0b      	subs	r2, #11
 8000fa8:	231d      	movs	r3, #29
 8000faa:	0001      	movs	r1, r0
 8000fac:	1a9b      	subs	r3, r3, r2
 8000fae:	4652      	mov	r2, sl
 8000fb0:	3908      	subs	r1, #8
 8000fb2:	40da      	lsrs	r2, r3
 8000fb4:	408c      	lsls	r4, r1
 8000fb6:	4314      	orrs	r4, r2
 8000fb8:	4652      	mov	r2, sl
 8000fba:	408a      	lsls	r2, r1
 8000fbc:	4b31      	ldr	r3, [pc, #196]	; (8001084 <__aeabi_ddiv+0x390>)
 8000fbe:	4458      	add	r0, fp
 8000fc0:	469b      	mov	fp, r3
 8000fc2:	4483      	add	fp, r0
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	e6d5      	b.n	8000d74 <__aeabi_ddiv+0x80>
 8000fc8:	464b      	mov	r3, r9
 8000fca:	4323      	orrs	r3, r4
 8000fcc:	4698      	mov	r8, r3
 8000fce:	d044      	beq.n	800105a <__aeabi_ddiv+0x366>
 8000fd0:	2c00      	cmp	r4, #0
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_ddiv+0x2e2>
 8000fd4:	e0ce      	b.n	8001174 <__aeabi_ddiv+0x480>
 8000fd6:	0020      	movs	r0, r4
 8000fd8:	f001 f936 	bl	8002248 <__clzsi2>
 8000fdc:	0001      	movs	r1, r0
 8000fde:	0002      	movs	r2, r0
 8000fe0:	390b      	subs	r1, #11
 8000fe2:	231d      	movs	r3, #29
 8000fe4:	1a5b      	subs	r3, r3, r1
 8000fe6:	4649      	mov	r1, r9
 8000fe8:	0010      	movs	r0, r2
 8000fea:	40d9      	lsrs	r1, r3
 8000fec:	3808      	subs	r0, #8
 8000fee:	4084      	lsls	r4, r0
 8000ff0:	000b      	movs	r3, r1
 8000ff2:	464d      	mov	r5, r9
 8000ff4:	4323      	orrs	r3, r4
 8000ff6:	4698      	mov	r8, r3
 8000ff8:	4085      	lsls	r5, r0
 8000ffa:	4823      	ldr	r0, [pc, #140]	; (8001088 <__aeabi_ddiv+0x394>)
 8000ffc:	1a83      	subs	r3, r0, r2
 8000ffe:	469b      	mov	fp, r3
 8001000:	2300      	movs	r3, #0
 8001002:	4699      	mov	r9, r3
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	e69a      	b.n	8000d3e <__aeabi_ddiv+0x4a>
 8001008:	464b      	mov	r3, r9
 800100a:	4323      	orrs	r3, r4
 800100c:	4698      	mov	r8, r3
 800100e:	d11d      	bne.n	800104c <__aeabi_ddiv+0x358>
 8001010:	2308      	movs	r3, #8
 8001012:	4699      	mov	r9, r3
 8001014:	3b06      	subs	r3, #6
 8001016:	2500      	movs	r5, #0
 8001018:	4683      	mov	fp, r0
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	e68f      	b.n	8000d3e <__aeabi_ddiv+0x4a>
 800101e:	4652      	mov	r2, sl
 8001020:	4322      	orrs	r2, r4
 8001022:	d109      	bne.n	8001038 <__aeabi_ddiv+0x344>
 8001024:	2302      	movs	r3, #2
 8001026:	4649      	mov	r1, r9
 8001028:	4319      	orrs	r1, r3
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <__aeabi_ddiv+0x398>)
 800102c:	4689      	mov	r9, r1
 800102e:	469c      	mov	ip, r3
 8001030:	2400      	movs	r4, #0
 8001032:	2002      	movs	r0, #2
 8001034:	44e3      	add	fp, ip
 8001036:	e69d      	b.n	8000d74 <__aeabi_ddiv+0x80>
 8001038:	2303      	movs	r3, #3
 800103a:	464a      	mov	r2, r9
 800103c:	431a      	orrs	r2, r3
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <__aeabi_ddiv+0x398>)
 8001040:	4691      	mov	r9, r2
 8001042:	469c      	mov	ip, r3
 8001044:	4652      	mov	r2, sl
 8001046:	2003      	movs	r0, #3
 8001048:	44e3      	add	fp, ip
 800104a:	e693      	b.n	8000d74 <__aeabi_ddiv+0x80>
 800104c:	230c      	movs	r3, #12
 800104e:	4699      	mov	r9, r3
 8001050:	3b09      	subs	r3, #9
 8001052:	46a0      	mov	r8, r4
 8001054:	4683      	mov	fp, r0
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	e671      	b.n	8000d3e <__aeabi_ddiv+0x4a>
 800105a:	2304      	movs	r3, #4
 800105c:	4699      	mov	r9, r3
 800105e:	2300      	movs	r3, #0
 8001060:	469b      	mov	fp, r3
 8001062:	3301      	adds	r3, #1
 8001064:	2500      	movs	r5, #0
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	e669      	b.n	8000d3e <__aeabi_ddiv+0x4a>
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	000007ff 	.word	0x000007ff
 8001070:	fffffc01 	.word	0xfffffc01
 8001074:	0800c018 	.word	0x0800c018
 8001078:	000003ff 	.word	0x000003ff
 800107c:	feffffff 	.word	0xfeffffff
 8001080:	000007fe 	.word	0x000007fe
 8001084:	000003f3 	.word	0x000003f3
 8001088:	fffffc0d 	.word	0xfffffc0d
 800108c:	fffff801 	.word	0xfffff801
 8001090:	4649      	mov	r1, r9
 8001092:	2301      	movs	r3, #1
 8001094:	4319      	orrs	r1, r3
 8001096:	4689      	mov	r9, r1
 8001098:	2400      	movs	r4, #0
 800109a:	2001      	movs	r0, #1
 800109c:	e66a      	b.n	8000d74 <__aeabi_ddiv+0x80>
 800109e:	2300      	movs	r3, #0
 80010a0:	2480      	movs	r4, #128	; 0x80
 80010a2:	469a      	mov	sl, r3
 80010a4:	2500      	movs	r5, #0
 80010a6:	4b8a      	ldr	r3, [pc, #552]	; (80012d0 <__aeabi_ddiv+0x5dc>)
 80010a8:	0324      	lsls	r4, r4, #12
 80010aa:	e67a      	b.n	8000da2 <__aeabi_ddiv+0xae>
 80010ac:	2501      	movs	r5, #1
 80010ae:	426d      	negs	r5, r5
 80010b0:	2301      	movs	r3, #1
 80010b2:	1a9b      	subs	r3, r3, r2
 80010b4:	2b38      	cmp	r3, #56	; 0x38
 80010b6:	dd00      	ble.n	80010ba <__aeabi_ddiv+0x3c6>
 80010b8:	e670      	b.n	8000d9c <__aeabi_ddiv+0xa8>
 80010ba:	2b1f      	cmp	r3, #31
 80010bc:	dc00      	bgt.n	80010c0 <__aeabi_ddiv+0x3cc>
 80010be:	e0bf      	b.n	8001240 <__aeabi_ddiv+0x54c>
 80010c0:	211f      	movs	r1, #31
 80010c2:	4249      	negs	r1, r1
 80010c4:	1a8a      	subs	r2, r1, r2
 80010c6:	4641      	mov	r1, r8
 80010c8:	40d1      	lsrs	r1, r2
 80010ca:	000a      	movs	r2, r1
 80010cc:	2b20      	cmp	r3, #32
 80010ce:	d004      	beq.n	80010da <__aeabi_ddiv+0x3e6>
 80010d0:	4641      	mov	r1, r8
 80010d2:	4b80      	ldr	r3, [pc, #512]	; (80012d4 <__aeabi_ddiv+0x5e0>)
 80010d4:	445b      	add	r3, fp
 80010d6:	4099      	lsls	r1, r3
 80010d8:	430d      	orrs	r5, r1
 80010da:	1e6b      	subs	r3, r5, #1
 80010dc:	419d      	sbcs	r5, r3
 80010de:	2307      	movs	r3, #7
 80010e0:	432a      	orrs	r2, r5
 80010e2:	001d      	movs	r5, r3
 80010e4:	2400      	movs	r4, #0
 80010e6:	4015      	ands	r5, r2
 80010e8:	4213      	tst	r3, r2
 80010ea:	d100      	bne.n	80010ee <__aeabi_ddiv+0x3fa>
 80010ec:	e0d4      	b.n	8001298 <__aeabi_ddiv+0x5a4>
 80010ee:	210f      	movs	r1, #15
 80010f0:	2300      	movs	r3, #0
 80010f2:	4011      	ands	r1, r2
 80010f4:	2904      	cmp	r1, #4
 80010f6:	d100      	bne.n	80010fa <__aeabi_ddiv+0x406>
 80010f8:	e0cb      	b.n	8001292 <__aeabi_ddiv+0x59e>
 80010fa:	1d11      	adds	r1, r2, #4
 80010fc:	4291      	cmp	r1, r2
 80010fe:	4192      	sbcs	r2, r2
 8001100:	4252      	negs	r2, r2
 8001102:	189b      	adds	r3, r3, r2
 8001104:	000a      	movs	r2, r1
 8001106:	0219      	lsls	r1, r3, #8
 8001108:	d400      	bmi.n	800110c <__aeabi_ddiv+0x418>
 800110a:	e0c2      	b.n	8001292 <__aeabi_ddiv+0x59e>
 800110c:	2301      	movs	r3, #1
 800110e:	2400      	movs	r4, #0
 8001110:	2500      	movs	r5, #0
 8001112:	e646      	b.n	8000da2 <__aeabi_ddiv+0xae>
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	4641      	mov	r1, r8
 8001118:	031b      	lsls	r3, r3, #12
 800111a:	4219      	tst	r1, r3
 800111c:	d008      	beq.n	8001130 <__aeabi_ddiv+0x43c>
 800111e:	421c      	tst	r4, r3
 8001120:	d106      	bne.n	8001130 <__aeabi_ddiv+0x43c>
 8001122:	431c      	orrs	r4, r3
 8001124:	0324      	lsls	r4, r4, #12
 8001126:	46ba      	mov	sl, r7
 8001128:	0015      	movs	r5, r2
 800112a:	4b69      	ldr	r3, [pc, #420]	; (80012d0 <__aeabi_ddiv+0x5dc>)
 800112c:	0b24      	lsrs	r4, r4, #12
 800112e:	e638      	b.n	8000da2 <__aeabi_ddiv+0xae>
 8001130:	2480      	movs	r4, #128	; 0x80
 8001132:	4643      	mov	r3, r8
 8001134:	0324      	lsls	r4, r4, #12
 8001136:	431c      	orrs	r4, r3
 8001138:	0324      	lsls	r4, r4, #12
 800113a:	46b2      	mov	sl, r6
 800113c:	4b64      	ldr	r3, [pc, #400]	; (80012d0 <__aeabi_ddiv+0x5dc>)
 800113e:	0b24      	lsrs	r4, r4, #12
 8001140:	e62f      	b.n	8000da2 <__aeabi_ddiv+0xae>
 8001142:	2b00      	cmp	r3, #0
 8001144:	d100      	bne.n	8001148 <__aeabi_ddiv+0x454>
 8001146:	e703      	b.n	8000f50 <__aeabi_ddiv+0x25c>
 8001148:	19a6      	adds	r6, r4, r6
 800114a:	1e68      	subs	r0, r5, #1
 800114c:	42a6      	cmp	r6, r4
 800114e:	d200      	bcs.n	8001152 <__aeabi_ddiv+0x45e>
 8001150:	e08d      	b.n	800126e <__aeabi_ddiv+0x57a>
 8001152:	428e      	cmp	r6, r1
 8001154:	d200      	bcs.n	8001158 <__aeabi_ddiv+0x464>
 8001156:	e0a3      	b.n	80012a0 <__aeabi_ddiv+0x5ac>
 8001158:	d100      	bne.n	800115c <__aeabi_ddiv+0x468>
 800115a:	e0b3      	b.n	80012c4 <__aeabi_ddiv+0x5d0>
 800115c:	0005      	movs	r5, r0
 800115e:	e6f5      	b.n	8000f4c <__aeabi_ddiv+0x258>
 8001160:	42aa      	cmp	r2, r5
 8001162:	d900      	bls.n	8001166 <__aeabi_ddiv+0x472>
 8001164:	e639      	b.n	8000dda <__aeabi_ddiv+0xe6>
 8001166:	4643      	mov	r3, r8
 8001168:	07de      	lsls	r6, r3, #31
 800116a:	0858      	lsrs	r0, r3, #1
 800116c:	086b      	lsrs	r3, r5, #1
 800116e:	431e      	orrs	r6, r3
 8001170:	07ed      	lsls	r5, r5, #31
 8001172:	e639      	b.n	8000de8 <__aeabi_ddiv+0xf4>
 8001174:	4648      	mov	r0, r9
 8001176:	f001 f867 	bl	8002248 <__clzsi2>
 800117a:	0001      	movs	r1, r0
 800117c:	0002      	movs	r2, r0
 800117e:	3115      	adds	r1, #21
 8001180:	3220      	adds	r2, #32
 8001182:	291c      	cmp	r1, #28
 8001184:	dc00      	bgt.n	8001188 <__aeabi_ddiv+0x494>
 8001186:	e72c      	b.n	8000fe2 <__aeabi_ddiv+0x2ee>
 8001188:	464b      	mov	r3, r9
 800118a:	3808      	subs	r0, #8
 800118c:	4083      	lsls	r3, r0
 800118e:	2500      	movs	r5, #0
 8001190:	4698      	mov	r8, r3
 8001192:	e732      	b.n	8000ffa <__aeabi_ddiv+0x306>
 8001194:	f001 f858 	bl	8002248 <__clzsi2>
 8001198:	0003      	movs	r3, r0
 800119a:	001a      	movs	r2, r3
 800119c:	3215      	adds	r2, #21
 800119e:	3020      	adds	r0, #32
 80011a0:	2a1c      	cmp	r2, #28
 80011a2:	dc00      	bgt.n	80011a6 <__aeabi_ddiv+0x4b2>
 80011a4:	e700      	b.n	8000fa8 <__aeabi_ddiv+0x2b4>
 80011a6:	4654      	mov	r4, sl
 80011a8:	3b08      	subs	r3, #8
 80011aa:	2200      	movs	r2, #0
 80011ac:	409c      	lsls	r4, r3
 80011ae:	e705      	b.n	8000fbc <__aeabi_ddiv+0x2c8>
 80011b0:	1936      	adds	r6, r6, r4
 80011b2:	3b01      	subs	r3, #1
 80011b4:	42b4      	cmp	r4, r6
 80011b6:	d900      	bls.n	80011ba <__aeabi_ddiv+0x4c6>
 80011b8:	e6a6      	b.n	8000f08 <__aeabi_ddiv+0x214>
 80011ba:	42b2      	cmp	r2, r6
 80011bc:	d800      	bhi.n	80011c0 <__aeabi_ddiv+0x4cc>
 80011be:	e6a3      	b.n	8000f08 <__aeabi_ddiv+0x214>
 80011c0:	1e83      	subs	r3, r0, #2
 80011c2:	1936      	adds	r6, r6, r4
 80011c4:	e6a0      	b.n	8000f08 <__aeabi_ddiv+0x214>
 80011c6:	1909      	adds	r1, r1, r4
 80011c8:	3d01      	subs	r5, #1
 80011ca:	428c      	cmp	r4, r1
 80011cc:	d900      	bls.n	80011d0 <__aeabi_ddiv+0x4dc>
 80011ce:	e68d      	b.n	8000eec <__aeabi_ddiv+0x1f8>
 80011d0:	428a      	cmp	r2, r1
 80011d2:	d800      	bhi.n	80011d6 <__aeabi_ddiv+0x4e2>
 80011d4:	e68a      	b.n	8000eec <__aeabi_ddiv+0x1f8>
 80011d6:	1e85      	subs	r5, r0, #2
 80011d8:	1909      	adds	r1, r1, r4
 80011da:	e687      	b.n	8000eec <__aeabi_ddiv+0x1f8>
 80011dc:	230f      	movs	r3, #15
 80011de:	402b      	ands	r3, r5
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d100      	bne.n	80011e6 <__aeabi_ddiv+0x4f2>
 80011e4:	e6bc      	b.n	8000f60 <__aeabi_ddiv+0x26c>
 80011e6:	2305      	movs	r3, #5
 80011e8:	425b      	negs	r3, r3
 80011ea:	42ab      	cmp	r3, r5
 80011ec:	419b      	sbcs	r3, r3
 80011ee:	3504      	adds	r5, #4
 80011f0:	425b      	negs	r3, r3
 80011f2:	08ed      	lsrs	r5, r5, #3
 80011f4:	4498      	add	r8, r3
 80011f6:	e6b4      	b.n	8000f62 <__aeabi_ddiv+0x26e>
 80011f8:	42af      	cmp	r7, r5
 80011fa:	d900      	bls.n	80011fe <__aeabi_ddiv+0x50a>
 80011fc:	e660      	b.n	8000ec0 <__aeabi_ddiv+0x1cc>
 80011fe:	4282      	cmp	r2, r0
 8001200:	d804      	bhi.n	800120c <__aeabi_ddiv+0x518>
 8001202:	d000      	beq.n	8001206 <__aeabi_ddiv+0x512>
 8001204:	e65c      	b.n	8000ec0 <__aeabi_ddiv+0x1cc>
 8001206:	42ae      	cmp	r6, r5
 8001208:	d800      	bhi.n	800120c <__aeabi_ddiv+0x518>
 800120a:	e659      	b.n	8000ec0 <__aeabi_ddiv+0x1cc>
 800120c:	2302      	movs	r3, #2
 800120e:	425b      	negs	r3, r3
 8001210:	469c      	mov	ip, r3
 8001212:	9b00      	ldr	r3, [sp, #0]
 8001214:	44e0      	add	r8, ip
 8001216:	469c      	mov	ip, r3
 8001218:	4465      	add	r5, ip
 800121a:	429d      	cmp	r5, r3
 800121c:	419b      	sbcs	r3, r3
 800121e:	425b      	negs	r3, r3
 8001220:	191b      	adds	r3, r3, r4
 8001222:	18c0      	adds	r0, r0, r3
 8001224:	e64d      	b.n	8000ec2 <__aeabi_ddiv+0x1ce>
 8001226:	428a      	cmp	r2, r1
 8001228:	d800      	bhi.n	800122c <__aeabi_ddiv+0x538>
 800122a:	e60e      	b.n	8000e4a <__aeabi_ddiv+0x156>
 800122c:	1e83      	subs	r3, r0, #2
 800122e:	1909      	adds	r1, r1, r4
 8001230:	e60b      	b.n	8000e4a <__aeabi_ddiv+0x156>
 8001232:	428a      	cmp	r2, r1
 8001234:	d800      	bhi.n	8001238 <__aeabi_ddiv+0x544>
 8001236:	e5f4      	b.n	8000e22 <__aeabi_ddiv+0x12e>
 8001238:	1e83      	subs	r3, r0, #2
 800123a:	4698      	mov	r8, r3
 800123c:	1909      	adds	r1, r1, r4
 800123e:	e5f0      	b.n	8000e22 <__aeabi_ddiv+0x12e>
 8001240:	4925      	ldr	r1, [pc, #148]	; (80012d8 <__aeabi_ddiv+0x5e4>)
 8001242:	0028      	movs	r0, r5
 8001244:	4459      	add	r1, fp
 8001246:	408d      	lsls	r5, r1
 8001248:	4642      	mov	r2, r8
 800124a:	408a      	lsls	r2, r1
 800124c:	1e69      	subs	r1, r5, #1
 800124e:	418d      	sbcs	r5, r1
 8001250:	4641      	mov	r1, r8
 8001252:	40d8      	lsrs	r0, r3
 8001254:	40d9      	lsrs	r1, r3
 8001256:	4302      	orrs	r2, r0
 8001258:	432a      	orrs	r2, r5
 800125a:	000b      	movs	r3, r1
 800125c:	0751      	lsls	r1, r2, #29
 800125e:	d100      	bne.n	8001262 <__aeabi_ddiv+0x56e>
 8001260:	e751      	b.n	8001106 <__aeabi_ddiv+0x412>
 8001262:	210f      	movs	r1, #15
 8001264:	4011      	ands	r1, r2
 8001266:	2904      	cmp	r1, #4
 8001268:	d000      	beq.n	800126c <__aeabi_ddiv+0x578>
 800126a:	e746      	b.n	80010fa <__aeabi_ddiv+0x406>
 800126c:	e74b      	b.n	8001106 <__aeabi_ddiv+0x412>
 800126e:	0005      	movs	r5, r0
 8001270:	428e      	cmp	r6, r1
 8001272:	d000      	beq.n	8001276 <__aeabi_ddiv+0x582>
 8001274:	e66a      	b.n	8000f4c <__aeabi_ddiv+0x258>
 8001276:	9a00      	ldr	r2, [sp, #0]
 8001278:	4293      	cmp	r3, r2
 800127a:	d000      	beq.n	800127e <__aeabi_ddiv+0x58a>
 800127c:	e666      	b.n	8000f4c <__aeabi_ddiv+0x258>
 800127e:	e667      	b.n	8000f50 <__aeabi_ddiv+0x25c>
 8001280:	4a16      	ldr	r2, [pc, #88]	; (80012dc <__aeabi_ddiv+0x5e8>)
 8001282:	445a      	add	r2, fp
 8001284:	2a00      	cmp	r2, #0
 8001286:	dc00      	bgt.n	800128a <__aeabi_ddiv+0x596>
 8001288:	e710      	b.n	80010ac <__aeabi_ddiv+0x3b8>
 800128a:	2301      	movs	r3, #1
 800128c:	2500      	movs	r5, #0
 800128e:	4498      	add	r8, r3
 8001290:	e667      	b.n	8000f62 <__aeabi_ddiv+0x26e>
 8001292:	075d      	lsls	r5, r3, #29
 8001294:	025b      	lsls	r3, r3, #9
 8001296:	0b1c      	lsrs	r4, r3, #12
 8001298:	08d2      	lsrs	r2, r2, #3
 800129a:	2300      	movs	r3, #0
 800129c:	4315      	orrs	r5, r2
 800129e:	e580      	b.n	8000da2 <__aeabi_ddiv+0xae>
 80012a0:	9800      	ldr	r0, [sp, #0]
 80012a2:	3d02      	subs	r5, #2
 80012a4:	0042      	lsls	r2, r0, #1
 80012a6:	4282      	cmp	r2, r0
 80012a8:	41bf      	sbcs	r7, r7
 80012aa:	427f      	negs	r7, r7
 80012ac:	193c      	adds	r4, r7, r4
 80012ae:	1936      	adds	r6, r6, r4
 80012b0:	9200      	str	r2, [sp, #0]
 80012b2:	e7dd      	b.n	8001270 <__aeabi_ddiv+0x57c>
 80012b4:	2480      	movs	r4, #128	; 0x80
 80012b6:	4643      	mov	r3, r8
 80012b8:	0324      	lsls	r4, r4, #12
 80012ba:	431c      	orrs	r4, r3
 80012bc:	0324      	lsls	r4, r4, #12
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <__aeabi_ddiv+0x5dc>)
 80012c0:	0b24      	lsrs	r4, r4, #12
 80012c2:	e56e      	b.n	8000da2 <__aeabi_ddiv+0xae>
 80012c4:	9a00      	ldr	r2, [sp, #0]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d3ea      	bcc.n	80012a0 <__aeabi_ddiv+0x5ac>
 80012ca:	0005      	movs	r5, r0
 80012cc:	e7d3      	b.n	8001276 <__aeabi_ddiv+0x582>
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	000007ff 	.word	0x000007ff
 80012d4:	0000043e 	.word	0x0000043e
 80012d8:	0000041e 	.word	0x0000041e
 80012dc:	000003ff 	.word	0x000003ff

080012e0 <__eqdf2>:
 80012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e2:	464e      	mov	r6, r9
 80012e4:	4645      	mov	r5, r8
 80012e6:	46de      	mov	lr, fp
 80012e8:	4657      	mov	r7, sl
 80012ea:	4690      	mov	r8, r2
 80012ec:	b5e0      	push	{r5, r6, r7, lr}
 80012ee:	0017      	movs	r7, r2
 80012f0:	031a      	lsls	r2, r3, #12
 80012f2:	0b12      	lsrs	r2, r2, #12
 80012f4:	0005      	movs	r5, r0
 80012f6:	4684      	mov	ip, r0
 80012f8:	4819      	ldr	r0, [pc, #100]	; (8001360 <__eqdf2+0x80>)
 80012fa:	030e      	lsls	r6, r1, #12
 80012fc:	004c      	lsls	r4, r1, #1
 80012fe:	4691      	mov	r9, r2
 8001300:	005a      	lsls	r2, r3, #1
 8001302:	0fdb      	lsrs	r3, r3, #31
 8001304:	469b      	mov	fp, r3
 8001306:	0b36      	lsrs	r6, r6, #12
 8001308:	0d64      	lsrs	r4, r4, #21
 800130a:	0fc9      	lsrs	r1, r1, #31
 800130c:	0d52      	lsrs	r2, r2, #21
 800130e:	4284      	cmp	r4, r0
 8001310:	d019      	beq.n	8001346 <__eqdf2+0x66>
 8001312:	4282      	cmp	r2, r0
 8001314:	d010      	beq.n	8001338 <__eqdf2+0x58>
 8001316:	2001      	movs	r0, #1
 8001318:	4294      	cmp	r4, r2
 800131a:	d10e      	bne.n	800133a <__eqdf2+0x5a>
 800131c:	454e      	cmp	r6, r9
 800131e:	d10c      	bne.n	800133a <__eqdf2+0x5a>
 8001320:	2001      	movs	r0, #1
 8001322:	45c4      	cmp	ip, r8
 8001324:	d109      	bne.n	800133a <__eqdf2+0x5a>
 8001326:	4559      	cmp	r1, fp
 8001328:	d017      	beq.n	800135a <__eqdf2+0x7a>
 800132a:	2c00      	cmp	r4, #0
 800132c:	d105      	bne.n	800133a <__eqdf2+0x5a>
 800132e:	0030      	movs	r0, r6
 8001330:	4328      	orrs	r0, r5
 8001332:	1e43      	subs	r3, r0, #1
 8001334:	4198      	sbcs	r0, r3
 8001336:	e000      	b.n	800133a <__eqdf2+0x5a>
 8001338:	2001      	movs	r0, #1
 800133a:	bcf0      	pop	{r4, r5, r6, r7}
 800133c:	46bb      	mov	fp, r7
 800133e:	46b2      	mov	sl, r6
 8001340:	46a9      	mov	r9, r5
 8001342:	46a0      	mov	r8, r4
 8001344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001346:	0033      	movs	r3, r6
 8001348:	2001      	movs	r0, #1
 800134a:	432b      	orrs	r3, r5
 800134c:	d1f5      	bne.n	800133a <__eqdf2+0x5a>
 800134e:	42a2      	cmp	r2, r4
 8001350:	d1f3      	bne.n	800133a <__eqdf2+0x5a>
 8001352:	464b      	mov	r3, r9
 8001354:	433b      	orrs	r3, r7
 8001356:	d1f0      	bne.n	800133a <__eqdf2+0x5a>
 8001358:	e7e2      	b.n	8001320 <__eqdf2+0x40>
 800135a:	2000      	movs	r0, #0
 800135c:	e7ed      	b.n	800133a <__eqdf2+0x5a>
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	000007ff 	.word	0x000007ff

08001364 <__gedf2>:
 8001364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001366:	4647      	mov	r7, r8
 8001368:	46ce      	mov	lr, r9
 800136a:	0004      	movs	r4, r0
 800136c:	0018      	movs	r0, r3
 800136e:	0016      	movs	r6, r2
 8001370:	031b      	lsls	r3, r3, #12
 8001372:	0b1b      	lsrs	r3, r3, #12
 8001374:	4d2d      	ldr	r5, [pc, #180]	; (800142c <__gedf2+0xc8>)
 8001376:	004a      	lsls	r2, r1, #1
 8001378:	4699      	mov	r9, r3
 800137a:	b580      	push	{r7, lr}
 800137c:	0043      	lsls	r3, r0, #1
 800137e:	030f      	lsls	r7, r1, #12
 8001380:	46a4      	mov	ip, r4
 8001382:	46b0      	mov	r8, r6
 8001384:	0b3f      	lsrs	r7, r7, #12
 8001386:	0d52      	lsrs	r2, r2, #21
 8001388:	0fc9      	lsrs	r1, r1, #31
 800138a:	0d5b      	lsrs	r3, r3, #21
 800138c:	0fc0      	lsrs	r0, r0, #31
 800138e:	42aa      	cmp	r2, r5
 8001390:	d021      	beq.n	80013d6 <__gedf2+0x72>
 8001392:	42ab      	cmp	r3, r5
 8001394:	d013      	beq.n	80013be <__gedf2+0x5a>
 8001396:	2a00      	cmp	r2, #0
 8001398:	d122      	bne.n	80013e0 <__gedf2+0x7c>
 800139a:	433c      	orrs	r4, r7
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <__gedf2+0x42>
 80013a0:	464d      	mov	r5, r9
 80013a2:	432e      	orrs	r6, r5
 80013a4:	d022      	beq.n	80013ec <__gedf2+0x88>
 80013a6:	2c00      	cmp	r4, #0
 80013a8:	d010      	beq.n	80013cc <__gedf2+0x68>
 80013aa:	4281      	cmp	r1, r0
 80013ac:	d022      	beq.n	80013f4 <__gedf2+0x90>
 80013ae:	2002      	movs	r0, #2
 80013b0:	3901      	subs	r1, #1
 80013b2:	4008      	ands	r0, r1
 80013b4:	3801      	subs	r0, #1
 80013b6:	bcc0      	pop	{r6, r7}
 80013b8:	46b9      	mov	r9, r7
 80013ba:	46b0      	mov	r8, r6
 80013bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013be:	464d      	mov	r5, r9
 80013c0:	432e      	orrs	r6, r5
 80013c2:	d129      	bne.n	8001418 <__gedf2+0xb4>
 80013c4:	2a00      	cmp	r2, #0
 80013c6:	d1f0      	bne.n	80013aa <__gedf2+0x46>
 80013c8:	433c      	orrs	r4, r7
 80013ca:	d1ee      	bne.n	80013aa <__gedf2+0x46>
 80013cc:	2800      	cmp	r0, #0
 80013ce:	d1f2      	bne.n	80013b6 <__gedf2+0x52>
 80013d0:	2001      	movs	r0, #1
 80013d2:	4240      	negs	r0, r0
 80013d4:	e7ef      	b.n	80013b6 <__gedf2+0x52>
 80013d6:	003d      	movs	r5, r7
 80013d8:	4325      	orrs	r5, r4
 80013da:	d11d      	bne.n	8001418 <__gedf2+0xb4>
 80013dc:	4293      	cmp	r3, r2
 80013de:	d0ee      	beq.n	80013be <__gedf2+0x5a>
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1e2      	bne.n	80013aa <__gedf2+0x46>
 80013e4:	464c      	mov	r4, r9
 80013e6:	4326      	orrs	r6, r4
 80013e8:	d1df      	bne.n	80013aa <__gedf2+0x46>
 80013ea:	e7e0      	b.n	80013ae <__gedf2+0x4a>
 80013ec:	2000      	movs	r0, #0
 80013ee:	2c00      	cmp	r4, #0
 80013f0:	d0e1      	beq.n	80013b6 <__gedf2+0x52>
 80013f2:	e7dc      	b.n	80013ae <__gedf2+0x4a>
 80013f4:	429a      	cmp	r2, r3
 80013f6:	dc0a      	bgt.n	800140e <__gedf2+0xaa>
 80013f8:	dbe8      	blt.n	80013cc <__gedf2+0x68>
 80013fa:	454f      	cmp	r7, r9
 80013fc:	d8d7      	bhi.n	80013ae <__gedf2+0x4a>
 80013fe:	d00e      	beq.n	800141e <__gedf2+0xba>
 8001400:	2000      	movs	r0, #0
 8001402:	454f      	cmp	r7, r9
 8001404:	d2d7      	bcs.n	80013b6 <__gedf2+0x52>
 8001406:	2900      	cmp	r1, #0
 8001408:	d0e2      	beq.n	80013d0 <__gedf2+0x6c>
 800140a:	0008      	movs	r0, r1
 800140c:	e7d3      	b.n	80013b6 <__gedf2+0x52>
 800140e:	4243      	negs	r3, r0
 8001410:	4158      	adcs	r0, r3
 8001412:	0040      	lsls	r0, r0, #1
 8001414:	3801      	subs	r0, #1
 8001416:	e7ce      	b.n	80013b6 <__gedf2+0x52>
 8001418:	2002      	movs	r0, #2
 800141a:	4240      	negs	r0, r0
 800141c:	e7cb      	b.n	80013b6 <__gedf2+0x52>
 800141e:	45c4      	cmp	ip, r8
 8001420:	d8c5      	bhi.n	80013ae <__gedf2+0x4a>
 8001422:	2000      	movs	r0, #0
 8001424:	45c4      	cmp	ip, r8
 8001426:	d2c6      	bcs.n	80013b6 <__gedf2+0x52>
 8001428:	e7ed      	b.n	8001406 <__gedf2+0xa2>
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	000007ff 	.word	0x000007ff

08001430 <__ledf2>:
 8001430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001432:	4647      	mov	r7, r8
 8001434:	46ce      	mov	lr, r9
 8001436:	0004      	movs	r4, r0
 8001438:	0018      	movs	r0, r3
 800143a:	0016      	movs	r6, r2
 800143c:	031b      	lsls	r3, r3, #12
 800143e:	0b1b      	lsrs	r3, r3, #12
 8001440:	4d2c      	ldr	r5, [pc, #176]	; (80014f4 <__ledf2+0xc4>)
 8001442:	004a      	lsls	r2, r1, #1
 8001444:	4699      	mov	r9, r3
 8001446:	b580      	push	{r7, lr}
 8001448:	0043      	lsls	r3, r0, #1
 800144a:	030f      	lsls	r7, r1, #12
 800144c:	46a4      	mov	ip, r4
 800144e:	46b0      	mov	r8, r6
 8001450:	0b3f      	lsrs	r7, r7, #12
 8001452:	0d52      	lsrs	r2, r2, #21
 8001454:	0fc9      	lsrs	r1, r1, #31
 8001456:	0d5b      	lsrs	r3, r3, #21
 8001458:	0fc0      	lsrs	r0, r0, #31
 800145a:	42aa      	cmp	r2, r5
 800145c:	d00d      	beq.n	800147a <__ledf2+0x4a>
 800145e:	42ab      	cmp	r3, r5
 8001460:	d010      	beq.n	8001484 <__ledf2+0x54>
 8001462:	2a00      	cmp	r2, #0
 8001464:	d127      	bne.n	80014b6 <__ledf2+0x86>
 8001466:	433c      	orrs	r4, r7
 8001468:	2b00      	cmp	r3, #0
 800146a:	d111      	bne.n	8001490 <__ledf2+0x60>
 800146c:	464d      	mov	r5, r9
 800146e:	432e      	orrs	r6, r5
 8001470:	d10e      	bne.n	8001490 <__ledf2+0x60>
 8001472:	2000      	movs	r0, #0
 8001474:	2c00      	cmp	r4, #0
 8001476:	d015      	beq.n	80014a4 <__ledf2+0x74>
 8001478:	e00e      	b.n	8001498 <__ledf2+0x68>
 800147a:	003d      	movs	r5, r7
 800147c:	4325      	orrs	r5, r4
 800147e:	d110      	bne.n	80014a2 <__ledf2+0x72>
 8001480:	4293      	cmp	r3, r2
 8001482:	d118      	bne.n	80014b6 <__ledf2+0x86>
 8001484:	464d      	mov	r5, r9
 8001486:	432e      	orrs	r6, r5
 8001488:	d10b      	bne.n	80014a2 <__ledf2+0x72>
 800148a:	2a00      	cmp	r2, #0
 800148c:	d102      	bne.n	8001494 <__ledf2+0x64>
 800148e:	433c      	orrs	r4, r7
 8001490:	2c00      	cmp	r4, #0
 8001492:	d00b      	beq.n	80014ac <__ledf2+0x7c>
 8001494:	4281      	cmp	r1, r0
 8001496:	d014      	beq.n	80014c2 <__ledf2+0x92>
 8001498:	2002      	movs	r0, #2
 800149a:	3901      	subs	r1, #1
 800149c:	4008      	ands	r0, r1
 800149e:	3801      	subs	r0, #1
 80014a0:	e000      	b.n	80014a4 <__ledf2+0x74>
 80014a2:	2002      	movs	r0, #2
 80014a4:	bcc0      	pop	{r6, r7}
 80014a6:	46b9      	mov	r9, r7
 80014a8:	46b0      	mov	r8, r6
 80014aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ac:	2800      	cmp	r0, #0
 80014ae:	d1f9      	bne.n	80014a4 <__ledf2+0x74>
 80014b0:	2001      	movs	r0, #1
 80014b2:	4240      	negs	r0, r0
 80014b4:	e7f6      	b.n	80014a4 <__ledf2+0x74>
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1ec      	bne.n	8001494 <__ledf2+0x64>
 80014ba:	464c      	mov	r4, r9
 80014bc:	4326      	orrs	r6, r4
 80014be:	d1e9      	bne.n	8001494 <__ledf2+0x64>
 80014c0:	e7ea      	b.n	8001498 <__ledf2+0x68>
 80014c2:	429a      	cmp	r2, r3
 80014c4:	dd04      	ble.n	80014d0 <__ledf2+0xa0>
 80014c6:	4243      	negs	r3, r0
 80014c8:	4158      	adcs	r0, r3
 80014ca:	0040      	lsls	r0, r0, #1
 80014cc:	3801      	subs	r0, #1
 80014ce:	e7e9      	b.n	80014a4 <__ledf2+0x74>
 80014d0:	429a      	cmp	r2, r3
 80014d2:	dbeb      	blt.n	80014ac <__ledf2+0x7c>
 80014d4:	454f      	cmp	r7, r9
 80014d6:	d8df      	bhi.n	8001498 <__ledf2+0x68>
 80014d8:	d006      	beq.n	80014e8 <__ledf2+0xb8>
 80014da:	2000      	movs	r0, #0
 80014dc:	454f      	cmp	r7, r9
 80014de:	d2e1      	bcs.n	80014a4 <__ledf2+0x74>
 80014e0:	2900      	cmp	r1, #0
 80014e2:	d0e5      	beq.n	80014b0 <__ledf2+0x80>
 80014e4:	0008      	movs	r0, r1
 80014e6:	e7dd      	b.n	80014a4 <__ledf2+0x74>
 80014e8:	45c4      	cmp	ip, r8
 80014ea:	d8d5      	bhi.n	8001498 <__ledf2+0x68>
 80014ec:	2000      	movs	r0, #0
 80014ee:	45c4      	cmp	ip, r8
 80014f0:	d2d8      	bcs.n	80014a4 <__ledf2+0x74>
 80014f2:	e7f5      	b.n	80014e0 <__ledf2+0xb0>
 80014f4:	000007ff 	.word	0x000007ff

080014f8 <__aeabi_dmul>:
 80014f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fa:	4657      	mov	r7, sl
 80014fc:	464e      	mov	r6, r9
 80014fe:	4645      	mov	r5, r8
 8001500:	46de      	mov	lr, fp
 8001502:	b5e0      	push	{r5, r6, r7, lr}
 8001504:	4698      	mov	r8, r3
 8001506:	030c      	lsls	r4, r1, #12
 8001508:	004b      	lsls	r3, r1, #1
 800150a:	0006      	movs	r6, r0
 800150c:	4692      	mov	sl, r2
 800150e:	b087      	sub	sp, #28
 8001510:	0b24      	lsrs	r4, r4, #12
 8001512:	0d5b      	lsrs	r3, r3, #21
 8001514:	0fcf      	lsrs	r7, r1, #31
 8001516:	2b00      	cmp	r3, #0
 8001518:	d100      	bne.n	800151c <__aeabi_dmul+0x24>
 800151a:	e15c      	b.n	80017d6 <__aeabi_dmul+0x2de>
 800151c:	4ad9      	ldr	r2, [pc, #868]	; (8001884 <__aeabi_dmul+0x38c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d100      	bne.n	8001524 <__aeabi_dmul+0x2c>
 8001522:	e175      	b.n	8001810 <__aeabi_dmul+0x318>
 8001524:	0f42      	lsrs	r2, r0, #29
 8001526:	00e4      	lsls	r4, r4, #3
 8001528:	4314      	orrs	r4, r2
 800152a:	2280      	movs	r2, #128	; 0x80
 800152c:	0412      	lsls	r2, r2, #16
 800152e:	4314      	orrs	r4, r2
 8001530:	4ad5      	ldr	r2, [pc, #852]	; (8001888 <__aeabi_dmul+0x390>)
 8001532:	00c5      	lsls	r5, r0, #3
 8001534:	4694      	mov	ip, r2
 8001536:	4463      	add	r3, ip
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	2300      	movs	r3, #0
 800153c:	4699      	mov	r9, r3
 800153e:	469b      	mov	fp, r3
 8001540:	4643      	mov	r3, r8
 8001542:	4642      	mov	r2, r8
 8001544:	031e      	lsls	r6, r3, #12
 8001546:	0fd2      	lsrs	r2, r2, #31
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4650      	mov	r0, sl
 800154c:	4690      	mov	r8, r2
 800154e:	0b36      	lsrs	r6, r6, #12
 8001550:	0d5b      	lsrs	r3, r3, #21
 8001552:	d100      	bne.n	8001556 <__aeabi_dmul+0x5e>
 8001554:	e120      	b.n	8001798 <__aeabi_dmul+0x2a0>
 8001556:	4acb      	ldr	r2, [pc, #812]	; (8001884 <__aeabi_dmul+0x38c>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d100      	bne.n	800155e <__aeabi_dmul+0x66>
 800155c:	e162      	b.n	8001824 <__aeabi_dmul+0x32c>
 800155e:	49ca      	ldr	r1, [pc, #808]	; (8001888 <__aeabi_dmul+0x390>)
 8001560:	0f42      	lsrs	r2, r0, #29
 8001562:	468c      	mov	ip, r1
 8001564:	9900      	ldr	r1, [sp, #0]
 8001566:	4463      	add	r3, ip
 8001568:	00f6      	lsls	r6, r6, #3
 800156a:	468c      	mov	ip, r1
 800156c:	4316      	orrs	r6, r2
 800156e:	2280      	movs	r2, #128	; 0x80
 8001570:	449c      	add	ip, r3
 8001572:	0412      	lsls	r2, r2, #16
 8001574:	4663      	mov	r3, ip
 8001576:	4316      	orrs	r6, r2
 8001578:	00c2      	lsls	r2, r0, #3
 800157a:	2000      	movs	r0, #0
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	9900      	ldr	r1, [sp, #0]
 8001580:	4643      	mov	r3, r8
 8001582:	3101      	adds	r1, #1
 8001584:	468c      	mov	ip, r1
 8001586:	4649      	mov	r1, r9
 8001588:	407b      	eors	r3, r7
 800158a:	9301      	str	r3, [sp, #4]
 800158c:	290f      	cmp	r1, #15
 800158e:	d826      	bhi.n	80015de <__aeabi_dmul+0xe6>
 8001590:	4bbe      	ldr	r3, [pc, #760]	; (800188c <__aeabi_dmul+0x394>)
 8001592:	0089      	lsls	r1, r1, #2
 8001594:	5859      	ldr	r1, [r3, r1]
 8001596:	468f      	mov	pc, r1
 8001598:	4643      	mov	r3, r8
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	0034      	movs	r4, r6
 800159e:	0015      	movs	r5, r2
 80015a0:	4683      	mov	fp, r0
 80015a2:	465b      	mov	r3, fp
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d016      	beq.n	80015d6 <__aeabi_dmul+0xde>
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	d100      	bne.n	80015ae <__aeabi_dmul+0xb6>
 80015ac:	e203      	b.n	80019b6 <__aeabi_dmul+0x4be>
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d000      	beq.n	80015b4 <__aeabi_dmul+0xbc>
 80015b2:	e0cd      	b.n	8001750 <__aeabi_dmul+0x258>
 80015b4:	2200      	movs	r2, #0
 80015b6:	2400      	movs	r4, #0
 80015b8:	2500      	movs	r5, #0
 80015ba:	9b01      	ldr	r3, [sp, #4]
 80015bc:	0512      	lsls	r2, r2, #20
 80015be:	4322      	orrs	r2, r4
 80015c0:	07db      	lsls	r3, r3, #31
 80015c2:	431a      	orrs	r2, r3
 80015c4:	0028      	movs	r0, r5
 80015c6:	0011      	movs	r1, r2
 80015c8:	b007      	add	sp, #28
 80015ca:	bcf0      	pop	{r4, r5, r6, r7}
 80015cc:	46bb      	mov	fp, r7
 80015ce:	46b2      	mov	sl, r6
 80015d0:	46a9      	mov	r9, r5
 80015d2:	46a0      	mov	r8, r4
 80015d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015d6:	2400      	movs	r4, #0
 80015d8:	2500      	movs	r5, #0
 80015da:	4aaa      	ldr	r2, [pc, #680]	; (8001884 <__aeabi_dmul+0x38c>)
 80015dc:	e7ed      	b.n	80015ba <__aeabi_dmul+0xc2>
 80015de:	0c28      	lsrs	r0, r5, #16
 80015e0:	042d      	lsls	r5, r5, #16
 80015e2:	0c2d      	lsrs	r5, r5, #16
 80015e4:	002b      	movs	r3, r5
 80015e6:	0c11      	lsrs	r1, r2, #16
 80015e8:	0412      	lsls	r2, r2, #16
 80015ea:	0c12      	lsrs	r2, r2, #16
 80015ec:	4353      	muls	r3, r2
 80015ee:	4698      	mov	r8, r3
 80015f0:	0013      	movs	r3, r2
 80015f2:	002f      	movs	r7, r5
 80015f4:	4343      	muls	r3, r0
 80015f6:	4699      	mov	r9, r3
 80015f8:	434f      	muls	r7, r1
 80015fa:	444f      	add	r7, r9
 80015fc:	46bb      	mov	fp, r7
 80015fe:	4647      	mov	r7, r8
 8001600:	000b      	movs	r3, r1
 8001602:	0c3f      	lsrs	r7, r7, #16
 8001604:	46ba      	mov	sl, r7
 8001606:	4343      	muls	r3, r0
 8001608:	44da      	add	sl, fp
 800160a:	9302      	str	r3, [sp, #8]
 800160c:	45d1      	cmp	r9, sl
 800160e:	d904      	bls.n	800161a <__aeabi_dmul+0x122>
 8001610:	2780      	movs	r7, #128	; 0x80
 8001612:	027f      	lsls	r7, r7, #9
 8001614:	46b9      	mov	r9, r7
 8001616:	444b      	add	r3, r9
 8001618:	9302      	str	r3, [sp, #8]
 800161a:	4653      	mov	r3, sl
 800161c:	0c1b      	lsrs	r3, r3, #16
 800161e:	469b      	mov	fp, r3
 8001620:	4653      	mov	r3, sl
 8001622:	041f      	lsls	r7, r3, #16
 8001624:	4643      	mov	r3, r8
 8001626:	041b      	lsls	r3, r3, #16
 8001628:	0c1b      	lsrs	r3, r3, #16
 800162a:	4698      	mov	r8, r3
 800162c:	003b      	movs	r3, r7
 800162e:	4443      	add	r3, r8
 8001630:	9304      	str	r3, [sp, #16]
 8001632:	0c33      	lsrs	r3, r6, #16
 8001634:	0436      	lsls	r6, r6, #16
 8001636:	0c36      	lsrs	r6, r6, #16
 8001638:	4698      	mov	r8, r3
 800163a:	0033      	movs	r3, r6
 800163c:	4343      	muls	r3, r0
 800163e:	4699      	mov	r9, r3
 8001640:	4643      	mov	r3, r8
 8001642:	4343      	muls	r3, r0
 8001644:	002f      	movs	r7, r5
 8001646:	469a      	mov	sl, r3
 8001648:	4643      	mov	r3, r8
 800164a:	4377      	muls	r7, r6
 800164c:	435d      	muls	r5, r3
 800164e:	0c38      	lsrs	r0, r7, #16
 8001650:	444d      	add	r5, r9
 8001652:	1945      	adds	r5, r0, r5
 8001654:	45a9      	cmp	r9, r5
 8001656:	d903      	bls.n	8001660 <__aeabi_dmul+0x168>
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	025b      	lsls	r3, r3, #9
 800165c:	4699      	mov	r9, r3
 800165e:	44ca      	add	sl, r9
 8001660:	043f      	lsls	r7, r7, #16
 8001662:	0c28      	lsrs	r0, r5, #16
 8001664:	0c3f      	lsrs	r7, r7, #16
 8001666:	042d      	lsls	r5, r5, #16
 8001668:	19ed      	adds	r5, r5, r7
 800166a:	0c27      	lsrs	r7, r4, #16
 800166c:	0424      	lsls	r4, r4, #16
 800166e:	0c24      	lsrs	r4, r4, #16
 8001670:	0003      	movs	r3, r0
 8001672:	0020      	movs	r0, r4
 8001674:	4350      	muls	r0, r2
 8001676:	437a      	muls	r2, r7
 8001678:	4691      	mov	r9, r2
 800167a:	003a      	movs	r2, r7
 800167c:	4453      	add	r3, sl
 800167e:	9305      	str	r3, [sp, #20]
 8001680:	0c03      	lsrs	r3, r0, #16
 8001682:	469a      	mov	sl, r3
 8001684:	434a      	muls	r2, r1
 8001686:	4361      	muls	r1, r4
 8001688:	4449      	add	r1, r9
 800168a:	4451      	add	r1, sl
 800168c:	44ab      	add	fp, r5
 800168e:	4589      	cmp	r9, r1
 8001690:	d903      	bls.n	800169a <__aeabi_dmul+0x1a2>
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	025b      	lsls	r3, r3, #9
 8001696:	4699      	mov	r9, r3
 8001698:	444a      	add	r2, r9
 800169a:	0400      	lsls	r0, r0, #16
 800169c:	0c0b      	lsrs	r3, r1, #16
 800169e:	0c00      	lsrs	r0, r0, #16
 80016a0:	0409      	lsls	r1, r1, #16
 80016a2:	1809      	adds	r1, r1, r0
 80016a4:	0020      	movs	r0, r4
 80016a6:	4699      	mov	r9, r3
 80016a8:	4643      	mov	r3, r8
 80016aa:	4370      	muls	r0, r6
 80016ac:	435c      	muls	r4, r3
 80016ae:	437e      	muls	r6, r7
 80016b0:	435f      	muls	r7, r3
 80016b2:	0c03      	lsrs	r3, r0, #16
 80016b4:	4698      	mov	r8, r3
 80016b6:	19a4      	adds	r4, r4, r6
 80016b8:	4444      	add	r4, r8
 80016ba:	444a      	add	r2, r9
 80016bc:	9703      	str	r7, [sp, #12]
 80016be:	42a6      	cmp	r6, r4
 80016c0:	d904      	bls.n	80016cc <__aeabi_dmul+0x1d4>
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	025b      	lsls	r3, r3, #9
 80016c6:	4698      	mov	r8, r3
 80016c8:	4447      	add	r7, r8
 80016ca:	9703      	str	r7, [sp, #12]
 80016cc:	0423      	lsls	r3, r4, #16
 80016ce:	9e02      	ldr	r6, [sp, #8]
 80016d0:	469a      	mov	sl, r3
 80016d2:	9b05      	ldr	r3, [sp, #20]
 80016d4:	445e      	add	r6, fp
 80016d6:	4698      	mov	r8, r3
 80016d8:	42ae      	cmp	r6, r5
 80016da:	41ad      	sbcs	r5, r5
 80016dc:	1876      	adds	r6, r6, r1
 80016de:	428e      	cmp	r6, r1
 80016e0:	4189      	sbcs	r1, r1
 80016e2:	0400      	lsls	r0, r0, #16
 80016e4:	0c00      	lsrs	r0, r0, #16
 80016e6:	4450      	add	r0, sl
 80016e8:	4440      	add	r0, r8
 80016ea:	426d      	negs	r5, r5
 80016ec:	1947      	adds	r7, r0, r5
 80016ee:	46b8      	mov	r8, r7
 80016f0:	4693      	mov	fp, r2
 80016f2:	4249      	negs	r1, r1
 80016f4:	4689      	mov	r9, r1
 80016f6:	44c3      	add	fp, r8
 80016f8:	44d9      	add	r9, fp
 80016fa:	4298      	cmp	r0, r3
 80016fc:	4180      	sbcs	r0, r0
 80016fe:	45a8      	cmp	r8, r5
 8001700:	41ad      	sbcs	r5, r5
 8001702:	4593      	cmp	fp, r2
 8001704:	4192      	sbcs	r2, r2
 8001706:	4589      	cmp	r9, r1
 8001708:	4189      	sbcs	r1, r1
 800170a:	426d      	negs	r5, r5
 800170c:	4240      	negs	r0, r0
 800170e:	4328      	orrs	r0, r5
 8001710:	0c24      	lsrs	r4, r4, #16
 8001712:	4252      	negs	r2, r2
 8001714:	4249      	negs	r1, r1
 8001716:	430a      	orrs	r2, r1
 8001718:	9b03      	ldr	r3, [sp, #12]
 800171a:	1900      	adds	r0, r0, r4
 800171c:	1880      	adds	r0, r0, r2
 800171e:	18c7      	adds	r7, r0, r3
 8001720:	464b      	mov	r3, r9
 8001722:	0ddc      	lsrs	r4, r3, #23
 8001724:	9b04      	ldr	r3, [sp, #16]
 8001726:	0275      	lsls	r5, r6, #9
 8001728:	431d      	orrs	r5, r3
 800172a:	1e6a      	subs	r2, r5, #1
 800172c:	4195      	sbcs	r5, r2
 800172e:	464b      	mov	r3, r9
 8001730:	0df6      	lsrs	r6, r6, #23
 8001732:	027f      	lsls	r7, r7, #9
 8001734:	4335      	orrs	r5, r6
 8001736:	025a      	lsls	r2, r3, #9
 8001738:	433c      	orrs	r4, r7
 800173a:	4315      	orrs	r5, r2
 800173c:	01fb      	lsls	r3, r7, #7
 800173e:	d400      	bmi.n	8001742 <__aeabi_dmul+0x24a>
 8001740:	e11c      	b.n	800197c <__aeabi_dmul+0x484>
 8001742:	2101      	movs	r1, #1
 8001744:	086a      	lsrs	r2, r5, #1
 8001746:	400d      	ands	r5, r1
 8001748:	4315      	orrs	r5, r2
 800174a:	07e2      	lsls	r2, r4, #31
 800174c:	4315      	orrs	r5, r2
 800174e:	0864      	lsrs	r4, r4, #1
 8001750:	494f      	ldr	r1, [pc, #316]	; (8001890 <__aeabi_dmul+0x398>)
 8001752:	4461      	add	r1, ip
 8001754:	2900      	cmp	r1, #0
 8001756:	dc00      	bgt.n	800175a <__aeabi_dmul+0x262>
 8001758:	e0b0      	b.n	80018bc <__aeabi_dmul+0x3c4>
 800175a:	076b      	lsls	r3, r5, #29
 800175c:	d009      	beq.n	8001772 <__aeabi_dmul+0x27a>
 800175e:	220f      	movs	r2, #15
 8001760:	402a      	ands	r2, r5
 8001762:	2a04      	cmp	r2, #4
 8001764:	d005      	beq.n	8001772 <__aeabi_dmul+0x27a>
 8001766:	1d2a      	adds	r2, r5, #4
 8001768:	42aa      	cmp	r2, r5
 800176a:	41ad      	sbcs	r5, r5
 800176c:	426d      	negs	r5, r5
 800176e:	1964      	adds	r4, r4, r5
 8001770:	0015      	movs	r5, r2
 8001772:	01e3      	lsls	r3, r4, #7
 8001774:	d504      	bpl.n	8001780 <__aeabi_dmul+0x288>
 8001776:	2180      	movs	r1, #128	; 0x80
 8001778:	4a46      	ldr	r2, [pc, #280]	; (8001894 <__aeabi_dmul+0x39c>)
 800177a:	00c9      	lsls	r1, r1, #3
 800177c:	4014      	ands	r4, r2
 800177e:	4461      	add	r1, ip
 8001780:	4a45      	ldr	r2, [pc, #276]	; (8001898 <__aeabi_dmul+0x3a0>)
 8001782:	4291      	cmp	r1, r2
 8001784:	dd00      	ble.n	8001788 <__aeabi_dmul+0x290>
 8001786:	e726      	b.n	80015d6 <__aeabi_dmul+0xde>
 8001788:	0762      	lsls	r2, r4, #29
 800178a:	08ed      	lsrs	r5, r5, #3
 800178c:	0264      	lsls	r4, r4, #9
 800178e:	0549      	lsls	r1, r1, #21
 8001790:	4315      	orrs	r5, r2
 8001792:	0b24      	lsrs	r4, r4, #12
 8001794:	0d4a      	lsrs	r2, r1, #21
 8001796:	e710      	b.n	80015ba <__aeabi_dmul+0xc2>
 8001798:	4652      	mov	r2, sl
 800179a:	4332      	orrs	r2, r6
 800179c:	d100      	bne.n	80017a0 <__aeabi_dmul+0x2a8>
 800179e:	e07f      	b.n	80018a0 <__aeabi_dmul+0x3a8>
 80017a0:	2e00      	cmp	r6, #0
 80017a2:	d100      	bne.n	80017a6 <__aeabi_dmul+0x2ae>
 80017a4:	e0dc      	b.n	8001960 <__aeabi_dmul+0x468>
 80017a6:	0030      	movs	r0, r6
 80017a8:	f000 fd4e 	bl	8002248 <__clzsi2>
 80017ac:	0002      	movs	r2, r0
 80017ae:	3a0b      	subs	r2, #11
 80017b0:	231d      	movs	r3, #29
 80017b2:	0001      	movs	r1, r0
 80017b4:	1a9b      	subs	r3, r3, r2
 80017b6:	4652      	mov	r2, sl
 80017b8:	3908      	subs	r1, #8
 80017ba:	40da      	lsrs	r2, r3
 80017bc:	408e      	lsls	r6, r1
 80017be:	4316      	orrs	r6, r2
 80017c0:	4652      	mov	r2, sl
 80017c2:	408a      	lsls	r2, r1
 80017c4:	9b00      	ldr	r3, [sp, #0]
 80017c6:	4935      	ldr	r1, [pc, #212]	; (800189c <__aeabi_dmul+0x3a4>)
 80017c8:	1a18      	subs	r0, r3, r0
 80017ca:	0003      	movs	r3, r0
 80017cc:	468c      	mov	ip, r1
 80017ce:	4463      	add	r3, ip
 80017d0:	2000      	movs	r0, #0
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	e6d3      	b.n	800157e <__aeabi_dmul+0x86>
 80017d6:	0025      	movs	r5, r4
 80017d8:	4305      	orrs	r5, r0
 80017da:	d04a      	beq.n	8001872 <__aeabi_dmul+0x37a>
 80017dc:	2c00      	cmp	r4, #0
 80017de:	d100      	bne.n	80017e2 <__aeabi_dmul+0x2ea>
 80017e0:	e0b0      	b.n	8001944 <__aeabi_dmul+0x44c>
 80017e2:	0020      	movs	r0, r4
 80017e4:	f000 fd30 	bl	8002248 <__clzsi2>
 80017e8:	0001      	movs	r1, r0
 80017ea:	0002      	movs	r2, r0
 80017ec:	390b      	subs	r1, #11
 80017ee:	231d      	movs	r3, #29
 80017f0:	0010      	movs	r0, r2
 80017f2:	1a5b      	subs	r3, r3, r1
 80017f4:	0031      	movs	r1, r6
 80017f6:	0035      	movs	r5, r6
 80017f8:	3808      	subs	r0, #8
 80017fa:	4084      	lsls	r4, r0
 80017fc:	40d9      	lsrs	r1, r3
 80017fe:	4085      	lsls	r5, r0
 8001800:	430c      	orrs	r4, r1
 8001802:	4826      	ldr	r0, [pc, #152]	; (800189c <__aeabi_dmul+0x3a4>)
 8001804:	1a83      	subs	r3, r0, r2
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2300      	movs	r3, #0
 800180a:	4699      	mov	r9, r3
 800180c:	469b      	mov	fp, r3
 800180e:	e697      	b.n	8001540 <__aeabi_dmul+0x48>
 8001810:	0005      	movs	r5, r0
 8001812:	4325      	orrs	r5, r4
 8001814:	d126      	bne.n	8001864 <__aeabi_dmul+0x36c>
 8001816:	2208      	movs	r2, #8
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	2302      	movs	r3, #2
 800181c:	2400      	movs	r4, #0
 800181e:	4691      	mov	r9, r2
 8001820:	469b      	mov	fp, r3
 8001822:	e68d      	b.n	8001540 <__aeabi_dmul+0x48>
 8001824:	4652      	mov	r2, sl
 8001826:	9b00      	ldr	r3, [sp, #0]
 8001828:	4332      	orrs	r2, r6
 800182a:	d110      	bne.n	800184e <__aeabi_dmul+0x356>
 800182c:	4915      	ldr	r1, [pc, #84]	; (8001884 <__aeabi_dmul+0x38c>)
 800182e:	2600      	movs	r6, #0
 8001830:	468c      	mov	ip, r1
 8001832:	4463      	add	r3, ip
 8001834:	4649      	mov	r1, r9
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2302      	movs	r3, #2
 800183a:	4319      	orrs	r1, r3
 800183c:	4689      	mov	r9, r1
 800183e:	2002      	movs	r0, #2
 8001840:	e69d      	b.n	800157e <__aeabi_dmul+0x86>
 8001842:	465b      	mov	r3, fp
 8001844:	9701      	str	r7, [sp, #4]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d000      	beq.n	800184c <__aeabi_dmul+0x354>
 800184a:	e6ad      	b.n	80015a8 <__aeabi_dmul+0xb0>
 800184c:	e6c3      	b.n	80015d6 <__aeabi_dmul+0xde>
 800184e:	4a0d      	ldr	r2, [pc, #52]	; (8001884 <__aeabi_dmul+0x38c>)
 8001850:	2003      	movs	r0, #3
 8001852:	4694      	mov	ip, r2
 8001854:	4463      	add	r3, ip
 8001856:	464a      	mov	r2, r9
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	2303      	movs	r3, #3
 800185c:	431a      	orrs	r2, r3
 800185e:	4691      	mov	r9, r2
 8001860:	4652      	mov	r2, sl
 8001862:	e68c      	b.n	800157e <__aeabi_dmul+0x86>
 8001864:	220c      	movs	r2, #12
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2303      	movs	r3, #3
 800186a:	0005      	movs	r5, r0
 800186c:	4691      	mov	r9, r2
 800186e:	469b      	mov	fp, r3
 8001870:	e666      	b.n	8001540 <__aeabi_dmul+0x48>
 8001872:	2304      	movs	r3, #4
 8001874:	4699      	mov	r9, r3
 8001876:	2300      	movs	r3, #0
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	3301      	adds	r3, #1
 800187c:	2400      	movs	r4, #0
 800187e:	469b      	mov	fp, r3
 8001880:	e65e      	b.n	8001540 <__aeabi_dmul+0x48>
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	000007ff 	.word	0x000007ff
 8001888:	fffffc01 	.word	0xfffffc01
 800188c:	0800c058 	.word	0x0800c058
 8001890:	000003ff 	.word	0x000003ff
 8001894:	feffffff 	.word	0xfeffffff
 8001898:	000007fe 	.word	0x000007fe
 800189c:	fffffc0d 	.word	0xfffffc0d
 80018a0:	4649      	mov	r1, r9
 80018a2:	2301      	movs	r3, #1
 80018a4:	4319      	orrs	r1, r3
 80018a6:	4689      	mov	r9, r1
 80018a8:	2600      	movs	r6, #0
 80018aa:	2001      	movs	r0, #1
 80018ac:	e667      	b.n	800157e <__aeabi_dmul+0x86>
 80018ae:	2300      	movs	r3, #0
 80018b0:	2480      	movs	r4, #128	; 0x80
 80018b2:	2500      	movs	r5, #0
 80018b4:	4a43      	ldr	r2, [pc, #268]	; (80019c4 <__aeabi_dmul+0x4cc>)
 80018b6:	9301      	str	r3, [sp, #4]
 80018b8:	0324      	lsls	r4, r4, #12
 80018ba:	e67e      	b.n	80015ba <__aeabi_dmul+0xc2>
 80018bc:	2001      	movs	r0, #1
 80018be:	1a40      	subs	r0, r0, r1
 80018c0:	2838      	cmp	r0, #56	; 0x38
 80018c2:	dd00      	ble.n	80018c6 <__aeabi_dmul+0x3ce>
 80018c4:	e676      	b.n	80015b4 <__aeabi_dmul+0xbc>
 80018c6:	281f      	cmp	r0, #31
 80018c8:	dd5b      	ble.n	8001982 <__aeabi_dmul+0x48a>
 80018ca:	221f      	movs	r2, #31
 80018cc:	0023      	movs	r3, r4
 80018ce:	4252      	negs	r2, r2
 80018d0:	1a51      	subs	r1, r2, r1
 80018d2:	40cb      	lsrs	r3, r1
 80018d4:	0019      	movs	r1, r3
 80018d6:	2820      	cmp	r0, #32
 80018d8:	d003      	beq.n	80018e2 <__aeabi_dmul+0x3ea>
 80018da:	4a3b      	ldr	r2, [pc, #236]	; (80019c8 <__aeabi_dmul+0x4d0>)
 80018dc:	4462      	add	r2, ip
 80018de:	4094      	lsls	r4, r2
 80018e0:	4325      	orrs	r5, r4
 80018e2:	1e6a      	subs	r2, r5, #1
 80018e4:	4195      	sbcs	r5, r2
 80018e6:	002a      	movs	r2, r5
 80018e8:	430a      	orrs	r2, r1
 80018ea:	2107      	movs	r1, #7
 80018ec:	000d      	movs	r5, r1
 80018ee:	2400      	movs	r4, #0
 80018f0:	4015      	ands	r5, r2
 80018f2:	4211      	tst	r1, r2
 80018f4:	d05b      	beq.n	80019ae <__aeabi_dmul+0x4b6>
 80018f6:	210f      	movs	r1, #15
 80018f8:	2400      	movs	r4, #0
 80018fa:	4011      	ands	r1, r2
 80018fc:	2904      	cmp	r1, #4
 80018fe:	d053      	beq.n	80019a8 <__aeabi_dmul+0x4b0>
 8001900:	1d11      	adds	r1, r2, #4
 8001902:	4291      	cmp	r1, r2
 8001904:	4192      	sbcs	r2, r2
 8001906:	4252      	negs	r2, r2
 8001908:	18a4      	adds	r4, r4, r2
 800190a:	000a      	movs	r2, r1
 800190c:	0223      	lsls	r3, r4, #8
 800190e:	d54b      	bpl.n	80019a8 <__aeabi_dmul+0x4b0>
 8001910:	2201      	movs	r2, #1
 8001912:	2400      	movs	r4, #0
 8001914:	2500      	movs	r5, #0
 8001916:	e650      	b.n	80015ba <__aeabi_dmul+0xc2>
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	031b      	lsls	r3, r3, #12
 800191c:	421c      	tst	r4, r3
 800191e:	d009      	beq.n	8001934 <__aeabi_dmul+0x43c>
 8001920:	421e      	tst	r6, r3
 8001922:	d107      	bne.n	8001934 <__aeabi_dmul+0x43c>
 8001924:	4333      	orrs	r3, r6
 8001926:	031c      	lsls	r4, r3, #12
 8001928:	4643      	mov	r3, r8
 800192a:	0015      	movs	r5, r2
 800192c:	0b24      	lsrs	r4, r4, #12
 800192e:	4a25      	ldr	r2, [pc, #148]	; (80019c4 <__aeabi_dmul+0x4cc>)
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	e642      	b.n	80015ba <__aeabi_dmul+0xc2>
 8001934:	2280      	movs	r2, #128	; 0x80
 8001936:	0312      	lsls	r2, r2, #12
 8001938:	4314      	orrs	r4, r2
 800193a:	0324      	lsls	r4, r4, #12
 800193c:	4a21      	ldr	r2, [pc, #132]	; (80019c4 <__aeabi_dmul+0x4cc>)
 800193e:	0b24      	lsrs	r4, r4, #12
 8001940:	9701      	str	r7, [sp, #4]
 8001942:	e63a      	b.n	80015ba <__aeabi_dmul+0xc2>
 8001944:	f000 fc80 	bl	8002248 <__clzsi2>
 8001948:	0001      	movs	r1, r0
 800194a:	0002      	movs	r2, r0
 800194c:	3115      	adds	r1, #21
 800194e:	3220      	adds	r2, #32
 8001950:	291c      	cmp	r1, #28
 8001952:	dc00      	bgt.n	8001956 <__aeabi_dmul+0x45e>
 8001954:	e74b      	b.n	80017ee <__aeabi_dmul+0x2f6>
 8001956:	0034      	movs	r4, r6
 8001958:	3808      	subs	r0, #8
 800195a:	2500      	movs	r5, #0
 800195c:	4084      	lsls	r4, r0
 800195e:	e750      	b.n	8001802 <__aeabi_dmul+0x30a>
 8001960:	f000 fc72 	bl	8002248 <__clzsi2>
 8001964:	0003      	movs	r3, r0
 8001966:	001a      	movs	r2, r3
 8001968:	3215      	adds	r2, #21
 800196a:	3020      	adds	r0, #32
 800196c:	2a1c      	cmp	r2, #28
 800196e:	dc00      	bgt.n	8001972 <__aeabi_dmul+0x47a>
 8001970:	e71e      	b.n	80017b0 <__aeabi_dmul+0x2b8>
 8001972:	4656      	mov	r6, sl
 8001974:	3b08      	subs	r3, #8
 8001976:	2200      	movs	r2, #0
 8001978:	409e      	lsls	r6, r3
 800197a:	e723      	b.n	80017c4 <__aeabi_dmul+0x2cc>
 800197c:	9b00      	ldr	r3, [sp, #0]
 800197e:	469c      	mov	ip, r3
 8001980:	e6e6      	b.n	8001750 <__aeabi_dmul+0x258>
 8001982:	4912      	ldr	r1, [pc, #72]	; (80019cc <__aeabi_dmul+0x4d4>)
 8001984:	0022      	movs	r2, r4
 8001986:	4461      	add	r1, ip
 8001988:	002e      	movs	r6, r5
 800198a:	408d      	lsls	r5, r1
 800198c:	408a      	lsls	r2, r1
 800198e:	40c6      	lsrs	r6, r0
 8001990:	1e69      	subs	r1, r5, #1
 8001992:	418d      	sbcs	r5, r1
 8001994:	4332      	orrs	r2, r6
 8001996:	432a      	orrs	r2, r5
 8001998:	40c4      	lsrs	r4, r0
 800199a:	0753      	lsls	r3, r2, #29
 800199c:	d0b6      	beq.n	800190c <__aeabi_dmul+0x414>
 800199e:	210f      	movs	r1, #15
 80019a0:	4011      	ands	r1, r2
 80019a2:	2904      	cmp	r1, #4
 80019a4:	d1ac      	bne.n	8001900 <__aeabi_dmul+0x408>
 80019a6:	e7b1      	b.n	800190c <__aeabi_dmul+0x414>
 80019a8:	0765      	lsls	r5, r4, #29
 80019aa:	0264      	lsls	r4, r4, #9
 80019ac:	0b24      	lsrs	r4, r4, #12
 80019ae:	08d2      	lsrs	r2, r2, #3
 80019b0:	4315      	orrs	r5, r2
 80019b2:	2200      	movs	r2, #0
 80019b4:	e601      	b.n	80015ba <__aeabi_dmul+0xc2>
 80019b6:	2280      	movs	r2, #128	; 0x80
 80019b8:	0312      	lsls	r2, r2, #12
 80019ba:	4314      	orrs	r4, r2
 80019bc:	0324      	lsls	r4, r4, #12
 80019be:	4a01      	ldr	r2, [pc, #4]	; (80019c4 <__aeabi_dmul+0x4cc>)
 80019c0:	0b24      	lsrs	r4, r4, #12
 80019c2:	e5fa      	b.n	80015ba <__aeabi_dmul+0xc2>
 80019c4:	000007ff 	.word	0x000007ff
 80019c8:	0000043e 	.word	0x0000043e
 80019cc:	0000041e 	.word	0x0000041e

080019d0 <__aeabi_dsub>:
 80019d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019d2:	4657      	mov	r7, sl
 80019d4:	464e      	mov	r6, r9
 80019d6:	4645      	mov	r5, r8
 80019d8:	46de      	mov	lr, fp
 80019da:	b5e0      	push	{r5, r6, r7, lr}
 80019dc:	001e      	movs	r6, r3
 80019de:	0017      	movs	r7, r2
 80019e0:	004a      	lsls	r2, r1, #1
 80019e2:	030b      	lsls	r3, r1, #12
 80019e4:	0d52      	lsrs	r2, r2, #21
 80019e6:	0a5b      	lsrs	r3, r3, #9
 80019e8:	4690      	mov	r8, r2
 80019ea:	0f42      	lsrs	r2, r0, #29
 80019ec:	431a      	orrs	r2, r3
 80019ee:	0fcd      	lsrs	r5, r1, #31
 80019f0:	4ccd      	ldr	r4, [pc, #820]	; (8001d28 <__aeabi_dsub+0x358>)
 80019f2:	0331      	lsls	r1, r6, #12
 80019f4:	00c3      	lsls	r3, r0, #3
 80019f6:	4694      	mov	ip, r2
 80019f8:	0070      	lsls	r0, r6, #1
 80019fa:	0f7a      	lsrs	r2, r7, #29
 80019fc:	0a49      	lsrs	r1, r1, #9
 80019fe:	00ff      	lsls	r7, r7, #3
 8001a00:	469a      	mov	sl, r3
 8001a02:	46b9      	mov	r9, r7
 8001a04:	0d40      	lsrs	r0, r0, #21
 8001a06:	0ff6      	lsrs	r6, r6, #31
 8001a08:	4311      	orrs	r1, r2
 8001a0a:	42a0      	cmp	r0, r4
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dsub+0x40>
 8001a0e:	e0b1      	b.n	8001b74 <__aeabi_dsub+0x1a4>
 8001a10:	2201      	movs	r2, #1
 8001a12:	4056      	eors	r6, r2
 8001a14:	46b3      	mov	fp, r6
 8001a16:	42b5      	cmp	r5, r6
 8001a18:	d100      	bne.n	8001a1c <__aeabi_dsub+0x4c>
 8001a1a:	e088      	b.n	8001b2e <__aeabi_dsub+0x15e>
 8001a1c:	4642      	mov	r2, r8
 8001a1e:	1a12      	subs	r2, r2, r0
 8001a20:	2a00      	cmp	r2, #0
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dsub+0x56>
 8001a24:	e0ae      	b.n	8001b84 <__aeabi_dsub+0x1b4>
 8001a26:	2800      	cmp	r0, #0
 8001a28:	d100      	bne.n	8001a2c <__aeabi_dsub+0x5c>
 8001a2a:	e0c1      	b.n	8001bb0 <__aeabi_dsub+0x1e0>
 8001a2c:	48be      	ldr	r0, [pc, #760]	; (8001d28 <__aeabi_dsub+0x358>)
 8001a2e:	4580      	cmp	r8, r0
 8001a30:	d100      	bne.n	8001a34 <__aeabi_dsub+0x64>
 8001a32:	e151      	b.n	8001cd8 <__aeabi_dsub+0x308>
 8001a34:	2080      	movs	r0, #128	; 0x80
 8001a36:	0400      	lsls	r0, r0, #16
 8001a38:	4301      	orrs	r1, r0
 8001a3a:	2a38      	cmp	r2, #56	; 0x38
 8001a3c:	dd00      	ble.n	8001a40 <__aeabi_dsub+0x70>
 8001a3e:	e17b      	b.n	8001d38 <__aeabi_dsub+0x368>
 8001a40:	2a1f      	cmp	r2, #31
 8001a42:	dd00      	ble.n	8001a46 <__aeabi_dsub+0x76>
 8001a44:	e1ee      	b.n	8001e24 <__aeabi_dsub+0x454>
 8001a46:	2020      	movs	r0, #32
 8001a48:	003e      	movs	r6, r7
 8001a4a:	1a80      	subs	r0, r0, r2
 8001a4c:	000c      	movs	r4, r1
 8001a4e:	40d6      	lsrs	r6, r2
 8001a50:	40d1      	lsrs	r1, r2
 8001a52:	4087      	lsls	r7, r0
 8001a54:	4662      	mov	r2, ip
 8001a56:	4084      	lsls	r4, r0
 8001a58:	1a52      	subs	r2, r2, r1
 8001a5a:	1e78      	subs	r0, r7, #1
 8001a5c:	4187      	sbcs	r7, r0
 8001a5e:	4694      	mov	ip, r2
 8001a60:	4334      	orrs	r4, r6
 8001a62:	4327      	orrs	r7, r4
 8001a64:	1bdc      	subs	r4, r3, r7
 8001a66:	42a3      	cmp	r3, r4
 8001a68:	419b      	sbcs	r3, r3
 8001a6a:	4662      	mov	r2, ip
 8001a6c:	425b      	negs	r3, r3
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	4699      	mov	r9, r3
 8001a72:	464b      	mov	r3, r9
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	d400      	bmi.n	8001a7a <__aeabi_dsub+0xaa>
 8001a78:	e118      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8001a7a:	464b      	mov	r3, r9
 8001a7c:	0258      	lsls	r0, r3, #9
 8001a7e:	0a43      	lsrs	r3, r0, #9
 8001a80:	4699      	mov	r9, r3
 8001a82:	464b      	mov	r3, r9
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d100      	bne.n	8001a8a <__aeabi_dsub+0xba>
 8001a88:	e137      	b.n	8001cfa <__aeabi_dsub+0x32a>
 8001a8a:	4648      	mov	r0, r9
 8001a8c:	f000 fbdc 	bl	8002248 <__clzsi2>
 8001a90:	0001      	movs	r1, r0
 8001a92:	3908      	subs	r1, #8
 8001a94:	2320      	movs	r3, #32
 8001a96:	0022      	movs	r2, r4
 8001a98:	4648      	mov	r0, r9
 8001a9a:	1a5b      	subs	r3, r3, r1
 8001a9c:	40da      	lsrs	r2, r3
 8001a9e:	4088      	lsls	r0, r1
 8001aa0:	408c      	lsls	r4, r1
 8001aa2:	4643      	mov	r3, r8
 8001aa4:	4310      	orrs	r0, r2
 8001aa6:	4588      	cmp	r8, r1
 8001aa8:	dd00      	ble.n	8001aac <__aeabi_dsub+0xdc>
 8001aaa:	e136      	b.n	8001d1a <__aeabi_dsub+0x34a>
 8001aac:	1ac9      	subs	r1, r1, r3
 8001aae:	1c4b      	adds	r3, r1, #1
 8001ab0:	2b1f      	cmp	r3, #31
 8001ab2:	dd00      	ble.n	8001ab6 <__aeabi_dsub+0xe6>
 8001ab4:	e0ea      	b.n	8001c8c <__aeabi_dsub+0x2bc>
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	0026      	movs	r6, r4
 8001aba:	1ad2      	subs	r2, r2, r3
 8001abc:	0001      	movs	r1, r0
 8001abe:	4094      	lsls	r4, r2
 8001ac0:	40de      	lsrs	r6, r3
 8001ac2:	40d8      	lsrs	r0, r3
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	4091      	lsls	r1, r2
 8001ac8:	1e62      	subs	r2, r4, #1
 8001aca:	4194      	sbcs	r4, r2
 8001acc:	4681      	mov	r9, r0
 8001ace:	4698      	mov	r8, r3
 8001ad0:	4331      	orrs	r1, r6
 8001ad2:	430c      	orrs	r4, r1
 8001ad4:	0763      	lsls	r3, r4, #29
 8001ad6:	d009      	beq.n	8001aec <__aeabi_dsub+0x11c>
 8001ad8:	230f      	movs	r3, #15
 8001ada:	4023      	ands	r3, r4
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d005      	beq.n	8001aec <__aeabi_dsub+0x11c>
 8001ae0:	1d23      	adds	r3, r4, #4
 8001ae2:	42a3      	cmp	r3, r4
 8001ae4:	41a4      	sbcs	r4, r4
 8001ae6:	4264      	negs	r4, r4
 8001ae8:	44a1      	add	r9, r4
 8001aea:	001c      	movs	r4, r3
 8001aec:	464b      	mov	r3, r9
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	d400      	bmi.n	8001af4 <__aeabi_dsub+0x124>
 8001af2:	e0de      	b.n	8001cb2 <__aeabi_dsub+0x2e2>
 8001af4:	4641      	mov	r1, r8
 8001af6:	4b8c      	ldr	r3, [pc, #560]	; (8001d28 <__aeabi_dsub+0x358>)
 8001af8:	3101      	adds	r1, #1
 8001afa:	4299      	cmp	r1, r3
 8001afc:	d100      	bne.n	8001b00 <__aeabi_dsub+0x130>
 8001afe:	e0e7      	b.n	8001cd0 <__aeabi_dsub+0x300>
 8001b00:	464b      	mov	r3, r9
 8001b02:	488a      	ldr	r0, [pc, #552]	; (8001d2c <__aeabi_dsub+0x35c>)
 8001b04:	08e4      	lsrs	r4, r4, #3
 8001b06:	4003      	ands	r3, r0
 8001b08:	0018      	movs	r0, r3
 8001b0a:	0549      	lsls	r1, r1, #21
 8001b0c:	075b      	lsls	r3, r3, #29
 8001b0e:	0240      	lsls	r0, r0, #9
 8001b10:	4323      	orrs	r3, r4
 8001b12:	0d4a      	lsrs	r2, r1, #21
 8001b14:	0b04      	lsrs	r4, r0, #12
 8001b16:	0512      	lsls	r2, r2, #20
 8001b18:	07ed      	lsls	r5, r5, #31
 8001b1a:	4322      	orrs	r2, r4
 8001b1c:	432a      	orrs	r2, r5
 8001b1e:	0018      	movs	r0, r3
 8001b20:	0011      	movs	r1, r2
 8001b22:	bcf0      	pop	{r4, r5, r6, r7}
 8001b24:	46bb      	mov	fp, r7
 8001b26:	46b2      	mov	sl, r6
 8001b28:	46a9      	mov	r9, r5
 8001b2a:	46a0      	mov	r8, r4
 8001b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b2e:	4642      	mov	r2, r8
 8001b30:	1a12      	subs	r2, r2, r0
 8001b32:	2a00      	cmp	r2, #0
 8001b34:	dd52      	ble.n	8001bdc <__aeabi_dsub+0x20c>
 8001b36:	2800      	cmp	r0, #0
 8001b38:	d100      	bne.n	8001b3c <__aeabi_dsub+0x16c>
 8001b3a:	e09c      	b.n	8001c76 <__aeabi_dsub+0x2a6>
 8001b3c:	45a0      	cmp	r8, r4
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_dsub+0x172>
 8001b40:	e0ca      	b.n	8001cd8 <__aeabi_dsub+0x308>
 8001b42:	2080      	movs	r0, #128	; 0x80
 8001b44:	0400      	lsls	r0, r0, #16
 8001b46:	4301      	orrs	r1, r0
 8001b48:	2a38      	cmp	r2, #56	; 0x38
 8001b4a:	dd00      	ble.n	8001b4e <__aeabi_dsub+0x17e>
 8001b4c:	e149      	b.n	8001de2 <__aeabi_dsub+0x412>
 8001b4e:	2a1f      	cmp	r2, #31
 8001b50:	dc00      	bgt.n	8001b54 <__aeabi_dsub+0x184>
 8001b52:	e197      	b.n	8001e84 <__aeabi_dsub+0x4b4>
 8001b54:	0010      	movs	r0, r2
 8001b56:	000e      	movs	r6, r1
 8001b58:	3820      	subs	r0, #32
 8001b5a:	40c6      	lsrs	r6, r0
 8001b5c:	2a20      	cmp	r2, #32
 8001b5e:	d004      	beq.n	8001b6a <__aeabi_dsub+0x19a>
 8001b60:	2040      	movs	r0, #64	; 0x40
 8001b62:	1a82      	subs	r2, r0, r2
 8001b64:	4091      	lsls	r1, r2
 8001b66:	430f      	orrs	r7, r1
 8001b68:	46b9      	mov	r9, r7
 8001b6a:	464c      	mov	r4, r9
 8001b6c:	1e62      	subs	r2, r4, #1
 8001b6e:	4194      	sbcs	r4, r2
 8001b70:	4334      	orrs	r4, r6
 8001b72:	e13a      	b.n	8001dea <__aeabi_dsub+0x41a>
 8001b74:	000a      	movs	r2, r1
 8001b76:	433a      	orrs	r2, r7
 8001b78:	d028      	beq.n	8001bcc <__aeabi_dsub+0x1fc>
 8001b7a:	46b3      	mov	fp, r6
 8001b7c:	42b5      	cmp	r5, r6
 8001b7e:	d02b      	beq.n	8001bd8 <__aeabi_dsub+0x208>
 8001b80:	4a6b      	ldr	r2, [pc, #428]	; (8001d30 <__aeabi_dsub+0x360>)
 8001b82:	4442      	add	r2, r8
 8001b84:	2a00      	cmp	r2, #0
 8001b86:	d05d      	beq.n	8001c44 <__aeabi_dsub+0x274>
 8001b88:	4642      	mov	r2, r8
 8001b8a:	4644      	mov	r4, r8
 8001b8c:	1a82      	subs	r2, r0, r2
 8001b8e:	2c00      	cmp	r4, #0
 8001b90:	d000      	beq.n	8001b94 <__aeabi_dsub+0x1c4>
 8001b92:	e0f5      	b.n	8001d80 <__aeabi_dsub+0x3b0>
 8001b94:	4665      	mov	r5, ip
 8001b96:	431d      	orrs	r5, r3
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x1cc>
 8001b9a:	e19c      	b.n	8001ed6 <__aeabi_dsub+0x506>
 8001b9c:	1e55      	subs	r5, r2, #1
 8001b9e:	2a01      	cmp	r2, #1
 8001ba0:	d100      	bne.n	8001ba4 <__aeabi_dsub+0x1d4>
 8001ba2:	e1fb      	b.n	8001f9c <__aeabi_dsub+0x5cc>
 8001ba4:	4c60      	ldr	r4, [pc, #384]	; (8001d28 <__aeabi_dsub+0x358>)
 8001ba6:	42a2      	cmp	r2, r4
 8001ba8:	d100      	bne.n	8001bac <__aeabi_dsub+0x1dc>
 8001baa:	e1bd      	b.n	8001f28 <__aeabi_dsub+0x558>
 8001bac:	002a      	movs	r2, r5
 8001bae:	e0f0      	b.n	8001d92 <__aeabi_dsub+0x3c2>
 8001bb0:	0008      	movs	r0, r1
 8001bb2:	4338      	orrs	r0, r7
 8001bb4:	d100      	bne.n	8001bb8 <__aeabi_dsub+0x1e8>
 8001bb6:	e0c3      	b.n	8001d40 <__aeabi_dsub+0x370>
 8001bb8:	1e50      	subs	r0, r2, #1
 8001bba:	2a01      	cmp	r2, #1
 8001bbc:	d100      	bne.n	8001bc0 <__aeabi_dsub+0x1f0>
 8001bbe:	e1a8      	b.n	8001f12 <__aeabi_dsub+0x542>
 8001bc0:	4c59      	ldr	r4, [pc, #356]	; (8001d28 <__aeabi_dsub+0x358>)
 8001bc2:	42a2      	cmp	r2, r4
 8001bc4:	d100      	bne.n	8001bc8 <__aeabi_dsub+0x1f8>
 8001bc6:	e087      	b.n	8001cd8 <__aeabi_dsub+0x308>
 8001bc8:	0002      	movs	r2, r0
 8001bca:	e736      	b.n	8001a3a <__aeabi_dsub+0x6a>
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4056      	eors	r6, r2
 8001bd0:	46b3      	mov	fp, r6
 8001bd2:	42b5      	cmp	r5, r6
 8001bd4:	d000      	beq.n	8001bd8 <__aeabi_dsub+0x208>
 8001bd6:	e721      	b.n	8001a1c <__aeabi_dsub+0x4c>
 8001bd8:	4a55      	ldr	r2, [pc, #340]	; (8001d30 <__aeabi_dsub+0x360>)
 8001bda:	4442      	add	r2, r8
 8001bdc:	2a00      	cmp	r2, #0
 8001bde:	d100      	bne.n	8001be2 <__aeabi_dsub+0x212>
 8001be0:	e0b5      	b.n	8001d4e <__aeabi_dsub+0x37e>
 8001be2:	4642      	mov	r2, r8
 8001be4:	4644      	mov	r4, r8
 8001be6:	1a82      	subs	r2, r0, r2
 8001be8:	2c00      	cmp	r4, #0
 8001bea:	d100      	bne.n	8001bee <__aeabi_dsub+0x21e>
 8001bec:	e138      	b.n	8001e60 <__aeabi_dsub+0x490>
 8001bee:	4e4e      	ldr	r6, [pc, #312]	; (8001d28 <__aeabi_dsub+0x358>)
 8001bf0:	42b0      	cmp	r0, r6
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_dsub+0x226>
 8001bf4:	e1de      	b.n	8001fb4 <__aeabi_dsub+0x5e4>
 8001bf6:	2680      	movs	r6, #128	; 0x80
 8001bf8:	4664      	mov	r4, ip
 8001bfa:	0436      	lsls	r6, r6, #16
 8001bfc:	4334      	orrs	r4, r6
 8001bfe:	46a4      	mov	ip, r4
 8001c00:	2a38      	cmp	r2, #56	; 0x38
 8001c02:	dd00      	ble.n	8001c06 <__aeabi_dsub+0x236>
 8001c04:	e196      	b.n	8001f34 <__aeabi_dsub+0x564>
 8001c06:	2a1f      	cmp	r2, #31
 8001c08:	dd00      	ble.n	8001c0c <__aeabi_dsub+0x23c>
 8001c0a:	e224      	b.n	8002056 <__aeabi_dsub+0x686>
 8001c0c:	2620      	movs	r6, #32
 8001c0e:	1ab4      	subs	r4, r6, r2
 8001c10:	46a2      	mov	sl, r4
 8001c12:	4664      	mov	r4, ip
 8001c14:	4656      	mov	r6, sl
 8001c16:	40b4      	lsls	r4, r6
 8001c18:	46a1      	mov	r9, r4
 8001c1a:	001c      	movs	r4, r3
 8001c1c:	464e      	mov	r6, r9
 8001c1e:	40d4      	lsrs	r4, r2
 8001c20:	4326      	orrs	r6, r4
 8001c22:	0034      	movs	r4, r6
 8001c24:	4656      	mov	r6, sl
 8001c26:	40b3      	lsls	r3, r6
 8001c28:	1e5e      	subs	r6, r3, #1
 8001c2a:	41b3      	sbcs	r3, r6
 8001c2c:	431c      	orrs	r4, r3
 8001c2e:	4663      	mov	r3, ip
 8001c30:	40d3      	lsrs	r3, r2
 8001c32:	18c9      	adds	r1, r1, r3
 8001c34:	19e4      	adds	r4, r4, r7
 8001c36:	42bc      	cmp	r4, r7
 8001c38:	41bf      	sbcs	r7, r7
 8001c3a:	427f      	negs	r7, r7
 8001c3c:	46b9      	mov	r9, r7
 8001c3e:	4680      	mov	r8, r0
 8001c40:	4489      	add	r9, r1
 8001c42:	e0d8      	b.n	8001df6 <__aeabi_dsub+0x426>
 8001c44:	4640      	mov	r0, r8
 8001c46:	4c3b      	ldr	r4, [pc, #236]	; (8001d34 <__aeabi_dsub+0x364>)
 8001c48:	3001      	adds	r0, #1
 8001c4a:	4220      	tst	r0, r4
 8001c4c:	d000      	beq.n	8001c50 <__aeabi_dsub+0x280>
 8001c4e:	e0b4      	b.n	8001dba <__aeabi_dsub+0x3ea>
 8001c50:	4640      	mov	r0, r8
 8001c52:	2800      	cmp	r0, #0
 8001c54:	d000      	beq.n	8001c58 <__aeabi_dsub+0x288>
 8001c56:	e144      	b.n	8001ee2 <__aeabi_dsub+0x512>
 8001c58:	4660      	mov	r0, ip
 8001c5a:	4318      	orrs	r0, r3
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0x290>
 8001c5e:	e190      	b.n	8001f82 <__aeabi_dsub+0x5b2>
 8001c60:	0008      	movs	r0, r1
 8001c62:	4338      	orrs	r0, r7
 8001c64:	d000      	beq.n	8001c68 <__aeabi_dsub+0x298>
 8001c66:	e1aa      	b.n	8001fbe <__aeabi_dsub+0x5ee>
 8001c68:	4661      	mov	r1, ip
 8001c6a:	08db      	lsrs	r3, r3, #3
 8001c6c:	0749      	lsls	r1, r1, #29
 8001c6e:	430b      	orrs	r3, r1
 8001c70:	4661      	mov	r1, ip
 8001c72:	08cc      	lsrs	r4, r1, #3
 8001c74:	e027      	b.n	8001cc6 <__aeabi_dsub+0x2f6>
 8001c76:	0008      	movs	r0, r1
 8001c78:	4338      	orrs	r0, r7
 8001c7a:	d061      	beq.n	8001d40 <__aeabi_dsub+0x370>
 8001c7c:	1e50      	subs	r0, r2, #1
 8001c7e:	2a01      	cmp	r2, #1
 8001c80:	d100      	bne.n	8001c84 <__aeabi_dsub+0x2b4>
 8001c82:	e139      	b.n	8001ef8 <__aeabi_dsub+0x528>
 8001c84:	42a2      	cmp	r2, r4
 8001c86:	d027      	beq.n	8001cd8 <__aeabi_dsub+0x308>
 8001c88:	0002      	movs	r2, r0
 8001c8a:	e75d      	b.n	8001b48 <__aeabi_dsub+0x178>
 8001c8c:	0002      	movs	r2, r0
 8001c8e:	391f      	subs	r1, #31
 8001c90:	40ca      	lsrs	r2, r1
 8001c92:	0011      	movs	r1, r2
 8001c94:	2b20      	cmp	r3, #32
 8001c96:	d003      	beq.n	8001ca0 <__aeabi_dsub+0x2d0>
 8001c98:	2240      	movs	r2, #64	; 0x40
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	4098      	lsls	r0, r3
 8001c9e:	4304      	orrs	r4, r0
 8001ca0:	1e63      	subs	r3, r4, #1
 8001ca2:	419c      	sbcs	r4, r3
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	4699      	mov	r9, r3
 8001ca8:	4698      	mov	r8, r3
 8001caa:	430c      	orrs	r4, r1
 8001cac:	0763      	lsls	r3, r4, #29
 8001cae:	d000      	beq.n	8001cb2 <__aeabi_dsub+0x2e2>
 8001cb0:	e712      	b.n	8001ad8 <__aeabi_dsub+0x108>
 8001cb2:	464b      	mov	r3, r9
 8001cb4:	464a      	mov	r2, r9
 8001cb6:	08e4      	lsrs	r4, r4, #3
 8001cb8:	075b      	lsls	r3, r3, #29
 8001cba:	4323      	orrs	r3, r4
 8001cbc:	08d4      	lsrs	r4, r2, #3
 8001cbe:	4642      	mov	r2, r8
 8001cc0:	4919      	ldr	r1, [pc, #100]	; (8001d28 <__aeabi_dsub+0x358>)
 8001cc2:	428a      	cmp	r2, r1
 8001cc4:	d00e      	beq.n	8001ce4 <__aeabi_dsub+0x314>
 8001cc6:	0324      	lsls	r4, r4, #12
 8001cc8:	0552      	lsls	r2, r2, #21
 8001cca:	0b24      	lsrs	r4, r4, #12
 8001ccc:	0d52      	lsrs	r2, r2, #21
 8001cce:	e722      	b.n	8001b16 <__aeabi_dsub+0x146>
 8001cd0:	000a      	movs	r2, r1
 8001cd2:	2400      	movs	r4, #0
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	e71e      	b.n	8001b16 <__aeabi_dsub+0x146>
 8001cd8:	08db      	lsrs	r3, r3, #3
 8001cda:	4662      	mov	r2, ip
 8001cdc:	0752      	lsls	r2, r2, #29
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	4662      	mov	r2, ip
 8001ce2:	08d4      	lsrs	r4, r2, #3
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	4322      	orrs	r2, r4
 8001ce8:	d100      	bne.n	8001cec <__aeabi_dsub+0x31c>
 8001cea:	e1fc      	b.n	80020e6 <__aeabi_dsub+0x716>
 8001cec:	2280      	movs	r2, #128	; 0x80
 8001cee:	0312      	lsls	r2, r2, #12
 8001cf0:	4314      	orrs	r4, r2
 8001cf2:	0324      	lsls	r4, r4, #12
 8001cf4:	4a0c      	ldr	r2, [pc, #48]	; (8001d28 <__aeabi_dsub+0x358>)
 8001cf6:	0b24      	lsrs	r4, r4, #12
 8001cf8:	e70d      	b.n	8001b16 <__aeabi_dsub+0x146>
 8001cfa:	0020      	movs	r0, r4
 8001cfc:	f000 faa4 	bl	8002248 <__clzsi2>
 8001d00:	0001      	movs	r1, r0
 8001d02:	3118      	adds	r1, #24
 8001d04:	291f      	cmp	r1, #31
 8001d06:	dc00      	bgt.n	8001d0a <__aeabi_dsub+0x33a>
 8001d08:	e6c4      	b.n	8001a94 <__aeabi_dsub+0xc4>
 8001d0a:	3808      	subs	r0, #8
 8001d0c:	4084      	lsls	r4, r0
 8001d0e:	4643      	mov	r3, r8
 8001d10:	0020      	movs	r0, r4
 8001d12:	2400      	movs	r4, #0
 8001d14:	4588      	cmp	r8, r1
 8001d16:	dc00      	bgt.n	8001d1a <__aeabi_dsub+0x34a>
 8001d18:	e6c8      	b.n	8001aac <__aeabi_dsub+0xdc>
 8001d1a:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <__aeabi_dsub+0x35c>)
 8001d1c:	1a5b      	subs	r3, r3, r1
 8001d1e:	4010      	ands	r0, r2
 8001d20:	4698      	mov	r8, r3
 8001d22:	4681      	mov	r9, r0
 8001d24:	e6d6      	b.n	8001ad4 <__aeabi_dsub+0x104>
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	000007ff 	.word	0x000007ff
 8001d2c:	ff7fffff 	.word	0xff7fffff
 8001d30:	fffff801 	.word	0xfffff801
 8001d34:	000007fe 	.word	0x000007fe
 8001d38:	430f      	orrs	r7, r1
 8001d3a:	1e7a      	subs	r2, r7, #1
 8001d3c:	4197      	sbcs	r7, r2
 8001d3e:	e691      	b.n	8001a64 <__aeabi_dsub+0x94>
 8001d40:	4661      	mov	r1, ip
 8001d42:	08db      	lsrs	r3, r3, #3
 8001d44:	0749      	lsls	r1, r1, #29
 8001d46:	430b      	orrs	r3, r1
 8001d48:	4661      	mov	r1, ip
 8001d4a:	08cc      	lsrs	r4, r1, #3
 8001d4c:	e7b8      	b.n	8001cc0 <__aeabi_dsub+0x2f0>
 8001d4e:	4640      	mov	r0, r8
 8001d50:	4cd3      	ldr	r4, [pc, #844]	; (80020a0 <__aeabi_dsub+0x6d0>)
 8001d52:	3001      	adds	r0, #1
 8001d54:	4220      	tst	r0, r4
 8001d56:	d000      	beq.n	8001d5a <__aeabi_dsub+0x38a>
 8001d58:	e0a2      	b.n	8001ea0 <__aeabi_dsub+0x4d0>
 8001d5a:	4640      	mov	r0, r8
 8001d5c:	2800      	cmp	r0, #0
 8001d5e:	d000      	beq.n	8001d62 <__aeabi_dsub+0x392>
 8001d60:	e101      	b.n	8001f66 <__aeabi_dsub+0x596>
 8001d62:	4660      	mov	r0, ip
 8001d64:	4318      	orrs	r0, r3
 8001d66:	d100      	bne.n	8001d6a <__aeabi_dsub+0x39a>
 8001d68:	e15e      	b.n	8002028 <__aeabi_dsub+0x658>
 8001d6a:	0008      	movs	r0, r1
 8001d6c:	4338      	orrs	r0, r7
 8001d6e:	d000      	beq.n	8001d72 <__aeabi_dsub+0x3a2>
 8001d70:	e15f      	b.n	8002032 <__aeabi_dsub+0x662>
 8001d72:	4661      	mov	r1, ip
 8001d74:	08db      	lsrs	r3, r3, #3
 8001d76:	0749      	lsls	r1, r1, #29
 8001d78:	430b      	orrs	r3, r1
 8001d7a:	4661      	mov	r1, ip
 8001d7c:	08cc      	lsrs	r4, r1, #3
 8001d7e:	e7a2      	b.n	8001cc6 <__aeabi_dsub+0x2f6>
 8001d80:	4dc8      	ldr	r5, [pc, #800]	; (80020a4 <__aeabi_dsub+0x6d4>)
 8001d82:	42a8      	cmp	r0, r5
 8001d84:	d100      	bne.n	8001d88 <__aeabi_dsub+0x3b8>
 8001d86:	e0cf      	b.n	8001f28 <__aeabi_dsub+0x558>
 8001d88:	2580      	movs	r5, #128	; 0x80
 8001d8a:	4664      	mov	r4, ip
 8001d8c:	042d      	lsls	r5, r5, #16
 8001d8e:	432c      	orrs	r4, r5
 8001d90:	46a4      	mov	ip, r4
 8001d92:	2a38      	cmp	r2, #56	; 0x38
 8001d94:	dc56      	bgt.n	8001e44 <__aeabi_dsub+0x474>
 8001d96:	2a1f      	cmp	r2, #31
 8001d98:	dd00      	ble.n	8001d9c <__aeabi_dsub+0x3cc>
 8001d9a:	e0d1      	b.n	8001f40 <__aeabi_dsub+0x570>
 8001d9c:	2520      	movs	r5, #32
 8001d9e:	001e      	movs	r6, r3
 8001da0:	1aad      	subs	r5, r5, r2
 8001da2:	4664      	mov	r4, ip
 8001da4:	40ab      	lsls	r3, r5
 8001da6:	40ac      	lsls	r4, r5
 8001da8:	40d6      	lsrs	r6, r2
 8001daa:	1e5d      	subs	r5, r3, #1
 8001dac:	41ab      	sbcs	r3, r5
 8001dae:	4334      	orrs	r4, r6
 8001db0:	4323      	orrs	r3, r4
 8001db2:	4664      	mov	r4, ip
 8001db4:	40d4      	lsrs	r4, r2
 8001db6:	1b09      	subs	r1, r1, r4
 8001db8:	e049      	b.n	8001e4e <__aeabi_dsub+0x47e>
 8001dba:	4660      	mov	r0, ip
 8001dbc:	1bdc      	subs	r4, r3, r7
 8001dbe:	1a46      	subs	r6, r0, r1
 8001dc0:	42a3      	cmp	r3, r4
 8001dc2:	4180      	sbcs	r0, r0
 8001dc4:	4240      	negs	r0, r0
 8001dc6:	4681      	mov	r9, r0
 8001dc8:	0030      	movs	r0, r6
 8001dca:	464e      	mov	r6, r9
 8001dcc:	1b80      	subs	r0, r0, r6
 8001dce:	4681      	mov	r9, r0
 8001dd0:	0200      	lsls	r0, r0, #8
 8001dd2:	d476      	bmi.n	8001ec2 <__aeabi_dsub+0x4f2>
 8001dd4:	464b      	mov	r3, r9
 8001dd6:	4323      	orrs	r3, r4
 8001dd8:	d000      	beq.n	8001ddc <__aeabi_dsub+0x40c>
 8001dda:	e652      	b.n	8001a82 <__aeabi_dsub+0xb2>
 8001ddc:	2400      	movs	r4, #0
 8001dde:	2500      	movs	r5, #0
 8001de0:	e771      	b.n	8001cc6 <__aeabi_dsub+0x2f6>
 8001de2:	4339      	orrs	r1, r7
 8001de4:	000c      	movs	r4, r1
 8001de6:	1e62      	subs	r2, r4, #1
 8001de8:	4194      	sbcs	r4, r2
 8001dea:	18e4      	adds	r4, r4, r3
 8001dec:	429c      	cmp	r4, r3
 8001dee:	419b      	sbcs	r3, r3
 8001df0:	425b      	negs	r3, r3
 8001df2:	4463      	add	r3, ip
 8001df4:	4699      	mov	r9, r3
 8001df6:	464b      	mov	r3, r9
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	d400      	bmi.n	8001dfe <__aeabi_dsub+0x42e>
 8001dfc:	e756      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	469c      	mov	ip, r3
 8001e02:	4ba8      	ldr	r3, [pc, #672]	; (80020a4 <__aeabi_dsub+0x6d4>)
 8001e04:	44e0      	add	r8, ip
 8001e06:	4598      	cmp	r8, r3
 8001e08:	d038      	beq.n	8001e7c <__aeabi_dsub+0x4ac>
 8001e0a:	464b      	mov	r3, r9
 8001e0c:	48a6      	ldr	r0, [pc, #664]	; (80020a8 <__aeabi_dsub+0x6d8>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	4003      	ands	r3, r0
 8001e12:	0018      	movs	r0, r3
 8001e14:	0863      	lsrs	r3, r4, #1
 8001e16:	4014      	ands	r4, r2
 8001e18:	431c      	orrs	r4, r3
 8001e1a:	07c3      	lsls	r3, r0, #31
 8001e1c:	431c      	orrs	r4, r3
 8001e1e:	0843      	lsrs	r3, r0, #1
 8001e20:	4699      	mov	r9, r3
 8001e22:	e657      	b.n	8001ad4 <__aeabi_dsub+0x104>
 8001e24:	0010      	movs	r0, r2
 8001e26:	000e      	movs	r6, r1
 8001e28:	3820      	subs	r0, #32
 8001e2a:	40c6      	lsrs	r6, r0
 8001e2c:	2a20      	cmp	r2, #32
 8001e2e:	d004      	beq.n	8001e3a <__aeabi_dsub+0x46a>
 8001e30:	2040      	movs	r0, #64	; 0x40
 8001e32:	1a82      	subs	r2, r0, r2
 8001e34:	4091      	lsls	r1, r2
 8001e36:	430f      	orrs	r7, r1
 8001e38:	46b9      	mov	r9, r7
 8001e3a:	464f      	mov	r7, r9
 8001e3c:	1e7a      	subs	r2, r7, #1
 8001e3e:	4197      	sbcs	r7, r2
 8001e40:	4337      	orrs	r7, r6
 8001e42:	e60f      	b.n	8001a64 <__aeabi_dsub+0x94>
 8001e44:	4662      	mov	r2, ip
 8001e46:	431a      	orrs	r2, r3
 8001e48:	0013      	movs	r3, r2
 8001e4a:	1e5a      	subs	r2, r3, #1
 8001e4c:	4193      	sbcs	r3, r2
 8001e4e:	1afc      	subs	r4, r7, r3
 8001e50:	42a7      	cmp	r7, r4
 8001e52:	41bf      	sbcs	r7, r7
 8001e54:	427f      	negs	r7, r7
 8001e56:	1bcb      	subs	r3, r1, r7
 8001e58:	4699      	mov	r9, r3
 8001e5a:	465d      	mov	r5, fp
 8001e5c:	4680      	mov	r8, r0
 8001e5e:	e608      	b.n	8001a72 <__aeabi_dsub+0xa2>
 8001e60:	4666      	mov	r6, ip
 8001e62:	431e      	orrs	r6, r3
 8001e64:	d100      	bne.n	8001e68 <__aeabi_dsub+0x498>
 8001e66:	e0be      	b.n	8001fe6 <__aeabi_dsub+0x616>
 8001e68:	1e56      	subs	r6, r2, #1
 8001e6a:	2a01      	cmp	r2, #1
 8001e6c:	d100      	bne.n	8001e70 <__aeabi_dsub+0x4a0>
 8001e6e:	e109      	b.n	8002084 <__aeabi_dsub+0x6b4>
 8001e70:	4c8c      	ldr	r4, [pc, #560]	; (80020a4 <__aeabi_dsub+0x6d4>)
 8001e72:	42a2      	cmp	r2, r4
 8001e74:	d100      	bne.n	8001e78 <__aeabi_dsub+0x4a8>
 8001e76:	e119      	b.n	80020ac <__aeabi_dsub+0x6dc>
 8001e78:	0032      	movs	r2, r6
 8001e7a:	e6c1      	b.n	8001c00 <__aeabi_dsub+0x230>
 8001e7c:	4642      	mov	r2, r8
 8001e7e:	2400      	movs	r4, #0
 8001e80:	2300      	movs	r3, #0
 8001e82:	e648      	b.n	8001b16 <__aeabi_dsub+0x146>
 8001e84:	2020      	movs	r0, #32
 8001e86:	000c      	movs	r4, r1
 8001e88:	1a80      	subs	r0, r0, r2
 8001e8a:	003e      	movs	r6, r7
 8001e8c:	4087      	lsls	r7, r0
 8001e8e:	4084      	lsls	r4, r0
 8001e90:	40d6      	lsrs	r6, r2
 8001e92:	1e78      	subs	r0, r7, #1
 8001e94:	4187      	sbcs	r7, r0
 8001e96:	40d1      	lsrs	r1, r2
 8001e98:	4334      	orrs	r4, r6
 8001e9a:	433c      	orrs	r4, r7
 8001e9c:	448c      	add	ip, r1
 8001e9e:	e7a4      	b.n	8001dea <__aeabi_dsub+0x41a>
 8001ea0:	4a80      	ldr	r2, [pc, #512]	; (80020a4 <__aeabi_dsub+0x6d4>)
 8001ea2:	4290      	cmp	r0, r2
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x4d8>
 8001ea6:	e0e9      	b.n	800207c <__aeabi_dsub+0x6ac>
 8001ea8:	19df      	adds	r7, r3, r7
 8001eaa:	429f      	cmp	r7, r3
 8001eac:	419b      	sbcs	r3, r3
 8001eae:	4461      	add	r1, ip
 8001eb0:	425b      	negs	r3, r3
 8001eb2:	18c9      	adds	r1, r1, r3
 8001eb4:	07cc      	lsls	r4, r1, #31
 8001eb6:	087f      	lsrs	r7, r7, #1
 8001eb8:	084b      	lsrs	r3, r1, #1
 8001eba:	4699      	mov	r9, r3
 8001ebc:	4680      	mov	r8, r0
 8001ebe:	433c      	orrs	r4, r7
 8001ec0:	e6f4      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8001ec2:	1afc      	subs	r4, r7, r3
 8001ec4:	42a7      	cmp	r7, r4
 8001ec6:	41bf      	sbcs	r7, r7
 8001ec8:	4663      	mov	r3, ip
 8001eca:	427f      	negs	r7, r7
 8001ecc:	1ac9      	subs	r1, r1, r3
 8001ece:	1bcb      	subs	r3, r1, r7
 8001ed0:	4699      	mov	r9, r3
 8001ed2:	465d      	mov	r5, fp
 8001ed4:	e5d5      	b.n	8001a82 <__aeabi_dsub+0xb2>
 8001ed6:	08ff      	lsrs	r7, r7, #3
 8001ed8:	074b      	lsls	r3, r1, #29
 8001eda:	465d      	mov	r5, fp
 8001edc:	433b      	orrs	r3, r7
 8001ede:	08cc      	lsrs	r4, r1, #3
 8001ee0:	e6ee      	b.n	8001cc0 <__aeabi_dsub+0x2f0>
 8001ee2:	4662      	mov	r2, ip
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	d000      	beq.n	8001eea <__aeabi_dsub+0x51a>
 8001ee8:	e082      	b.n	8001ff0 <__aeabi_dsub+0x620>
 8001eea:	000b      	movs	r3, r1
 8001eec:	433b      	orrs	r3, r7
 8001eee:	d11b      	bne.n	8001f28 <__aeabi_dsub+0x558>
 8001ef0:	2480      	movs	r4, #128	; 0x80
 8001ef2:	2500      	movs	r5, #0
 8001ef4:	0324      	lsls	r4, r4, #12
 8001ef6:	e6f9      	b.n	8001cec <__aeabi_dsub+0x31c>
 8001ef8:	19dc      	adds	r4, r3, r7
 8001efa:	429c      	cmp	r4, r3
 8001efc:	419b      	sbcs	r3, r3
 8001efe:	4461      	add	r1, ip
 8001f00:	4689      	mov	r9, r1
 8001f02:	425b      	negs	r3, r3
 8001f04:	4499      	add	r9, r3
 8001f06:	464b      	mov	r3, r9
 8001f08:	021b      	lsls	r3, r3, #8
 8001f0a:	d444      	bmi.n	8001f96 <__aeabi_dsub+0x5c6>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	4698      	mov	r8, r3
 8001f10:	e6cc      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8001f12:	1bdc      	subs	r4, r3, r7
 8001f14:	4662      	mov	r2, ip
 8001f16:	42a3      	cmp	r3, r4
 8001f18:	419b      	sbcs	r3, r3
 8001f1a:	1a51      	subs	r1, r2, r1
 8001f1c:	425b      	negs	r3, r3
 8001f1e:	1acb      	subs	r3, r1, r3
 8001f20:	4699      	mov	r9, r3
 8001f22:	2301      	movs	r3, #1
 8001f24:	4698      	mov	r8, r3
 8001f26:	e5a4      	b.n	8001a72 <__aeabi_dsub+0xa2>
 8001f28:	08ff      	lsrs	r7, r7, #3
 8001f2a:	074b      	lsls	r3, r1, #29
 8001f2c:	465d      	mov	r5, fp
 8001f2e:	433b      	orrs	r3, r7
 8001f30:	08cc      	lsrs	r4, r1, #3
 8001f32:	e6d7      	b.n	8001ce4 <__aeabi_dsub+0x314>
 8001f34:	4662      	mov	r2, ip
 8001f36:	431a      	orrs	r2, r3
 8001f38:	0014      	movs	r4, r2
 8001f3a:	1e63      	subs	r3, r4, #1
 8001f3c:	419c      	sbcs	r4, r3
 8001f3e:	e679      	b.n	8001c34 <__aeabi_dsub+0x264>
 8001f40:	0015      	movs	r5, r2
 8001f42:	4664      	mov	r4, ip
 8001f44:	3d20      	subs	r5, #32
 8001f46:	40ec      	lsrs	r4, r5
 8001f48:	46a0      	mov	r8, r4
 8001f4a:	2a20      	cmp	r2, #32
 8001f4c:	d005      	beq.n	8001f5a <__aeabi_dsub+0x58a>
 8001f4e:	2540      	movs	r5, #64	; 0x40
 8001f50:	4664      	mov	r4, ip
 8001f52:	1aaa      	subs	r2, r5, r2
 8001f54:	4094      	lsls	r4, r2
 8001f56:	4323      	orrs	r3, r4
 8001f58:	469a      	mov	sl, r3
 8001f5a:	4654      	mov	r4, sl
 8001f5c:	1e63      	subs	r3, r4, #1
 8001f5e:	419c      	sbcs	r4, r3
 8001f60:	4643      	mov	r3, r8
 8001f62:	4323      	orrs	r3, r4
 8001f64:	e773      	b.n	8001e4e <__aeabi_dsub+0x47e>
 8001f66:	4662      	mov	r2, ip
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	d023      	beq.n	8001fb4 <__aeabi_dsub+0x5e4>
 8001f6c:	000a      	movs	r2, r1
 8001f6e:	433a      	orrs	r2, r7
 8001f70:	d000      	beq.n	8001f74 <__aeabi_dsub+0x5a4>
 8001f72:	e0a0      	b.n	80020b6 <__aeabi_dsub+0x6e6>
 8001f74:	4662      	mov	r2, ip
 8001f76:	08db      	lsrs	r3, r3, #3
 8001f78:	0752      	lsls	r2, r2, #29
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	4662      	mov	r2, ip
 8001f7e:	08d4      	lsrs	r4, r2, #3
 8001f80:	e6b0      	b.n	8001ce4 <__aeabi_dsub+0x314>
 8001f82:	000b      	movs	r3, r1
 8001f84:	433b      	orrs	r3, r7
 8001f86:	d100      	bne.n	8001f8a <__aeabi_dsub+0x5ba>
 8001f88:	e728      	b.n	8001ddc <__aeabi_dsub+0x40c>
 8001f8a:	08ff      	lsrs	r7, r7, #3
 8001f8c:	074b      	lsls	r3, r1, #29
 8001f8e:	465d      	mov	r5, fp
 8001f90:	433b      	orrs	r3, r7
 8001f92:	08cc      	lsrs	r4, r1, #3
 8001f94:	e697      	b.n	8001cc6 <__aeabi_dsub+0x2f6>
 8001f96:	2302      	movs	r3, #2
 8001f98:	4698      	mov	r8, r3
 8001f9a:	e736      	b.n	8001e0a <__aeabi_dsub+0x43a>
 8001f9c:	1afc      	subs	r4, r7, r3
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	4663      	mov	r3, ip
 8001fa4:	427f      	negs	r7, r7
 8001fa6:	1ac9      	subs	r1, r1, r3
 8001fa8:	1bcb      	subs	r3, r1, r7
 8001faa:	4699      	mov	r9, r3
 8001fac:	2301      	movs	r3, #1
 8001fae:	465d      	mov	r5, fp
 8001fb0:	4698      	mov	r8, r3
 8001fb2:	e55e      	b.n	8001a72 <__aeabi_dsub+0xa2>
 8001fb4:	074b      	lsls	r3, r1, #29
 8001fb6:	08ff      	lsrs	r7, r7, #3
 8001fb8:	433b      	orrs	r3, r7
 8001fba:	08cc      	lsrs	r4, r1, #3
 8001fbc:	e692      	b.n	8001ce4 <__aeabi_dsub+0x314>
 8001fbe:	1bdc      	subs	r4, r3, r7
 8001fc0:	4660      	mov	r0, ip
 8001fc2:	42a3      	cmp	r3, r4
 8001fc4:	41b6      	sbcs	r6, r6
 8001fc6:	1a40      	subs	r0, r0, r1
 8001fc8:	4276      	negs	r6, r6
 8001fca:	1b80      	subs	r0, r0, r6
 8001fcc:	4681      	mov	r9, r0
 8001fce:	0200      	lsls	r0, r0, #8
 8001fd0:	d560      	bpl.n	8002094 <__aeabi_dsub+0x6c4>
 8001fd2:	1afc      	subs	r4, r7, r3
 8001fd4:	42a7      	cmp	r7, r4
 8001fd6:	41bf      	sbcs	r7, r7
 8001fd8:	4663      	mov	r3, ip
 8001fda:	427f      	negs	r7, r7
 8001fdc:	1ac9      	subs	r1, r1, r3
 8001fde:	1bcb      	subs	r3, r1, r7
 8001fe0:	4699      	mov	r9, r3
 8001fe2:	465d      	mov	r5, fp
 8001fe4:	e576      	b.n	8001ad4 <__aeabi_dsub+0x104>
 8001fe6:	08ff      	lsrs	r7, r7, #3
 8001fe8:	074b      	lsls	r3, r1, #29
 8001fea:	433b      	orrs	r3, r7
 8001fec:	08cc      	lsrs	r4, r1, #3
 8001fee:	e667      	b.n	8001cc0 <__aeabi_dsub+0x2f0>
 8001ff0:	000a      	movs	r2, r1
 8001ff2:	08db      	lsrs	r3, r3, #3
 8001ff4:	433a      	orrs	r2, r7
 8001ff6:	d100      	bne.n	8001ffa <__aeabi_dsub+0x62a>
 8001ff8:	e66f      	b.n	8001cda <__aeabi_dsub+0x30a>
 8001ffa:	4662      	mov	r2, ip
 8001ffc:	0752      	lsls	r2, r2, #29
 8001ffe:	4313      	orrs	r3, r2
 8002000:	4662      	mov	r2, ip
 8002002:	08d4      	lsrs	r4, r2, #3
 8002004:	2280      	movs	r2, #128	; 0x80
 8002006:	0312      	lsls	r2, r2, #12
 8002008:	4214      	tst	r4, r2
 800200a:	d007      	beq.n	800201c <__aeabi_dsub+0x64c>
 800200c:	08c8      	lsrs	r0, r1, #3
 800200e:	4210      	tst	r0, r2
 8002010:	d104      	bne.n	800201c <__aeabi_dsub+0x64c>
 8002012:	465d      	mov	r5, fp
 8002014:	0004      	movs	r4, r0
 8002016:	08fb      	lsrs	r3, r7, #3
 8002018:	0749      	lsls	r1, r1, #29
 800201a:	430b      	orrs	r3, r1
 800201c:	0f5a      	lsrs	r2, r3, #29
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	08db      	lsrs	r3, r3, #3
 8002022:	0752      	lsls	r2, r2, #29
 8002024:	4313      	orrs	r3, r2
 8002026:	e65d      	b.n	8001ce4 <__aeabi_dsub+0x314>
 8002028:	074b      	lsls	r3, r1, #29
 800202a:	08ff      	lsrs	r7, r7, #3
 800202c:	433b      	orrs	r3, r7
 800202e:	08cc      	lsrs	r4, r1, #3
 8002030:	e649      	b.n	8001cc6 <__aeabi_dsub+0x2f6>
 8002032:	19dc      	adds	r4, r3, r7
 8002034:	429c      	cmp	r4, r3
 8002036:	419b      	sbcs	r3, r3
 8002038:	4461      	add	r1, ip
 800203a:	4689      	mov	r9, r1
 800203c:	425b      	negs	r3, r3
 800203e:	4499      	add	r9, r3
 8002040:	464b      	mov	r3, r9
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	d400      	bmi.n	8002048 <__aeabi_dsub+0x678>
 8002046:	e631      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8002048:	464a      	mov	r2, r9
 800204a:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <__aeabi_dsub+0x6d8>)
 800204c:	401a      	ands	r2, r3
 800204e:	2301      	movs	r3, #1
 8002050:	4691      	mov	r9, r2
 8002052:	4698      	mov	r8, r3
 8002054:	e62a      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8002056:	0016      	movs	r6, r2
 8002058:	4664      	mov	r4, ip
 800205a:	3e20      	subs	r6, #32
 800205c:	40f4      	lsrs	r4, r6
 800205e:	46a0      	mov	r8, r4
 8002060:	2a20      	cmp	r2, #32
 8002062:	d005      	beq.n	8002070 <__aeabi_dsub+0x6a0>
 8002064:	2640      	movs	r6, #64	; 0x40
 8002066:	4664      	mov	r4, ip
 8002068:	1ab2      	subs	r2, r6, r2
 800206a:	4094      	lsls	r4, r2
 800206c:	4323      	orrs	r3, r4
 800206e:	469a      	mov	sl, r3
 8002070:	4654      	mov	r4, sl
 8002072:	1e63      	subs	r3, r4, #1
 8002074:	419c      	sbcs	r4, r3
 8002076:	4643      	mov	r3, r8
 8002078:	431c      	orrs	r4, r3
 800207a:	e5db      	b.n	8001c34 <__aeabi_dsub+0x264>
 800207c:	0002      	movs	r2, r0
 800207e:	2400      	movs	r4, #0
 8002080:	2300      	movs	r3, #0
 8002082:	e548      	b.n	8001b16 <__aeabi_dsub+0x146>
 8002084:	19dc      	adds	r4, r3, r7
 8002086:	42bc      	cmp	r4, r7
 8002088:	41bf      	sbcs	r7, r7
 800208a:	4461      	add	r1, ip
 800208c:	4689      	mov	r9, r1
 800208e:	427f      	negs	r7, r7
 8002090:	44b9      	add	r9, r7
 8002092:	e738      	b.n	8001f06 <__aeabi_dsub+0x536>
 8002094:	464b      	mov	r3, r9
 8002096:	4323      	orrs	r3, r4
 8002098:	d100      	bne.n	800209c <__aeabi_dsub+0x6cc>
 800209a:	e69f      	b.n	8001ddc <__aeabi_dsub+0x40c>
 800209c:	e606      	b.n	8001cac <__aeabi_dsub+0x2dc>
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	000007fe 	.word	0x000007fe
 80020a4:	000007ff 	.word	0x000007ff
 80020a8:	ff7fffff 	.word	0xff7fffff
 80020ac:	08ff      	lsrs	r7, r7, #3
 80020ae:	074b      	lsls	r3, r1, #29
 80020b0:	433b      	orrs	r3, r7
 80020b2:	08cc      	lsrs	r4, r1, #3
 80020b4:	e616      	b.n	8001ce4 <__aeabi_dsub+0x314>
 80020b6:	4662      	mov	r2, ip
 80020b8:	08db      	lsrs	r3, r3, #3
 80020ba:	0752      	lsls	r2, r2, #29
 80020bc:	4313      	orrs	r3, r2
 80020be:	4662      	mov	r2, ip
 80020c0:	08d4      	lsrs	r4, r2, #3
 80020c2:	2280      	movs	r2, #128	; 0x80
 80020c4:	0312      	lsls	r2, r2, #12
 80020c6:	4214      	tst	r4, r2
 80020c8:	d007      	beq.n	80020da <__aeabi_dsub+0x70a>
 80020ca:	08c8      	lsrs	r0, r1, #3
 80020cc:	4210      	tst	r0, r2
 80020ce:	d104      	bne.n	80020da <__aeabi_dsub+0x70a>
 80020d0:	465d      	mov	r5, fp
 80020d2:	0004      	movs	r4, r0
 80020d4:	08fb      	lsrs	r3, r7, #3
 80020d6:	0749      	lsls	r1, r1, #29
 80020d8:	430b      	orrs	r3, r1
 80020da:	0f5a      	lsrs	r2, r3, #29
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	0752      	lsls	r2, r2, #29
 80020e0:	08db      	lsrs	r3, r3, #3
 80020e2:	4313      	orrs	r3, r2
 80020e4:	e5fe      	b.n	8001ce4 <__aeabi_dsub+0x314>
 80020e6:	2300      	movs	r3, #0
 80020e8:	4a01      	ldr	r2, [pc, #4]	; (80020f0 <__aeabi_dsub+0x720>)
 80020ea:	001c      	movs	r4, r3
 80020ec:	e513      	b.n	8001b16 <__aeabi_dsub+0x146>
 80020ee:	46c0      	nop			; (mov r8, r8)
 80020f0:	000007ff 	.word	0x000007ff

080020f4 <__aeabi_dcmpun>:
 80020f4:	b570      	push	{r4, r5, r6, lr}
 80020f6:	0005      	movs	r5, r0
 80020f8:	480c      	ldr	r0, [pc, #48]	; (800212c <__aeabi_dcmpun+0x38>)
 80020fa:	031c      	lsls	r4, r3, #12
 80020fc:	0016      	movs	r6, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	030a      	lsls	r2, r1, #12
 8002102:	0049      	lsls	r1, r1, #1
 8002104:	0b12      	lsrs	r2, r2, #12
 8002106:	0d49      	lsrs	r1, r1, #21
 8002108:	0b24      	lsrs	r4, r4, #12
 800210a:	0d5b      	lsrs	r3, r3, #21
 800210c:	4281      	cmp	r1, r0
 800210e:	d008      	beq.n	8002122 <__aeabi_dcmpun+0x2e>
 8002110:	4a06      	ldr	r2, [pc, #24]	; (800212c <__aeabi_dcmpun+0x38>)
 8002112:	2000      	movs	r0, #0
 8002114:	4293      	cmp	r3, r2
 8002116:	d103      	bne.n	8002120 <__aeabi_dcmpun+0x2c>
 8002118:	0020      	movs	r0, r4
 800211a:	4330      	orrs	r0, r6
 800211c:	1e43      	subs	r3, r0, #1
 800211e:	4198      	sbcs	r0, r3
 8002120:	bd70      	pop	{r4, r5, r6, pc}
 8002122:	2001      	movs	r0, #1
 8002124:	432a      	orrs	r2, r5
 8002126:	d1fb      	bne.n	8002120 <__aeabi_dcmpun+0x2c>
 8002128:	e7f2      	b.n	8002110 <__aeabi_dcmpun+0x1c>
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	000007ff 	.word	0x000007ff

08002130 <__aeabi_d2iz>:
 8002130:	000a      	movs	r2, r1
 8002132:	b530      	push	{r4, r5, lr}
 8002134:	4c13      	ldr	r4, [pc, #76]	; (8002184 <__aeabi_d2iz+0x54>)
 8002136:	0053      	lsls	r3, r2, #1
 8002138:	0309      	lsls	r1, r1, #12
 800213a:	0005      	movs	r5, r0
 800213c:	0b09      	lsrs	r1, r1, #12
 800213e:	2000      	movs	r0, #0
 8002140:	0d5b      	lsrs	r3, r3, #21
 8002142:	0fd2      	lsrs	r2, r2, #31
 8002144:	42a3      	cmp	r3, r4
 8002146:	dd04      	ble.n	8002152 <__aeabi_d2iz+0x22>
 8002148:	480f      	ldr	r0, [pc, #60]	; (8002188 <__aeabi_d2iz+0x58>)
 800214a:	4283      	cmp	r3, r0
 800214c:	dd02      	ble.n	8002154 <__aeabi_d2iz+0x24>
 800214e:	4b0f      	ldr	r3, [pc, #60]	; (800218c <__aeabi_d2iz+0x5c>)
 8002150:	18d0      	adds	r0, r2, r3
 8002152:	bd30      	pop	{r4, r5, pc}
 8002154:	2080      	movs	r0, #128	; 0x80
 8002156:	0340      	lsls	r0, r0, #13
 8002158:	4301      	orrs	r1, r0
 800215a:	480d      	ldr	r0, [pc, #52]	; (8002190 <__aeabi_d2iz+0x60>)
 800215c:	1ac0      	subs	r0, r0, r3
 800215e:	281f      	cmp	r0, #31
 8002160:	dd08      	ble.n	8002174 <__aeabi_d2iz+0x44>
 8002162:	480c      	ldr	r0, [pc, #48]	; (8002194 <__aeabi_d2iz+0x64>)
 8002164:	1ac3      	subs	r3, r0, r3
 8002166:	40d9      	lsrs	r1, r3
 8002168:	000b      	movs	r3, r1
 800216a:	4258      	negs	r0, r3
 800216c:	2a00      	cmp	r2, #0
 800216e:	d1f0      	bne.n	8002152 <__aeabi_d2iz+0x22>
 8002170:	0018      	movs	r0, r3
 8002172:	e7ee      	b.n	8002152 <__aeabi_d2iz+0x22>
 8002174:	4c08      	ldr	r4, [pc, #32]	; (8002198 <__aeabi_d2iz+0x68>)
 8002176:	40c5      	lsrs	r5, r0
 8002178:	46a4      	mov	ip, r4
 800217a:	4463      	add	r3, ip
 800217c:	4099      	lsls	r1, r3
 800217e:	000b      	movs	r3, r1
 8002180:	432b      	orrs	r3, r5
 8002182:	e7f2      	b.n	800216a <__aeabi_d2iz+0x3a>
 8002184:	000003fe 	.word	0x000003fe
 8002188:	0000041d 	.word	0x0000041d
 800218c:	7fffffff 	.word	0x7fffffff
 8002190:	00000433 	.word	0x00000433
 8002194:	00000413 	.word	0x00000413
 8002198:	fffffbed 	.word	0xfffffbed

0800219c <__aeabi_i2d>:
 800219c:	b570      	push	{r4, r5, r6, lr}
 800219e:	2800      	cmp	r0, #0
 80021a0:	d016      	beq.n	80021d0 <__aeabi_i2d+0x34>
 80021a2:	17c3      	asrs	r3, r0, #31
 80021a4:	18c5      	adds	r5, r0, r3
 80021a6:	405d      	eors	r5, r3
 80021a8:	0fc4      	lsrs	r4, r0, #31
 80021aa:	0028      	movs	r0, r5
 80021ac:	f000 f84c 	bl	8002248 <__clzsi2>
 80021b0:	4a11      	ldr	r2, [pc, #68]	; (80021f8 <__aeabi_i2d+0x5c>)
 80021b2:	1a12      	subs	r2, r2, r0
 80021b4:	280a      	cmp	r0, #10
 80021b6:	dc16      	bgt.n	80021e6 <__aeabi_i2d+0x4a>
 80021b8:	0003      	movs	r3, r0
 80021ba:	002e      	movs	r6, r5
 80021bc:	3315      	adds	r3, #21
 80021be:	409e      	lsls	r6, r3
 80021c0:	230b      	movs	r3, #11
 80021c2:	1a18      	subs	r0, r3, r0
 80021c4:	40c5      	lsrs	r5, r0
 80021c6:	0552      	lsls	r2, r2, #21
 80021c8:	032d      	lsls	r5, r5, #12
 80021ca:	0b2d      	lsrs	r5, r5, #12
 80021cc:	0d53      	lsrs	r3, r2, #21
 80021ce:	e003      	b.n	80021d8 <__aeabi_i2d+0x3c>
 80021d0:	2400      	movs	r4, #0
 80021d2:	2300      	movs	r3, #0
 80021d4:	2500      	movs	r5, #0
 80021d6:	2600      	movs	r6, #0
 80021d8:	051b      	lsls	r3, r3, #20
 80021da:	432b      	orrs	r3, r5
 80021dc:	07e4      	lsls	r4, r4, #31
 80021de:	4323      	orrs	r3, r4
 80021e0:	0030      	movs	r0, r6
 80021e2:	0019      	movs	r1, r3
 80021e4:	bd70      	pop	{r4, r5, r6, pc}
 80021e6:	380b      	subs	r0, #11
 80021e8:	4085      	lsls	r5, r0
 80021ea:	0552      	lsls	r2, r2, #21
 80021ec:	032d      	lsls	r5, r5, #12
 80021ee:	2600      	movs	r6, #0
 80021f0:	0b2d      	lsrs	r5, r5, #12
 80021f2:	0d53      	lsrs	r3, r2, #21
 80021f4:	e7f0      	b.n	80021d8 <__aeabi_i2d+0x3c>
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	0000041e 	.word	0x0000041e

080021fc <__aeabi_ui2d>:
 80021fc:	b510      	push	{r4, lr}
 80021fe:	1e04      	subs	r4, r0, #0
 8002200:	d010      	beq.n	8002224 <__aeabi_ui2d+0x28>
 8002202:	f000 f821 	bl	8002248 <__clzsi2>
 8002206:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <__aeabi_ui2d+0x48>)
 8002208:	1a1b      	subs	r3, r3, r0
 800220a:	280a      	cmp	r0, #10
 800220c:	dc11      	bgt.n	8002232 <__aeabi_ui2d+0x36>
 800220e:	220b      	movs	r2, #11
 8002210:	0021      	movs	r1, r4
 8002212:	1a12      	subs	r2, r2, r0
 8002214:	40d1      	lsrs	r1, r2
 8002216:	3015      	adds	r0, #21
 8002218:	030a      	lsls	r2, r1, #12
 800221a:	055b      	lsls	r3, r3, #21
 800221c:	4084      	lsls	r4, r0
 800221e:	0b12      	lsrs	r2, r2, #12
 8002220:	0d5b      	lsrs	r3, r3, #21
 8002222:	e001      	b.n	8002228 <__aeabi_ui2d+0x2c>
 8002224:	2300      	movs	r3, #0
 8002226:	2200      	movs	r2, #0
 8002228:	051b      	lsls	r3, r3, #20
 800222a:	4313      	orrs	r3, r2
 800222c:	0020      	movs	r0, r4
 800222e:	0019      	movs	r1, r3
 8002230:	bd10      	pop	{r4, pc}
 8002232:	0022      	movs	r2, r4
 8002234:	380b      	subs	r0, #11
 8002236:	4082      	lsls	r2, r0
 8002238:	055b      	lsls	r3, r3, #21
 800223a:	0312      	lsls	r2, r2, #12
 800223c:	2400      	movs	r4, #0
 800223e:	0b12      	lsrs	r2, r2, #12
 8002240:	0d5b      	lsrs	r3, r3, #21
 8002242:	e7f1      	b.n	8002228 <__aeabi_ui2d+0x2c>
 8002244:	0000041e 	.word	0x0000041e

08002248 <__clzsi2>:
 8002248:	211c      	movs	r1, #28
 800224a:	2301      	movs	r3, #1
 800224c:	041b      	lsls	r3, r3, #16
 800224e:	4298      	cmp	r0, r3
 8002250:	d301      	bcc.n	8002256 <__clzsi2+0xe>
 8002252:	0c00      	lsrs	r0, r0, #16
 8002254:	3910      	subs	r1, #16
 8002256:	0a1b      	lsrs	r3, r3, #8
 8002258:	4298      	cmp	r0, r3
 800225a:	d301      	bcc.n	8002260 <__clzsi2+0x18>
 800225c:	0a00      	lsrs	r0, r0, #8
 800225e:	3908      	subs	r1, #8
 8002260:	091b      	lsrs	r3, r3, #4
 8002262:	4298      	cmp	r0, r3
 8002264:	d301      	bcc.n	800226a <__clzsi2+0x22>
 8002266:	0900      	lsrs	r0, r0, #4
 8002268:	3904      	subs	r1, #4
 800226a:	a202      	add	r2, pc, #8	; (adr r2, 8002274 <__clzsi2+0x2c>)
 800226c:	5c10      	ldrb	r0, [r2, r0]
 800226e:	1840      	adds	r0, r0, r1
 8002270:	4770      	bx	lr
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	02020304 	.word	0x02020304
 8002278:	01010101 	.word	0x01010101
	...

08002284 <__clzdi2>:
 8002284:	b510      	push	{r4, lr}
 8002286:	2900      	cmp	r1, #0
 8002288:	d103      	bne.n	8002292 <__clzdi2+0xe>
 800228a:	f7ff ffdd 	bl	8002248 <__clzsi2>
 800228e:	3020      	adds	r0, #32
 8002290:	e002      	b.n	8002298 <__clzdi2+0x14>
 8002292:	0008      	movs	r0, r1
 8002294:	f7ff ffd8 	bl	8002248 <__clzsi2>
 8002298:	bd10      	pop	{r4, pc}
 800229a:	46c0      	nop			; (mov r8, r8)

0800229c <RGBInit>:
//uint8_t greenPin[]  = {1, 4, 7, 10,13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43};  //Green LED connected Pins
//uint8_t bluePin[] =   {2, 5, 8, 11,14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44};//Blue LED connected Pins
uint8_t bluePin[]  = {1, 4, 7, 10,13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43};  //Green LED connected Pins New Board
uint8_t greenPin[] =   {2, 5, 8, 11,14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44};//Blue LED connected Pins New Board
void RGBInit(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0

  for (int i = 45 - 1; i >=  0; i--) {
 80022a2:	232c      	movs	r3, #44	; 0x2c
 80022a4:	607b      	str	r3, [r7, #4]
 80022a6:	e007      	b.n	80022b8 <RGBInit+0x1c>
    registers[i] = 0xFF;
 80022a8:	4a07      	ldr	r2, [pc, #28]	; (80022c8 <RGBInit+0x2c>)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	18d3      	adds	r3, r2, r3
 80022ae:	22ff      	movs	r2, #255	; 0xff
 80022b0:	701a      	strb	r2, [r3, #0]
  for (int i = 45 - 1; i >=  0; i--) {
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	607b      	str	r3, [r7, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	daf4      	bge.n	80022a8 <RGBInit+0xc>
  }

}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	46c0      	nop			; (mov r8, r8)
 80022c2:	46bd      	mov	sp, r7
 80022c4:	b002      	add	sp, #8
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20000228 	.word	0x20000228

080022cc <registersWrite>:

void registersWrite(int index, int value) {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  HAL_GPIO_WritePin(RGB_CS_GPIO_Port, RGB_CS_Pin, GPIO_PIN_RESET);
 80022d6:	23a0      	movs	r3, #160	; 0xa0
 80022d8:	05db      	lsls	r3, r3, #23
 80022da:	2200      	movs	r2, #0
 80022dc:	2110      	movs	r1, #16
 80022de:	0018      	movs	r0, r3
 80022e0:	f002 ff67 	bl	80051b2 <HAL_GPIO_WritePin>
  for (int i = 45 - 1; i >=  0; i--) {
 80022e4:	232c      	movs	r3, #44	; 0x2c
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	e01d      	b.n	8002326 <registersWrite+0x5a>
    HAL_GPIO_WritePin(BB_CLK_GPIO_Port, BB_CLK_Pin, GPIO_PIN_RESET);
 80022ea:	23a0      	movs	r3, #160	; 0xa0
 80022ec:	05db      	lsls	r3, r3, #23
 80022ee:	2200      	movs	r2, #0
 80022f0:	2120      	movs	r1, #32
 80022f2:	0018      	movs	r0, r3
 80022f4:	f002 ff5d 	bl	80051b2 <HAL_GPIO_WritePin>
    int val = registers[i];
 80022f8:	4a15      	ldr	r2, [pc, #84]	; (8002350 <registersWrite+0x84>)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	18d3      	adds	r3, r2, r3
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_WritePin(BB_MOSI_GPIO_Port, BB_MOSI_Pin, val);
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	b2da      	uxtb	r2, r3
 8002306:	23a0      	movs	r3, #160	; 0xa0
 8002308:	05db      	lsls	r3, r3, #23
 800230a:	2180      	movs	r1, #128	; 0x80
 800230c:	0018      	movs	r0, r3
 800230e:	f002 ff50 	bl	80051b2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BB_CLK_GPIO_Port, BB_CLK_Pin, GPIO_PIN_SET);
 8002312:	23a0      	movs	r3, #160	; 0xa0
 8002314:	05db      	lsls	r3, r3, #23
 8002316:	2201      	movs	r2, #1
 8002318:	2120      	movs	r1, #32
 800231a:	0018      	movs	r0, r3
 800231c:	f002 ff49 	bl	80051b2 <HAL_GPIO_WritePin>
  for (int i = 45 - 1; i >=  0; i--) {
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	3b01      	subs	r3, #1
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2b00      	cmp	r3, #0
 800232a:	dade      	bge.n	80022ea <registersWrite+0x1e>
  }
  HAL_GPIO_WritePin(RGB_CS_GPIO_Port, RGB_CS_Pin, GPIO_PIN_SET);
 800232c:	23a0      	movs	r3, #160	; 0xa0
 800232e:	05db      	lsls	r3, r3, #23
 8002330:	2201      	movs	r2, #1
 8002332:	2110      	movs	r1, #16
 8002334:	0018      	movs	r0, r3
 8002336:	f002 ff3c 	bl	80051b2 <HAL_GPIO_WritePin>
  registers[index] = value;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	b2d9      	uxtb	r1, r3
 800233e:	4a04      	ldr	r2, [pc, #16]	; (8002350 <registersWrite+0x84>)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	18d3      	adds	r3, r2, r3
 8002344:	1c0a      	adds	r2, r1, #0
 8002346:	701a      	strb	r2, [r3, #0]
}
 8002348:	46c0      	nop			; (mov r8, r8)
 800234a:	46bd      	mov	sp, r7
 800234c:	b004      	add	sp, #16
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20000228 	.word	0x20000228

08002354 <Red>:

void Red(int startPin, int endPin, int ledBT) {
 8002354:	b590      	push	{r4, r7, lr}
 8002356:	b087      	sub	sp, #28
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  for (uint8_t count = startPin; count <= endPin; count++) {
 8002360:	2317      	movs	r3, #23
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	701a      	strb	r2, [r3, #0]
 8002368:	e01d      	b.n	80023a6 <Red+0x52>
    registersWrite(bluePin[count], 0x01);     //Green
 800236a:	2417      	movs	r4, #23
 800236c:	193b      	adds	r3, r7, r4
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	4a12      	ldr	r2, [pc, #72]	; (80023bc <Red+0x68>)
 8002372:	5cd3      	ldrb	r3, [r2, r3]
 8002374:	2101      	movs	r1, #1
 8002376:	0018      	movs	r0, r3
 8002378:	f7ff ffa8 	bl	80022cc <registersWrite>
    registersWrite(greenPin[count], 0x01);    //Blue
 800237c:	193b      	adds	r3, r7, r4
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	4a0f      	ldr	r2, [pc, #60]	; (80023c0 <Red+0x6c>)
 8002382:	5cd3      	ldrb	r3, [r2, r3]
 8002384:	2101      	movs	r1, #1
 8002386:	0018      	movs	r0, r3
 8002388:	f7ff ffa0 	bl	80022cc <registersWrite>
    registersWrite(redPin[count], 0x00);
 800238c:	193b      	adds	r3, r7, r4
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	4a0c      	ldr	r2, [pc, #48]	; (80023c4 <Red+0x70>)
 8002392:	5cd3      	ldrb	r3, [r2, r3]
 8002394:	2100      	movs	r1, #0
 8002396:	0018      	movs	r0, r3
 8002398:	f7ff ff98 	bl	80022cc <registersWrite>
  for (uint8_t count = startPin; count <= endPin; count++) {
 800239c:	193b      	adds	r3, r7, r4
 800239e:	781a      	ldrb	r2, [r3, #0]
 80023a0:	193b      	adds	r3, r7, r4
 80023a2:	3201      	adds	r2, #1
 80023a4:	701a      	strb	r2, [r3, #0]
 80023a6:	2317      	movs	r3, #23
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	dadb      	bge.n	800236a <Red+0x16>
  }
}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	46c0      	nop			; (mov r8, r8)
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b007      	add	sp, #28
 80023ba:	bd90      	pop	{r4, r7, pc}
 80023bc:	20000010 	.word	0x20000010
 80023c0:	20000020 	.word	0x20000020
 80023c4:	20000000 	.word	0x20000000

080023c8 <Green>:
void Green(int startPin, int endPin, int ledBT) {
 80023c8:	b590      	push	{r4, r7, lr}
 80023ca:	b087      	sub	sp, #28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  for (uint8_t count = startPin; count <= endPin; count++) {
 80023d4:	2317      	movs	r3, #23
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	701a      	strb	r2, [r3, #0]
 80023dc:	e01d      	b.n	800241a <Green+0x52>
   registersWrite(redPin[count], 0x01);
 80023de:	2417      	movs	r4, #23
 80023e0:	193b      	adds	r3, r7, r4
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	4a12      	ldr	r2, [pc, #72]	; (8002430 <Green+0x68>)
 80023e6:	5cd3      	ldrb	r3, [r2, r3]
 80023e8:	2101      	movs	r1, #1
 80023ea:	0018      	movs	r0, r3
 80023ec:	f7ff ff6e 	bl	80022cc <registersWrite>
	registersWrite(bluePin[count], 0x01);     //Green
 80023f0:	193b      	adds	r3, r7, r4
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4a0f      	ldr	r2, [pc, #60]	; (8002434 <Green+0x6c>)
 80023f6:	5cd3      	ldrb	r3, [r2, r3]
 80023f8:	2101      	movs	r1, #1
 80023fa:	0018      	movs	r0, r3
 80023fc:	f7ff ff66 	bl	80022cc <registersWrite>
	registersWrite(greenPin[count], 0x00);    //Blue
 8002400:	193b      	adds	r3, r7, r4
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	4a0c      	ldr	r2, [pc, #48]	; (8002438 <Green+0x70>)
 8002406:	5cd3      	ldrb	r3, [r2, r3]
 8002408:	2100      	movs	r1, #0
 800240a:	0018      	movs	r0, r3
 800240c:	f7ff ff5e 	bl	80022cc <registersWrite>
  for (uint8_t count = startPin; count <= endPin; count++) {
 8002410:	193b      	adds	r3, r7, r4
 8002412:	781a      	ldrb	r2, [r3, #0]
 8002414:	193b      	adds	r3, r7, r4
 8002416:	3201      	adds	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]
 800241a:	2317      	movs	r3, #23
 800241c:	18fb      	adds	r3, r7, r3
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	429a      	cmp	r2, r3
 8002424:	dadb      	bge.n	80023de <Green+0x16>
//    delay(ledBT);
  }
}
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	46c0      	nop			; (mov r8, r8)
 800242a:	46bd      	mov	sp, r7
 800242c:	b007      	add	sp, #28
 800242e:	bd90      	pop	{r4, r7, pc}
 8002430:	20000000 	.word	0x20000000
 8002434:	20000010 	.word	0x20000010
 8002438:	20000020 	.word	0x20000020

0800243c <Blue>:

void Blue(int startPin, int endPin, int ledBT) {
 800243c:	b590      	push	{r4, r7, lr}
 800243e:	b087      	sub	sp, #28
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  for (uint8_t count = startPin; count <= endPin; count++) {
 8002448:	2317      	movs	r3, #23
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	701a      	strb	r2, [r3, #0]
 8002450:	e01d      	b.n	800248e <Blue+0x52>
	registersWrite(bluePin[count], 0x00);     //Green
 8002452:	2417      	movs	r4, #23
 8002454:	193b      	adds	r3, r7, r4
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	4a12      	ldr	r2, [pc, #72]	; (80024a4 <Blue+0x68>)
 800245a:	5cd3      	ldrb	r3, [r2, r3]
 800245c:	2100      	movs	r1, #0
 800245e:	0018      	movs	r0, r3
 8002460:	f7ff ff34 	bl	80022cc <registersWrite>
	registersWrite(redPin[count], 0x01);
 8002464:	193b      	adds	r3, r7, r4
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	4a0f      	ldr	r2, [pc, #60]	; (80024a8 <Blue+0x6c>)
 800246a:	5cd3      	ldrb	r3, [r2, r3]
 800246c:	2101      	movs	r1, #1
 800246e:	0018      	movs	r0, r3
 8002470:	f7ff ff2c 	bl	80022cc <registersWrite>
	registersWrite(greenPin[count], 0x01);    //Blue
 8002474:	193b      	adds	r3, r7, r4
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	4a0c      	ldr	r2, [pc, #48]	; (80024ac <Blue+0x70>)
 800247a:	5cd3      	ldrb	r3, [r2, r3]
 800247c:	2101      	movs	r1, #1
 800247e:	0018      	movs	r0, r3
 8002480:	f7ff ff24 	bl	80022cc <registersWrite>
  for (uint8_t count = startPin; count <= endPin; count++) {
 8002484:	193b      	adds	r3, r7, r4
 8002486:	781a      	ldrb	r2, [r3, #0]
 8002488:	193b      	adds	r3, r7, r4
 800248a:	3201      	adds	r2, #1
 800248c:	701a      	strb	r2, [r3, #0]
 800248e:	2317      	movs	r3, #23
 8002490:	18fb      	adds	r3, r7, r3
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	429a      	cmp	r2, r3
 8002498:	dadb      	bge.n	8002452 <Blue+0x16>
//    delay(ledBT);
  }
}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	46c0      	nop			; (mov r8, r8)
 800249e:	46bd      	mov	sp, r7
 80024a0:	b007      	add	sp, #28
 80024a2:	bd90      	pop	{r4, r7, pc}
 80024a4:	20000010 	.word	0x20000010
 80024a8:	20000000 	.word	0x20000000
 80024ac:	20000020 	.word	0x20000020

080024b0 <Yellow>:

void Yellow(int startPin, int endPin, int ledBT) {
 80024b0:	b590      	push	{r4, r7, lr}
 80024b2:	b087      	sub	sp, #28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  for (uint8_t count = startPin; count <= endPin; count++) {
 80024bc:	2317      	movs	r3, #23
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	701a      	strb	r2, [r3, #0]
 80024c4:	e01d      	b.n	8002502 <Yellow+0x52>
	registersWrite(bluePin[count], 0x01);     //Green
 80024c6:	2417      	movs	r4, #23
 80024c8:	193b      	adds	r3, r7, r4
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	4a12      	ldr	r2, [pc, #72]	; (8002518 <Yellow+0x68>)
 80024ce:	5cd3      	ldrb	r3, [r2, r3]
 80024d0:	2101      	movs	r1, #1
 80024d2:	0018      	movs	r0, r3
 80024d4:	f7ff fefa 	bl	80022cc <registersWrite>
	registersWrite(redPin[count], 0x00);
 80024d8:	193b      	adds	r3, r7, r4
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	4a0f      	ldr	r2, [pc, #60]	; (800251c <Yellow+0x6c>)
 80024de:	5cd3      	ldrb	r3, [r2, r3]
 80024e0:	2100      	movs	r1, #0
 80024e2:	0018      	movs	r0, r3
 80024e4:	f7ff fef2 	bl	80022cc <registersWrite>
	registersWrite(greenPin[count], 0x00);    //Blue
 80024e8:	193b      	adds	r3, r7, r4
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	4a0c      	ldr	r2, [pc, #48]	; (8002520 <Yellow+0x70>)
 80024ee:	5cd3      	ldrb	r3, [r2, r3]
 80024f0:	2100      	movs	r1, #0
 80024f2:	0018      	movs	r0, r3
 80024f4:	f7ff feea 	bl	80022cc <registersWrite>
  for (uint8_t count = startPin; count <= endPin; count++) {
 80024f8:	193b      	adds	r3, r7, r4
 80024fa:	781a      	ldrb	r2, [r3, #0]
 80024fc:	193b      	adds	r3, r7, r4
 80024fe:	3201      	adds	r2, #1
 8002500:	701a      	strb	r2, [r3, #0]
 8002502:	2317      	movs	r3, #23
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	429a      	cmp	r2, r3
 800250c:	dadb      	bge.n	80024c6 <Yellow+0x16>
//    delay(ledBT);
  }
}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	46c0      	nop			; (mov r8, r8)
 8002512:	46bd      	mov	sp, r7
 8002514:	b007      	add	sp, #28
 8002516:	bd90      	pop	{r4, r7, pc}
 8002518:	20000010 	.word	0x20000010
 800251c:	20000000 	.word	0x20000000
 8002520:	20000020 	.word	0x20000020

08002524 <White>:

void White(int startPin, int endPin, int ledBT) {
 8002524:	b590      	push	{r4, r7, lr}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  for (uint8_t count = startPin; count <= endPin; count++) {
 8002530:	2317      	movs	r3, #23
 8002532:	18fb      	adds	r3, r7, r3
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	701a      	strb	r2, [r3, #0]
 8002538:	e01d      	b.n	8002576 <White+0x52>
	registersWrite(bluePin[count], 0x00);     //Green
 800253a:	2417      	movs	r4, #23
 800253c:	193b      	adds	r3, r7, r4
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	4a12      	ldr	r2, [pc, #72]	; (800258c <White+0x68>)
 8002542:	5cd3      	ldrb	r3, [r2, r3]
 8002544:	2100      	movs	r1, #0
 8002546:	0018      	movs	r0, r3
 8002548:	f7ff fec0 	bl	80022cc <registersWrite>
	registersWrite(redPin[count], 0x00);
 800254c:	193b      	adds	r3, r7, r4
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	4a0f      	ldr	r2, [pc, #60]	; (8002590 <White+0x6c>)
 8002552:	5cd3      	ldrb	r3, [r2, r3]
 8002554:	2100      	movs	r1, #0
 8002556:	0018      	movs	r0, r3
 8002558:	f7ff feb8 	bl	80022cc <registersWrite>
	registersWrite(greenPin[count], 0x00);    //Blue
 800255c:	193b      	adds	r3, r7, r4
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	4a0c      	ldr	r2, [pc, #48]	; (8002594 <White+0x70>)
 8002562:	5cd3      	ldrb	r3, [r2, r3]
 8002564:	2100      	movs	r1, #0
 8002566:	0018      	movs	r0, r3
 8002568:	f7ff feb0 	bl	80022cc <registersWrite>
  for (uint8_t count = startPin; count <= endPin; count++) {
 800256c:	193b      	adds	r3, r7, r4
 800256e:	781a      	ldrb	r2, [r3, #0]
 8002570:	193b      	adds	r3, r7, r4
 8002572:	3201      	adds	r2, #1
 8002574:	701a      	strb	r2, [r3, #0]
 8002576:	2317      	movs	r3, #23
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	429a      	cmp	r2, r3
 8002580:	dadb      	bge.n	800253a <White+0x16>
//    delay(ledBT);
  }
}
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	46c0      	nop			; (mov r8, r8)
 8002586:	46bd      	mov	sp, r7
 8002588:	b007      	add	sp, #28
 800258a:	bd90      	pop	{r4, r7, pc}
 800258c:	20000010 	.word	0x20000010
 8002590:	20000000 	.word	0x20000000
 8002594:	20000020 	.word	0x20000020

08002598 <Cyan>:

void Cyan(int startPin, int endPin, int ledBT) {
 8002598:	b590      	push	{r4, r7, lr}
 800259a:	b087      	sub	sp, #28
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  for (uint8_t count = startPin; count <= endPin; count++) {
 80025a4:	2317      	movs	r3, #23
 80025a6:	18fb      	adds	r3, r7, r3
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	701a      	strb	r2, [r3, #0]
 80025ac:	e01d      	b.n	80025ea <Cyan+0x52>
	registersWrite(redPin[count], 0x01);
 80025ae:	2417      	movs	r4, #23
 80025b0:	193b      	adds	r3, r7, r4
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	4a12      	ldr	r2, [pc, #72]	; (8002600 <Cyan+0x68>)
 80025b6:	5cd3      	ldrb	r3, [r2, r3]
 80025b8:	2101      	movs	r1, #1
 80025ba:	0018      	movs	r0, r3
 80025bc:	f7ff fe86 	bl	80022cc <registersWrite>
	registersWrite(greenPin[count], 0x00);    //Blue
 80025c0:	193b      	adds	r3, r7, r4
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	4a0f      	ldr	r2, [pc, #60]	; (8002604 <Cyan+0x6c>)
 80025c6:	5cd3      	ldrb	r3, [r2, r3]
 80025c8:	2100      	movs	r1, #0
 80025ca:	0018      	movs	r0, r3
 80025cc:	f7ff fe7e 	bl	80022cc <registersWrite>
	registersWrite(bluePin[count], 0x00);     //Green
 80025d0:	193b      	adds	r3, r7, r4
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	4a0c      	ldr	r2, [pc, #48]	; (8002608 <Cyan+0x70>)
 80025d6:	5cd3      	ldrb	r3, [r2, r3]
 80025d8:	2100      	movs	r1, #0
 80025da:	0018      	movs	r0, r3
 80025dc:	f7ff fe76 	bl	80022cc <registersWrite>
  for (uint8_t count = startPin; count <= endPin; count++) {
 80025e0:	193b      	adds	r3, r7, r4
 80025e2:	781a      	ldrb	r2, [r3, #0]
 80025e4:	193b      	adds	r3, r7, r4
 80025e6:	3201      	adds	r2, #1
 80025e8:	701a      	strb	r2, [r3, #0]
 80025ea:	2317      	movs	r3, #23
 80025ec:	18fb      	adds	r3, r7, r3
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	dadb      	bge.n	80025ae <Cyan+0x16>
//    delay(ledBT);
  }
}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	46c0      	nop			; (mov r8, r8)
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b007      	add	sp, #28
 80025fe:	bd90      	pop	{r4, r7, pc}
 8002600:	20000000 	.word	0x20000000
 8002604:	20000020 	.word	0x20000020
 8002608:	20000010 	.word	0x20000010

0800260c <Pink>:

void Pink(int startPin, int endPin, int ledBT) {
 800260c:	b590      	push	{r4, r7, lr}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  for (uint8_t count = startPin; count <= endPin; count++) {
 8002618:	2317      	movs	r3, #23
 800261a:	18fb      	adds	r3, r7, r3
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	701a      	strb	r2, [r3, #0]
 8002620:	e01d      	b.n	800265e <Pink+0x52>

	registersWrite(redPin[count], 0x00);
 8002622:	2417      	movs	r4, #23
 8002624:	193b      	adds	r3, r7, r4
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	4a12      	ldr	r2, [pc, #72]	; (8002674 <Pink+0x68>)
 800262a:	5cd3      	ldrb	r3, [r2, r3]
 800262c:	2100      	movs	r1, #0
 800262e:	0018      	movs	r0, r3
 8002630:	f7ff fe4c 	bl	80022cc <registersWrite>
	registersWrite(bluePin[count], 0x00);     //Green
 8002634:	193b      	adds	r3, r7, r4
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	4a0f      	ldr	r2, [pc, #60]	; (8002678 <Pink+0x6c>)
 800263a:	5cd3      	ldrb	r3, [r2, r3]
 800263c:	2100      	movs	r1, #0
 800263e:	0018      	movs	r0, r3
 8002640:	f7ff fe44 	bl	80022cc <registersWrite>
	registersWrite(greenPin[count], 0x01);    //Blue
 8002644:	193b      	adds	r3, r7, r4
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	4a0c      	ldr	r2, [pc, #48]	; (800267c <Pink+0x70>)
 800264a:	5cd3      	ldrb	r3, [r2, r3]
 800264c:	2101      	movs	r1, #1
 800264e:	0018      	movs	r0, r3
 8002650:	f7ff fe3c 	bl	80022cc <registersWrite>
  for (uint8_t count = startPin; count <= endPin; count++) {
 8002654:	193b      	adds	r3, r7, r4
 8002656:	781a      	ldrb	r2, [r3, #0]
 8002658:	193b      	adds	r3, r7, r4
 800265a:	3201      	adds	r2, #1
 800265c:	701a      	strb	r2, [r3, #0]
 800265e:	2317      	movs	r3, #23
 8002660:	18fb      	adds	r3, r7, r3
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	68ba      	ldr	r2, [r7, #8]
 8002666:	429a      	cmp	r2, r3
 8002668:	dadb      	bge.n	8002622 <Pink+0x16>
//    delay(ledBT);
  }
}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	46c0      	nop			; (mov r8, r8)
 800266e:	46bd      	mov	sp, r7
 8002670:	b007      	add	sp, #28
 8002672:	bd90      	pop	{r4, r7, pc}
 8002674:	20000000 	.word	0x20000000
 8002678:	20000010 	.word	0x20000010
 800267c:	20000020 	.word	0x20000020

08002680 <LedOff>:
void LedOff(int startPin, int endPin, int ledBT) {
 8002680:	b590      	push	{r4, r7, lr}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  for (uint8_t count = startPin; count <= endPin; count++) {
 800268c:	2317      	movs	r3, #23
 800268e:	18fb      	adds	r3, r7, r3
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	701a      	strb	r2, [r3, #0]
 8002694:	e01d      	b.n	80026d2 <LedOff+0x52>

	registersWrite(redPin[count], 0x01);
 8002696:	2417      	movs	r4, #23
 8002698:	193b      	adds	r3, r7, r4
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	4a12      	ldr	r2, [pc, #72]	; (80026e8 <LedOff+0x68>)
 800269e:	5cd3      	ldrb	r3, [r2, r3]
 80026a0:	2101      	movs	r1, #1
 80026a2:	0018      	movs	r0, r3
 80026a4:	f7ff fe12 	bl	80022cc <registersWrite>
	registersWrite(bluePin[count], 0x01);     //Green
 80026a8:	193b      	adds	r3, r7, r4
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	4a0f      	ldr	r2, [pc, #60]	; (80026ec <LedOff+0x6c>)
 80026ae:	5cd3      	ldrb	r3, [r2, r3]
 80026b0:	2101      	movs	r1, #1
 80026b2:	0018      	movs	r0, r3
 80026b4:	f7ff fe0a 	bl	80022cc <registersWrite>
	registersWrite(greenPin[count], 0x01);    //Blue
 80026b8:	193b      	adds	r3, r7, r4
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	4a0c      	ldr	r2, [pc, #48]	; (80026f0 <LedOff+0x70>)
 80026be:	5cd3      	ldrb	r3, [r2, r3]
 80026c0:	2101      	movs	r1, #1
 80026c2:	0018      	movs	r0, r3
 80026c4:	f7ff fe02 	bl	80022cc <registersWrite>
  for (uint8_t count = startPin; count <= endPin; count++) {
 80026c8:	193b      	adds	r3, r7, r4
 80026ca:	781a      	ldrb	r2, [r3, #0]
 80026cc:	193b      	adds	r3, r7, r4
 80026ce:	3201      	adds	r2, #1
 80026d0:	701a      	strb	r2, [r3, #0]
 80026d2:	2317      	movs	r3, #23
 80026d4:	18fb      	adds	r3, r7, r3
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	429a      	cmp	r2, r3
 80026dc:	dadb      	bge.n	8002696 <LedOff+0x16>
//    delay(ledBT);
  }
}
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	46c0      	nop			; (mov r8, r8)
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b007      	add	sp, #28
 80026e6:	bd90      	pop	{r4, r7, pc}
 80026e8:	20000000 	.word	0x20000000
 80026ec:	20000010 	.word	0x20000010
 80026f0:	20000020 	.word	0x20000020

080026f4 <AllLedOff>:
void AllLedOff(int clearSpeed) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  for (int i = 0; i <= 44; i++) {
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	e00b      	b.n	800271a <AllLedOff+0x26>
    registersWrite(i, 0xFF);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	21ff      	movs	r1, #255	; 0xff
 8002706:	0018      	movs	r0, r3
 8002708:	f7ff fde0 	bl	80022cc <registersWrite>
    delay(clearSpeed);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	0018      	movs	r0, r3
 8002710:	f000 fd23 	bl	800315a <delay>
  for (int i = 0; i <= 44; i++) {
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	3301      	adds	r3, #1
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2b2c      	cmp	r3, #44	; 0x2c
 800271e:	ddf0      	ble.n	8002702 <AllLedOff+0xe>
  }
}
 8002720:	46c0      	nop			; (mov r8, r8)
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	46bd      	mov	sp, r7
 8002726:	b004      	add	sp, #16
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <SetLed>:

 void SetLed(uint8_t Slotnum,LedColour_t Colour)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	0002      	movs	r2, r0
 8002734:	1dfb      	adds	r3, r7, #7
 8002736:	701a      	strb	r2, [r3, #0]
 8002738:	1dbb      	adds	r3, r7, #6
 800273a:	1c0a      	adds	r2, r1, #0
 800273c:	701a      	strb	r2, [r3, #0]
	switch(Colour)
 800273e:	1dbb      	adds	r3, r7, #6
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b07      	cmp	r3, #7
 8002744:	d900      	bls.n	8002748 <SetLed+0x1c>
 8002746:	e084      	b.n	8002852 <SetLed+0x126>
 8002748:	009a      	lsls	r2, r3, #2
 800274a:	4b44      	ldr	r3, [pc, #272]	; (800285c <SetLed+0x130>)
 800274c:	18d3      	adds	r3, r2, r3
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	469f      	mov	pc, r3
	{
	case RGBLedOff:
					LedOff(Slotnum, Slotnum,0x00);
 8002752:	1dfb      	adds	r3, r7, #7
 8002754:	7818      	ldrb	r0, [r3, #0]
 8002756:	1dfb      	adds	r3, r7, #7
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2200      	movs	r2, #0
 800275c:	0019      	movs	r1, r3
 800275e:	f7ff ff8f 	bl	8002680 <LedOff>
					LedOff(Slotnum, Slotnum,0x00);
 8002762:	1dfb      	adds	r3, r7, #7
 8002764:	7818      	ldrb	r0, [r3, #0]
 8002766:	1dfb      	adds	r3, r7, #7
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2200      	movs	r2, #0
 800276c:	0019      	movs	r1, r3
 800276e:	f7ff ff87 	bl	8002680 <LedOff>
					break;
 8002772:	e06f      	b.n	8002854 <SetLed+0x128>
	case RGBRed:
					Red(Slotnum, Slotnum,0x00);
 8002774:	1dfb      	adds	r3, r7, #7
 8002776:	7818      	ldrb	r0, [r3, #0]
 8002778:	1dfb      	adds	r3, r7, #7
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2200      	movs	r2, #0
 800277e:	0019      	movs	r1, r3
 8002780:	f7ff fde8 	bl	8002354 <Red>
					Red(Slotnum, Slotnum,0x00);
 8002784:	1dfb      	adds	r3, r7, #7
 8002786:	7818      	ldrb	r0, [r3, #0]
 8002788:	1dfb      	adds	r3, r7, #7
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2200      	movs	r2, #0
 800278e:	0019      	movs	r1, r3
 8002790:	f7ff fde0 	bl	8002354 <Red>
					break;
 8002794:	e05e      	b.n	8002854 <SetLed+0x128>
	case RGBGreen:
					Green(Slotnum, Slotnum,0x00);
 8002796:	1dfb      	adds	r3, r7, #7
 8002798:	7818      	ldrb	r0, [r3, #0]
 800279a:	1dfb      	adds	r3, r7, #7
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2200      	movs	r2, #0
 80027a0:	0019      	movs	r1, r3
 80027a2:	f7ff fe11 	bl	80023c8 <Green>
					Green(Slotnum, Slotnum,0x00);
 80027a6:	1dfb      	adds	r3, r7, #7
 80027a8:	7818      	ldrb	r0, [r3, #0]
 80027aa:	1dfb      	adds	r3, r7, #7
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2200      	movs	r2, #0
 80027b0:	0019      	movs	r1, r3
 80027b2:	f7ff fe09 	bl	80023c8 <Green>
					break;
 80027b6:	e04d      	b.n	8002854 <SetLed+0x128>
	case RGBBlue:
					Blue(Slotnum, Slotnum,0x00);
 80027b8:	1dfb      	adds	r3, r7, #7
 80027ba:	7818      	ldrb	r0, [r3, #0]
 80027bc:	1dfb      	adds	r3, r7, #7
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2200      	movs	r2, #0
 80027c2:	0019      	movs	r1, r3
 80027c4:	f7ff fe3a 	bl	800243c <Blue>
					break;
 80027c8:	e044      	b.n	8002854 <SetLed+0x128>
	case RGBYellow:
					Yellow(Slotnum, Slotnum,0x00);
 80027ca:	1dfb      	adds	r3, r7, #7
 80027cc:	7818      	ldrb	r0, [r3, #0]
 80027ce:	1dfb      	adds	r3, r7, #7
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2200      	movs	r2, #0
 80027d4:	0019      	movs	r1, r3
 80027d6:	f7ff fe6b 	bl	80024b0 <Yellow>
					Yellow(Slotnum, Slotnum,0x00);
 80027da:	1dfb      	adds	r3, r7, #7
 80027dc:	7818      	ldrb	r0, [r3, #0]
 80027de:	1dfb      	adds	r3, r7, #7
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2200      	movs	r2, #0
 80027e4:	0019      	movs	r1, r3
 80027e6:	f7ff fe63 	bl	80024b0 <Yellow>
					break;
 80027ea:	e033      	b.n	8002854 <SetLed+0x128>
	case RGBPink:
					Pink(Slotnum, Slotnum,0x00);
 80027ec:	1dfb      	adds	r3, r7, #7
 80027ee:	7818      	ldrb	r0, [r3, #0]
 80027f0:	1dfb      	adds	r3, r7, #7
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2200      	movs	r2, #0
 80027f6:	0019      	movs	r1, r3
 80027f8:	f7ff ff08 	bl	800260c <Pink>
					Pink(Slotnum, Slotnum,0x00);
 80027fc:	1dfb      	adds	r3, r7, #7
 80027fe:	7818      	ldrb	r0, [r3, #0]
 8002800:	1dfb      	adds	r3, r7, #7
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2200      	movs	r2, #0
 8002806:	0019      	movs	r1, r3
 8002808:	f7ff ff00 	bl	800260c <Pink>
					break;
 800280c:	e022      	b.n	8002854 <SetLed+0x128>

	case RGBCyan:
					Cyan(Slotnum, Slotnum,0x00);
 800280e:	1dfb      	adds	r3, r7, #7
 8002810:	7818      	ldrb	r0, [r3, #0]
 8002812:	1dfb      	adds	r3, r7, #7
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2200      	movs	r2, #0
 8002818:	0019      	movs	r1, r3
 800281a:	f7ff febd 	bl	8002598 <Cyan>
					Cyan(Slotnum, Slotnum,0x00);
 800281e:	1dfb      	adds	r3, r7, #7
 8002820:	7818      	ldrb	r0, [r3, #0]
 8002822:	1dfb      	adds	r3, r7, #7
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2200      	movs	r2, #0
 8002828:	0019      	movs	r1, r3
 800282a:	f7ff feb5 	bl	8002598 <Cyan>
					break;
 800282e:	e011      	b.n	8002854 <SetLed+0x128>
	case RGBWhite:
					White(Slotnum, Slotnum,0x00);
 8002830:	1dfb      	adds	r3, r7, #7
 8002832:	7818      	ldrb	r0, [r3, #0]
 8002834:	1dfb      	adds	r3, r7, #7
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2200      	movs	r2, #0
 800283a:	0019      	movs	r1, r3
 800283c:	f7ff fe72 	bl	8002524 <White>
					White(Slotnum, Slotnum,0x00);
 8002840:	1dfb      	adds	r3, r7, #7
 8002842:	7818      	ldrb	r0, [r3, #0]
 8002844:	1dfb      	adds	r3, r7, #7
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2200      	movs	r2, #0
 800284a:	0019      	movs	r1, r3
 800284c:	f7ff fe6a 	bl	8002524 <White>
					break;
 8002850:	e000      	b.n	8002854 <SetLed+0x128>
	default:
					break;
 8002852:	46c0      	nop			; (mov r8, r8)
	}
}
 8002854:	46c0      	nop			; (mov r8, r8)
 8002856:	46bd      	mov	sp, r7
 8002858:	b002      	add	sp, #8
 800285a:	bd80      	pop	{r7, pc}
 800285c:	0800c098 	.word	0x0800c098

08002860 <UpdateSlotLeds>:

void UpdateSlotLeds(uint16_t Data, Slot_Para_t status)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	0002      	movs	r2, r0
 8002868:	1dbb      	adds	r3, r7, #6
 800286a:	801a      	strh	r2, [r3, #0]
 800286c:	1d7b      	adds	r3, r7, #5
 800286e:	1c0a      	adds	r2, r1, #0
 8002870:	701a      	strb	r2, [r3, #0]
	int8_t i = 0;
 8002872:	210f      	movs	r1, #15
 8002874:	187b      	adds	r3, r7, r1
 8002876:	2200      	movs	r2, #0
 8002878:	701a      	strb	r2, [r3, #0]
	for(i = 0; i< 15; i++)
 800287a:	187b      	adds	r3, r7, r1
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]
 8002880:	e01d      	b.n	80028be <UpdateSlotLeds+0x5e>
	{
		if(Data & (0x4000 >> i))
 8002882:	1dbb      	adds	r3, r7, #6
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	200f      	movs	r0, #15
 8002888:	183a      	adds	r2, r7, r0
 800288a:	7812      	ldrb	r2, [r2, #0]
 800288c:	b252      	sxtb	r2, r2
 800288e:	2180      	movs	r1, #128	; 0x80
 8002890:	01c9      	lsls	r1, r1, #7
 8002892:	4111      	asrs	r1, r2
 8002894:	000a      	movs	r2, r1
 8002896:	4013      	ands	r3, r2
 8002898:	d008      	beq.n	80028ac <UpdateSlotLeds+0x4c>
			SetLed(i,SlotParam[status]);
 800289a:	183b      	adds	r3, r7, r0
 800289c:	7818      	ldrb	r0, [r3, #0]
 800289e:	1d7b      	adds	r3, r7, #5
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	4a0c      	ldr	r2, [pc, #48]	; (80028d4 <UpdateSlotLeds+0x74>)
 80028a4:	5cd3      	ldrb	r3, [r2, r3]
 80028a6:	0019      	movs	r1, r3
 80028a8:	f7ff ff40 	bl	800272c <SetLed>
	for(i = 0; i< 15; i++)
 80028ac:	210f      	movs	r1, #15
 80028ae:	187b      	adds	r3, r7, r1
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	b25b      	sxtb	r3, r3
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	3301      	adds	r3, #1
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	187b      	adds	r3, r7, r1
 80028bc:	701a      	strb	r2, [r3, #0]
 80028be:	230f      	movs	r3, #15
 80028c0:	18fb      	adds	r3, r7, r3
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	b25b      	sxtb	r3, r3
 80028c6:	2b0e      	cmp	r3, #14
 80028c8:	dddb      	ble.n	8002882 <UpdateSlotLeds+0x22>
	}
}
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	46c0      	nop			; (mov r8, r8)
 80028ce:	46bd      	mov	sp, r7
 80028d0:	b004      	add	sp, #16
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20000530 	.word	0x20000530

080028d8 <HAL_GPIO_EXTI_Rising_Callback>:
Slot15_t Slot;



void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	0002      	movs	r2, r0
 80028e0:	1dbb      	adds	r3, r7, #6
 80028e2:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == GPIO_PIN_0)
 80028e4:	1dbb      	adds	r3, r7, #6
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d156      	bne.n	800299a <HAL_GPIO_EXTI_Rising_Callback+0xc2>
  {
//	 Readbuff[j++] = __HAL_TIM_GET_COUNTER(&htim2);
    if (__HAL_TIM_GET_COUNTER(&htim2) > 8000)
 80028ec:	4bb5      	ldr	r3, [pc, #724]	; (8002bc4 <HAL_GPIO_EXTI_Rising_Callback+0x2ec>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028f2:	23fa      	movs	r3, #250	; 0xfa
 80028f4:	015b      	lsls	r3, r3, #5
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d906      	bls.n	8002908 <HAL_GPIO_EXTI_Rising_Callback+0x30>
    {
      CapChannelA = 0;
 80028fa:	4bb3      	ldr	r3, [pc, #716]	; (8002bc8 <HAL_GPIO_EXTI_Rising_Callback+0x2f0>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]
      bitIndexA = 0;
 8002900:	4bb2      	ldr	r3, [pc, #712]	; (8002bcc <HAL_GPIO_EXTI_Rising_Callback+0x2f4>)
 8002902:	2200      	movs	r2, #0
 8002904:	701a      	strb	r2, [r3, #0]
 8002906:	e03a      	b.n	800297e <HAL_GPIO_EXTI_Rising_Callback+0xa6>
    }
    else if (__HAL_TIM_GET_COUNTER(&htim2) > 2000)
 8002908:	4bae      	ldr	r3, [pc, #696]	; (8002bc4 <HAL_GPIO_EXTI_Rising_Callback+0x2ec>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800290e:	23fa      	movs	r3, #250	; 0xfa
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	429a      	cmp	r2, r3
 8002914:	d915      	bls.n	8002942 <HAL_GPIO_EXTI_Rising_Callback+0x6a>
    {
	  CapChannelA |= (1UL << (7-bitIndexA));   // write 1
 8002916:	4bad      	ldr	r3, [pc, #692]	; (8002bcc <HAL_GPIO_EXTI_Rising_Callback+0x2f4>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	001a      	movs	r2, r3
 800291c:	2307      	movs	r3, #7
 800291e:	1a9b      	subs	r3, r3, r2
 8002920:	2201      	movs	r2, #1
 8002922:	409a      	lsls	r2, r3
 8002924:	0013      	movs	r3, r2
 8002926:	b2da      	uxtb	r2, r3
 8002928:	4ba7      	ldr	r3, [pc, #668]	; (8002bc8 <HAL_GPIO_EXTI_Rising_Callback+0x2f0>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	4313      	orrs	r3, r2
 800292e:	b2da      	uxtb	r2, r3
 8002930:	4ba5      	ldr	r3, [pc, #660]	; (8002bc8 <HAL_GPIO_EXTI_Rising_Callback+0x2f0>)
 8002932:	701a      	strb	r2, [r3, #0]
      bitIndexA++;
 8002934:	4ba5      	ldr	r3, [pc, #660]	; (8002bcc <HAL_GPIO_EXTI_Rising_Callback+0x2f4>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	3301      	adds	r3, #1
 800293a:	b2da      	uxtb	r2, r3
 800293c:	4ba3      	ldr	r3, [pc, #652]	; (8002bcc <HAL_GPIO_EXTI_Rising_Callback+0x2f4>)
 800293e:	701a      	strb	r2, [r3, #0]
 8002940:	e01d      	b.n	800297e <HAL_GPIO_EXTI_Rising_Callback+0xa6>
    }
    else if (__HAL_TIM_GET_COUNTER(&htim2) > 1000)
 8002942:	4ba0      	ldr	r3, [pc, #640]	; (8002bc4 <HAL_GPIO_EXTI_Rising_Callback+0x2ec>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002948:	23fa      	movs	r3, #250	; 0xfa
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	429a      	cmp	r2, r3
 800294e:	d916      	bls.n	800297e <HAL_GPIO_EXTI_Rising_Callback+0xa6>
    {
      CapChannelA &= ~(1UL << (7-bitIndexA));  // write 0
 8002950:	4b9e      	ldr	r3, [pc, #632]	; (8002bcc <HAL_GPIO_EXTI_Rising_Callback+0x2f4>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	001a      	movs	r2, r3
 8002956:	2307      	movs	r3, #7
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	2201      	movs	r2, #1
 800295c:	409a      	lsls	r2, r3
 800295e:	0013      	movs	r3, r2
 8002960:	b2db      	uxtb	r3, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	b2db      	uxtb	r3, r3
 8002966:	4a98      	ldr	r2, [pc, #608]	; (8002bc8 <HAL_GPIO_EXTI_Rising_Callback+0x2f0>)
 8002968:	7812      	ldrb	r2, [r2, #0]
 800296a:	4013      	ands	r3, r2
 800296c:	b2da      	uxtb	r2, r3
 800296e:	4b96      	ldr	r3, [pc, #600]	; (8002bc8 <HAL_GPIO_EXTI_Rising_Callback+0x2f0>)
 8002970:	701a      	strb	r2, [r3, #0]
      bitIndexA++;
 8002972:	4b96      	ldr	r3, [pc, #600]	; (8002bcc <HAL_GPIO_EXTI_Rising_Callback+0x2f4>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	3301      	adds	r3, #1
 8002978:	b2da      	uxtb	r2, r3
 800297a:	4b94      	ldr	r3, [pc, #592]	; (8002bcc <HAL_GPIO_EXTI_Rising_Callback+0x2f4>)
 800297c:	701a      	strb	r2, [r3, #0]
    }
    if(bitIndexA == 8)
 800297e:	4b93      	ldr	r3, [pc, #588]	; (8002bcc <HAL_GPIO_EXTI_Rising_Callback+0x2f4>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b08      	cmp	r3, #8
 8002984:	d105      	bne.n	8002992 <HAL_GPIO_EXTI_Rising_Callback+0xba>
    {
//    	if(CapChannelA == 0xAA)
		  ReceivedA = 1;
 8002986:	4b92      	ldr	r3, [pc, #584]	; (8002bd0 <HAL_GPIO_EXTI_Rising_Callback+0x2f8>)
 8002988:	2201      	movs	r2, #1
 800298a:	701a      	strb	r2, [r3, #0]
    	 bitIndexA = 0;
 800298c:	4b8f      	ldr	r3, [pc, #572]	; (8002bcc <HAL_GPIO_EXTI_Rising_Callback+0x2f4>)
 800298e:	2200      	movs	r2, #0
 8002990:	701a      	strb	r2, [r3, #0]
//      i = 0;
    }
//	if( j == 32)
//		j = 0;
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 8002992:	4b8c      	ldr	r3, [pc, #560]	; (8002bc4 <HAL_GPIO_EXTI_Rising_Callback+0x2ec>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2200      	movs	r2, #0
 8002998:	625a      	str	r2, [r3, #36]	; 0x24
  }

  if(GPIO_Pin == GPIO_PIN_1)
 800299a:	1dbb      	adds	r3, r7, #6
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d156      	bne.n	8002a50 <HAL_GPIO_EXTI_Rising_Callback+0x178>
  {
//	Readbuff[j++] = __HAL_TIM_GET_COUNTER(&htim14);
	if (__HAL_TIM_GET_COUNTER(&htim14) > 8000)
 80029a2:	4b8c      	ldr	r3, [pc, #560]	; (8002bd4 <HAL_GPIO_EXTI_Rising_Callback+0x2fc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029a8:	23fa      	movs	r3, #250	; 0xfa
 80029aa:	015b      	lsls	r3, r3, #5
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d906      	bls.n	80029be <HAL_GPIO_EXTI_Rising_Callback+0xe6>
	{
	CapChannelB = 0;
 80029b0:	4b89      	ldr	r3, [pc, #548]	; (8002bd8 <HAL_GPIO_EXTI_Rising_Callback+0x300>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	701a      	strb	r2, [r3, #0]
	bitIndexB = 0;
 80029b6:	4b89      	ldr	r3, [pc, #548]	; (8002bdc <HAL_GPIO_EXTI_Rising_Callback+0x304>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	701a      	strb	r2, [r3, #0]
 80029bc:	e03a      	b.n	8002a34 <HAL_GPIO_EXTI_Rising_Callback+0x15c>
	}
	else if (__HAL_TIM_GET_COUNTER(&htim14) > 2000)
 80029be:	4b85      	ldr	r3, [pc, #532]	; (8002bd4 <HAL_GPIO_EXTI_Rising_Callback+0x2fc>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029c4:	23fa      	movs	r3, #250	; 0xfa
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d915      	bls.n	80029f8 <HAL_GPIO_EXTI_Rising_Callback+0x120>
	{
	CapChannelB |= (1UL << (7-bitIndexB));   // write 1
 80029cc:	4b83      	ldr	r3, [pc, #524]	; (8002bdc <HAL_GPIO_EXTI_Rising_Callback+0x304>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	001a      	movs	r2, r3
 80029d2:	2307      	movs	r3, #7
 80029d4:	1a9b      	subs	r3, r3, r2
 80029d6:	2201      	movs	r2, #1
 80029d8:	409a      	lsls	r2, r3
 80029da:	0013      	movs	r3, r2
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	4b7e      	ldr	r3, [pc, #504]	; (8002bd8 <HAL_GPIO_EXTI_Rising_Callback+0x300>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	4b7c      	ldr	r3, [pc, #496]	; (8002bd8 <HAL_GPIO_EXTI_Rising_Callback+0x300>)
 80029e8:	701a      	strb	r2, [r3, #0]
	bitIndexB++;
 80029ea:	4b7c      	ldr	r3, [pc, #496]	; (8002bdc <HAL_GPIO_EXTI_Rising_Callback+0x304>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	3301      	adds	r3, #1
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	4b7a      	ldr	r3, [pc, #488]	; (8002bdc <HAL_GPIO_EXTI_Rising_Callback+0x304>)
 80029f4:	701a      	strb	r2, [r3, #0]
 80029f6:	e01d      	b.n	8002a34 <HAL_GPIO_EXTI_Rising_Callback+0x15c>
	}
	else if (__HAL_TIM_GET_COUNTER(&htim14) > 1000)
 80029f8:	4b76      	ldr	r3, [pc, #472]	; (8002bd4 <HAL_GPIO_EXTI_Rising_Callback+0x2fc>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029fe:	23fa      	movs	r3, #250	; 0xfa
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d916      	bls.n	8002a34 <HAL_GPIO_EXTI_Rising_Callback+0x15c>
	{
	CapChannelB &= ~(1UL << (7-bitIndexB));  // write 0
 8002a06:	4b75      	ldr	r3, [pc, #468]	; (8002bdc <HAL_GPIO_EXTI_Rising_Callback+0x304>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	001a      	movs	r2, r3
 8002a0c:	2307      	movs	r3, #7
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	2201      	movs	r2, #1
 8002a12:	409a      	lsls	r2, r3
 8002a14:	0013      	movs	r3, r2
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	4a6e      	ldr	r2, [pc, #440]	; (8002bd8 <HAL_GPIO_EXTI_Rising_Callback+0x300>)
 8002a1e:	7812      	ldrb	r2, [r2, #0]
 8002a20:	4013      	ands	r3, r2
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	4b6c      	ldr	r3, [pc, #432]	; (8002bd8 <HAL_GPIO_EXTI_Rising_Callback+0x300>)
 8002a26:	701a      	strb	r2, [r3, #0]
	bitIndexB++;
 8002a28:	4b6c      	ldr	r3, [pc, #432]	; (8002bdc <HAL_GPIO_EXTI_Rising_Callback+0x304>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	4b6a      	ldr	r3, [pc, #424]	; (8002bdc <HAL_GPIO_EXTI_Rising_Callback+0x304>)
 8002a32:	701a      	strb	r2, [r3, #0]
	}
	if(bitIndexB == 8)
 8002a34:	4b69      	ldr	r3, [pc, #420]	; (8002bdc <HAL_GPIO_EXTI_Rising_Callback+0x304>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d105      	bne.n	8002a48 <HAL_GPIO_EXTI_Rising_Callback+0x170>
	{
//	if(CapChannelB == 0xAA)
	  ReceivedB = 1;
 8002a3c:	4b68      	ldr	r3, [pc, #416]	; (8002be0 <HAL_GPIO_EXTI_Rising_Callback+0x308>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	701a      	strb	r2, [r3, #0]
	  bitIndexB = 0;
 8002a42:	4b66      	ldr	r3, [pc, #408]	; (8002bdc <HAL_GPIO_EXTI_Rising_Callback+0x304>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	701a      	strb	r2, [r3, #0]

	}
//	if( j == 32)
//		j = 0;
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8002a48:	4b62      	ldr	r3, [pc, #392]	; (8002bd4 <HAL_GPIO_EXTI_Rising_Callback+0x2fc>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	625a      	str	r2, [r3, #36]	; 0x24
  }
  if(GPIO_Pin == GPIO_PIN_2)
 8002a50:	1dbb      	adds	r3, r7, #6
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d156      	bne.n	8002b06 <HAL_GPIO_EXTI_Rising_Callback+0x22e>
  {
//	Readbuff[j++] = __HAL_TIM_GET_COUNTER(&htim14);
	if (__HAL_TIM_GET_COUNTER(&htim16) > 8000)
 8002a58:	4b62      	ldr	r3, [pc, #392]	; (8002be4 <HAL_GPIO_EXTI_Rising_Callback+0x30c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a5e:	23fa      	movs	r3, #250	; 0xfa
 8002a60:	015b      	lsls	r3, r3, #5
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d906      	bls.n	8002a74 <HAL_GPIO_EXTI_Rising_Callback+0x19c>
	{
	CapChannelC = 0;
 8002a66:	4b60      	ldr	r3, [pc, #384]	; (8002be8 <HAL_GPIO_EXTI_Rising_Callback+0x310>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
	bitIndexC = 0;
 8002a6c:	4b5f      	ldr	r3, [pc, #380]	; (8002bec <HAL_GPIO_EXTI_Rising_Callback+0x314>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	701a      	strb	r2, [r3, #0]
 8002a72:	e03a      	b.n	8002aea <HAL_GPIO_EXTI_Rising_Callback+0x212>
	}
	else if (__HAL_TIM_GET_COUNTER(&htim16) > 2000)
 8002a74:	4b5b      	ldr	r3, [pc, #364]	; (8002be4 <HAL_GPIO_EXTI_Rising_Callback+0x30c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a7a:	23fa      	movs	r3, #250	; 0xfa
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d915      	bls.n	8002aae <HAL_GPIO_EXTI_Rising_Callback+0x1d6>
	{
	CapChannelC |= (1UL << (7-bitIndexC));   // write 1
 8002a82:	4b5a      	ldr	r3, [pc, #360]	; (8002bec <HAL_GPIO_EXTI_Rising_Callback+0x314>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	001a      	movs	r2, r3
 8002a88:	2307      	movs	r3, #7
 8002a8a:	1a9b      	subs	r3, r3, r2
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	0013      	movs	r3, r2
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	4b54      	ldr	r3, [pc, #336]	; (8002be8 <HAL_GPIO_EXTI_Rising_Callback+0x310>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	4b52      	ldr	r3, [pc, #328]	; (8002be8 <HAL_GPIO_EXTI_Rising_Callback+0x310>)
 8002a9e:	701a      	strb	r2, [r3, #0]
	bitIndexC++;
 8002aa0:	4b52      	ldr	r3, [pc, #328]	; (8002bec <HAL_GPIO_EXTI_Rising_Callback+0x314>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	4b50      	ldr	r3, [pc, #320]	; (8002bec <HAL_GPIO_EXTI_Rising_Callback+0x314>)
 8002aaa:	701a      	strb	r2, [r3, #0]
 8002aac:	e01d      	b.n	8002aea <HAL_GPIO_EXTI_Rising_Callback+0x212>
	}
	else if (__HAL_TIM_GET_COUNTER(&htim16) > 1000)
 8002aae:	4b4d      	ldr	r3, [pc, #308]	; (8002be4 <HAL_GPIO_EXTI_Rising_Callback+0x30c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ab4:	23fa      	movs	r3, #250	; 0xfa
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d916      	bls.n	8002aea <HAL_GPIO_EXTI_Rising_Callback+0x212>
	{
	CapChannelC &= ~(1UL << (7-bitIndexC));  // write 0
 8002abc:	4b4b      	ldr	r3, [pc, #300]	; (8002bec <HAL_GPIO_EXTI_Rising_Callback+0x314>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	001a      	movs	r2, r3
 8002ac2:	2307      	movs	r3, #7
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	409a      	lsls	r2, r3
 8002aca:	0013      	movs	r3, r2
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	4a45      	ldr	r2, [pc, #276]	; (8002be8 <HAL_GPIO_EXTI_Rising_Callback+0x310>)
 8002ad4:	7812      	ldrb	r2, [r2, #0]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	4b43      	ldr	r3, [pc, #268]	; (8002be8 <HAL_GPIO_EXTI_Rising_Callback+0x310>)
 8002adc:	701a      	strb	r2, [r3, #0]
	bitIndexC++;
 8002ade:	4b43      	ldr	r3, [pc, #268]	; (8002bec <HAL_GPIO_EXTI_Rising_Callback+0x314>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	4b41      	ldr	r3, [pc, #260]	; (8002bec <HAL_GPIO_EXTI_Rising_Callback+0x314>)
 8002ae8:	701a      	strb	r2, [r3, #0]
	}
	if(bitIndexC == 8)
 8002aea:	4b40      	ldr	r3, [pc, #256]	; (8002bec <HAL_GPIO_EXTI_Rising_Callback+0x314>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d105      	bne.n	8002afe <HAL_GPIO_EXTI_Rising_Callback+0x226>
	{
//	if(CapChannelB == 0xAA)
		ReceivedC = 1;
 8002af2:	4b3f      	ldr	r3, [pc, #252]	; (8002bf0 <HAL_GPIO_EXTI_Rising_Callback+0x318>)
 8002af4:	2201      	movs	r2, #1
 8002af6:	701a      	strb	r2, [r3, #0]
		bitIndexC = 0;
 8002af8:	4b3c      	ldr	r3, [pc, #240]	; (8002bec <HAL_GPIO_EXTI_Rising_Callback+0x314>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	701a      	strb	r2, [r3, #0]

	}
//	if( j == 32)
//		j = 0;
	__HAL_TIM_SET_COUNTER(&htim16, 0);
 8002afe:	4b39      	ldr	r3, [pc, #228]	; (8002be4 <HAL_GPIO_EXTI_Rising_Callback+0x30c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2200      	movs	r2, #0
 8002b04:	625a      	str	r2, [r3, #36]	; 0x24
  }
  if(GPIO_Pin == GPIO_PIN_3)
 8002b06:	1dbb      	adds	r3, r7, #6
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d156      	bne.n	8002bbc <HAL_GPIO_EXTI_Rising_Callback+0x2e4>
  {
//	Readbuff[j++] = __HAL_TIM_GET_COUNTER(&htim14);
	if (__HAL_TIM_GET_COUNTER(&htim17) > 8000)
 8002b0e:	4b39      	ldr	r3, [pc, #228]	; (8002bf4 <HAL_GPIO_EXTI_Rising_Callback+0x31c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b14:	23fa      	movs	r3, #250	; 0xfa
 8002b16:	015b      	lsls	r3, r3, #5
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d906      	bls.n	8002b2a <HAL_GPIO_EXTI_Rising_Callback+0x252>
	{
	CapChannelD = 0;
 8002b1c:	4b36      	ldr	r3, [pc, #216]	; (8002bf8 <HAL_GPIO_EXTI_Rising_Callback+0x320>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	701a      	strb	r2, [r3, #0]
	bitIndexD = 0;
 8002b22:	4b36      	ldr	r3, [pc, #216]	; (8002bfc <HAL_GPIO_EXTI_Rising_Callback+0x324>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]
 8002b28:	e03a      	b.n	8002ba0 <HAL_GPIO_EXTI_Rising_Callback+0x2c8>
	}
	else if (__HAL_TIM_GET_COUNTER(&htim17) > 2000)
 8002b2a:	4b32      	ldr	r3, [pc, #200]	; (8002bf4 <HAL_GPIO_EXTI_Rising_Callback+0x31c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b30:	23fa      	movs	r3, #250	; 0xfa
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d915      	bls.n	8002b64 <HAL_GPIO_EXTI_Rising_Callback+0x28c>
	{
	CapChannelD |= (1UL << (7-bitIndexD));   // write 1
 8002b38:	4b30      	ldr	r3, [pc, #192]	; (8002bfc <HAL_GPIO_EXTI_Rising_Callback+0x324>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	001a      	movs	r2, r3
 8002b3e:	2307      	movs	r3, #7
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	2201      	movs	r2, #1
 8002b44:	409a      	lsls	r2, r3
 8002b46:	0013      	movs	r3, r2
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	4b2b      	ldr	r3, [pc, #172]	; (8002bf8 <HAL_GPIO_EXTI_Rising_Callback+0x320>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	4b29      	ldr	r3, [pc, #164]	; (8002bf8 <HAL_GPIO_EXTI_Rising_Callback+0x320>)
 8002b54:	701a      	strb	r2, [r3, #0]
	bitIndexD++;
 8002b56:	4b29      	ldr	r3, [pc, #164]	; (8002bfc <HAL_GPIO_EXTI_Rising_Callback+0x324>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	4b27      	ldr	r3, [pc, #156]	; (8002bfc <HAL_GPIO_EXTI_Rising_Callback+0x324>)
 8002b60:	701a      	strb	r2, [r3, #0]
 8002b62:	e01d      	b.n	8002ba0 <HAL_GPIO_EXTI_Rising_Callback+0x2c8>
	}
	else if (__HAL_TIM_GET_COUNTER(&htim17) > 1000)
 8002b64:	4b23      	ldr	r3, [pc, #140]	; (8002bf4 <HAL_GPIO_EXTI_Rising_Callback+0x31c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b6a:	23fa      	movs	r3, #250	; 0xfa
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d916      	bls.n	8002ba0 <HAL_GPIO_EXTI_Rising_Callback+0x2c8>
	{
	CapChannelD &= ~(1UL << (7-bitIndexD));  // write 0
 8002b72:	4b22      	ldr	r3, [pc, #136]	; (8002bfc <HAL_GPIO_EXTI_Rising_Callback+0x324>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	001a      	movs	r2, r3
 8002b78:	2307      	movs	r3, #7
 8002b7a:	1a9b      	subs	r3, r3, r2
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	409a      	lsls	r2, r3
 8002b80:	0013      	movs	r3, r2
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	4a1b      	ldr	r2, [pc, #108]	; (8002bf8 <HAL_GPIO_EXTI_Rising_Callback+0x320>)
 8002b8a:	7812      	ldrb	r2, [r2, #0]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	4b19      	ldr	r3, [pc, #100]	; (8002bf8 <HAL_GPIO_EXTI_Rising_Callback+0x320>)
 8002b92:	701a      	strb	r2, [r3, #0]
	bitIndexD++;
 8002b94:	4b19      	ldr	r3, [pc, #100]	; (8002bfc <HAL_GPIO_EXTI_Rising_Callback+0x324>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	4b17      	ldr	r3, [pc, #92]	; (8002bfc <HAL_GPIO_EXTI_Rising_Callback+0x324>)
 8002b9e:	701a      	strb	r2, [r3, #0]
	}
	if(bitIndexD == 8)
 8002ba0:	4b16      	ldr	r3, [pc, #88]	; (8002bfc <HAL_GPIO_EXTI_Rising_Callback+0x324>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d105      	bne.n	8002bb4 <HAL_GPIO_EXTI_Rising_Callback+0x2dc>
	{
//	if(CapChannelB == 0xAA)
	  ReceivedD = 1;
 8002ba8:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <HAL_GPIO_EXTI_Rising_Callback+0x328>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	701a      	strb	r2, [r3, #0]
	  bitIndexD = 0;
 8002bae:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <HAL_GPIO_EXTI_Rising_Callback+0x324>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	701a      	strb	r2, [r3, #0]

	}
//	if( j == 32)
//		j = 0;
	__HAL_TIM_SET_COUNTER(&htim17, 0);
 8002bb4:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <HAL_GPIO_EXTI_Rising_Callback+0x31c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	625a      	str	r2, [r3, #36]	; 0x24
  }

}
 8002bbc:	46c0      	nop			; (mov r8, r8)
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b002      	add	sp, #8
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	200002b4 	.word	0x200002b4
 8002bc8:	20000259 	.word	0x20000259
 8002bcc:	20000255 	.word	0x20000255
 8002bd0:	2000025d 	.word	0x2000025d
 8002bd4:	2000034c 	.word	0x2000034c
 8002bd8:	2000025a 	.word	0x2000025a
 8002bdc:	20000256 	.word	0x20000256
 8002be0:	2000025e 	.word	0x2000025e
 8002be4:	20000398 	.word	0x20000398
 8002be8:	2000025b 	.word	0x2000025b
 8002bec:	20000257 	.word	0x20000257
 8002bf0:	2000025f 	.word	0x2000025f
 8002bf4:	200003e4 	.word	0x200003e4
 8002bf8:	2000025c 	.word	0x2000025c
 8002bfc:	20000258 	.word	0x20000258
 8002c00:	20000260 	.word	0x20000260

08002c04 <SlotCheck>:



void SlotCheck(uint32_t channel)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
//uint8_t i = 0,SuccessA = 0,SuccessB = 0;
	sendNEC(0xAA,8,channel);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	001a      	movs	r2, r3
 8002c10:	2108      	movs	r1, #8
 8002c12:	20aa      	movs	r0, #170	; 0xaa
 8002c14:	f000 f93e 	bl	8002e94 <sendNEC>
	delay(10);
 8002c18:	200a      	movs	r0, #10
 8002c1a:	f000 fa9e 	bl	800315a <delay>
	switch(channel)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b0c      	cmp	r3, #12
 8002c22:	d100      	bne.n	8002c26 <SlotCheck+0x22>
 8002c24:	e0c9      	b.n	8002dba <SlotCheck+0x1b6>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b0c      	cmp	r3, #12
 8002c2a:	d900      	bls.n	8002c2e <SlotCheck+0x2a>
 8002c2c:	e0f4      	b.n	8002e18 <SlotCheck+0x214>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d100      	bne.n	8002c36 <SlotCheck+0x32>
 8002c34:	e084      	b.n	8002d40 <SlotCheck+0x13c>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d900      	bls.n	8002c3e <SlotCheck+0x3a>
 8002c3c:	e0ec      	b.n	8002e18 <SlotCheck+0x214>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d003      	beq.n	8002c4c <SlotCheck+0x48>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d03d      	beq.n	8002cc6 <SlotCheck+0xc2>
							Slot.Slot_12 = 0;
						else
							Slot.Slot_12 = 1;
						break;
		default:
						break;
 8002c4a:	e0e5      	b.n	8002e18 <SlotCheck+0x214>
						if(ReceivedA)
 8002c4c:	4b83      	ldr	r3, [pc, #524]	; (8002e5c <SlotCheck+0x258>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <SlotCheck+0x5c>
							Slot.Slot_1 = 0;
 8002c54:	4b82      	ldr	r3, [pc, #520]	; (8002e60 <SlotCheck+0x25c>)
 8002c56:	781a      	ldrb	r2, [r3, #0]
 8002c58:	2101      	movs	r1, #1
 8002c5a:	438a      	bics	r2, r1
 8002c5c:	701a      	strb	r2, [r3, #0]
 8002c5e:	e004      	b.n	8002c6a <SlotCheck+0x66>
							Slot.Slot_1 = 1;
 8002c60:	4b7f      	ldr	r3, [pc, #508]	; (8002e60 <SlotCheck+0x25c>)
 8002c62:	781a      	ldrb	r2, [r3, #0]
 8002c64:	2101      	movs	r1, #1
 8002c66:	430a      	orrs	r2, r1
 8002c68:	701a      	strb	r2, [r3, #0]
						if(ReceivedB)
 8002c6a:	4b7e      	ldr	r3, [pc, #504]	; (8002e64 <SlotCheck+0x260>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d005      	beq.n	8002c7e <SlotCheck+0x7a>
							Slot.Slot_5 = 0;
 8002c72:	4b7b      	ldr	r3, [pc, #492]	; (8002e60 <SlotCheck+0x25c>)
 8002c74:	781a      	ldrb	r2, [r3, #0]
 8002c76:	2110      	movs	r1, #16
 8002c78:	438a      	bics	r2, r1
 8002c7a:	701a      	strb	r2, [r3, #0]
 8002c7c:	e004      	b.n	8002c88 <SlotCheck+0x84>
							Slot.Slot_5 = 1;
 8002c7e:	4b78      	ldr	r3, [pc, #480]	; (8002e60 <SlotCheck+0x25c>)
 8002c80:	781a      	ldrb	r2, [r3, #0]
 8002c82:	2110      	movs	r1, #16
 8002c84:	430a      	orrs	r2, r1
 8002c86:	701a      	strb	r2, [r3, #0]
						if(ReceivedC)
 8002c88:	4b77      	ldr	r3, [pc, #476]	; (8002e68 <SlotCheck+0x264>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <SlotCheck+0x98>
							Slot.Slot_9 = 0;
 8002c90:	4b73      	ldr	r3, [pc, #460]	; (8002e60 <SlotCheck+0x25c>)
 8002c92:	785a      	ldrb	r2, [r3, #1]
 8002c94:	2101      	movs	r1, #1
 8002c96:	438a      	bics	r2, r1
 8002c98:	705a      	strb	r2, [r3, #1]
 8002c9a:	e004      	b.n	8002ca6 <SlotCheck+0xa2>
							Slot.Slot_9 = 1;
 8002c9c:	4b70      	ldr	r3, [pc, #448]	; (8002e60 <SlotCheck+0x25c>)
 8002c9e:	785a      	ldrb	r2, [r3, #1]
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	705a      	strb	r2, [r3, #1]
						if(ReceivedD)
 8002ca6:	4b71      	ldr	r3, [pc, #452]	; (8002e6c <SlotCheck+0x268>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d005      	beq.n	8002cba <SlotCheck+0xb6>
							Slot.Slot_13 = 0;
 8002cae:	4b6c      	ldr	r3, [pc, #432]	; (8002e60 <SlotCheck+0x25c>)
 8002cb0:	785a      	ldrb	r2, [r3, #1]
 8002cb2:	2110      	movs	r1, #16
 8002cb4:	438a      	bics	r2, r1
 8002cb6:	705a      	strb	r2, [r3, #1]
						break;
 8002cb8:	e0af      	b.n	8002e1a <SlotCheck+0x216>
							Slot.Slot_13 = 1;
 8002cba:	4b69      	ldr	r3, [pc, #420]	; (8002e60 <SlotCheck+0x25c>)
 8002cbc:	785a      	ldrb	r2, [r3, #1]
 8002cbe:	2110      	movs	r1, #16
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	705a      	strb	r2, [r3, #1]
						break;
 8002cc4:	e0a9      	b.n	8002e1a <SlotCheck+0x216>
						if(ReceivedA)
 8002cc6:	4b65      	ldr	r3, [pc, #404]	; (8002e5c <SlotCheck+0x258>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d005      	beq.n	8002cda <SlotCheck+0xd6>
							Slot.Slot_2 = 0;
 8002cce:	4b64      	ldr	r3, [pc, #400]	; (8002e60 <SlotCheck+0x25c>)
 8002cd0:	781a      	ldrb	r2, [r3, #0]
 8002cd2:	2102      	movs	r1, #2
 8002cd4:	438a      	bics	r2, r1
 8002cd6:	701a      	strb	r2, [r3, #0]
 8002cd8:	e004      	b.n	8002ce4 <SlotCheck+0xe0>
							Slot.Slot_2 = 1;
 8002cda:	4b61      	ldr	r3, [pc, #388]	; (8002e60 <SlotCheck+0x25c>)
 8002cdc:	781a      	ldrb	r2, [r3, #0]
 8002cde:	2102      	movs	r1, #2
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	701a      	strb	r2, [r3, #0]
						if(ReceivedB)
 8002ce4:	4b5f      	ldr	r3, [pc, #380]	; (8002e64 <SlotCheck+0x260>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <SlotCheck+0xf4>
							Slot.Slot_6 = 0;
 8002cec:	4b5c      	ldr	r3, [pc, #368]	; (8002e60 <SlotCheck+0x25c>)
 8002cee:	781a      	ldrb	r2, [r3, #0]
 8002cf0:	2120      	movs	r1, #32
 8002cf2:	438a      	bics	r2, r1
 8002cf4:	701a      	strb	r2, [r3, #0]
 8002cf6:	e004      	b.n	8002d02 <SlotCheck+0xfe>
							Slot.Slot_6 = 1;
 8002cf8:	4b59      	ldr	r3, [pc, #356]	; (8002e60 <SlotCheck+0x25c>)
 8002cfa:	781a      	ldrb	r2, [r3, #0]
 8002cfc:	2120      	movs	r1, #32
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	701a      	strb	r2, [r3, #0]
						if(ReceivedC)
 8002d02:	4b59      	ldr	r3, [pc, #356]	; (8002e68 <SlotCheck+0x264>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d005      	beq.n	8002d16 <SlotCheck+0x112>
							Slot.Slot_10 = 0;
 8002d0a:	4b55      	ldr	r3, [pc, #340]	; (8002e60 <SlotCheck+0x25c>)
 8002d0c:	785a      	ldrb	r2, [r3, #1]
 8002d0e:	2102      	movs	r1, #2
 8002d10:	438a      	bics	r2, r1
 8002d12:	705a      	strb	r2, [r3, #1]
 8002d14:	e004      	b.n	8002d20 <SlotCheck+0x11c>
							Slot.Slot_10 = 1;
 8002d16:	4b52      	ldr	r3, [pc, #328]	; (8002e60 <SlotCheck+0x25c>)
 8002d18:	785a      	ldrb	r2, [r3, #1]
 8002d1a:	2102      	movs	r1, #2
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	705a      	strb	r2, [r3, #1]
						if(ReceivedD)
 8002d20:	4b52      	ldr	r3, [pc, #328]	; (8002e6c <SlotCheck+0x268>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <SlotCheck+0x130>
							Slot.Slot_14 = 0;
 8002d28:	4b4d      	ldr	r3, [pc, #308]	; (8002e60 <SlotCheck+0x25c>)
 8002d2a:	785a      	ldrb	r2, [r3, #1]
 8002d2c:	2120      	movs	r1, #32
 8002d2e:	438a      	bics	r2, r1
 8002d30:	705a      	strb	r2, [r3, #1]
						break;
 8002d32:	e072      	b.n	8002e1a <SlotCheck+0x216>
							Slot.Slot_14 = 1;
 8002d34:	4b4a      	ldr	r3, [pc, #296]	; (8002e60 <SlotCheck+0x25c>)
 8002d36:	785a      	ldrb	r2, [r3, #1]
 8002d38:	2120      	movs	r1, #32
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	705a      	strb	r2, [r3, #1]
						break;
 8002d3e:	e06c      	b.n	8002e1a <SlotCheck+0x216>
						if(ReceivedA)
 8002d40:	4b46      	ldr	r3, [pc, #280]	; (8002e5c <SlotCheck+0x258>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <SlotCheck+0x150>
							Slot.Slot_3 = 0;
 8002d48:	4b45      	ldr	r3, [pc, #276]	; (8002e60 <SlotCheck+0x25c>)
 8002d4a:	781a      	ldrb	r2, [r3, #0]
 8002d4c:	2104      	movs	r1, #4
 8002d4e:	438a      	bics	r2, r1
 8002d50:	701a      	strb	r2, [r3, #0]
 8002d52:	e004      	b.n	8002d5e <SlotCheck+0x15a>
							Slot.Slot_3 = 1;
 8002d54:	4b42      	ldr	r3, [pc, #264]	; (8002e60 <SlotCheck+0x25c>)
 8002d56:	781a      	ldrb	r2, [r3, #0]
 8002d58:	2104      	movs	r1, #4
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	701a      	strb	r2, [r3, #0]
						if(ReceivedB)
 8002d5e:	4b41      	ldr	r3, [pc, #260]	; (8002e64 <SlotCheck+0x260>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d005      	beq.n	8002d72 <SlotCheck+0x16e>
							Slot.Slot_7 = 0;
 8002d66:	4b3e      	ldr	r3, [pc, #248]	; (8002e60 <SlotCheck+0x25c>)
 8002d68:	781a      	ldrb	r2, [r3, #0]
 8002d6a:	2140      	movs	r1, #64	; 0x40
 8002d6c:	438a      	bics	r2, r1
 8002d6e:	701a      	strb	r2, [r3, #0]
 8002d70:	e004      	b.n	8002d7c <SlotCheck+0x178>
							Slot.Slot_7 = 1;
 8002d72:	4b3b      	ldr	r3, [pc, #236]	; (8002e60 <SlotCheck+0x25c>)
 8002d74:	781a      	ldrb	r2, [r3, #0]
 8002d76:	2140      	movs	r1, #64	; 0x40
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	701a      	strb	r2, [r3, #0]
						if(ReceivedC)
 8002d7c:	4b3a      	ldr	r3, [pc, #232]	; (8002e68 <SlotCheck+0x264>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <SlotCheck+0x18c>
							Slot.Slot_11 = 0;
 8002d84:	4b36      	ldr	r3, [pc, #216]	; (8002e60 <SlotCheck+0x25c>)
 8002d86:	785a      	ldrb	r2, [r3, #1]
 8002d88:	2104      	movs	r1, #4
 8002d8a:	438a      	bics	r2, r1
 8002d8c:	705a      	strb	r2, [r3, #1]
 8002d8e:	e004      	b.n	8002d9a <SlotCheck+0x196>
							Slot.Slot_11 = 1;
 8002d90:	4b33      	ldr	r3, [pc, #204]	; (8002e60 <SlotCheck+0x25c>)
 8002d92:	785a      	ldrb	r2, [r3, #1]
 8002d94:	2104      	movs	r1, #4
 8002d96:	430a      	orrs	r2, r1
 8002d98:	705a      	strb	r2, [r3, #1]
						if(ReceivedD)
 8002d9a:	4b34      	ldr	r3, [pc, #208]	; (8002e6c <SlotCheck+0x268>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d005      	beq.n	8002dae <SlotCheck+0x1aa>
							Slot.Slot_15 = 0;
 8002da2:	4b2f      	ldr	r3, [pc, #188]	; (8002e60 <SlotCheck+0x25c>)
 8002da4:	785a      	ldrb	r2, [r3, #1]
 8002da6:	2140      	movs	r1, #64	; 0x40
 8002da8:	438a      	bics	r2, r1
 8002daa:	705a      	strb	r2, [r3, #1]
						break;
 8002dac:	e035      	b.n	8002e1a <SlotCheck+0x216>
							Slot.Slot_15 = 1;
 8002dae:	4b2c      	ldr	r3, [pc, #176]	; (8002e60 <SlotCheck+0x25c>)
 8002db0:	785a      	ldrb	r2, [r3, #1]
 8002db2:	2140      	movs	r1, #64	; 0x40
 8002db4:	430a      	orrs	r2, r1
 8002db6:	705a      	strb	r2, [r3, #1]
						break;
 8002db8:	e02f      	b.n	8002e1a <SlotCheck+0x216>
						if(ReceivedA)
 8002dba:	4b28      	ldr	r3, [pc, #160]	; (8002e5c <SlotCheck+0x258>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d005      	beq.n	8002dce <SlotCheck+0x1ca>
							Slot.Slot_4 = 0;
 8002dc2:	4b27      	ldr	r3, [pc, #156]	; (8002e60 <SlotCheck+0x25c>)
 8002dc4:	781a      	ldrb	r2, [r3, #0]
 8002dc6:	2108      	movs	r1, #8
 8002dc8:	438a      	bics	r2, r1
 8002dca:	701a      	strb	r2, [r3, #0]
 8002dcc:	e004      	b.n	8002dd8 <SlotCheck+0x1d4>
							Slot.Slot_4 = 1;
 8002dce:	4b24      	ldr	r3, [pc, #144]	; (8002e60 <SlotCheck+0x25c>)
 8002dd0:	781a      	ldrb	r2, [r3, #0]
 8002dd2:	2108      	movs	r1, #8
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	701a      	strb	r2, [r3, #0]
						if(ReceivedB)
 8002dd8:	4b22      	ldr	r3, [pc, #136]	; (8002e64 <SlotCheck+0x260>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d005      	beq.n	8002dec <SlotCheck+0x1e8>
							Slot.Slot_8 = 0;
 8002de0:	4b1f      	ldr	r3, [pc, #124]	; (8002e60 <SlotCheck+0x25c>)
 8002de2:	781a      	ldrb	r2, [r3, #0]
 8002de4:	217f      	movs	r1, #127	; 0x7f
 8002de6:	400a      	ands	r2, r1
 8002de8:	701a      	strb	r2, [r3, #0]
 8002dea:	e005      	b.n	8002df8 <SlotCheck+0x1f4>
							Slot.Slot_8 = 1;
 8002dec:	4b1c      	ldr	r3, [pc, #112]	; (8002e60 <SlotCheck+0x25c>)
 8002dee:	781a      	ldrb	r2, [r3, #0]
 8002df0:	2180      	movs	r1, #128	; 0x80
 8002df2:	4249      	negs	r1, r1
 8002df4:	430a      	orrs	r2, r1
 8002df6:	701a      	strb	r2, [r3, #0]
						if(ReceivedC)
 8002df8:	4b1b      	ldr	r3, [pc, #108]	; (8002e68 <SlotCheck+0x264>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <SlotCheck+0x208>
							Slot.Slot_12 = 0;
 8002e00:	4b17      	ldr	r3, [pc, #92]	; (8002e60 <SlotCheck+0x25c>)
 8002e02:	785a      	ldrb	r2, [r3, #1]
 8002e04:	2108      	movs	r1, #8
 8002e06:	438a      	bics	r2, r1
 8002e08:	705a      	strb	r2, [r3, #1]
						break;
 8002e0a:	e006      	b.n	8002e1a <SlotCheck+0x216>
							Slot.Slot_12 = 1;
 8002e0c:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <SlotCheck+0x25c>)
 8002e0e:	785a      	ldrb	r2, [r3, #1]
 8002e10:	2108      	movs	r1, #8
 8002e12:	430a      	orrs	r2, r1
 8002e14:	705a      	strb	r2, [r3, #1]
						break;
 8002e16:	e000      	b.n	8002e1a <SlotCheck+0x216>
						break;
 8002e18:	46c0      	nop			; (mov r8, r8)

	}

	if(ReceivedA)
 8002e1a:	4b10      	ldr	r3, [pc, #64]	; (8002e5c <SlotCheck+0x258>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <SlotCheck+0x224>
		ReceivedA = 0;
 8002e22:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <SlotCheck+0x258>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	701a      	strb	r2, [r3, #0]
	if(ReceivedB)
 8002e28:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <SlotCheck+0x260>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d002      	beq.n	8002e36 <SlotCheck+0x232>
		ReceivedB = 0;
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <SlotCheck+0x260>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]
	if(ReceivedC)
 8002e36:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <SlotCheck+0x264>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <SlotCheck+0x240>
		ReceivedC = 0;
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <SlotCheck+0x264>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	701a      	strb	r2, [r3, #0]
	if(ReceivedD)
 8002e44:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <SlotCheck+0x268>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <SlotCheck+0x24e>
		ReceivedD = 0;
 8002e4c:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <SlotCheck+0x268>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	701a      	strb	r2, [r3, #0]
}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	46bd      	mov	sp, r7
 8002e56:	b002      	add	sp, #8
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	2000025d 	.word	0x2000025d
 8002e60:	20000264 	.word	0x20000264
 8002e64:	2000025e 	.word	0x2000025e
 8002e68:	2000025f 	.word	0x2000025f
 8002e6c:	20000260 	.word	0x20000260

08002e70 <SlotDataChek>:

void SlotDataChek(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
	SlotCheck(TIM_CHANNEL_1);
 8002e74:	2000      	movs	r0, #0
 8002e76:	f7ff fec5 	bl	8002c04 <SlotCheck>
	SlotCheck(TIM_CHANNEL_2);
 8002e7a:	2004      	movs	r0, #4
 8002e7c:	f7ff fec2 	bl	8002c04 <SlotCheck>
	SlotCheck(TIM_CHANNEL_3);
 8002e80:	2008      	movs	r0, #8
 8002e82:	f7ff febf 	bl	8002c04 <SlotCheck>
	SlotCheck(TIM_CHANNEL_4);
 8002e86:	200c      	movs	r0, #12
 8002e88:	f7ff febc 	bl	8002c04 <SlotCheck>
}
 8002e8c:	46c0      	nop			; (mov r8, r8)
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <sendNEC>:
#define NEC_ONE_SPACE   1690
#define NEC_ZERO_SPACE   560
#define NEC_RPT_SPACE   2250

void sendNEC (unsigned long data,  int nbits, uint32_t channel)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
	// Set IR carrier frequency

	// Header
	mark(NEC_HDR_MARK,channel);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a24      	ldr	r2, [pc, #144]	; (8002f34 <sendNEC+0xa0>)
 8002ea4:	0019      	movs	r1, r3
 8002ea6:	0010      	movs	r0, r2
 8002ea8:	f000 f84a 	bl	8002f40 <mark>
	space(NEC_HDR_SPACE,channel);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a22      	ldr	r2, [pc, #136]	; (8002f38 <sendNEC+0xa4>)
 8002eb0:	0019      	movs	r1, r3
 8002eb2:	0010      	movs	r0, r2
 8002eb4:	f000 f85c 	bl	8002f70 <space>

	// Data
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	409a      	lsls	r2, r3
 8002ec0:	0013      	movs	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	e022      	b.n	8002f0c <sendNEC+0x78>
		if (data & mask) {
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d00d      	beq.n	8002eea <sendNEC+0x56>
			mark(NEC_BIT_MARK,channel);
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	238c      	movs	r3, #140	; 0x8c
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	0011      	movs	r1, r2
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f000 f832 	bl	8002f40 <mark>
			space(NEC_ONE_SPACE,channel);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a17      	ldr	r2, [pc, #92]	; (8002f3c <sendNEC+0xa8>)
 8002ee0:	0019      	movs	r1, r3
 8002ee2:	0010      	movs	r0, r2
 8002ee4:	f000 f844 	bl	8002f70 <space>
 8002ee8:	e00d      	b.n	8002f06 <sendNEC+0x72>
		} else {
			mark(NEC_BIT_MARK,channel);
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	238c      	movs	r3, #140	; 0x8c
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	0011      	movs	r1, r2
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f000 f824 	bl	8002f40 <mark>
			space(NEC_ZERO_SPACE,channel);
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	238c      	movs	r3, #140	; 0x8c
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	0011      	movs	r1, r2
 8002f00:	0018      	movs	r0, r3
 8002f02:	f000 f835 	bl	8002f70 <space>
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	085b      	lsrs	r3, r3, #1
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1d9      	bne.n	8002ec6 <sendNEC+0x32>
		}
	}

	// Footer
	mark(NEC_BIT_MARK,channel);
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	238c      	movs	r3, #140	; 0x8c
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	0011      	movs	r1, r2
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f000 f810 	bl	8002f40 <mark>
	space(0,channel);  // Always end with the LED off
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	0019      	movs	r1, r3
 8002f24:	2000      	movs	r0, #0
 8002f26:	f000 f823 	bl	8002f70 <space>
}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	b006      	add	sp, #24
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	00002328 	.word	0x00002328
 8002f38:	00001194 	.word	0x00001194
 8002f3c:	0000069a 	.word	0x0000069a

08002f40 <mark>:

	space(0,channel);
}

void mark(unsigned int time,uint32_t channel)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(&htim1, channel);
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	4b07      	ldr	r3, [pc, #28]	; (8002f6c <mark+0x2c>)
 8002f4e:	0011      	movs	r1, r2
 8002f50:	0018      	movs	r0, r3
 8002f52:	f003 fa01 	bl	8006358 <HAL_TIM_PWM_Start>
	if (time > 0) custom_delay_usec(time);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <mark+0x24>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f000 f8dc 	bl	800311c <custom_delay_usec>
}
 8002f64:	46c0      	nop			; (mov r8, r8)
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b002      	add	sp, #8
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	20000268 	.word	0x20000268

08002f70 <space>:

void space(unsigned int time,uint32_t channel)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Stop(&htim1, channel);
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	4b07      	ldr	r3, [pc, #28]	; (8002f9c <space+0x2c>)
 8002f7e:	0011      	movs	r1, r2
 8002f80:	0018      	movs	r0, r3
 8002f82:	f003 fac7 	bl	8006514 <HAL_TIM_PWM_Stop>
	if(time > 0) custom_delay_usec(time);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <space+0x24>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f000 f8c4 	bl	800311c <custom_delay_usec>
}
 8002f94:	46c0      	nop			; (mov r8, r8)
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b002      	add	sp, #8
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	20000268 	.word	0x20000268

08002fa0 <enableIROut>:

void enableIROut(uint8_t khz)
{
 8002fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fa2:	b093      	sub	sp, #76	; 0x4c
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	0002      	movs	r2, r0
 8002fa8:	1dfb      	adds	r3, r7, #7
 8002faa:	701a      	strb	r2, [r3, #0]
	uint16_t pwm_freq = 0;
 8002fac:	2546      	movs	r5, #70	; 0x46
 8002fae:	197b      	adds	r3, r7, r5
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	801a      	strh	r2, [r3, #0]
	uint16_t pwm_pulse = 0;
 8002fb4:	2444      	movs	r4, #68	; 0x44
 8002fb6:	193b      	adds	r3, r7, r4
 8002fb8:	2200      	movs	r2, #0
 8002fba:	801a      	strh	r2, [r3, #0]
	pwm_freq = MYSYSCLOCK / (khz * 1000) - 1;
 8002fbc:	1dfb      	adds	r3, r7, #7
 8002fbe:	781a      	ldrb	r2, [r3, #0]
 8002fc0:	0013      	movs	r3, r2
 8002fc2:	015b      	lsls	r3, r3, #5
 8002fc4:	1a9b      	subs	r3, r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	189b      	adds	r3, r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	0019      	movs	r1, r3
 8002fce:	4850      	ldr	r0, [pc, #320]	; (8003110 <enableIROut+0x170>)
 8002fd0:	f7fd f93e 	bl	8000250 <__divsi3>
 8002fd4:	0003      	movs	r3, r0
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	197b      	adds	r3, r7, r5
 8002fda:	3a01      	subs	r2, #1
 8002fdc:	801a      	strh	r2, [r3, #0]
	pwm_pulse = pwm_freq / 3;
 8002fde:	193c      	adds	r4, r7, r4
 8002fe0:	197b      	adds	r3, r7, r5
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	2103      	movs	r1, #3
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f7fd f8a8 	bl	800013c <__udivsi3>
 8002fec:	0003      	movs	r3, r0
 8002fee:	8023      	strh	r3, [r4, #0]

	HAL_TIM_Base_DeInit(&htim1);
 8002ff0:	4b48      	ldr	r3, [pc, #288]	; (8003114 <enableIROut+0x174>)
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f003 f8a6 	bl	8006144 <HAL_TIM_Base_DeInit>

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ff8:	2134      	movs	r1, #52	; 0x34
 8002ffa:	187b      	adds	r3, r7, r1
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	2310      	movs	r3, #16
 8003000:	001a      	movs	r2, r3
 8003002:	2100      	movs	r1, #0
 8003004:	f006 fa26 	bl	8009454 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003008:	2628      	movs	r6, #40	; 0x28
 800300a:	19bb      	adds	r3, r7, r6
 800300c:	0018      	movs	r0, r3
 800300e:	230c      	movs	r3, #12
 8003010:	001a      	movs	r2, r3
 8003012:	2100      	movs	r1, #0
 8003014:	f006 fa1e 	bl	8009454 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8003018:	240c      	movs	r4, #12
 800301a:	193b      	adds	r3, r7, r4
 800301c:	0018      	movs	r0, r3
 800301e:	231c      	movs	r3, #28
 8003020:	001a      	movs	r2, r3
 8003022:	2100      	movs	r1, #0
 8003024:	f006 fa16 	bl	8009454 <memset>

	htim1.Instance = TIM1;
 8003028:	4b3a      	ldr	r3, [pc, #232]	; (8003114 <enableIROut+0x174>)
 800302a:	4a3b      	ldr	r2, [pc, #236]	; (8003118 <enableIROut+0x178>)
 800302c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800302e:	4b39      	ldr	r3, [pc, #228]	; (8003114 <enableIROut+0x174>)
 8003030:	2200      	movs	r2, #0
 8003032:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003034:	4b37      	ldr	r3, [pc, #220]	; (8003114 <enableIROut+0x174>)
 8003036:	2200      	movs	r2, #0
 8003038:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = pwm_freq;
 800303a:	197b      	adds	r3, r7, r5
 800303c:	881a      	ldrh	r2, [r3, #0]
 800303e:	4b35      	ldr	r3, [pc, #212]	; (8003114 <enableIROut+0x174>)
 8003040:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003042:	4b34      	ldr	r3, [pc, #208]	; (8003114 <enableIROut+0x174>)
 8003044:	2200      	movs	r2, #0
 8003046:	611a      	str	r2, [r3, #16]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003048:	4b32      	ldr	r3, [pc, #200]	; (8003114 <enableIROut+0x174>)
 800304a:	2200      	movs	r2, #0
 800304c:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim1);
 800304e:	4b31      	ldr	r3, [pc, #196]	; (8003114 <enableIROut+0x174>)
 8003050:	0018      	movs	r0, r3
 8003052:	f003 f81f 	bl	8006094 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003056:	2134      	movs	r1, #52	; 0x34
 8003058:	187b      	adds	r3, r7, r1
 800305a:	2280      	movs	r2, #128	; 0x80
 800305c:	0152      	lsls	r2, r2, #5
 800305e:	601a      	str	r2, [r3, #0]
	HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 8003060:	187a      	adds	r2, r7, r1
 8003062:	4b2c      	ldr	r3, [pc, #176]	; (8003114 <enableIROut+0x174>)
 8003064:	0011      	movs	r1, r2
 8003066:	0018      	movs	r0, r3
 8003068:	f003 fbda 	bl	8006820 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim1);
 800306c:	4b29      	ldr	r3, [pc, #164]	; (8003114 <enableIROut+0x174>)
 800306e:	0018      	movs	r0, r3
 8003070:	f003 f912 	bl	8006298 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003074:	19bb      	adds	r3, r7, r6
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800307a:	19bb      	adds	r3, r7, r6
 800307c:	2200      	movs	r2, #0
 800307e:	609a      	str	r2, [r3, #8]
	HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 8003080:	19ba      	adds	r2, r7, r6
 8003082:	4b24      	ldr	r3, [pc, #144]	; (8003114 <enableIROut+0x174>)
 8003084:	0011      	movs	r1, r2
 8003086:	0018      	movs	r0, r3
 8003088:	f004 f872 	bl	8007170 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800308c:	193b      	adds	r3, r7, r4
 800308e:	2260      	movs	r2, #96	; 0x60
 8003090:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = pwm_pulse;
 8003092:	2344      	movs	r3, #68	; 0x44
 8003094:	18fb      	adds	r3, r7, r3
 8003096:	881a      	ldrh	r2, [r3, #0]
 8003098:	193b      	adds	r3, r7, r4
 800309a:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800309c:	193b      	adds	r3, r7, r4
 800309e:	2200      	movs	r2, #0
 80030a0:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030a2:	193b      	adds	r3, r7, r4
 80030a4:	2200      	movs	r2, #0
 80030a6:	611a      	str	r2, [r3, #16]
//	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030a8:	1939      	adds	r1, r7, r4
 80030aa:	4b1a      	ldr	r3, [pc, #104]	; (8003114 <enableIROut+0x174>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	0018      	movs	r0, r3
 80030b0:	f003 fab6 	bl	8006620 <HAL_TIM_PWM_ConfigChannel>
 80030b4:	1e03      	subs	r3, r0, #0
 80030b6:	d001      	beq.n	80030bc <enableIROut+0x11c>
	{
	Error_Handler();
 80030b8:	f000 fd34 	bl	8003b24 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80030bc:	230c      	movs	r3, #12
 80030be:	18f9      	adds	r1, r7, r3
 80030c0:	4b14      	ldr	r3, [pc, #80]	; (8003114 <enableIROut+0x174>)
 80030c2:	2204      	movs	r2, #4
 80030c4:	0018      	movs	r0, r3
 80030c6:	f003 faab 	bl	8006620 <HAL_TIM_PWM_ConfigChannel>
 80030ca:	1e03      	subs	r3, r0, #0
 80030cc:	d001      	beq.n	80030d2 <enableIROut+0x132>
	{
	Error_Handler();
 80030ce:	f000 fd29 	bl	8003b24 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80030d2:	230c      	movs	r3, #12
 80030d4:	18f9      	adds	r1, r7, r3
 80030d6:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <enableIROut+0x174>)
 80030d8:	2208      	movs	r2, #8
 80030da:	0018      	movs	r0, r3
 80030dc:	f003 faa0 	bl	8006620 <HAL_TIM_PWM_ConfigChannel>
 80030e0:	1e03      	subs	r3, r0, #0
 80030e2:	d001      	beq.n	80030e8 <enableIROut+0x148>
	{
	Error_Handler();
 80030e4:	f000 fd1e 	bl	8003b24 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80030e8:	230c      	movs	r3, #12
 80030ea:	18f9      	adds	r1, r7, r3
 80030ec:	4b09      	ldr	r3, [pc, #36]	; (8003114 <enableIROut+0x174>)
 80030ee:	220c      	movs	r2, #12
 80030f0:	0018      	movs	r0, r3
 80030f2:	f003 fa95 	bl	8006620 <HAL_TIM_PWM_ConfigChannel>
 80030f6:	1e03      	subs	r3, r0, #0
 80030f8:	d001      	beq.n	80030fe <enableIROut+0x15e>
	{
	Error_Handler();
 80030fa:	f000 fd13 	bl	8003b24 <Error_Handler>
	}
	HAL_TIM_MspPostInit(&htim1);
 80030fe:	4b05      	ldr	r3, [pc, #20]	; (8003114 <enableIROut+0x174>)
 8003100:	0018      	movs	r0, r3
 8003102:	f001 fa4f 	bl	80045a4 <HAL_TIM_MspPostInit>
}
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	46bd      	mov	sp, r7
 800310a:	b013      	add	sp, #76	; 0x4c
 800310c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	03d09000 	.word	0x03d09000
 8003114:	20000268 	.word	0x20000268
 8003118:	40012c00 	.word	0x40012c00

0800311c <custom_delay_usec>:

void custom_delay_usec(unsigned long us)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 8003124:	4b07      	ldr	r3, [pc, #28]	; (8003144 <custom_delay_usec+0x28>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2200      	movs	r2, #0
 800312a:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
 800312c:	46c0      	nop			; (mov r8, r8)
 800312e:	4b05      	ldr	r3, [pc, #20]	; (8003144 <custom_delay_usec+0x28>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	429a      	cmp	r2, r3
 8003138:	d8f9      	bhi.n	800312e <custom_delay_usec+0x12>

}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	46c0      	nop			; (mov r8, r8)
 800313e:	46bd      	mov	sp, r7
 8003140:	b002      	add	sp, #8
 8003142:	bd80      	pop	{r7, pc}
 8003144:	20000300 	.word	0x20000300

08003148 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
//  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
  return ch;
 8003150:	687b      	ldr	r3, [r7, #4]
}
 8003152:	0018      	movs	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	b002      	add	sp, #8
 8003158:	bd80      	pop	{r7, pc}

0800315a <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(uint32_t var)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]
	while(i < var)
 8003166:	e002      	b.n	800316e <delay+0x14>
	{
		i++;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	3301      	adds	r3, #1
 800316c:	60fb      	str	r3, [r7, #12]
	while(i < var)
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	429a      	cmp	r2, r3
 8003174:	d3f8      	bcc.n	8003168 <delay+0xe>
	}

}
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	46c0      	nop			; (mov r8, r8)
 800317a:	46bd      	mov	sp, r7
 800317c:	b004      	add	sp, #16
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_UARTEx_RxEventCallback>:




void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	000a      	movs	r2, r1
 800318a:	1cbb      	adds	r3, r7, #2
 800318c:	801a      	strh	r2, [r3, #0]
	if((RxData[0] == SlaveID) || (RxData[0] == 0x01))
 800318e:	4b43      	ldr	r3, [pc, #268]	; (800329c <HAL_UARTEx_RxEventCallback+0x11c>)
 8003190:	781a      	ldrb	r2, [r3, #0]
 8003192:	4b43      	ldr	r3, [pc, #268]	; (80032a0 <HAL_UARTEx_RxEventCallback+0x120>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d004      	beq.n	80031a4 <HAL_UARTEx_RxEventCallback+0x24>
 800319a:	4b40      	ldr	r3, [pc, #256]	; (800329c <HAL_UARTEx_RxEventCallback+0x11c>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d000      	beq.n	80031a4 <HAL_UARTEx_RxEventCallback+0x24>
 80031a2:	e06b      	b.n	800327c <HAL_UARTEx_RxEventCallback+0xfc>
	{
			crc_cal = crc16(RxData, (Size-2));
 80031a4:	1cbb      	adds	r3, r7, #2
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	3b02      	subs	r3, #2
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	4b3b      	ldr	r3, [pc, #236]	; (800329c <HAL_UARTEx_RxEventCallback+0x11c>)
 80031ae:	0011      	movs	r1, r2
 80031b0:	0018      	movs	r0, r3
 80031b2:	f001 f8dd 	bl	8004370 <crc16>
 80031b6:	0003      	movs	r3, r0
 80031b8:	001a      	movs	r2, r3
 80031ba:	4b3a      	ldr	r3, [pc, #232]	; (80032a4 <HAL_UARTEx_RxEventCallback+0x124>)
 80031bc:	801a      	strh	r2, [r3, #0]
			crcrx = ((RxData[Size-1]<<8)|RxData[Size-2]);
 80031be:	1cbb      	adds	r3, r7, #2
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	4a35      	ldr	r2, [pc, #212]	; (800329c <HAL_UARTEx_RxEventCallback+0x11c>)
 80031c6:	5cd3      	ldrb	r3, [r2, r3]
 80031c8:	021b      	lsls	r3, r3, #8
 80031ca:	b21a      	sxth	r2, r3
 80031cc:	1cbb      	adds	r3, r7, #2
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	3b02      	subs	r3, #2
 80031d2:	4932      	ldr	r1, [pc, #200]	; (800329c <HAL_UARTEx_RxEventCallback+0x11c>)
 80031d4:	5ccb      	ldrb	r3, [r1, r3]
 80031d6:	b21b      	sxth	r3, r3
 80031d8:	4313      	orrs	r3, r2
 80031da:	b21b      	sxth	r3, r3
 80031dc:	b29a      	uxth	r2, r3
 80031de:	4b32      	ldr	r3, [pc, #200]	; (80032a8 <HAL_UARTEx_RxEventCallback+0x128>)
 80031e0:	801a      	strh	r2, [r3, #0]
			if(crc_cal == crcrx)
 80031e2:	4b30      	ldr	r3, [pc, #192]	; (80032a4 <HAL_UARTEx_RxEventCallback+0x124>)
 80031e4:	881a      	ldrh	r2, [r3, #0]
 80031e6:	4b30      	ldr	r3, [pc, #192]	; (80032a8 <HAL_UARTEx_RxEventCallback+0x128>)
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d146      	bne.n	800327c <HAL_UARTEx_RxEventCallback+0xfc>
			{
				if (RxData[0] == SlaveID)
 80031ee:	4b2b      	ldr	r3, [pc, #172]	; (800329c <HAL_UARTEx_RxEventCallback+0x11c>)
 80031f0:	781a      	ldrb	r2, [r3, #0]
 80031f2:	4b2b      	ldr	r3, [pc, #172]	; (80032a0 <HAL_UARTEx_RxEventCallback+0x120>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d115      	bne.n	8003226 <HAL_UARTEx_RxEventCallback+0xa6>
				{
					switch (RxData[1]){
 80031fa:	4b28      	ldr	r3, [pc, #160]	; (800329c <HAL_UARTEx_RxEventCallback+0x11c>)
 80031fc:	785b      	ldrb	r3, [r3, #1]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d002      	beq.n	8003208 <HAL_UARTEx_RxEventCallback+0x88>
 8003202:	2b04      	cmp	r3, #4
 8003204:	d008      	beq.n	8003218 <HAL_UARTEx_RxEventCallback+0x98>
 8003206:	e00a      	b.n	800321e <HAL_UARTEx_RxEventCallback+0x9e>
					case 0x01:
						updateSlotData();
 8003208:	f000 fcf4 	bl	8003bf4 <updateSlotData>
					    HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 800320c:	4b27      	ldr	r3, [pc, #156]	; (80032ac <HAL_UARTEx_RxEventCallback+0x12c>)
 800320e:	2120      	movs	r1, #32
 8003210:	0018      	movs	r0, r3
 8003212:	f001 ffeb 	bl	80051ec <HAL_GPIO_TogglePin>
		//				ModeState = PresentUpdate;
			//			updateSlotData();
						break;
 8003216:	e032      	b.n	800327e <HAL_UARTEx_RxEventCallback+0xfe>
					case 0x04:
						prr();
 8003218:	f000 ff56 	bl	80040c8 <prr>
		//				ModeState = PickupRequest;
						break;
 800321c:	e02f      	b.n	800327e <HAL_UARTEx_RxEventCallback+0xfe>
					default:
						modbusException(ILLEGAL_FUNCTION);
 800321e:	2001      	movs	r0, #1
 8003220:	f000 fcc4 	bl	8003bac <modbusException>
						break;
 8003224:	e02b      	b.n	800327e <HAL_UARTEx_RxEventCallback+0xfe>
					}
				}
				else if(RxData[0] == 0x01)                //Broadcast Data Received
 8003226:	4b1d      	ldr	r3, [pc, #116]	; (800329c <HAL_UARTEx_RxEventCallback+0x11c>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d126      	bne.n	800327c <HAL_UARTEx_RxEventCallback+0xfc>
				{
					switch (RxData[1])
 800322e:	4b1b      	ldr	r3, [pc, #108]	; (800329c <HAL_UARTEx_RxEventCallback+0x11c>)
 8003230:	785b      	ldrb	r3, [r3, #1]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d002      	beq.n	800323c <HAL_UARTEx_RxEventCallback+0xbc>
 8003236:	2b03      	cmp	r3, #3
 8003238:	d019      	beq.n	800326e <HAL_UARTEx_RxEventCallback+0xee>
 800323a:	e01b      	b.n	8003274 <HAL_UARTEx_RxEventCallback+0xf4>
					{
						case 0x01:
							for(i = 2; i<7;i++)
 800323c:	4b1c      	ldr	r3, [pc, #112]	; (80032b0 <HAL_UARTEx_RxEventCallback+0x130>)
 800323e:	2202      	movs	r2, #2
 8003240:	701a      	strb	r2, [r3, #0]
 8003242:	e00f      	b.n	8003264 <HAL_UARTEx_RxEventCallback+0xe4>
							 SlotParam[i-2] = RxData[i];
 8003244:	4b1a      	ldr	r3, [pc, #104]	; (80032b0 <HAL_UARTEx_RxEventCallback+0x130>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	0019      	movs	r1, r3
 800324a:	4b19      	ldr	r3, [pc, #100]	; (80032b0 <HAL_UARTEx_RxEventCallback+0x130>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	3b02      	subs	r3, #2
 8003250:	4a12      	ldr	r2, [pc, #72]	; (800329c <HAL_UARTEx_RxEventCallback+0x11c>)
 8003252:	5c51      	ldrb	r1, [r2, r1]
 8003254:	4a17      	ldr	r2, [pc, #92]	; (80032b4 <HAL_UARTEx_RxEventCallback+0x134>)
 8003256:	54d1      	strb	r1, [r2, r3]
							for(i = 2; i<7;i++)
 8003258:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <HAL_UARTEx_RxEventCallback+0x130>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	3301      	adds	r3, #1
 800325e:	b2da      	uxtb	r2, r3
 8003260:	4b13      	ldr	r3, [pc, #76]	; (80032b0 <HAL_UARTEx_RxEventCallback+0x130>)
 8003262:	701a      	strb	r2, [r3, #0]
 8003264:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <HAL_UARTEx_RxEventCallback+0x130>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b06      	cmp	r3, #6
 800326a:	d9eb      	bls.n	8003244 <HAL_UARTEx_RxEventCallback+0xc4>
			//				ModeState = LedUpdate;
							break;
 800326c:	e007      	b.n	800327e <HAL_UARTEx_RxEventCallback+0xfe>
						case 0x03:
							lrr();
 800326e:	f000 fe33 	bl	8003ed8 <lrr>
		//					ModeState = LoadRequest;
				//			lrr();                             //Load Reel Request
							break;
 8003272:	e004      	b.n	800327e <HAL_UARTEx_RxEventCallback+0xfe>
						default:
							modbusException(ILLEGAL_FUNCTION);
 8003274:	2001      	movs	r0, #1
 8003276:	f000 fc99 	bl	8003bac <modbusException>
							break;
 800327a:	e000      	b.n	800327e <HAL_UARTEx_RxEventCallback+0xfe>
					}
				}
 800327c:	46c0      	nop			; (mov r8, r8)
			}
	}
	while(HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 40) != HAL_OK);
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	4906      	ldr	r1, [pc, #24]	; (800329c <HAL_UARTEx_RxEventCallback+0x11c>)
 8003282:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <HAL_UARTEx_RxEventCallback+0x138>)
 8003284:	2228      	movs	r2, #40	; 0x28
 8003286:	0018      	movs	r0, r3
 8003288:	f005 fff4 	bl	8009274 <HAL_UARTEx_ReceiveToIdle_IT>
 800328c:	1e03      	subs	r3, r0, #0
 800328e:	d1f7      	bne.n	8003280 <HAL_UARTEx_RxEventCallback+0x100>

}
 8003290:	46c0      	nop			; (mov r8, r8)
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	46bd      	mov	sp, r7
 8003296:	b002      	add	sp, #8
 8003298:	bd80      	pop	{r7, pc}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	200004c8 	.word	0x200004c8
 80032a0:	200004c4 	.word	0x200004c4
 80032a4:	20000536 	.word	0x20000536
 80032a8:	20000538 	.word	0x20000538
 80032ac:	50000400 	.word	0x50000400
 80032b0:	20000535 	.word	0x20000535
 80032b4:	20000530 	.word	0x20000530
 80032b8:	20000430 	.word	0x20000430

080032bc <ReadSW_ID>:
static uint8_t ReadSW_ID(void){
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
	// Read switch data ID
    uint8_t value = 0,bit = 7;
 80032c2:	1dfb      	adds	r3, r7, #7
 80032c4:	2200      	movs	r2, #0
 80032c6:	701a      	strb	r2, [r3, #0]
 80032c8:	1dbb      	adds	r3, r7, #6
 80032ca:	2207      	movs	r2, #7
 80032cc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(SH_LD_GPIO_Port, SH_LD_Pin, GPIO_PIN_RESET);
 80032ce:	4b34      	ldr	r3, [pc, #208]	; (80033a0 <ReadSW_ID+0xe4>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	2104      	movs	r1, #4
 80032d4:	0018      	movs	r0, r3
 80032d6:	f001 ff6c 	bl	80051b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW_CS_GPIO_Port, SW_CS_Pin, GPIO_PIN_RESET);
 80032da:	2380      	movs	r3, #128	; 0x80
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4830      	ldr	r0, [pc, #192]	; (80033a0 <ReadSW_ID+0xe4>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	0019      	movs	r1, r3
 80032e4:	f001 ff65 	bl	80051b2 <HAL_GPIO_WritePin>
	delay(10);
 80032e8:	200a      	movs	r0, #10
 80032ea:	f7ff ff36 	bl	800315a <delay>
	for(int i =0; i < 8; i++)
 80032ee:	2300      	movs	r3, #0
 80032f0:	603b      	str	r3, [r7, #0]
 80032f2:	e044      	b.n	800337e <ReadSW_ID+0xc2>
	{
		HAL_GPIO_WritePin(BB_CLK_GPIO_Port, BB_CLK_Pin, GPIO_PIN_RESET);
 80032f4:	23a0      	movs	r3, #160	; 0xa0
 80032f6:	05db      	lsls	r3, r3, #23
 80032f8:	2200      	movs	r2, #0
 80032fa:	2120      	movs	r1, #32
 80032fc:	0018      	movs	r0, r3
 80032fe:	f001 ff58 	bl	80051b2 <HAL_GPIO_WritePin>
		delay(10);
 8003302:	200a      	movs	r0, #10
 8003304:	f7ff ff29 	bl	800315a <delay>
		HAL_GPIO_WritePin(BB_CLK_GPIO_Port, BB_CLK_Pin, GPIO_PIN_SET);
 8003308:	23a0      	movs	r3, #160	; 0xa0
 800330a:	05db      	lsls	r3, r3, #23
 800330c:	2201      	movs	r2, #1
 800330e:	2120      	movs	r1, #32
 8003310:	0018      	movs	r0, r3
 8003312:	f001 ff4e 	bl	80051b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SH_LD_GPIO_Port, SH_LD_Pin, GPIO_PIN_SET);
 8003316:	4b22      	ldr	r3, [pc, #136]	; (80033a0 <ReadSW_ID+0xe4>)
 8003318:	2201      	movs	r2, #1
 800331a:	2104      	movs	r1, #4
 800331c:	0018      	movs	r0, r3
 800331e:	f001 ff48 	bl	80051b2 <HAL_GPIO_WritePin>
		if((HAL_GPIO_ReadPin(BB_MISO_GPIO_Port, BB_MISO_Pin)) == GPIO_PIN_SET)
 8003322:	23a0      	movs	r3, #160	; 0xa0
 8003324:	05db      	lsls	r3, r3, #23
 8003326:	2140      	movs	r1, #64	; 0x40
 8003328:	0018      	movs	r0, r3
 800332a:	f001 ff25 	bl	8005178 <HAL_GPIO_ReadPin>
 800332e:	0003      	movs	r3, r0
 8003330:	2b01      	cmp	r3, #1
 8003332:	d10d      	bne.n	8003350 <ReadSW_ID+0x94>
			value |= (1 << bit);
 8003334:	1dbb      	adds	r3, r7, #6
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2201      	movs	r2, #1
 800333a:	409a      	lsls	r2, r3
 800333c:	0013      	movs	r3, r2
 800333e:	b25a      	sxtb	r2, r3
 8003340:	1dfb      	adds	r3, r7, #7
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	b25b      	sxtb	r3, r3
 8003346:	4313      	orrs	r3, r2
 8003348:	b25a      	sxtb	r2, r3
 800334a:	1dfb      	adds	r3, r7, #7
 800334c:	701a      	strb	r2, [r3, #0]
 800334e:	e00e      	b.n	800336e <ReadSW_ID+0xb2>
		else
			value &= ~(1 << bit);
 8003350:	1dbb      	adds	r3, r7, #6
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2201      	movs	r2, #1
 8003356:	409a      	lsls	r2, r3
 8003358:	0013      	movs	r3, r2
 800335a:	b25b      	sxtb	r3, r3
 800335c:	43db      	mvns	r3, r3
 800335e:	b25b      	sxtb	r3, r3
 8003360:	1dfa      	adds	r2, r7, #7
 8003362:	7812      	ldrb	r2, [r2, #0]
 8003364:	b252      	sxtb	r2, r2
 8003366:	4013      	ands	r3, r2
 8003368:	b25a      	sxtb	r2, r3
 800336a:	1dfb      	adds	r3, r7, #7
 800336c:	701a      	strb	r2, [r3, #0]
		bit--;
 800336e:	1dbb      	adds	r3, r7, #6
 8003370:	781a      	ldrb	r2, [r3, #0]
 8003372:	1dbb      	adds	r3, r7, #6
 8003374:	3a01      	subs	r2, #1
 8003376:	701a      	strb	r2, [r3, #0]
	for(int i =0; i < 8; i++)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	3301      	adds	r3, #1
 800337c:	603b      	str	r3, [r7, #0]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b07      	cmp	r3, #7
 8003382:	ddb7      	ble.n	80032f4 <ReadSW_ID+0x38>
	}
	HAL_GPIO_WritePin(SW_CS_GPIO_Port, SW_CS_Pin, GPIO_PIN_SET);
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4805      	ldr	r0, [pc, #20]	; (80033a0 <ReadSW_ID+0xe4>)
 800338a:	2201      	movs	r2, #1
 800338c:	0019      	movs	r1, r3
 800338e:	f001 ff10 	bl	80051b2 <HAL_GPIO_WritePin>
	return value;
 8003392:	1dfb      	adds	r3, r7, #7
 8003394:	781b      	ldrb	r3, [r3, #0]
}
 8003396:	0018      	movs	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	b002      	add	sp, #8
 800339c:	bd80      	pop	{r7, pc}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	50000400 	.word	0x50000400

080033a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033a8:	f001 fb52 	bl	8004a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033ac:	f000 f85e 	bl	800346c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033b0:	f000 fb14 	bl	80039dc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80033b4:	f000 fac4 	bl	8003940 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80033b8:	f000 f8b6 	bl	8003528 <MX_TIM1_Init>
  MX_TIM3_Init();
 80033bc:	f000 f9f4 	bl	80037a8 <MX_TIM3_Init>
  MX_TIM2_Init();
 80033c0:	f000 f99e 	bl	8003700 <MX_TIM2_Init>
  MX_TIM14_Init();
 80033c4:	f000 fa46 	bl	8003854 <MX_TIM14_Init>
  MX_TIM16_Init();
 80033c8:	f000 fa6a 	bl	80038a0 <MX_TIM16_Init>
  MX_TIM17_Init();
 80033cc:	f000 fa90 	bl	80038f0 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 80033d0:	4b1e      	ldr	r3, [pc, #120]	; (800344c <main+0xa8>)
 80033d2:	0018      	movs	r0, r3
 80033d4:	f002 ff14 	bl	8006200 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 80033d8:	4b1d      	ldr	r3, [pc, #116]	; (8003450 <main+0xac>)
 80033da:	0018      	movs	r0, r3
 80033dc:	f002 ff10 	bl	8006200 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim14);
 80033e0:	4b1c      	ldr	r3, [pc, #112]	; (8003454 <main+0xb0>)
 80033e2:	0018      	movs	r0, r3
 80033e4:	f002 ff0c 	bl	8006200 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim16);
 80033e8:	4b1b      	ldr	r3, [pc, #108]	; (8003458 <main+0xb4>)
 80033ea:	0018      	movs	r0, r3
 80033ec:	f002 ff08 	bl	8006200 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim17);
 80033f0:	4b1a      	ldr	r3, [pc, #104]	; (800345c <main+0xb8>)
 80033f2:	0018      	movs	r0, r3
 80033f4:	f002 ff04 	bl	8006200 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80033f8:	4b15      	ldr	r3, [pc, #84]	; (8003450 <main+0xac>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2200      	movs	r2, #0
 80033fe:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_TIM_SET_COUNTER(&htim14, 0);
 8003400:	4b14      	ldr	r3, [pc, #80]	; (8003454 <main+0xb0>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2200      	movs	r2, #0
 8003406:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_TIM_SET_COUNTER(&htim16, 0);
 8003408:	4b13      	ldr	r3, [pc, #76]	; (8003458 <main+0xb4>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2200      	movs	r2, #0
 800340e:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_TIM_SET_COUNTER(&htim17, 0);
 8003410:	4b12      	ldr	r3, [pc, #72]	; (800345c <main+0xb8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2200      	movs	r2, #0
 8003416:	625a      	str	r2, [r3, #36]	; 0x24
  enableIROut(38);
 8003418:	2026      	movs	r0, #38	; 0x26
 800341a:	f7ff fdc1 	bl	8002fa0 <enableIROut>
  SlaveID = ReadSW_ID();
 800341e:	f7ff ff4d 	bl	80032bc <ReadSW_ID>
 8003422:	0003      	movs	r3, r0
 8003424:	001a      	movs	r2, r3
 8003426:	4b0e      	ldr	r3, [pc, #56]	; (8003460 <main+0xbc>)
 8003428:	701a      	strb	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 40);
 800342a:	490e      	ldr	r1, [pc, #56]	; (8003464 <main+0xc0>)
 800342c:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <main+0xc4>)
 800342e:	2228      	movs	r2, #40	; 0x28
 8003430:	0018      	movs	r0, r3
 8003432:	f005 ff1f 	bl	8009274 <HAL_UARTEx_ReceiveToIdle_IT>
//  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
//  printf("Hello World \n\r");

  RGBInit();
 8003436:	f7fe ff31 	bl	800229c <RGBInit>
  AllLedOff(20);
 800343a:	2014      	movs	r0, #20
 800343c:	f7ff f95a 	bl	80026f4 <AllLedOff>
							  break;

		  default:			  ModeState = CheckStatus;
							  break;
		}*/
	   SlotDataChek();
 8003440:	f7ff fd16 	bl	8002e70 <SlotDataChek>
	   delay(100);
 8003444:	2064      	movs	r0, #100	; 0x64
 8003446:	f7ff fe88 	bl	800315a <delay>
	   SlotDataChek();
 800344a:	e7f9      	b.n	8003440 <main+0x9c>
 800344c:	20000300 	.word	0x20000300
 8003450:	200002b4 	.word	0x200002b4
 8003454:	2000034c 	.word	0x2000034c
 8003458:	20000398 	.word	0x20000398
 800345c:	200003e4 	.word	0x200003e4
 8003460:	200004c4 	.word	0x200004c4
 8003464:	200004c8 	.word	0x200004c8
 8003468:	20000430 	.word	0x20000430

0800346c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800346c:	b590      	push	{r4, r7, lr}
 800346e:	b093      	sub	sp, #76	; 0x4c
 8003470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003472:	2410      	movs	r4, #16
 8003474:	193b      	adds	r3, r7, r4
 8003476:	0018      	movs	r0, r3
 8003478:	2338      	movs	r3, #56	; 0x38
 800347a:	001a      	movs	r2, r3
 800347c:	2100      	movs	r1, #0
 800347e:	f005 ffe9 	bl	8009454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003482:	003b      	movs	r3, r7
 8003484:	0018      	movs	r0, r3
 8003486:	2310      	movs	r3, #16
 8003488:	001a      	movs	r2, r3
 800348a:	2100      	movs	r1, #0
 800348c:	f005 ffe2 	bl	8009454 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003490:	2380      	movs	r3, #128	; 0x80
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	0018      	movs	r0, r3
 8003496:	f001 ff73 	bl	8005380 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800349a:	193b      	adds	r3, r7, r4
 800349c:	2202      	movs	r2, #2
 800349e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034a0:	193b      	adds	r3, r7, r4
 80034a2:	2280      	movs	r2, #128	; 0x80
 80034a4:	0052      	lsls	r2, r2, #1
 80034a6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80034a8:	0021      	movs	r1, r4
 80034aa:	187b      	adds	r3, r7, r1
 80034ac:	2200      	movs	r2, #0
 80034ae:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80034b0:	187b      	adds	r3, r7, r1
 80034b2:	2240      	movs	r2, #64	; 0x40
 80034b4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034b6:	187b      	adds	r3, r7, r1
 80034b8:	2202      	movs	r2, #2
 80034ba:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80034bc:	187b      	adds	r3, r7, r1
 80034be:	2202      	movs	r2, #2
 80034c0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80034c2:	187b      	adds	r3, r7, r1
 80034c4:	2200      	movs	r2, #0
 80034c6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80034c8:	187b      	adds	r3, r7, r1
 80034ca:	2208      	movs	r2, #8
 80034cc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80034ce:	187b      	adds	r3, r7, r1
 80034d0:	2280      	movs	r2, #128	; 0x80
 80034d2:	0292      	lsls	r2, r2, #10
 80034d4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80034d6:	187b      	adds	r3, r7, r1
 80034d8:	2280      	movs	r2, #128	; 0x80
 80034da:	0492      	lsls	r2, r2, #18
 80034dc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80034de:	187b      	adds	r3, r7, r1
 80034e0:	2280      	movs	r2, #128	; 0x80
 80034e2:	0592      	lsls	r2, r2, #22
 80034e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034e6:	187b      	adds	r3, r7, r1
 80034e8:	0018      	movs	r0, r3
 80034ea:	f001 ff95 	bl	8005418 <HAL_RCC_OscConfig>
 80034ee:	1e03      	subs	r3, r0, #0
 80034f0:	d001      	beq.n	80034f6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80034f2:	f000 fb17 	bl	8003b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034f6:	003b      	movs	r3, r7
 80034f8:	2207      	movs	r2, #7
 80034fa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034fc:	003b      	movs	r3, r7
 80034fe:	2202      	movs	r2, #2
 8003500:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003502:	003b      	movs	r3, r7
 8003504:	2200      	movs	r2, #0
 8003506:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003508:	003b      	movs	r3, r7
 800350a:	2200      	movs	r2, #0
 800350c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800350e:	003b      	movs	r3, r7
 8003510:	2102      	movs	r1, #2
 8003512:	0018      	movs	r0, r3
 8003514:	f002 fa9a 	bl	8005a4c <HAL_RCC_ClockConfig>
 8003518:	1e03      	subs	r3, r0, #0
 800351a:	d001      	beq.n	8003520 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800351c:	f000 fb02 	bl	8003b24 <Error_Handler>
  }
}
 8003520:	46c0      	nop			; (mov r8, r8)
 8003522:	46bd      	mov	sp, r7
 8003524:	b013      	add	sp, #76	; 0x4c
 8003526:	bd90      	pop	{r4, r7, pc}

08003528 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b09c      	sub	sp, #112	; 0x70
 800352c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800352e:	2360      	movs	r3, #96	; 0x60
 8003530:	18fb      	adds	r3, r7, r3
 8003532:	0018      	movs	r0, r3
 8003534:	2310      	movs	r3, #16
 8003536:	001a      	movs	r2, r3
 8003538:	2100      	movs	r1, #0
 800353a:	f005 ff8b 	bl	8009454 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800353e:	2354      	movs	r3, #84	; 0x54
 8003540:	18fb      	adds	r3, r7, r3
 8003542:	0018      	movs	r0, r3
 8003544:	230c      	movs	r3, #12
 8003546:	001a      	movs	r2, r3
 8003548:	2100      	movs	r1, #0
 800354a:	f005 ff83 	bl	8009454 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800354e:	2338      	movs	r3, #56	; 0x38
 8003550:	18fb      	adds	r3, r7, r3
 8003552:	0018      	movs	r0, r3
 8003554:	231c      	movs	r3, #28
 8003556:	001a      	movs	r2, r3
 8003558:	2100      	movs	r1, #0
 800355a:	f005 ff7b 	bl	8009454 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800355e:	1d3b      	adds	r3, r7, #4
 8003560:	0018      	movs	r0, r3
 8003562:	2334      	movs	r3, #52	; 0x34
 8003564:	001a      	movs	r2, r3
 8003566:	2100      	movs	r1, #0
 8003568:	f005 ff74 	bl	8009454 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800356c:	4b61      	ldr	r3, [pc, #388]	; (80036f4 <MX_TIM1_Init+0x1cc>)
 800356e:	4a62      	ldr	r2, [pc, #392]	; (80036f8 <MX_TIM1_Init+0x1d0>)
 8003570:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003572:	4b60      	ldr	r3, [pc, #384]	; (80036f4 <MX_TIM1_Init+0x1cc>)
 8003574:	2200      	movs	r2, #0
 8003576:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003578:	4b5e      	ldr	r3, [pc, #376]	; (80036f4 <MX_TIM1_Init+0x1cc>)
 800357a:	2200      	movs	r2, #0
 800357c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800357e:	4b5d      	ldr	r3, [pc, #372]	; (80036f4 <MX_TIM1_Init+0x1cc>)
 8003580:	4a5e      	ldr	r2, [pc, #376]	; (80036fc <MX_TIM1_Init+0x1d4>)
 8003582:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003584:	4b5b      	ldr	r3, [pc, #364]	; (80036f4 <MX_TIM1_Init+0x1cc>)
 8003586:	2200      	movs	r2, #0
 8003588:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800358a:	4b5a      	ldr	r3, [pc, #360]	; (80036f4 <MX_TIM1_Init+0x1cc>)
 800358c:	2200      	movs	r2, #0
 800358e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003590:	4b58      	ldr	r3, [pc, #352]	; (80036f4 <MX_TIM1_Init+0x1cc>)
 8003592:	2200      	movs	r2, #0
 8003594:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003596:	4b57      	ldr	r3, [pc, #348]	; (80036f4 <MX_TIM1_Init+0x1cc>)
 8003598:	0018      	movs	r0, r3
 800359a:	f002 fd7b 	bl	8006094 <HAL_TIM_Base_Init>
 800359e:	1e03      	subs	r3, r0, #0
 80035a0:	d001      	beq.n	80035a6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80035a2:	f000 fabf 	bl	8003b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035a6:	2160      	movs	r1, #96	; 0x60
 80035a8:	187b      	adds	r3, r7, r1
 80035aa:	2280      	movs	r2, #128	; 0x80
 80035ac:	0152      	lsls	r2, r2, #5
 80035ae:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80035b0:	187a      	adds	r2, r7, r1
 80035b2:	4b50      	ldr	r3, [pc, #320]	; (80036f4 <MX_TIM1_Init+0x1cc>)
 80035b4:	0011      	movs	r1, r2
 80035b6:	0018      	movs	r0, r3
 80035b8:	f003 f932 	bl	8006820 <HAL_TIM_ConfigClockSource>
 80035bc:	1e03      	subs	r3, r0, #0
 80035be:	d001      	beq.n	80035c4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80035c0:	f000 fab0 	bl	8003b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80035c4:	4b4b      	ldr	r3, [pc, #300]	; (80036f4 <MX_TIM1_Init+0x1cc>)
 80035c6:	0018      	movs	r0, r3
 80035c8:	f002 fe66 	bl	8006298 <HAL_TIM_PWM_Init>
 80035cc:	1e03      	subs	r3, r0, #0
 80035ce:	d001      	beq.n	80035d4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80035d0:	f000 faa8 	bl	8003b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035d4:	2154      	movs	r1, #84	; 0x54
 80035d6:	187b      	adds	r3, r7, r1
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80035dc:	187b      	adds	r3, r7, r1
 80035de:	2200      	movs	r2, #0
 80035e0:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035e2:	187b      	adds	r3, r7, r1
 80035e4:	2200      	movs	r2, #0
 80035e6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80035e8:	187a      	adds	r2, r7, r1
 80035ea:	4b42      	ldr	r3, [pc, #264]	; (80036f4 <MX_TIM1_Init+0x1cc>)
 80035ec:	0011      	movs	r1, r2
 80035ee:	0018      	movs	r0, r3
 80035f0:	f003 fdbe 	bl	8007170 <HAL_TIMEx_MasterConfigSynchronization>
 80035f4:	1e03      	subs	r3, r0, #0
 80035f6:	d001      	beq.n	80035fc <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80035f8:	f000 fa94 	bl	8003b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035fc:	2138      	movs	r1, #56	; 0x38
 80035fe:	187b      	adds	r3, r7, r1
 8003600:	2260      	movs	r2, #96	; 0x60
 8003602:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003604:	187b      	adds	r3, r7, r1
 8003606:	2200      	movs	r2, #0
 8003608:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800360a:	187b      	adds	r3, r7, r1
 800360c:	2200      	movs	r2, #0
 800360e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003610:	187b      	adds	r3, r7, r1
 8003612:	2200      	movs	r2, #0
 8003614:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003616:	187b      	adds	r3, r7, r1
 8003618:	2200      	movs	r2, #0
 800361a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800361c:	187b      	adds	r3, r7, r1
 800361e:	2200      	movs	r2, #0
 8003620:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003622:	187b      	adds	r3, r7, r1
 8003624:	2200      	movs	r2, #0
 8003626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003628:	1879      	adds	r1, r7, r1
 800362a:	4b32      	ldr	r3, [pc, #200]	; (80036f4 <MX_TIM1_Init+0x1cc>)
 800362c:	2200      	movs	r2, #0
 800362e:	0018      	movs	r0, r3
 8003630:	f002 fff6 	bl	8006620 <HAL_TIM_PWM_ConfigChannel>
 8003634:	1e03      	subs	r3, r0, #0
 8003636:	d001      	beq.n	800363c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8003638:	f000 fa74 	bl	8003b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800363c:	2338      	movs	r3, #56	; 0x38
 800363e:	18f9      	adds	r1, r7, r3
 8003640:	4b2c      	ldr	r3, [pc, #176]	; (80036f4 <MX_TIM1_Init+0x1cc>)
 8003642:	2204      	movs	r2, #4
 8003644:	0018      	movs	r0, r3
 8003646:	f002 ffeb 	bl	8006620 <HAL_TIM_PWM_ConfigChannel>
 800364a:	1e03      	subs	r3, r0, #0
 800364c:	d001      	beq.n	8003652 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800364e:	f000 fa69 	bl	8003b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003652:	2338      	movs	r3, #56	; 0x38
 8003654:	18f9      	adds	r1, r7, r3
 8003656:	4b27      	ldr	r3, [pc, #156]	; (80036f4 <MX_TIM1_Init+0x1cc>)
 8003658:	2208      	movs	r2, #8
 800365a:	0018      	movs	r0, r3
 800365c:	f002 ffe0 	bl	8006620 <HAL_TIM_PWM_ConfigChannel>
 8003660:	1e03      	subs	r3, r0, #0
 8003662:	d001      	beq.n	8003668 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8003664:	f000 fa5e 	bl	8003b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003668:	2338      	movs	r3, #56	; 0x38
 800366a:	18f9      	adds	r1, r7, r3
 800366c:	4b21      	ldr	r3, [pc, #132]	; (80036f4 <MX_TIM1_Init+0x1cc>)
 800366e:	220c      	movs	r2, #12
 8003670:	0018      	movs	r0, r3
 8003672:	f002 ffd5 	bl	8006620 <HAL_TIM_PWM_ConfigChannel>
 8003676:	1e03      	subs	r3, r0, #0
 8003678:	d001      	beq.n	800367e <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 800367a:	f000 fa53 	bl	8003b24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800367e:	1d3b      	adds	r3, r7, #4
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003684:	1d3b      	adds	r3, r7, #4
 8003686:	2200      	movs	r2, #0
 8003688:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800368a:	1d3b      	adds	r3, r7, #4
 800368c:	2200      	movs	r2, #0
 800368e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003690:	1d3b      	adds	r3, r7, #4
 8003692:	2200      	movs	r2, #0
 8003694:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003696:	1d3b      	adds	r3, r7, #4
 8003698:	2200      	movs	r2, #0
 800369a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800369c:	1d3b      	adds	r3, r7, #4
 800369e:	2280      	movs	r2, #128	; 0x80
 80036a0:	0192      	lsls	r2, r2, #6
 80036a2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80036a4:	1d3b      	adds	r3, r7, #4
 80036a6:	2200      	movs	r2, #0
 80036a8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80036aa:	1d3b      	adds	r3, r7, #4
 80036ac:	2200      	movs	r2, #0
 80036ae:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80036b0:	1d3b      	adds	r3, r7, #4
 80036b2:	2200      	movs	r2, #0
 80036b4:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80036b6:	1d3b      	adds	r3, r7, #4
 80036b8:	2280      	movs	r2, #128	; 0x80
 80036ba:	0492      	lsls	r2, r2, #18
 80036bc:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80036be:	1d3b      	adds	r3, r7, #4
 80036c0:	2200      	movs	r2, #0
 80036c2:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80036c4:	1d3b      	adds	r3, r7, #4
 80036c6:	2200      	movs	r2, #0
 80036c8:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80036ca:	1d3b      	adds	r3, r7, #4
 80036cc:	2200      	movs	r2, #0
 80036ce:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80036d0:	1d3a      	adds	r2, r7, #4
 80036d2:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <MX_TIM1_Init+0x1cc>)
 80036d4:	0011      	movs	r1, r2
 80036d6:	0018      	movs	r0, r3
 80036d8:	f003 fdb2 	bl	8007240 <HAL_TIMEx_ConfigBreakDeadTime>
 80036dc:	1e03      	subs	r3, r0, #0
 80036de:	d001      	beq.n	80036e4 <MX_TIM1_Init+0x1bc>
  {
    Error_Handler();
 80036e0:	f000 fa20 	bl	8003b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80036e4:	4b03      	ldr	r3, [pc, #12]	; (80036f4 <MX_TIM1_Init+0x1cc>)
 80036e6:	0018      	movs	r0, r3
 80036e8:	f000 ff5c 	bl	80045a4 <HAL_TIM_MspPostInit>

}
 80036ec:	46c0      	nop			; (mov r8, r8)
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b01c      	add	sp, #112	; 0x70
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	20000268 	.word	0x20000268
 80036f8:	40012c00 	.word	0x40012c00
 80036fc:	0000ffff 	.word	0x0000ffff

08003700 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b088      	sub	sp, #32
 8003704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003706:	2310      	movs	r3, #16
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	0018      	movs	r0, r3
 800370c:	2310      	movs	r3, #16
 800370e:	001a      	movs	r2, r3
 8003710:	2100      	movs	r1, #0
 8003712:	f005 fe9f 	bl	8009454 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003716:	1d3b      	adds	r3, r7, #4
 8003718:	0018      	movs	r0, r3
 800371a:	230c      	movs	r3, #12
 800371c:	001a      	movs	r2, r3
 800371e:	2100      	movs	r1, #0
 8003720:	f005 fe98 	bl	8009454 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003724:	4b1f      	ldr	r3, [pc, #124]	; (80037a4 <MX_TIM2_Init+0xa4>)
 8003726:	2280      	movs	r2, #128	; 0x80
 8003728:	05d2      	lsls	r2, r2, #23
 800372a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 800372c:	4b1d      	ldr	r3, [pc, #116]	; (80037a4 <MX_TIM2_Init+0xa4>)
 800372e:	223f      	movs	r2, #63	; 0x3f
 8003730:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003732:	4b1c      	ldr	r3, [pc, #112]	; (80037a4 <MX_TIM2_Init+0xa4>)
 8003734:	2200      	movs	r2, #0
 8003736:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003738:	4b1a      	ldr	r3, [pc, #104]	; (80037a4 <MX_TIM2_Init+0xa4>)
 800373a:	2201      	movs	r2, #1
 800373c:	4252      	negs	r2, r2
 800373e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003740:	4b18      	ldr	r3, [pc, #96]	; (80037a4 <MX_TIM2_Init+0xa4>)
 8003742:	2200      	movs	r2, #0
 8003744:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003746:	4b17      	ldr	r3, [pc, #92]	; (80037a4 <MX_TIM2_Init+0xa4>)
 8003748:	2200      	movs	r2, #0
 800374a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800374c:	4b15      	ldr	r3, [pc, #84]	; (80037a4 <MX_TIM2_Init+0xa4>)
 800374e:	0018      	movs	r0, r3
 8003750:	f002 fca0 	bl	8006094 <HAL_TIM_Base_Init>
 8003754:	1e03      	subs	r3, r0, #0
 8003756:	d001      	beq.n	800375c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003758:	f000 f9e4 	bl	8003b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800375c:	2110      	movs	r1, #16
 800375e:	187b      	adds	r3, r7, r1
 8003760:	2280      	movs	r2, #128	; 0x80
 8003762:	0152      	lsls	r2, r2, #5
 8003764:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003766:	187a      	adds	r2, r7, r1
 8003768:	4b0e      	ldr	r3, [pc, #56]	; (80037a4 <MX_TIM2_Init+0xa4>)
 800376a:	0011      	movs	r1, r2
 800376c:	0018      	movs	r0, r3
 800376e:	f003 f857 	bl	8006820 <HAL_TIM_ConfigClockSource>
 8003772:	1e03      	subs	r3, r0, #0
 8003774:	d001      	beq.n	800377a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8003776:	f000 f9d5 	bl	8003b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800377a:	1d3b      	adds	r3, r7, #4
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003780:	1d3b      	adds	r3, r7, #4
 8003782:	2200      	movs	r2, #0
 8003784:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003786:	1d3a      	adds	r2, r7, #4
 8003788:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <MX_TIM2_Init+0xa4>)
 800378a:	0011      	movs	r1, r2
 800378c:	0018      	movs	r0, r3
 800378e:	f003 fcef 	bl	8007170 <HAL_TIMEx_MasterConfigSynchronization>
 8003792:	1e03      	subs	r3, r0, #0
 8003794:	d001      	beq.n	800379a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003796:	f000 f9c5 	bl	8003b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	46bd      	mov	sp, r7
 800379e:	b008      	add	sp, #32
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	200002b4 	.word	0x200002b4

080037a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037ae:	2310      	movs	r3, #16
 80037b0:	18fb      	adds	r3, r7, r3
 80037b2:	0018      	movs	r0, r3
 80037b4:	2310      	movs	r3, #16
 80037b6:	001a      	movs	r2, r3
 80037b8:	2100      	movs	r1, #0
 80037ba:	f005 fe4b 	bl	8009454 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037be:	1d3b      	adds	r3, r7, #4
 80037c0:	0018      	movs	r0, r3
 80037c2:	230c      	movs	r3, #12
 80037c4:	001a      	movs	r2, r3
 80037c6:	2100      	movs	r1, #0
 80037c8:	f005 fe44 	bl	8009454 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80037cc:	4b1e      	ldr	r3, [pc, #120]	; (8003848 <MX_TIM3_Init+0xa0>)
 80037ce:	4a1f      	ldr	r2, [pc, #124]	; (800384c <MX_TIM3_Init+0xa4>)
 80037d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 80037d2:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <MX_TIM3_Init+0xa0>)
 80037d4:	223f      	movs	r2, #63	; 0x3f
 80037d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037d8:	4b1b      	ldr	r3, [pc, #108]	; (8003848 <MX_TIM3_Init+0xa0>)
 80037da:	2200      	movs	r2, #0
 80037dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF -1;
 80037de:	4b1a      	ldr	r3, [pc, #104]	; (8003848 <MX_TIM3_Init+0xa0>)
 80037e0:	4a1b      	ldr	r2, [pc, #108]	; (8003850 <MX_TIM3_Init+0xa8>)
 80037e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037e4:	4b18      	ldr	r3, [pc, #96]	; (8003848 <MX_TIM3_Init+0xa0>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037ea:	4b17      	ldr	r3, [pc, #92]	; (8003848 <MX_TIM3_Init+0xa0>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80037f0:	4b15      	ldr	r3, [pc, #84]	; (8003848 <MX_TIM3_Init+0xa0>)
 80037f2:	0018      	movs	r0, r3
 80037f4:	f002 fc4e 	bl	8006094 <HAL_TIM_Base_Init>
 80037f8:	1e03      	subs	r3, r0, #0
 80037fa:	d001      	beq.n	8003800 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80037fc:	f000 f992 	bl	8003b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003800:	2110      	movs	r1, #16
 8003802:	187b      	adds	r3, r7, r1
 8003804:	2280      	movs	r2, #128	; 0x80
 8003806:	0152      	lsls	r2, r2, #5
 8003808:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800380a:	187a      	adds	r2, r7, r1
 800380c:	4b0e      	ldr	r3, [pc, #56]	; (8003848 <MX_TIM3_Init+0xa0>)
 800380e:	0011      	movs	r1, r2
 8003810:	0018      	movs	r0, r3
 8003812:	f003 f805 	bl	8006820 <HAL_TIM_ConfigClockSource>
 8003816:	1e03      	subs	r3, r0, #0
 8003818:	d001      	beq.n	800381e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800381a:	f000 f983 	bl	8003b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800381e:	1d3b      	adds	r3, r7, #4
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003824:	1d3b      	adds	r3, r7, #4
 8003826:	2200      	movs	r2, #0
 8003828:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800382a:	1d3a      	adds	r2, r7, #4
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <MX_TIM3_Init+0xa0>)
 800382e:	0011      	movs	r1, r2
 8003830:	0018      	movs	r0, r3
 8003832:	f003 fc9d 	bl	8007170 <HAL_TIMEx_MasterConfigSynchronization>
 8003836:	1e03      	subs	r3, r0, #0
 8003838:	d001      	beq.n	800383e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800383a:	f000 f973 	bl	8003b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	46bd      	mov	sp, r7
 8003842:	b008      	add	sp, #32
 8003844:	bd80      	pop	{r7, pc}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	20000300 	.word	0x20000300
 800384c:	40000400 	.word	0x40000400
 8003850:	0000fffe 	.word	0x0000fffe

08003854 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003858:	4b0e      	ldr	r3, [pc, #56]	; (8003894 <MX_TIM14_Init+0x40>)
 800385a:	4a0f      	ldr	r2, [pc, #60]	; (8003898 <MX_TIM14_Init+0x44>)
 800385c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 64-1;
 800385e:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <MX_TIM14_Init+0x40>)
 8003860:	223f      	movs	r2, #63	; 0x3f
 8003862:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003864:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <MX_TIM14_Init+0x40>)
 8003866:	2200      	movs	r2, #0
 8003868:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800386a:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <MX_TIM14_Init+0x40>)
 800386c:	4a0b      	ldr	r2, [pc, #44]	; (800389c <MX_TIM14_Init+0x48>)
 800386e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003870:	4b08      	ldr	r3, [pc, #32]	; (8003894 <MX_TIM14_Init+0x40>)
 8003872:	2200      	movs	r2, #0
 8003874:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003876:	4b07      	ldr	r3, [pc, #28]	; (8003894 <MX_TIM14_Init+0x40>)
 8003878:	2200      	movs	r2, #0
 800387a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800387c:	4b05      	ldr	r3, [pc, #20]	; (8003894 <MX_TIM14_Init+0x40>)
 800387e:	0018      	movs	r0, r3
 8003880:	f002 fc08 	bl	8006094 <HAL_TIM_Base_Init>
 8003884:	1e03      	subs	r3, r0, #0
 8003886:	d001      	beq.n	800388c <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8003888:	f000 f94c 	bl	8003b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800388c:	46c0      	nop			; (mov r8, r8)
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	2000034c 	.word	0x2000034c
 8003898:	40002000 	.word	0x40002000
 800389c:	0000ffff 	.word	0x0000ffff

080038a0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80038a4:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <MX_TIM16_Init+0x44>)
 80038a6:	4a10      	ldr	r2, [pc, #64]	; (80038e8 <MX_TIM16_Init+0x48>)
 80038a8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64-1;
 80038aa:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <MX_TIM16_Init+0x44>)
 80038ac:	223f      	movs	r2, #63	; 0x3f
 80038ae:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038b0:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <MX_TIM16_Init+0x44>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80038b6:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <MX_TIM16_Init+0x44>)
 80038b8:	4a0c      	ldr	r2, [pc, #48]	; (80038ec <MX_TIM16_Init+0x4c>)
 80038ba:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038bc:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <MX_TIM16_Init+0x44>)
 80038be:	2200      	movs	r2, #0
 80038c0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80038c2:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <MX_TIM16_Init+0x44>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038c8:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <MX_TIM16_Init+0x44>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80038ce:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <MX_TIM16_Init+0x44>)
 80038d0:	0018      	movs	r0, r3
 80038d2:	f002 fbdf 	bl	8006094 <HAL_TIM_Base_Init>
 80038d6:	1e03      	subs	r3, r0, #0
 80038d8:	d001      	beq.n	80038de <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80038da:	f000 f923 	bl	8003b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	20000398 	.word	0x20000398
 80038e8:	40014400 	.word	0x40014400
 80038ec:	0000ffff 	.word	0x0000ffff

080038f0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80038f4:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <MX_TIM17_Init+0x44>)
 80038f6:	4a10      	ldr	r2, [pc, #64]	; (8003938 <MX_TIM17_Init+0x48>)
 80038f8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 64-1;
 80038fa:	4b0e      	ldr	r3, [pc, #56]	; (8003934 <MX_TIM17_Init+0x44>)
 80038fc:	223f      	movs	r2, #63	; 0x3f
 80038fe:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003900:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <MX_TIM17_Init+0x44>)
 8003902:	2200      	movs	r2, #0
 8003904:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8003906:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <MX_TIM17_Init+0x44>)
 8003908:	4a0c      	ldr	r2, [pc, #48]	; (800393c <MX_TIM17_Init+0x4c>)
 800390a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800390c:	4b09      	ldr	r3, [pc, #36]	; (8003934 <MX_TIM17_Init+0x44>)
 800390e:	2200      	movs	r2, #0
 8003910:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003912:	4b08      	ldr	r3, [pc, #32]	; (8003934 <MX_TIM17_Init+0x44>)
 8003914:	2200      	movs	r2, #0
 8003916:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003918:	4b06      	ldr	r3, [pc, #24]	; (8003934 <MX_TIM17_Init+0x44>)
 800391a:	2200      	movs	r2, #0
 800391c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800391e:	4b05      	ldr	r3, [pc, #20]	; (8003934 <MX_TIM17_Init+0x44>)
 8003920:	0018      	movs	r0, r3
 8003922:	f002 fbb7 	bl	8006094 <HAL_TIM_Base_Init>
 8003926:	1e03      	subs	r3, r0, #0
 8003928:	d001      	beq.n	800392e <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 800392a:	f000 f8fb 	bl	8003b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	200003e4 	.word	0x200003e4
 8003938:	40014800 	.word	0x40014800
 800393c:	0000ffff 	.word	0x0000ffff

08003940 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003944:	4b23      	ldr	r3, [pc, #140]	; (80039d4 <MX_USART1_UART_Init+0x94>)
 8003946:	4a24      	ldr	r2, [pc, #144]	; (80039d8 <MX_USART1_UART_Init+0x98>)
 8003948:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800394a:	4b22      	ldr	r3, [pc, #136]	; (80039d4 <MX_USART1_UART_Init+0x94>)
 800394c:	22e1      	movs	r2, #225	; 0xe1
 800394e:	0252      	lsls	r2, r2, #9
 8003950:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003952:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <MX_USART1_UART_Init+0x94>)
 8003954:	2200      	movs	r2, #0
 8003956:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003958:	4b1e      	ldr	r3, [pc, #120]	; (80039d4 <MX_USART1_UART_Init+0x94>)
 800395a:	2200      	movs	r2, #0
 800395c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800395e:	4b1d      	ldr	r3, [pc, #116]	; (80039d4 <MX_USART1_UART_Init+0x94>)
 8003960:	2200      	movs	r2, #0
 8003962:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003964:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <MX_USART1_UART_Init+0x94>)
 8003966:	220c      	movs	r2, #12
 8003968:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800396a:	4b1a      	ldr	r3, [pc, #104]	; (80039d4 <MX_USART1_UART_Init+0x94>)
 800396c:	2200      	movs	r2, #0
 800396e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003970:	4b18      	ldr	r3, [pc, #96]	; (80039d4 <MX_USART1_UART_Init+0x94>)
 8003972:	2200      	movs	r2, #0
 8003974:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003976:	4b17      	ldr	r3, [pc, #92]	; (80039d4 <MX_USART1_UART_Init+0x94>)
 8003978:	2200      	movs	r2, #0
 800397a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800397c:	4b15      	ldr	r3, [pc, #84]	; (80039d4 <MX_USART1_UART_Init+0x94>)
 800397e:	2200      	movs	r2, #0
 8003980:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003982:	4b14      	ldr	r3, [pc, #80]	; (80039d4 <MX_USART1_UART_Init+0x94>)
 8003984:	2200      	movs	r2, #0
 8003986:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003988:	4b12      	ldr	r3, [pc, #72]	; (80039d4 <MX_USART1_UART_Init+0x94>)
 800398a:	0018      	movs	r0, r3
 800398c:	f003 fcfe 	bl	800738c <HAL_UART_Init>
 8003990:	1e03      	subs	r3, r0, #0
 8003992:	d001      	beq.n	8003998 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003994:	f000 f8c6 	bl	8003b24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003998:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <MX_USART1_UART_Init+0x94>)
 800399a:	2100      	movs	r1, #0
 800399c:	0018      	movs	r0, r3
 800399e:	f005 fbe7 	bl	8009170 <HAL_UARTEx_SetTxFifoThreshold>
 80039a2:	1e03      	subs	r3, r0, #0
 80039a4:	d001      	beq.n	80039aa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80039a6:	f000 f8bd 	bl	8003b24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80039aa:	4b0a      	ldr	r3, [pc, #40]	; (80039d4 <MX_USART1_UART_Init+0x94>)
 80039ac:	2100      	movs	r1, #0
 80039ae:	0018      	movs	r0, r3
 80039b0:	f005 fc1e 	bl	80091f0 <HAL_UARTEx_SetRxFifoThreshold>
 80039b4:	1e03      	subs	r3, r0, #0
 80039b6:	d001      	beq.n	80039bc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80039b8:	f000 f8b4 	bl	8003b24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80039bc:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <MX_USART1_UART_Init+0x94>)
 80039be:	0018      	movs	r0, r3
 80039c0:	f005 fb9c 	bl	80090fc <HAL_UARTEx_DisableFifoMode>
 80039c4:	1e03      	subs	r3, r0, #0
 80039c6:	d001      	beq.n	80039cc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80039c8:	f000 f8ac 	bl	8003b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80039cc:	46c0      	nop			; (mov r8, r8)
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	20000430 	.word	0x20000430
 80039d8:	40013800 	.word	0x40013800

080039dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039dc:	b590      	push	{r4, r7, lr}
 80039de:	b089      	sub	sp, #36	; 0x24
 80039e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e2:	240c      	movs	r4, #12
 80039e4:	193b      	adds	r3, r7, r4
 80039e6:	0018      	movs	r0, r3
 80039e8:	2314      	movs	r3, #20
 80039ea:	001a      	movs	r2, r3
 80039ec:	2100      	movs	r1, #0
 80039ee:	f005 fd31 	bl	8009454 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039f2:	4b4a      	ldr	r3, [pc, #296]	; (8003b1c <MX_GPIO_Init+0x140>)
 80039f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039f6:	4b49      	ldr	r3, [pc, #292]	; (8003b1c <MX_GPIO_Init+0x140>)
 80039f8:	2102      	movs	r1, #2
 80039fa:	430a      	orrs	r2, r1
 80039fc:	635a      	str	r2, [r3, #52]	; 0x34
 80039fe:	4b47      	ldr	r3, [pc, #284]	; (8003b1c <MX_GPIO_Init+0x140>)
 8003a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a02:	2202      	movs	r2, #2
 8003a04:	4013      	ands	r3, r2
 8003a06:	60bb      	str	r3, [r7, #8]
 8003a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a0a:	4b44      	ldr	r3, [pc, #272]	; (8003b1c <MX_GPIO_Init+0x140>)
 8003a0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a0e:	4b43      	ldr	r3, [pc, #268]	; (8003b1c <MX_GPIO_Init+0x140>)
 8003a10:	2104      	movs	r1, #4
 8003a12:	430a      	orrs	r2, r1
 8003a14:	635a      	str	r2, [r3, #52]	; 0x34
 8003a16:	4b41      	ldr	r3, [pc, #260]	; (8003b1c <MX_GPIO_Init+0x140>)
 8003a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	607b      	str	r3, [r7, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a22:	4b3e      	ldr	r3, [pc, #248]	; (8003b1c <MX_GPIO_Init+0x140>)
 8003a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a26:	4b3d      	ldr	r3, [pc, #244]	; (8003b1c <MX_GPIO_Init+0x140>)
 8003a28:	2101      	movs	r1, #1
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	635a      	str	r2, [r3, #52]	; 0x34
 8003a2e:	4b3b      	ldr	r3, [pc, #236]	; (8003b1c <MX_GPIO_Init+0x140>)
 8003a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a32:	2201      	movs	r2, #1
 8003a34:	4013      	ands	r3, r2
 8003a36:	603b      	str	r3, [r7, #0]
 8003a38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SW_CS_Pin|SH_LD_Pin|STATUS_LED_Pin|RS485_CNTL_Pin, GPIO_PIN_RESET);
 8003a3a:	23c9      	movs	r3, #201	; 0xc9
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4838      	ldr	r0, [pc, #224]	; (8003b20 <MX_GPIO_Init+0x144>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	0019      	movs	r1, r3
 8003a44:	f001 fbb5 	bl	80051b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_CS_GPIO_Port, RGB_CS_Pin, GPIO_PIN_SET);
 8003a48:	23a0      	movs	r3, #160	; 0xa0
 8003a4a:	05db      	lsls	r3, r3, #23
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	2110      	movs	r1, #16
 8003a50:	0018      	movs	r0, r3
 8003a52:	f001 fbae 	bl	80051b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BB_CLK_Pin|BB_MOSI_Pin, GPIO_PIN_RESET);
 8003a56:	23a0      	movs	r3, #160	; 0xa0
 8003a58:	05db      	lsls	r3, r3, #23
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	21a0      	movs	r1, #160	; 0xa0
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f001 fba7 	bl	80051b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW_CS_Pin SH_LD_Pin STATUS_LED_Pin RS485_CNTL_Pin */
  GPIO_InitStruct.Pin = SW_CS_Pin|SH_LD_Pin|STATUS_LED_Pin|RS485_CNTL_Pin;
 8003a64:	193b      	adds	r3, r7, r4
 8003a66:	22c9      	movs	r2, #201	; 0xc9
 8003a68:	0092      	lsls	r2, r2, #2
 8003a6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a6c:	193b      	adds	r3, r7, r4
 8003a6e:	2201      	movs	r2, #1
 8003a70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a72:	193b      	adds	r3, r7, r4
 8003a74:	2200      	movs	r2, #0
 8003a76:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a78:	193b      	adds	r3, r7, r4
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a7e:	193b      	adds	r3, r7, r4
 8003a80:	4a27      	ldr	r2, [pc, #156]	; (8003b20 <MX_GPIO_Init+0x144>)
 8003a82:	0019      	movs	r1, r3
 8003a84:	0010      	movs	r0, r2
 8003a86:	f001 fa13 	bl	8004eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003a8a:	193b      	adds	r3, r7, r4
 8003a8c:	220f      	movs	r2, #15
 8003a8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a90:	193b      	adds	r3, r7, r4
 8003a92:	2288      	movs	r2, #136	; 0x88
 8003a94:	0352      	lsls	r2, r2, #13
 8003a96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a98:	193b      	adds	r3, r7, r4
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a9e:	193a      	adds	r2, r7, r4
 8003aa0:	23a0      	movs	r3, #160	; 0xa0
 8003aa2:	05db      	lsls	r3, r3, #23
 8003aa4:	0011      	movs	r1, r2
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f001 fa02 	bl	8004eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RGB_CS_Pin BB_CLK_Pin BB_MOSI_Pin */
  GPIO_InitStruct.Pin = RGB_CS_Pin|BB_CLK_Pin|BB_MOSI_Pin;
 8003aac:	193b      	adds	r3, r7, r4
 8003aae:	22b0      	movs	r2, #176	; 0xb0
 8003ab0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ab2:	193b      	adds	r3, r7, r4
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab8:	193b      	adds	r3, r7, r4
 8003aba:	2200      	movs	r2, #0
 8003abc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003abe:	193b      	adds	r3, r7, r4
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac4:	193a      	adds	r2, r7, r4
 8003ac6:	23a0      	movs	r3, #160	; 0xa0
 8003ac8:	05db      	lsls	r3, r3, #23
 8003aca:	0011      	movs	r1, r2
 8003acc:	0018      	movs	r0, r3
 8003ace:	f001 f9ef 	bl	8004eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BB_MISO_Pin */
  GPIO_InitStruct.Pin = BB_MISO_Pin;
 8003ad2:	193b      	adds	r3, r7, r4
 8003ad4:	2240      	movs	r2, #64	; 0x40
 8003ad6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ad8:	193b      	adds	r3, r7, r4
 8003ada:	2200      	movs	r2, #0
 8003adc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ade:	193b      	adds	r3, r7, r4
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BB_MISO_GPIO_Port, &GPIO_InitStruct);
 8003ae4:	193a      	adds	r2, r7, r4
 8003ae6:	23a0      	movs	r3, #160	; 0xa0
 8003ae8:	05db      	lsls	r3, r3, #23
 8003aea:	0011      	movs	r1, r2
 8003aec:	0018      	movs	r0, r3
 8003aee:	f001 f9df 	bl	8004eb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8003af2:	2200      	movs	r2, #0
 8003af4:	2100      	movs	r1, #0
 8003af6:	2005      	movs	r0, #5
 8003af8:	f001 f8dc 	bl	8004cb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003afc:	2005      	movs	r0, #5
 8003afe:	f001 f8ee 	bl	8004cde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8003b02:	2200      	movs	r2, #0
 8003b04:	2100      	movs	r1, #0
 8003b06:	2006      	movs	r0, #6
 8003b08:	f001 f8d4 	bl	8004cb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8003b0c:	2006      	movs	r0, #6
 8003b0e:	f001 f8e6 	bl	8004cde <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	46bd      	mov	sp, r7
 8003b16:	b009      	add	sp, #36	; 0x24
 8003b18:	bd90      	pop	{r4, r7, pc}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	50000400 	.word	0x50000400

08003b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b28:	b672      	cpsid	i
}
 8003b2a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b2c:	e7fe      	b.n	8003b2c <Error_Handler+0x8>
	...

08003b30 <sendData>:
extern uint8_t SlaveID;
uint8_t errorDataPosition[16];
static uint16_t AccupiedData,StorageData,WrongPickData,WrongPlaceData;

void sendData (uint8_t *data, int size)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
	// we will calculate the CRC in this function itself
	uint8_t crc = crc16(data, size);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	0011      	movs	r1, r2
 8003b42:	0018      	movs	r0, r3
 8003b44:	f000 fc14 	bl	8004370 <crc16>
 8003b48:	0003      	movs	r3, r0
 8003b4a:	001a      	movs	r2, r3
 8003b4c:	210f      	movs	r1, #15
 8003b4e:	187b      	adds	r3, r7, r1
 8003b50:	701a      	strb	r2, [r3, #0]
	data[size] = crc;   // CRC LOW
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	18d3      	adds	r3, r2, r3
 8003b58:	187a      	adds	r2, r7, r1
 8003b5a:	7812      	ldrb	r2, [r2, #0]
 8003b5c:	701a      	strb	r2, [r3, #0]
	data[size+1] = (crc>>8)&0xFF;  // CRC HIGH
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	3301      	adds	r3, #1
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	18d3      	adds	r3, r2, r3
 8003b66:	2200      	movs	r2, #0
 8003b68:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RS485_CNTL_GPIO_Port, RS485_CNTL_Pin, GPIO_PIN_SET);
 8003b6a:	2380      	movs	r3, #128	; 0x80
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	480d      	ldr	r0, [pc, #52]	; (8003ba4 <sendData+0x74>)
 8003b70:	2201      	movs	r2, #1
 8003b72:	0019      	movs	r1, r3
 8003b74:	f001 fb1d 	bl	80051b2 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, data, size+2, 1000);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3302      	adds	r3, #2
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	23fa      	movs	r3, #250	; 0xfa
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	4808      	ldr	r0, [pc, #32]	; (8003ba8 <sendData+0x78>)
 8003b88:	f003 fc56 	bl	8007438 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(RS485_CNTL_GPIO_Port, RS485_CNTL_Pin, GPIO_PIN_RESET);
 8003b8c:	2380      	movs	r3, #128	; 0x80
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	4804      	ldr	r0, [pc, #16]	; (8003ba4 <sendData+0x74>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	0019      	movs	r1, r3
 8003b96:	f001 fb0c 	bl	80051b2 <HAL_GPIO_WritePin>
}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	b004      	add	sp, #16
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	46c0      	nop			; (mov r8, r8)
 8003ba4:	50000400 	.word	0x50000400
 8003ba8:	20000430 	.word	0x20000430

08003bac <modbusException>:

void modbusException (uint8_t exceptioncode)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	0002      	movs	r2, r0
 8003bb4:	1dfb      	adds	r3, r7, #7
 8003bb6:	701a      	strb	r2, [r3, #0]
	//| SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	//| 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	TxData[0] = RxData[0];       // slave ID
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <modbusException+0x40>)
 8003bba:	781a      	ldrb	r2, [r3, #0]
 8003bbc:	4b0c      	ldr	r3, [pc, #48]	; (8003bf0 <modbusException+0x44>)
 8003bbe:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1]|0x80;  // adding 1 to the MSB of the function code
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <modbusException+0x40>)
 8003bc2:	785b      	ldrb	r3, [r3, #1]
 8003bc4:	2280      	movs	r2, #128	; 0x80
 8003bc6:	4252      	negs	r2, r2
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	4b08      	ldr	r3, [pc, #32]	; (8003bf0 <modbusException+0x44>)
 8003bce:	705a      	strb	r2, [r3, #1]
	TxData[2] = exceptioncode;   // Load the Exception code
 8003bd0:	4b07      	ldr	r3, [pc, #28]	; (8003bf0 <modbusException+0x44>)
 8003bd2:	1dfa      	adds	r2, r7, #7
 8003bd4:	7812      	ldrb	r2, [r2, #0]
 8003bd6:	709a      	strb	r2, [r3, #2]
	sendData(TxData, 3);         // send Data... CRC will be calculated in the function
 8003bd8:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <modbusException+0x44>)
 8003bda:	2103      	movs	r1, #3
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f7ff ffa7 	bl	8003b30 <sendData>
}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	46bd      	mov	sp, r7
 8003be6:	b002      	add	sp, #8
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	200004c8 	.word	0x200004c8
 8003bf0:	200004fc 	.word	0x200004fc

08003bf4 <updateSlotData>:

void updateSlotData(void)
{
 8003bf4:	b590      	push	{r4, r7, lr}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
	uint16_t StorageSlots = ((RxData[2]<<8)|RxData[3]);
 8003bfa:	4bae      	ldr	r3, [pc, #696]	; (8003eb4 <updateSlotData+0x2c0>)
 8003bfc:	789b      	ldrb	r3, [r3, #2]
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	b21a      	sxth	r2, r3
 8003c02:	4bac      	ldr	r3, [pc, #688]	; (8003eb4 <updateSlotData+0x2c0>)
 8003c04:	78db      	ldrb	r3, [r3, #3]
 8003c06:	b21b      	sxth	r3, r3
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	b21a      	sxth	r2, r3
 8003c0c:	2008      	movs	r0, #8
 8003c0e:	183b      	adds	r3, r7, r0
 8003c10:	801a      	strh	r2, [r3, #0]
	uint16_t WrongPickup = ((RxData[4]<<8)|RxData[5]);
 8003c12:	4ba8      	ldr	r3, [pc, #672]	; (8003eb4 <updateSlotData+0x2c0>)
 8003c14:	791b      	ldrb	r3, [r3, #4]
 8003c16:	021b      	lsls	r3, r3, #8
 8003c18:	b21a      	sxth	r2, r3
 8003c1a:	4ba6      	ldr	r3, [pc, #664]	; (8003eb4 <updateSlotData+0x2c0>)
 8003c1c:	795b      	ldrb	r3, [r3, #5]
 8003c1e:	b21b      	sxth	r3, r3
 8003c20:	4313      	orrs	r3, r2
 8003c22:	b21a      	sxth	r2, r3
 8003c24:	1dbb      	adds	r3, r7, #6
 8003c26:	801a      	strh	r2, [r3, #0]
	uint16_t PresentSlotData = *(uint16_t *)&Slot;
 8003c28:	4aa3      	ldr	r2, [pc, #652]	; (8003eb8 <updateSlotData+0x2c4>)
 8003c2a:	1d3b      	adds	r3, r7, #4
 8003c2c:	8812      	ldrh	r2, [r2, #0]
 8003c2e:	801a      	strh	r2, [r3, #0]
	uint16_t DataCompare = StorageSlots ^ PresentSlotData;
 8003c30:	1cbb      	adds	r3, r7, #2
 8003c32:	1839      	adds	r1, r7, r0
 8003c34:	1d3a      	adds	r2, r7, #4
 8003c36:	8809      	ldrh	r1, [r1, #0]
 8003c38:	8812      	ldrh	r2, [r2, #0]
 8003c3a:	404a      	eors	r2, r1
 8003c3c:	801a      	strh	r2, [r3, #0]
	uint16_t EmptySlot = 0,WrongEmptySlot = 0,WrongReelPlaced = 0;
 8003c3e:	003b      	movs	r3, r7
 8003c40:	2200      	movs	r2, #0
 8003c42:	801a      	strh	r2, [r3, #0]
 8003c44:	230e      	movs	r3, #14
 8003c46:	18fb      	adds	r3, r7, r3
 8003c48:	2200      	movs	r2, #0
 8003c4a:	801a      	strh	r2, [r3, #0]
 8003c4c:	230c      	movs	r3, #12
 8003c4e:	18fb      	adds	r3, r7, r3
 8003c50:	2200      	movs	r2, #0
 8003c52:	801a      	strh	r2, [r3, #0]
	int8_t i = 0, errcnt = 0;
 8003c54:	240b      	movs	r4, #11
 8003c56:	193b      	adds	r3, r7, r4
 8003c58:	2200      	movs	r2, #0
 8003c5a:	701a      	strb	r2, [r3, #0]
 8003c5c:	230a      	movs	r3, #10
 8003c5e:	18fb      	adds	r3, r7, r3
 8003c60:	2200      	movs	r2, #0
 8003c62:	701a      	strb	r2, [r3, #0]

	StorageData = StorageSlots;
 8003c64:	4b95      	ldr	r3, [pc, #596]	; (8003ebc <updateSlotData+0x2c8>)
 8003c66:	183a      	adds	r2, r7, r0
 8003c68:	8812      	ldrh	r2, [r2, #0]
 8003c6a:	801a      	strh	r2, [r3, #0]
	WrongPickData = WrongPickup;
 8003c6c:	4b94      	ldr	r3, [pc, #592]	; (8003ec0 <updateSlotData+0x2cc>)
 8003c6e:	1dba      	adds	r2, r7, #6
 8003c70:	8812      	ldrh	r2, [r2, #0]
 8003c72:	801a      	strh	r2, [r3, #0]

	UpdateSlotLeds(WrongPickup,PickupError);
 8003c74:	1dbb      	adds	r3, r7, #6
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	2104      	movs	r1, #4
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f7fe fdf0 	bl	8002860 <UpdateSlotLeds>
	if(DataCompare)
 8003c80:	1cbb      	adds	r3, r7, #2
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d100      	bne.n	8003c8a <updateSlotData+0x96>
 8003c88:	e0e1      	b.n	8003e4e <updateSlotData+0x25a>
	{
		for(i = 0; i < 16; i++)
 8003c8a:	193b      	adds	r3, r7, r4
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	701a      	strb	r2, [r3, #0]
 8003c90:	e020      	b.n	8003cd4 <updateSlotData+0xe0>
		{
			if(DataCompare & (0x01 << i))
 8003c92:	1cbb      	adds	r3, r7, #2
 8003c94:	881a      	ldrh	r2, [r3, #0]
 8003c96:	200b      	movs	r0, #11
 8003c98:	183b      	adds	r3, r7, r0
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	b25b      	sxtb	r3, r3
 8003c9e:	411a      	asrs	r2, r3
 8003ca0:	0013      	movs	r3, r2
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d00c      	beq.n	8003cc2 <updateSlotData+0xce>
				errorDataPosition[errcnt++] = i;
 8003ca8:	240a      	movs	r4, #10
 8003caa:	193b      	adds	r3, r7, r4
 8003cac:	2200      	movs	r2, #0
 8003cae:	569a      	ldrsb	r2, [r3, r2]
 8003cb0:	b2d3      	uxtb	r3, r2
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	b2d9      	uxtb	r1, r3
 8003cb6:	193b      	adds	r3, r7, r4
 8003cb8:	7019      	strb	r1, [r3, #0]
 8003cba:	183b      	adds	r3, r7, r0
 8003cbc:	7819      	ldrb	r1, [r3, #0]
 8003cbe:	4b81      	ldr	r3, [pc, #516]	; (8003ec4 <updateSlotData+0x2d0>)
 8003cc0:	5499      	strb	r1, [r3, r2]
		for(i = 0; i < 16; i++)
 8003cc2:	210b      	movs	r1, #11
 8003cc4:	187b      	adds	r3, r7, r1
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	b25b      	sxtb	r3, r3
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	3301      	adds	r3, #1
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	187b      	adds	r3, r7, r1
 8003cd2:	701a      	strb	r2, [r3, #0]
 8003cd4:	220b      	movs	r2, #11
 8003cd6:	18bb      	adds	r3, r7, r2
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	b25b      	sxtb	r3, r3
 8003cdc:	2b0f      	cmp	r3, #15
 8003cde:	ddd8      	ble.n	8003c92 <updateSlotData+0x9e>
		}
		i = 0;
 8003ce0:	18bb      	adds	r3, r7, r2
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	701a      	strb	r2, [r3, #0]

		while(errcnt > 0)
 8003ce6:	e042      	b.n	8003d6e <updateSlotData+0x17a>
		{
			if(StorageSlots & (0x01 << errorDataPosition[i]))
 8003ce8:	2308      	movs	r3, #8
 8003cea:	18fb      	adds	r3, r7, r3
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	200b      	movs	r0, #11
 8003cf0:	183a      	adds	r2, r7, r0
 8003cf2:	7812      	ldrb	r2, [r2, #0]
 8003cf4:	b252      	sxtb	r2, r2
 8003cf6:	4973      	ldr	r1, [pc, #460]	; (8003ec4 <updateSlotData+0x2d0>)
 8003cf8:	5c8a      	ldrb	r2, [r1, r2]
 8003cfa:	4113      	asrs	r3, r2
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	4013      	ands	r3, r2
 8003d00:	d011      	beq.n	8003d26 <updateSlotData+0x132>
				WrongEmptySlot |= (0x01 << errorDataPosition[i]); //Wrong Empty Slot
 8003d02:	183b      	adds	r3, r7, r0
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	b25b      	sxtb	r3, r3
 8003d08:	4a6e      	ldr	r2, [pc, #440]	; (8003ec4 <updateSlotData+0x2d0>)
 8003d0a:	5cd3      	ldrb	r3, [r2, r3]
 8003d0c:	001a      	movs	r2, r3
 8003d0e:	2301      	movs	r3, #1
 8003d10:	4093      	lsls	r3, r2
 8003d12:	b21a      	sxth	r2, r3
 8003d14:	210e      	movs	r1, #14
 8003d16:	187b      	adds	r3, r7, r1
 8003d18:	2000      	movs	r0, #0
 8003d1a:	5e1b      	ldrsh	r3, [r3, r0]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	b21a      	sxth	r2, r3
 8003d20:	187b      	adds	r3, r7, r1
 8003d22:	801a      	strh	r2, [r3, #0]
 8003d24:	e011      	b.n	8003d4a <updateSlotData+0x156>
			else
				WrongReelPlaced |= (0x01 << errorDataPosition[i]); //Wrong material placed
 8003d26:	230b      	movs	r3, #11
 8003d28:	18fb      	adds	r3, r7, r3
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	b25b      	sxtb	r3, r3
 8003d2e:	4a65      	ldr	r2, [pc, #404]	; (8003ec4 <updateSlotData+0x2d0>)
 8003d30:	5cd3      	ldrb	r3, [r2, r3]
 8003d32:	001a      	movs	r2, r3
 8003d34:	2301      	movs	r3, #1
 8003d36:	4093      	lsls	r3, r2
 8003d38:	b21a      	sxth	r2, r3
 8003d3a:	210c      	movs	r1, #12
 8003d3c:	187b      	adds	r3, r7, r1
 8003d3e:	2000      	movs	r0, #0
 8003d40:	5e1b      	ldrsh	r3, [r3, r0]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	b21a      	sxth	r2, r3
 8003d46:	187b      	adds	r3, r7, r1
 8003d48:	801a      	strh	r2, [r3, #0]
			i++;
 8003d4a:	210b      	movs	r1, #11
 8003d4c:	187b      	adds	r3, r7, r1
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	b25b      	sxtb	r3, r3
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	3301      	adds	r3, #1
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	187b      	adds	r3, r7, r1
 8003d5a:	701a      	strb	r2, [r3, #0]
			errcnt--;
 8003d5c:	210a      	movs	r1, #10
 8003d5e:	187b      	adds	r3, r7, r1
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	b25b      	sxtb	r3, r3
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	187b      	adds	r3, r7, r1
 8003d6c:	701a      	strb	r2, [r3, #0]
		while(errcnt > 0)
 8003d6e:	230a      	movs	r3, #10
 8003d70:	18fb      	adds	r3, r7, r3
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	b25b      	sxtb	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	dcb6      	bgt.n	8003ce8 <updateSlotData+0xf4>
		}
		WrongPlaceData = WrongReelPlaced;
 8003d7a:	4b53      	ldr	r3, [pc, #332]	; (8003ec8 <updateSlotData+0x2d4>)
 8003d7c:	240c      	movs	r4, #12
 8003d7e:	193a      	adds	r2, r7, r4
 8003d80:	8812      	ldrh	r2, [r2, #0]
 8003d82:	801a      	strh	r2, [r3, #0]
		UpdateSlotLeds(WrongEmptySlot,PickupError);
 8003d84:	230e      	movs	r3, #14
 8003d86:	18fb      	adds	r3, r7, r3
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	2104      	movs	r1, #4
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	f7fe fd67 	bl	8002860 <UpdateSlotLeds>
		UpdateSlotLeds(WrongReelPlaced,PlaceError);
 8003d92:	193b      	adds	r3, r7, r4
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	2103      	movs	r1, #3
 8003d98:	0018      	movs	r0, r3
 8003d9a:	f7fe fd61 	bl	8002860 <UpdateSlotLeds>
		AccupiedData = StorageSlots;
 8003d9e:	4b4b      	ldr	r3, [pc, #300]	; (8003ecc <updateSlotData+0x2d8>)
 8003da0:	2208      	movs	r2, #8
 8003da2:	18ba      	adds	r2, r7, r2
 8003da4:	8812      	ldrh	r2, [r2, #0]
 8003da6:	801a      	strh	r2, [r3, #0]
		AccupiedData &=~(WrongPickup);
 8003da8:	1dbb      	adds	r3, r7, #6
 8003daa:	2200      	movs	r2, #0
 8003dac:	5e9b      	ldrsh	r3, [r3, r2]
 8003dae:	43db      	mvns	r3, r3
 8003db0:	b21b      	sxth	r3, r3
 8003db2:	4a46      	ldr	r2, [pc, #280]	; (8003ecc <updateSlotData+0x2d8>)
 8003db4:	8812      	ldrh	r2, [r2, #0]
 8003db6:	b212      	sxth	r2, r2
 8003db8:	4013      	ands	r3, r2
 8003dba:	b21b      	sxth	r3, r3
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	4b43      	ldr	r3, [pc, #268]	; (8003ecc <updateSlotData+0x2d8>)
 8003dc0:	801a      	strh	r2, [r3, #0]
		UpdateSlotLeds(AccupiedData,OcupiedLocation);
 8003dc2:	4b42      	ldr	r3, [pc, #264]	; (8003ecc <updateSlotData+0x2d8>)
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f7fe fd49 	bl	8002860 <UpdateSlotLeds>
		EmptySlot = AccupiedData ^ (EMPTY_SLOT ^ DataCompare);
 8003dce:	4b3f      	ldr	r3, [pc, #252]	; (8003ecc <updateSlotData+0x2d8>)
 8003dd0:	881a      	ldrh	r2, [r3, #0]
 8003dd2:	1cbb      	adds	r3, r7, #2
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	4053      	eors	r3, r2
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	003b      	movs	r3, r7
 8003ddc:	43d2      	mvns	r2, r2
 8003dde:	801a      	strh	r2, [r3, #0]
		EmptySlot &=~(WrongPickup);
 8003de0:	1dbb      	adds	r3, r7, #6
 8003de2:	2200      	movs	r2, #0
 8003de4:	5e9b      	ldrsh	r3, [r3, r2]
 8003de6:	43db      	mvns	r3, r3
 8003de8:	b21b      	sxth	r3, r3
 8003dea:	003a      	movs	r2, r7
 8003dec:	2100      	movs	r1, #0
 8003dee:	5e52      	ldrsh	r2, [r2, r1]
 8003df0:	4013      	ands	r3, r2
 8003df2:	b21a      	sxth	r2, r3
 8003df4:	003b      	movs	r3, r7
 8003df6:	801a      	strh	r2, [r3, #0]
		UpdateSlotLeds(EmptySlot,EmptyLocaction);
 8003df8:	003b      	movs	r3, r7
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f7fe fd2e 	bl	8002860 <UpdateSlotLeds>

		TxData[0] = SlaveID;             // slave ID
 8003e04:	4b32      	ldr	r3, [pc, #200]	; (8003ed0 <updateSlotData+0x2dc>)
 8003e06:	781a      	ldrb	r2, [r3, #0]
 8003e08:	4b32      	ldr	r3, [pc, #200]	; (8003ed4 <updateSlotData+0x2e0>)
 8003e0a:	701a      	strb	r2, [r3, #0]
		TxData[1] = RxData[1];           // function code
 8003e0c:	4b29      	ldr	r3, [pc, #164]	; (8003eb4 <updateSlotData+0x2c0>)
 8003e0e:	785a      	ldrb	r2, [r3, #1]
 8003e10:	4b30      	ldr	r3, [pc, #192]	; (8003ed4 <updateSlotData+0x2e0>)
 8003e12:	705a      	strb	r2, [r3, #1]
		TxData[2] = ((PresentSlotData >>8) & 0xFF);                //Higher Slot Data byte
 8003e14:	1d3b      	adds	r3, r7, #4
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	0a1b      	lsrs	r3, r3, #8
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	4b2d      	ldr	r3, [pc, #180]	; (8003ed4 <updateSlotData+0x2e0>)
 8003e20:	709a      	strb	r2, [r3, #2]
		TxData[3] = PresentSlotData & 0xFF;     					//  Lower Slot Data byte
 8003e22:	1d3b      	adds	r3, r7, #4
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	4b2a      	ldr	r3, [pc, #168]	; (8003ed4 <updateSlotData+0x2e0>)
 8003e2a:	70da      	strb	r2, [r3, #3]
		if(DataCompare)
 8003e2c:	1cbb      	adds	r3, r7, #2
 8003e2e:	881b      	ldrh	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <updateSlotData+0x248>
			TxData[4] = 0x01;            // Error Status
 8003e34:	4b27      	ldr	r3, [pc, #156]	; (8003ed4 <updateSlotData+0x2e0>)
 8003e36:	2201      	movs	r2, #1
 8003e38:	711a      	strb	r2, [r3, #4]
 8003e3a:	e002      	b.n	8003e42 <updateSlotData+0x24e>
		else
			TxData[4] = 0x00;            // Error Status
 8003e3c:	4b25      	ldr	r3, [pc, #148]	; (8003ed4 <updateSlotData+0x2e0>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	711a      	strb	r2, [r3, #4]

		sendData(TxData, 5);  			 // send data... CRC will be calculated in the function itself
 8003e42:	4b24      	ldr	r3, [pc, #144]	; (8003ed4 <updateSlotData+0x2e0>)
 8003e44:	2105      	movs	r1, #5
 8003e46:	0018      	movs	r0, r3
 8003e48:	f7ff fe72 	bl	8003b30 <sendData>
		UpdateSlotLeds(StorageSlots,OcupiedLocation);
		WrongPlaceData = 0x0000;
	}
//	UpdateSlotLeds((EMPTY_SLOT ^ PresentSlotData),EmptyLocaction);

}
 8003e4c:	e02e      	b.n	8003eac <updateSlotData+0x2b8>
		AccupiedData = (EMPTY_SLOT ^ PresentSlotData);
 8003e4e:	1d3b      	adds	r3, r7, #4
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	43db      	mvns	r3, r3
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	4b1d      	ldr	r3, [pc, #116]	; (8003ecc <updateSlotData+0x2d8>)
 8003e58:	801a      	strh	r2, [r3, #0]
		AccupiedData &=~(WrongPickup);
 8003e5a:	1dbb      	adds	r3, r7, #6
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	5e9b      	ldrsh	r3, [r3, r2]
 8003e60:	43db      	mvns	r3, r3
 8003e62:	b21b      	sxth	r3, r3
 8003e64:	4a19      	ldr	r2, [pc, #100]	; (8003ecc <updateSlotData+0x2d8>)
 8003e66:	8812      	ldrh	r2, [r2, #0]
 8003e68:	b212      	sxth	r2, r2
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	b21b      	sxth	r3, r3
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	4b16      	ldr	r3, [pc, #88]	; (8003ecc <updateSlotData+0x2d8>)
 8003e72:	801a      	strh	r2, [r3, #0]
		UpdateSlotLeds(AccupiedData,EmptyLocaction);
 8003e74:	4b15      	ldr	r3, [pc, #84]	; (8003ecc <updateSlotData+0x2d8>)
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	2100      	movs	r1, #0
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f7fe fcf0 	bl	8002860 <UpdateSlotLeds>
		StorageSlots &=~(WrongPickup);
 8003e80:	1dbb      	adds	r3, r7, #6
 8003e82:	2200      	movs	r2, #0
 8003e84:	5e9b      	ldrsh	r3, [r3, r2]
 8003e86:	43db      	mvns	r3, r3
 8003e88:	b21b      	sxth	r3, r3
 8003e8a:	2108      	movs	r1, #8
 8003e8c:	187a      	adds	r2, r7, r1
 8003e8e:	2000      	movs	r0, #0
 8003e90:	5e12      	ldrsh	r2, [r2, r0]
 8003e92:	4013      	ands	r3, r2
 8003e94:	b21a      	sxth	r2, r3
 8003e96:	187b      	adds	r3, r7, r1
 8003e98:	801a      	strh	r2, [r3, #0]
		UpdateSlotLeds(StorageSlots,OcupiedLocation);
 8003e9a:	187b      	adds	r3, r7, r1
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f7fe fcdd 	bl	8002860 <UpdateSlotLeds>
		WrongPlaceData = 0x0000;
 8003ea6:	4b08      	ldr	r3, [pc, #32]	; (8003ec8 <updateSlotData+0x2d4>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	801a      	strh	r2, [r3, #0]
}
 8003eac:	46c0      	nop			; (mov r8, r8)
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	b005      	add	sp, #20
 8003eb2:	bd90      	pop	{r4, r7, pc}
 8003eb4:	200004c8 	.word	0x200004c8
 8003eb8:	20000264 	.word	0x20000264
 8003ebc:	2000054e 	.word	0x2000054e
 8003ec0:	20000550 	.word	0x20000550
 8003ec4:	2000053c 	.word	0x2000053c
 8003ec8:	20000552 	.word	0x20000552
 8003ecc:	2000054c 	.word	0x2000054c
 8003ed0:	200004c4 	.word	0x200004c4
 8003ed4:	200004fc 	.word	0x200004fc

08003ed8 <lrr>:
 * |       |  		 	 |			  |			   |    |
 */


void lrr(void)                     //Load Reel Request
{
 8003ed8:	b590      	push	{r4, r7, lr}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
//	uint16_t StorageSlots = ((RxData[2]<<8)|RxData[3]);
	uint16_t PresentSlotData = *(uint16_t *)&Slot;
 8003ede:	4a72      	ldr	r2, [pc, #456]	; (80040a8 <lrr+0x1d0>)
 8003ee0:	2008      	movs	r0, #8
 8003ee2:	183b      	adds	r3, r7, r0
 8003ee4:	8812      	ldrh	r2, [r2, #0]
 8003ee6:	801a      	strh	r2, [r3, #0]
	PresentSlotData |= WrongPickData;
 8003ee8:	4b70      	ldr	r3, [pc, #448]	; (80040ac <lrr+0x1d4>)
 8003eea:	8819      	ldrh	r1, [r3, #0]
 8003eec:	183b      	adds	r3, r7, r0
 8003eee:	183a      	adds	r2, r7, r0
 8003ef0:	8812      	ldrh	r2, [r2, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	801a      	strh	r2, [r3, #0]
	PresentSlotData	&= ~(WrongPlaceData);
 8003ef6:	4b6e      	ldr	r3, [pc, #440]	; (80040b0 <lrr+0x1d8>)
 8003ef8:	881b      	ldrh	r3, [r3, #0]
 8003efa:	b21b      	sxth	r3, r3
 8003efc:	43db      	mvns	r3, r3
 8003efe:	b21b      	sxth	r3, r3
 8003f00:	183a      	adds	r2, r7, r0
 8003f02:	2100      	movs	r1, #0
 8003f04:	5e52      	ldrsh	r2, [r2, r1]
 8003f06:	4013      	ands	r3, r2
 8003f08:	b21a      	sxth	r2, r3
 8003f0a:	183b      	adds	r3, r7, r0
 8003f0c:	801a      	strh	r2, [r3, #0]
	uint16_t DataCompare = StorageData ^ PresentSlotData;
 8003f0e:	4b69      	ldr	r3, [pc, #420]	; (80040b4 <lrr+0x1dc>)
 8003f10:	8819      	ldrh	r1, [r3, #0]
 8003f12:	1dbb      	adds	r3, r7, #6
 8003f14:	183a      	adds	r2, r7, r0
 8003f16:	8812      	ldrh	r2, [r2, #0]
 8003f18:	404a      	eors	r2, r1
 8003f1a:	801a      	strh	r2, [r3, #0]
	uint16_t WrongEmptySlot = 0,NewReelPlaced = 0;
 8003f1c:	230e      	movs	r3, #14
 8003f1e:	18fb      	adds	r3, r7, r3
 8003f20:	2200      	movs	r2, #0
 8003f22:	801a      	strh	r2, [r3, #0]
 8003f24:	230c      	movs	r3, #12
 8003f26:	18fb      	adds	r3, r7, r3
 8003f28:	2200      	movs	r2, #0
 8003f2a:	801a      	strh	r2, [r3, #0]
	int8_t i = 0, errcnt = 0;
 8003f2c:	210b      	movs	r1, #11
 8003f2e:	187b      	adds	r3, r7, r1
 8003f30:	2200      	movs	r2, #0
 8003f32:	701a      	strb	r2, [r3, #0]
 8003f34:	230a      	movs	r3, #10
 8003f36:	18fb      	adds	r3, r7, r3
 8003f38:	2200      	movs	r2, #0
 8003f3a:	701a      	strb	r2, [r3, #0]
//	UpdateSlotLeds(StorageSlots,OcupiedLocation);
	if(DataCompare)
 8003f3c:	1dbb      	adds	r3, r7, #6
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d100      	bne.n	8003f46 <lrr+0x6e>
 8003f44:	e0ab      	b.n	800409e <lrr+0x1c6>
	{
		for(i = 0; i < 16; i++)
 8003f46:	187b      	adds	r3, r7, r1
 8003f48:	2200      	movs	r2, #0
 8003f4a:	701a      	strb	r2, [r3, #0]
 8003f4c:	e020      	b.n	8003f90 <lrr+0xb8>
		{
			if(DataCompare & (0x01 << i))
 8003f4e:	1dbb      	adds	r3, r7, #6
 8003f50:	881a      	ldrh	r2, [r3, #0]
 8003f52:	200b      	movs	r0, #11
 8003f54:	183b      	adds	r3, r7, r0
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	b25b      	sxtb	r3, r3
 8003f5a:	411a      	asrs	r2, r3
 8003f5c:	0013      	movs	r3, r2
 8003f5e:	2201      	movs	r2, #1
 8003f60:	4013      	ands	r3, r2
 8003f62:	d00c      	beq.n	8003f7e <lrr+0xa6>
				errorDataPosition[errcnt++] = i;
 8003f64:	240a      	movs	r4, #10
 8003f66:	193b      	adds	r3, r7, r4
 8003f68:	2200      	movs	r2, #0
 8003f6a:	569a      	ldrsb	r2, [r3, r2]
 8003f6c:	b2d3      	uxtb	r3, r2
 8003f6e:	3301      	adds	r3, #1
 8003f70:	b2d9      	uxtb	r1, r3
 8003f72:	193b      	adds	r3, r7, r4
 8003f74:	7019      	strb	r1, [r3, #0]
 8003f76:	183b      	adds	r3, r7, r0
 8003f78:	7819      	ldrb	r1, [r3, #0]
 8003f7a:	4b4f      	ldr	r3, [pc, #316]	; (80040b8 <lrr+0x1e0>)
 8003f7c:	5499      	strb	r1, [r3, r2]
		for(i = 0; i < 16; i++)
 8003f7e:	210b      	movs	r1, #11
 8003f80:	187b      	adds	r3, r7, r1
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	b25b      	sxtb	r3, r3
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	3301      	adds	r3, #1
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	187b      	adds	r3, r7, r1
 8003f8e:	701a      	strb	r2, [r3, #0]
 8003f90:	220b      	movs	r2, #11
 8003f92:	18bb      	adds	r3, r7, r2
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	b25b      	sxtb	r3, r3
 8003f98:	2b0f      	cmp	r3, #15
 8003f9a:	ddd8      	ble.n	8003f4e <lrr+0x76>
		}
		i = 0;
 8003f9c:	18bb      	adds	r3, r7, r2
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	701a      	strb	r2, [r3, #0]
		while(errcnt > 0)
 8003fa2:	e043      	b.n	800402c <lrr+0x154>
		{
			if(StorageData & (0x01 << errorDataPosition[i]))
 8003fa4:	4b43      	ldr	r3, [pc, #268]	; (80040b4 <lrr+0x1dc>)
 8003fa6:	881b      	ldrh	r3, [r3, #0]
 8003fa8:	0019      	movs	r1, r3
 8003faa:	200b      	movs	r0, #11
 8003fac:	183b      	adds	r3, r7, r0
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	b25b      	sxtb	r3, r3
 8003fb2:	4a41      	ldr	r2, [pc, #260]	; (80040b8 <lrr+0x1e0>)
 8003fb4:	5cd3      	ldrb	r3, [r2, r3]
 8003fb6:	4119      	asrs	r1, r3
 8003fb8:	000b      	movs	r3, r1
 8003fba:	2201      	movs	r2, #1
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	d011      	beq.n	8003fe4 <lrr+0x10c>
				WrongEmptySlot |= (0x01 << errorDataPosition[i]); //Wrong Empty Slot
 8003fc0:	183b      	adds	r3, r7, r0
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	b25b      	sxtb	r3, r3
 8003fc6:	4a3c      	ldr	r2, [pc, #240]	; (80040b8 <lrr+0x1e0>)
 8003fc8:	5cd3      	ldrb	r3, [r2, r3]
 8003fca:	001a      	movs	r2, r3
 8003fcc:	2301      	movs	r3, #1
 8003fce:	4093      	lsls	r3, r2
 8003fd0:	b21a      	sxth	r2, r3
 8003fd2:	210e      	movs	r1, #14
 8003fd4:	187b      	adds	r3, r7, r1
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	5e1b      	ldrsh	r3, [r3, r0]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	b21a      	sxth	r2, r3
 8003fde:	187b      	adds	r3, r7, r1
 8003fe0:	801a      	strh	r2, [r3, #0]
 8003fe2:	e011      	b.n	8004008 <lrr+0x130>
			else
				NewReelPlaced |= (0x01 << errorDataPosition[i]); //New material placed
 8003fe4:	230b      	movs	r3, #11
 8003fe6:	18fb      	adds	r3, r7, r3
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	b25b      	sxtb	r3, r3
 8003fec:	4a32      	ldr	r2, [pc, #200]	; (80040b8 <lrr+0x1e0>)
 8003fee:	5cd3      	ldrb	r3, [r2, r3]
 8003ff0:	001a      	movs	r2, r3
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	4093      	lsls	r3, r2
 8003ff6:	b21a      	sxth	r2, r3
 8003ff8:	210c      	movs	r1, #12
 8003ffa:	187b      	adds	r3, r7, r1
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	5e1b      	ldrsh	r3, [r3, r0]
 8004000:	4313      	orrs	r3, r2
 8004002:	b21a      	sxth	r2, r3
 8004004:	187b      	adds	r3, r7, r1
 8004006:	801a      	strh	r2, [r3, #0]
			i++;
 8004008:	210b      	movs	r1, #11
 800400a:	187b      	adds	r3, r7, r1
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	b25b      	sxtb	r3, r3
 8004010:	b2db      	uxtb	r3, r3
 8004012:	3301      	adds	r3, #1
 8004014:	b2da      	uxtb	r2, r3
 8004016:	187b      	adds	r3, r7, r1
 8004018:	701a      	strb	r2, [r3, #0]
			errcnt--;
 800401a:	210a      	movs	r1, #10
 800401c:	187b      	adds	r3, r7, r1
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	b25b      	sxtb	r3, r3
 8004022:	b2db      	uxtb	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b2da      	uxtb	r2, r3
 8004028:	187b      	adds	r3, r7, r1
 800402a:	701a      	strb	r2, [r3, #0]
		while(errcnt > 0)
 800402c:	230a      	movs	r3, #10
 800402e:	18fb      	adds	r3, r7, r3
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	b25b      	sxtb	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	dcb5      	bgt.n	8003fa4 <lrr+0xcc>
		}
		UpdateSlotLeds(WrongEmptySlot,PickupError);
 8004038:	240e      	movs	r4, #14
 800403a:	193b      	adds	r3, r7, r4
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	2104      	movs	r1, #4
 8004040:	0018      	movs	r0, r3
 8004042:	f7fe fc0d 	bl	8002860 <UpdateSlotLeds>
		UpdateSlotLeds(NewReelPlaced,OcupiedLocation);
 8004046:	230c      	movs	r3, #12
 8004048:	18fb      	adds	r3, r7, r3
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	2101      	movs	r1, #1
 800404e:	0018      	movs	r0, r3
 8004050:	f7fe fc06 	bl	8002860 <UpdateSlotLeds>

		TxData[0] = SlaveID;            // slave ID
 8004054:	4b19      	ldr	r3, [pc, #100]	; (80040bc <lrr+0x1e4>)
 8004056:	781a      	ldrb	r2, [r3, #0]
 8004058:	4b19      	ldr	r3, [pc, #100]	; (80040c0 <lrr+0x1e8>)
 800405a:	701a      	strb	r2, [r3, #0]
		TxData[1] = RxData[1];           // function code
 800405c:	4b19      	ldr	r3, [pc, #100]	; (80040c4 <lrr+0x1ec>)
 800405e:	785a      	ldrb	r2, [r3, #1]
 8004060:	4b17      	ldr	r3, [pc, #92]	; (80040c0 <lrr+0x1e8>)
 8004062:	705a      	strb	r2, [r3, #1]
		TxData[2] = ((PresentSlotData >>8) & 0xFF);                //Higher Slot Data byte
 8004064:	2108      	movs	r1, #8
 8004066:	187b      	adds	r3, r7, r1
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	0a1b      	lsrs	r3, r3, #8
 800406c:	b29b      	uxth	r3, r3
 800406e:	b2da      	uxtb	r2, r3
 8004070:	4b13      	ldr	r3, [pc, #76]	; (80040c0 <lrr+0x1e8>)
 8004072:	709a      	strb	r2, [r3, #2]
		TxData[3] = PresentSlotData & 0xFF;     					//  Lower Slot Data byte
 8004074:	187b      	adds	r3, r7, r1
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	b2da      	uxtb	r2, r3
 800407a:	4b11      	ldr	r3, [pc, #68]	; (80040c0 <lrr+0x1e8>)
 800407c:	70da      	strb	r2, [r3, #3]
		if(WrongEmptySlot)
 800407e:	193b      	adds	r3, r7, r4
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <lrr+0x1b6>
			TxData[4] = 0x01;            // Error Status
 8004086:	4b0e      	ldr	r3, [pc, #56]	; (80040c0 <lrr+0x1e8>)
 8004088:	2201      	movs	r2, #1
 800408a:	711a      	strb	r2, [r3, #4]
 800408c:	e002      	b.n	8004094 <lrr+0x1bc>
		else
			TxData[4] = 0x00;            // Error Status
 800408e:	4b0c      	ldr	r3, [pc, #48]	; (80040c0 <lrr+0x1e8>)
 8004090:	2200      	movs	r2, #0
 8004092:	711a      	strb	r2, [r3, #4]

		sendData(TxData, 5);  			 // send data... CRC wil
 8004094:	4b0a      	ldr	r3, [pc, #40]	; (80040c0 <lrr+0x1e8>)
 8004096:	2105      	movs	r1, #5
 8004098:	0018      	movs	r0, r3
 800409a:	f7ff fd49 	bl	8003b30 <sendData>
	}

}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	46bd      	mov	sp, r7
 80040a2:	b005      	add	sp, #20
 80040a4:	bd90      	pop	{r4, r7, pc}
 80040a6:	46c0      	nop			; (mov r8, r8)
 80040a8:	20000264 	.word	0x20000264
 80040ac:	20000550 	.word	0x20000550
 80040b0:	20000552 	.word	0x20000552
 80040b4:	2000054e 	.word	0x2000054e
 80040b8:	2000053c 	.word	0x2000053c
 80040bc:	200004c4 	.word	0x200004c4
 80040c0:	200004fc 	.word	0x200004fc
 80040c4:	200004c8 	.word	0x200004c8

080040c8 <prr>:
 * |       |  		 	 |			  |			  |    |
 */


void prr(void)                     //Pick Reel Request
{
 80040c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
	uint16_t StorageSlots = ((RxData[2]<<8)|RxData[3]);     //Reel storage in the slot
 80040ce:	4ba1      	ldr	r3, [pc, #644]	; (8004354 <prr+0x28c>)
 80040d0:	789b      	ldrb	r3, [r3, #2]
 80040d2:	021b      	lsls	r3, r3, #8
 80040d4:	b21a      	sxth	r2, r3
 80040d6:	4b9f      	ldr	r3, [pc, #636]	; (8004354 <prr+0x28c>)
 80040d8:	78db      	ldrb	r3, [r3, #3]
 80040da:	b21b      	sxth	r3, r3
 80040dc:	4313      	orrs	r3, r2
 80040de:	b21a      	sxth	r2, r3
 80040e0:	2410      	movs	r4, #16
 80040e2:	193b      	adds	r3, r7, r4
 80040e4:	801a      	strh	r2, [r3, #0]
	uint16_t PickupSlots  = ((RxData[4]<<8)|RxData[5]);      //Data to pickup from slot
 80040e6:	4b9b      	ldr	r3, [pc, #620]	; (8004354 <prr+0x28c>)
 80040e8:	791b      	ldrb	r3, [r3, #4]
 80040ea:	021b      	lsls	r3, r3, #8
 80040ec:	b21a      	sxth	r2, r3
 80040ee:	4b99      	ldr	r3, [pc, #612]	; (8004354 <prr+0x28c>)
 80040f0:	795b      	ldrb	r3, [r3, #5]
 80040f2:	b21b      	sxth	r3, r3
 80040f4:	4313      	orrs	r3, r2
 80040f6:	b21a      	sxth	r2, r3
 80040f8:	250e      	movs	r5, #14
 80040fa:	197b      	adds	r3, r7, r5
 80040fc:	801a      	strh	r2, [r3, #0]
	uint16_t PresentSlotData = *(uint16_t *)&Slot;
 80040fe:	4a96      	ldr	r2, [pc, #600]	; (8004358 <prr+0x290>)
 8004100:	210c      	movs	r1, #12
 8004102:	187b      	adds	r3, r7, r1
 8004104:	8812      	ldrh	r2, [r2, #0]
 8004106:	801a      	strh	r2, [r3, #0]
//	PresentSlotData |= WrongPickData;
	PresentSlotData	&= ~(WrongPlaceData);
 8004108:	4b94      	ldr	r3, [pc, #592]	; (800435c <prr+0x294>)
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	b21b      	sxth	r3, r3
 800410e:	43db      	mvns	r3, r3
 8004110:	b21b      	sxth	r3, r3
 8004112:	187a      	adds	r2, r7, r1
 8004114:	2000      	movs	r0, #0
 8004116:	5e12      	ldrsh	r2, [r2, r0]
 8004118:	4013      	ands	r3, r2
 800411a:	b21a      	sxth	r2, r3
 800411c:	0008      	movs	r0, r1
 800411e:	187b      	adds	r3, r7, r1
 8004120:	801a      	strh	r2, [r3, #0]
	uint16_t DataCompare = StorageSlots ^ PresentSlotData;
 8004122:	260a      	movs	r6, #10
 8004124:	19bb      	adds	r3, r7, r6
 8004126:	1939      	adds	r1, r7, r4
 8004128:	183a      	adds	r2, r7, r0
 800412a:	8809      	ldrh	r1, [r1, #0]
 800412c:	8812      	ldrh	r2, [r2, #0]
 800412e:	404a      	eors	r2, r1
 8004130:	801a      	strh	r2, [r3, #0]
	uint16_t PickedFromSlot = 0,WrongReelPlaced = 0,WrongPick = 0;
 8004132:	2316      	movs	r3, #22
 8004134:	18fb      	adds	r3, r7, r3
 8004136:	2200      	movs	r2, #0
 8004138:	801a      	strh	r2, [r3, #0]
 800413a:	2314      	movs	r3, #20
 800413c:	18fb      	adds	r3, r7, r3
 800413e:	2200      	movs	r2, #0
 8004140:	801a      	strh	r2, [r3, #0]
 8004142:	2308      	movs	r3, #8
 8004144:	18fb      	adds	r3, r7, r3
 8004146:	2200      	movs	r2, #0
 8004148:	801a      	strh	r2, [r3, #0]
	int8_t i = 0, errcnt = 0;
 800414a:	2313      	movs	r3, #19
 800414c:	18fb      	adds	r3, r7, r3
 800414e:	2200      	movs	r2, #0
 8004150:	701a      	strb	r2, [r3, #0]
 8004152:	2212      	movs	r2, #18
 8004154:	18bb      	adds	r3, r7, r2
 8004156:	2200      	movs	r2, #0
 8004158:	701a      	strb	r2, [r3, #0]
	uint16_t ReservedSlot = (StorageSlots ^ PickupSlots);
 800415a:	1dbb      	adds	r3, r7, #6
 800415c:	1939      	adds	r1, r7, r4
 800415e:	197a      	adds	r2, r7, r5
 8004160:	8809      	ldrh	r1, [r1, #0]
 8004162:	8812      	ldrh	r2, [r2, #0]
 8004164:	404a      	eors	r2, r1
 8004166:	801a      	strh	r2, [r3, #0]
//	ReservedSlot &= ~(WrongPickData);
//	UpdateSlotLeds(ReservedSlot,OcupiedLocation);
	UpdateSlotLeds(PickupSlots,PickupLocation);
 8004168:	197b      	adds	r3, r7, r5
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	2102      	movs	r1, #2
 800416e:	0018      	movs	r0, r3
 8004170:	f7fe fb76 	bl	8002860 <UpdateSlotLeds>
//	UpdateSlotLeds(WrongPickData,PickupError);
	if(DataCompare)
 8004174:	19bb      	adds	r3, r7, r6
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d100      	bne.n	800417e <prr+0xb6>
 800417c:	e0e5      	b.n	800434a <prr+0x282>
	{
		for(i = 0; i < 16; i++)
 800417e:	2313      	movs	r3, #19
 8004180:	18fb      	adds	r3, r7, r3
 8004182:	2200      	movs	r2, #0
 8004184:	701a      	strb	r2, [r3, #0]
 8004186:	e021      	b.n	80041cc <prr+0x104>
		{
			if(DataCompare & (0x01 << i))
 8004188:	230a      	movs	r3, #10
 800418a:	18fb      	adds	r3, r7, r3
 800418c:	881a      	ldrh	r2, [r3, #0]
 800418e:	2013      	movs	r0, #19
 8004190:	183b      	adds	r3, r7, r0
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	b25b      	sxtb	r3, r3
 8004196:	411a      	asrs	r2, r3
 8004198:	0013      	movs	r3, r2
 800419a:	2201      	movs	r2, #1
 800419c:	4013      	ands	r3, r2
 800419e:	d00c      	beq.n	80041ba <prr+0xf2>
				errorDataPosition[errcnt++] = i;
 80041a0:	2412      	movs	r4, #18
 80041a2:	193b      	adds	r3, r7, r4
 80041a4:	2200      	movs	r2, #0
 80041a6:	569a      	ldrsb	r2, [r3, r2]
 80041a8:	b2d3      	uxtb	r3, r2
 80041aa:	3301      	adds	r3, #1
 80041ac:	b2d9      	uxtb	r1, r3
 80041ae:	193b      	adds	r3, r7, r4
 80041b0:	7019      	strb	r1, [r3, #0]
 80041b2:	183b      	adds	r3, r7, r0
 80041b4:	7819      	ldrb	r1, [r3, #0]
 80041b6:	4b6a      	ldr	r3, [pc, #424]	; (8004360 <prr+0x298>)
 80041b8:	5499      	strb	r1, [r3, r2]
		for(i = 0; i < 16; i++)
 80041ba:	2113      	movs	r1, #19
 80041bc:	187b      	adds	r3, r7, r1
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	b25b      	sxtb	r3, r3
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	3301      	adds	r3, #1
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	187b      	adds	r3, r7, r1
 80041ca:	701a      	strb	r2, [r3, #0]
 80041cc:	2213      	movs	r2, #19
 80041ce:	18bb      	adds	r3, r7, r2
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	b25b      	sxtb	r3, r3
 80041d4:	2b0f      	cmp	r3, #15
 80041d6:	ddd7      	ble.n	8004188 <prr+0xc0>
		}
		i = 0;
 80041d8:	18bb      	adds	r3, r7, r2
 80041da:	2200      	movs	r2, #0
 80041dc:	701a      	strb	r2, [r3, #0]
		while(errcnt > 0)
 80041de:	e042      	b.n	8004266 <prr+0x19e>
		{
			if(StorageSlots & (0x01 << errorDataPosition[i]))
 80041e0:	2310      	movs	r3, #16
 80041e2:	18fb      	adds	r3, r7, r3
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	2013      	movs	r0, #19
 80041e8:	183a      	adds	r2, r7, r0
 80041ea:	7812      	ldrb	r2, [r2, #0]
 80041ec:	b252      	sxtb	r2, r2
 80041ee:	495c      	ldr	r1, [pc, #368]	; (8004360 <prr+0x298>)
 80041f0:	5c8a      	ldrb	r2, [r1, r2]
 80041f2:	4113      	asrs	r3, r2
 80041f4:	2201      	movs	r2, #1
 80041f6:	4013      	ands	r3, r2
 80041f8:	d011      	beq.n	800421e <prr+0x156>
				PickedFromSlot |= (0x01 << errorDataPosition[i]); //Reel picked From Slot
 80041fa:	183b      	adds	r3, r7, r0
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	b25b      	sxtb	r3, r3
 8004200:	4a57      	ldr	r2, [pc, #348]	; (8004360 <prr+0x298>)
 8004202:	5cd3      	ldrb	r3, [r2, r3]
 8004204:	001a      	movs	r2, r3
 8004206:	2301      	movs	r3, #1
 8004208:	4093      	lsls	r3, r2
 800420a:	b21a      	sxth	r2, r3
 800420c:	2116      	movs	r1, #22
 800420e:	187b      	adds	r3, r7, r1
 8004210:	2000      	movs	r0, #0
 8004212:	5e1b      	ldrsh	r3, [r3, r0]
 8004214:	4313      	orrs	r3, r2
 8004216:	b21a      	sxth	r2, r3
 8004218:	187b      	adds	r3, r7, r1
 800421a:	801a      	strh	r2, [r3, #0]
 800421c:	e011      	b.n	8004242 <prr+0x17a>
			else
				WrongReelPlaced |= (0x01 << errorDataPosition[i]); //Wrong material placed
 800421e:	2313      	movs	r3, #19
 8004220:	18fb      	adds	r3, r7, r3
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	b25b      	sxtb	r3, r3
 8004226:	4a4e      	ldr	r2, [pc, #312]	; (8004360 <prr+0x298>)
 8004228:	5cd3      	ldrb	r3, [r2, r3]
 800422a:	001a      	movs	r2, r3
 800422c:	2301      	movs	r3, #1
 800422e:	4093      	lsls	r3, r2
 8004230:	b21a      	sxth	r2, r3
 8004232:	2114      	movs	r1, #20
 8004234:	187b      	adds	r3, r7, r1
 8004236:	2000      	movs	r0, #0
 8004238:	5e1b      	ldrsh	r3, [r3, r0]
 800423a:	4313      	orrs	r3, r2
 800423c:	b21a      	sxth	r2, r3
 800423e:	187b      	adds	r3, r7, r1
 8004240:	801a      	strh	r2, [r3, #0]
			i++;
 8004242:	2113      	movs	r1, #19
 8004244:	187b      	adds	r3, r7, r1
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	b25b      	sxtb	r3, r3
 800424a:	b2db      	uxtb	r3, r3
 800424c:	3301      	adds	r3, #1
 800424e:	b2da      	uxtb	r2, r3
 8004250:	187b      	adds	r3, r7, r1
 8004252:	701a      	strb	r2, [r3, #0]
			errcnt--;
 8004254:	2112      	movs	r1, #18
 8004256:	187b      	adds	r3, r7, r1
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	b25b      	sxtb	r3, r3
 800425c:	b2db      	uxtb	r3, r3
 800425e:	3b01      	subs	r3, #1
 8004260:	b2da      	uxtb	r2, r3
 8004262:	187b      	adds	r3, r7, r1
 8004264:	701a      	strb	r2, [r3, #0]
		while(errcnt > 0)
 8004266:	2312      	movs	r3, #18
 8004268:	18fb      	adds	r3, r7, r3
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	b25b      	sxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	dcb6      	bgt.n	80041e0 <prr+0x118>
		}
		WrongPickData = PickedFromSlot & (StorageSlots ^ PickupSlots);
 8004272:	2510      	movs	r5, #16
 8004274:	197a      	adds	r2, r7, r5
 8004276:	260e      	movs	r6, #14
 8004278:	19bb      	adds	r3, r7, r6
 800427a:	8812      	ldrh	r2, [r2, #0]
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	4053      	eors	r3, r2
 8004280:	b29b      	uxth	r3, r3
 8004282:	2416      	movs	r4, #22
 8004284:	193a      	adds	r2, r7, r4
 8004286:	8812      	ldrh	r2, [r2, #0]
 8004288:	4013      	ands	r3, r2
 800428a:	b29a      	uxth	r2, r3
 800428c:	4b35      	ldr	r3, [pc, #212]	; (8004364 <prr+0x29c>)
 800428e:	801a      	strh	r2, [r3, #0]
		UpdateSlotLeds(WrongPickData,PickupError);
 8004290:	4b34      	ldr	r3, [pc, #208]	; (8004364 <prr+0x29c>)
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	2104      	movs	r1, #4
 8004296:	0018      	movs	r0, r3
 8004298:	f7fe fae2 	bl	8002860 <UpdateSlotLeds>
//		WrongPickData |= WrongPick;
//		WrongPlaceData = WrongReelPlaced;
		PickedFromSlot &= ~(StorageSlots ^ PickupSlots);
 800429c:	197a      	adds	r2, r7, r5
 800429e:	19bb      	adds	r3, r7, r6
 80042a0:	8812      	ldrh	r2, [r2, #0]
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	4053      	eors	r3, r2
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	b21b      	sxth	r3, r3
 80042aa:	43db      	mvns	r3, r3
 80042ac:	b21b      	sxth	r3, r3
 80042ae:	193a      	adds	r2, r7, r4
 80042b0:	2100      	movs	r1, #0
 80042b2:	5e52      	ldrsh	r2, [r2, r1]
 80042b4:	4013      	ands	r3, r2
 80042b6:	b21a      	sxth	r2, r3
 80042b8:	193b      	adds	r3, r7, r4
 80042ba:	801a      	strh	r2, [r3, #0]
		UpdateSlotLeds(PickedFromSlot,EmptyLocaction);
 80042bc:	193b      	adds	r3, r7, r4
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	2100      	movs	r1, #0
 80042c2:	0018      	movs	r0, r3
 80042c4:	f7fe facc 	bl	8002860 <UpdateSlotLeds>
		UpdateSlotLeds(WrongReelPlaced,PlaceError);
 80042c8:	2414      	movs	r4, #20
 80042ca:	193b      	adds	r3, r7, r4
 80042cc:	881b      	ldrh	r3, [r3, #0]
 80042ce:	2103      	movs	r1, #3
 80042d0:	0018      	movs	r0, r3
 80042d2:	f7fe fac5 	bl	8002860 <UpdateSlotLeds>
//		UpdateSlotLeds(WrongPick,PickupError);
		PresentSlotData |= WrongPick;
 80042d6:	200c      	movs	r0, #12
 80042d8:	183b      	adds	r3, r7, r0
 80042da:	1839      	adds	r1, r7, r0
 80042dc:	2208      	movs	r2, #8
 80042de:	18ba      	adds	r2, r7, r2
 80042e0:	8809      	ldrh	r1, [r1, #0]
 80042e2:	8812      	ldrh	r2, [r2, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	801a      	strh	r2, [r3, #0]
		TxData[0] = SlaveID;            // slave ID
 80042e8:	4b1f      	ldr	r3, [pc, #124]	; (8004368 <prr+0x2a0>)
 80042ea:	781a      	ldrb	r2, [r3, #0]
 80042ec:	4b1f      	ldr	r3, [pc, #124]	; (800436c <prr+0x2a4>)
 80042ee:	701a      	strb	r2, [r3, #0]
		TxData[1] = RxData[1];           // function code
 80042f0:	4b18      	ldr	r3, [pc, #96]	; (8004354 <prr+0x28c>)
 80042f2:	785a      	ldrb	r2, [r3, #1]
 80042f4:	4b1d      	ldr	r3, [pc, #116]	; (800436c <prr+0x2a4>)
 80042f6:	705a      	strb	r2, [r3, #1]
		TxData[2] = ((PresentSlotData >>8) & 0xFF);                //Higher Slot Data byte
 80042f8:	183b      	adds	r3, r7, r0
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	0a1b      	lsrs	r3, r3, #8
 80042fe:	b29b      	uxth	r3, r3
 8004300:	b2da      	uxtb	r2, r3
 8004302:	4b1a      	ldr	r3, [pc, #104]	; (800436c <prr+0x2a4>)
 8004304:	709a      	strb	r2, [r3, #2]
		TxData[3] = PresentSlotData & 0xFF;     					//  Lower Slot Data byte
 8004306:	183b      	adds	r3, r7, r0
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	b2da      	uxtb	r2, r3
 800430c:	4b17      	ldr	r3, [pc, #92]	; (800436c <prr+0x2a4>)
 800430e:	70da      	strb	r2, [r3, #3]
		if(WrongReelPlaced)
 8004310:	193b      	adds	r3, r7, r4
 8004312:	881b      	ldrh	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <prr+0x258>
			TxData[4] = 0x01;            // Error Status
 8004318:	4b14      	ldr	r3, [pc, #80]	; (800436c <prr+0x2a4>)
 800431a:	2201      	movs	r2, #1
 800431c:	711a      	strb	r2, [r3, #4]
 800431e:	e002      	b.n	8004326 <prr+0x25e>
		else
			TxData[4] = 0x00;            // Error Status
 8004320:	4b12      	ldr	r3, [pc, #72]	; (800436c <prr+0x2a4>)
 8004322:	2200      	movs	r2, #0
 8004324:	711a      	strb	r2, [r3, #4]
		TxData[5] = ((WrongPick >>8) & 0xFF);
 8004326:	2108      	movs	r1, #8
 8004328:	187b      	adds	r3, r7, r1
 800432a:	881b      	ldrh	r3, [r3, #0]
 800432c:	0a1b      	lsrs	r3, r3, #8
 800432e:	b29b      	uxth	r3, r3
 8004330:	b2da      	uxtb	r2, r3
 8004332:	4b0e      	ldr	r3, [pc, #56]	; (800436c <prr+0x2a4>)
 8004334:	715a      	strb	r2, [r3, #5]
		TxData[6] = WrongPick & 0xFF;
 8004336:	187b      	adds	r3, r7, r1
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	b2da      	uxtb	r2, r3
 800433c:	4b0b      	ldr	r3, [pc, #44]	; (800436c <prr+0x2a4>)
 800433e:	719a      	strb	r2, [r3, #6]
		sendData(TxData, 7);  			 // send data... CRC wil
 8004340:	4b0a      	ldr	r3, [pc, #40]	; (800436c <prr+0x2a4>)
 8004342:	2107      	movs	r1, #7
 8004344:	0018      	movs	r0, r3
 8004346:	f7ff fbf3 	bl	8003b30 <sendData>
	}


}
 800434a:	46c0      	nop			; (mov r8, r8)
 800434c:	46bd      	mov	sp, r7
 800434e:	b007      	add	sp, #28
 8004350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	200004c8 	.word	0x200004c8
 8004358:	20000264 	.word	0x20000264
 800435c:	20000552 	.word	0x20000552
 8004360:	2000053c 	.word	0x2000053c
 8004364:	20000550 	.word	0x20000550
 8004368:	200004c4 	.word	0x200004c4
 800436c:	200004fc 	.word	0x200004fc

08004370 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	000a      	movs	r2, r1
 800437a:	1cbb      	adds	r3, r7, #2
 800437c:	801a      	strh	r2, [r3, #0]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 800437e:	230f      	movs	r3, #15
 8004380:	18fb      	adds	r3, r7, r3
 8004382:	22ff      	movs	r2, #255	; 0xff
 8004384:	701a      	strb	r2, [r3, #0]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8004386:	230e      	movs	r3, #14
 8004388:	18fb      	adds	r3, r7, r3
 800438a:	22ff      	movs	r2, #255	; 0xff
 800438c:	701a      	strb	r2, [r3, #0]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 800438e:	e019      	b.n	80043c4 <crc16+0x54>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	607a      	str	r2, [r7, #4]
 8004396:	781a      	ldrb	r2, [r3, #0]
 8004398:	200e      	movs	r0, #14
 800439a:	183b      	adds	r3, r7, r0
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	4053      	eors	r3, r2
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 80043a4:	4a13      	ldr	r2, [pc, #76]	; (80043f4 <crc16+0x84>)
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	18d3      	adds	r3, r2, r3
 80043aa:	7819      	ldrb	r1, [r3, #0]
 80043ac:	183b      	adds	r3, r7, r0
 80043ae:	200f      	movs	r0, #15
 80043b0:	183a      	adds	r2, r7, r0
 80043b2:	7812      	ldrb	r2, [r2, #0]
 80043b4:	404a      	eors	r2, r1
 80043b6:	701a      	strb	r2, [r3, #0]
        crc_hi = table_crc_lo[i];
 80043b8:	183b      	adds	r3, r7, r0
 80043ba:	490f      	ldr	r1, [pc, #60]	; (80043f8 <crc16+0x88>)
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	188a      	adds	r2, r1, r2
 80043c0:	7812      	ldrb	r2, [r2, #0]
 80043c2:	701a      	strb	r2, [r3, #0]
    while (buffer_length--) {
 80043c4:	1cbb      	adds	r3, r7, #2
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	1cba      	adds	r2, r7, #2
 80043ca:	1e59      	subs	r1, r3, #1
 80043cc:	8011      	strh	r1, [r2, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1de      	bne.n	8004390 <crc16+0x20>
    }

    return (crc_hi << 8 | crc_lo);
 80043d2:	230f      	movs	r3, #15
 80043d4:	18fb      	adds	r3, r7, r3
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	021b      	lsls	r3, r3, #8
 80043da:	b21a      	sxth	r2, r3
 80043dc:	230e      	movs	r3, #14
 80043de:	18fb      	adds	r3, r7, r3
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	b21b      	sxth	r3, r3
 80043e4:	4313      	orrs	r3, r2
 80043e6:	b21b      	sxth	r3, r3
 80043e8:	b29b      	uxth	r3, r3
}
 80043ea:	0018      	movs	r0, r3
 80043ec:	46bd      	mov	sp, r7
 80043ee:	b004      	add	sp, #16
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	46c0      	nop			; (mov r8, r8)
 80043f4:	0800c0b8 	.word	0x0800c0b8
 80043f8:	0800c1b8 	.word	0x0800c1b8

080043fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043fc:	b590      	push	{r4, r7, lr}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8004402:	2408      	movs	r4, #8
 8004404:	193b      	adds	r3, r7, r4
 8004406:	0018      	movs	r0, r3
 8004408:	2308      	movs	r3, #8
 800440a:	001a      	movs	r2, r3
 800440c:	2100      	movs	r1, #0
 800440e:	f005 f821 	bl	8009454 <memset>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004412:	4b13      	ldr	r3, [pc, #76]	; (8004460 <HAL_MspInit+0x64>)
 8004414:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004416:	4b12      	ldr	r3, [pc, #72]	; (8004460 <HAL_MspInit+0x64>)
 8004418:	2101      	movs	r1, #1
 800441a:	430a      	orrs	r2, r1
 800441c:	641a      	str	r2, [r3, #64]	; 0x40
 800441e:	4b10      	ldr	r3, [pc, #64]	; (8004460 <HAL_MspInit+0x64>)
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	2201      	movs	r2, #1
 8004424:	4013      	ands	r3, r2
 8004426:	607b      	str	r3, [r7, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800442a:	4b0d      	ldr	r3, [pc, #52]	; (8004460 <HAL_MspInit+0x64>)
 800442c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800442e:	4b0c      	ldr	r3, [pc, #48]	; (8004460 <HAL_MspInit+0x64>)
 8004430:	2180      	movs	r1, #128	; 0x80
 8004432:	0549      	lsls	r1, r1, #21
 8004434:	430a      	orrs	r2, r1
 8004436:	63da      	str	r2, [r3, #60]	; 0x3c
 8004438:	4b09      	ldr	r3, [pc, #36]	; (8004460 <HAL_MspInit+0x64>)
 800443a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800443c:	2380      	movs	r3, #128	; 0x80
 800443e:	055b      	lsls	r3, r3, #21
 8004440:	4013      	ands	r3, r2
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8004446:	193b      	adds	r3, r7, r4
 8004448:	2200      	movs	r2, #0
 800444a:	605a      	str	r2, [r3, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 800444c:	193b      	adds	r3, r7, r4
 800444e:	0018      	movs	r0, r3
 8004450:	f000 ff1c 	bl	800528c <HAL_PWREx_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8004454:	f000 ff86 	bl	8005364 <HAL_PWREx_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004458:	46c0      	nop			; (mov r8, r8)
 800445a:	46bd      	mov	sp, r7
 800445c:	b005      	add	sp, #20
 800445e:	bd90      	pop	{r4, r7, pc}
 8004460:	40021000 	.word	0x40021000

08004464 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004464:	b590      	push	{r4, r7, lr}
 8004466:	b093      	sub	sp, #76	; 0x4c
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800446c:	2420      	movs	r4, #32
 800446e:	193b      	adds	r3, r7, r4
 8004470:	0018      	movs	r0, r3
 8004472:	2328      	movs	r3, #40	; 0x28
 8004474:	001a      	movs	r2, r3
 8004476:	2100      	movs	r1, #0
 8004478:	f004 ffec 	bl	8009454 <memset>
  if(htim_base->Instance==TIM1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a42      	ldr	r2, [pc, #264]	; (800458c <HAL_TIM_Base_MspInit+0x128>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d11d      	bne.n	80044c2 <HAL_TIM_Base_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8004486:	193b      	adds	r3, r7, r4
 8004488:	2280      	movs	r2, #128	; 0x80
 800448a:	0392      	lsls	r2, r2, #14
 800448c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800448e:	193b      	adds	r3, r7, r4
 8004490:	2200      	movs	r2, #0
 8004492:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004494:	193b      	adds	r3, r7, r4
 8004496:	0018      	movs	r0, r3
 8004498:	f001 fc82 	bl	8005da0 <HAL_RCCEx_PeriphCLKConfig>
 800449c:	1e03      	subs	r3, r0, #0
 800449e:	d001      	beq.n	80044a4 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 80044a0:	f7ff fb40 	bl	8003b24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80044a4:	4b3a      	ldr	r3, [pc, #232]	; (8004590 <HAL_TIM_Base_MspInit+0x12c>)
 80044a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044a8:	4b39      	ldr	r3, [pc, #228]	; (8004590 <HAL_TIM_Base_MspInit+0x12c>)
 80044aa:	2180      	movs	r1, #128	; 0x80
 80044ac:	0109      	lsls	r1, r1, #4
 80044ae:	430a      	orrs	r2, r1
 80044b0:	641a      	str	r2, [r3, #64]	; 0x40
 80044b2:	4b37      	ldr	r3, [pc, #220]	; (8004590 <HAL_TIM_Base_MspInit+0x12c>)
 80044b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044b6:	2380      	movs	r3, #128	; 0x80
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	4013      	ands	r3, r2
 80044bc:	61fb      	str	r3, [r7, #28]
 80044be:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80044c0:	e05f      	b.n	8004582 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM2)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	2380      	movs	r3, #128	; 0x80
 80044c8:	05db      	lsls	r3, r3, #23
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d10c      	bne.n	80044e8 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80044ce:	4b30      	ldr	r3, [pc, #192]	; (8004590 <HAL_TIM_Base_MspInit+0x12c>)
 80044d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044d2:	4b2f      	ldr	r3, [pc, #188]	; (8004590 <HAL_TIM_Base_MspInit+0x12c>)
 80044d4:	2101      	movs	r1, #1
 80044d6:	430a      	orrs	r2, r1
 80044d8:	63da      	str	r2, [r3, #60]	; 0x3c
 80044da:	4b2d      	ldr	r3, [pc, #180]	; (8004590 <HAL_TIM_Base_MspInit+0x12c>)
 80044dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044de:	2201      	movs	r2, #1
 80044e0:	4013      	ands	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
 80044e4:	69bb      	ldr	r3, [r7, #24]
}
 80044e6:	e04c      	b.n	8004582 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a29      	ldr	r2, [pc, #164]	; (8004594 <HAL_TIM_Base_MspInit+0x130>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d10c      	bne.n	800450c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80044f2:	4b27      	ldr	r3, [pc, #156]	; (8004590 <HAL_TIM_Base_MspInit+0x12c>)
 80044f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044f6:	4b26      	ldr	r3, [pc, #152]	; (8004590 <HAL_TIM_Base_MspInit+0x12c>)
 80044f8:	2102      	movs	r1, #2
 80044fa:	430a      	orrs	r2, r1
 80044fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80044fe:	4b24      	ldr	r3, [pc, #144]	; (8004590 <HAL_TIM_Base_MspInit+0x12c>)
 8004500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004502:	2202      	movs	r2, #2
 8004504:	4013      	ands	r3, r2
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	697b      	ldr	r3, [r7, #20]
}
 800450a:	e03a      	b.n	8004582 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM14)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a21      	ldr	r2, [pc, #132]	; (8004598 <HAL_TIM_Base_MspInit+0x134>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d10e      	bne.n	8004534 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004516:	4b1e      	ldr	r3, [pc, #120]	; (8004590 <HAL_TIM_Base_MspInit+0x12c>)
 8004518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800451a:	4b1d      	ldr	r3, [pc, #116]	; (8004590 <HAL_TIM_Base_MspInit+0x12c>)
 800451c:	2180      	movs	r1, #128	; 0x80
 800451e:	0209      	lsls	r1, r1, #8
 8004520:	430a      	orrs	r2, r1
 8004522:	641a      	str	r2, [r3, #64]	; 0x40
 8004524:	4b1a      	ldr	r3, [pc, #104]	; (8004590 <HAL_TIM_Base_MspInit+0x12c>)
 8004526:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004528:	2380      	movs	r3, #128	; 0x80
 800452a:	021b      	lsls	r3, r3, #8
 800452c:	4013      	ands	r3, r2
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	693b      	ldr	r3, [r7, #16]
}
 8004532:	e026      	b.n	8004582 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM16)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a18      	ldr	r2, [pc, #96]	; (800459c <HAL_TIM_Base_MspInit+0x138>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d10e      	bne.n	800455c <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800453e:	4b14      	ldr	r3, [pc, #80]	; (8004590 <HAL_TIM_Base_MspInit+0x12c>)
 8004540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004542:	4b13      	ldr	r3, [pc, #76]	; (8004590 <HAL_TIM_Base_MspInit+0x12c>)
 8004544:	2180      	movs	r1, #128	; 0x80
 8004546:	0289      	lsls	r1, r1, #10
 8004548:	430a      	orrs	r2, r1
 800454a:	641a      	str	r2, [r3, #64]	; 0x40
 800454c:	4b10      	ldr	r3, [pc, #64]	; (8004590 <HAL_TIM_Base_MspInit+0x12c>)
 800454e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004550:	2380      	movs	r3, #128	; 0x80
 8004552:	029b      	lsls	r3, r3, #10
 8004554:	4013      	ands	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	68fb      	ldr	r3, [r7, #12]
}
 800455a:	e012      	b.n	8004582 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM17)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a0f      	ldr	r2, [pc, #60]	; (80045a0 <HAL_TIM_Base_MspInit+0x13c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d10d      	bne.n	8004582 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004566:	4b0a      	ldr	r3, [pc, #40]	; (8004590 <HAL_TIM_Base_MspInit+0x12c>)
 8004568:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800456a:	4b09      	ldr	r3, [pc, #36]	; (8004590 <HAL_TIM_Base_MspInit+0x12c>)
 800456c:	2180      	movs	r1, #128	; 0x80
 800456e:	02c9      	lsls	r1, r1, #11
 8004570:	430a      	orrs	r2, r1
 8004572:	641a      	str	r2, [r3, #64]	; 0x40
 8004574:	4b06      	ldr	r3, [pc, #24]	; (8004590 <HAL_TIM_Base_MspInit+0x12c>)
 8004576:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004578:	2380      	movs	r3, #128	; 0x80
 800457a:	02db      	lsls	r3, r3, #11
 800457c:	4013      	ands	r3, r2
 800457e:	60bb      	str	r3, [r7, #8]
 8004580:	68bb      	ldr	r3, [r7, #8]
}
 8004582:	46c0      	nop			; (mov r8, r8)
 8004584:	46bd      	mov	sp, r7
 8004586:	b013      	add	sp, #76	; 0x4c
 8004588:	bd90      	pop	{r4, r7, pc}
 800458a:	46c0      	nop			; (mov r8, r8)
 800458c:	40012c00 	.word	0x40012c00
 8004590:	40021000 	.word	0x40021000
 8004594:	40000400 	.word	0x40000400
 8004598:	40002000 	.word	0x40002000
 800459c:	40014400 	.word	0x40014400
 80045a0:	40014800 	.word	0x40014800

080045a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80045a4:	b590      	push	{r4, r7, lr}
 80045a6:	b08b      	sub	sp, #44	; 0x2c
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ac:	2414      	movs	r4, #20
 80045ae:	193b      	adds	r3, r7, r4
 80045b0:	0018      	movs	r0, r3
 80045b2:	2314      	movs	r3, #20
 80045b4:	001a      	movs	r2, r3
 80045b6:	2100      	movs	r1, #0
 80045b8:	f004 ff4c 	bl	8009454 <memset>
  if(htim->Instance==TIM1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a25      	ldr	r2, [pc, #148]	; (8004658 <HAL_TIM_MspPostInit+0xb4>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d144      	bne.n	8004650 <HAL_TIM_MspPostInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045c6:	4b25      	ldr	r3, [pc, #148]	; (800465c <HAL_TIM_MspPostInit+0xb8>)
 80045c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045ca:	4b24      	ldr	r3, [pc, #144]	; (800465c <HAL_TIM_MspPostInit+0xb8>)
 80045cc:	2101      	movs	r1, #1
 80045ce:	430a      	orrs	r2, r1
 80045d0:	635a      	str	r2, [r3, #52]	; 0x34
 80045d2:	4b22      	ldr	r3, [pc, #136]	; (800465c <HAL_TIM_MspPostInit+0xb8>)
 80045d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d6:	2201      	movs	r2, #1
 80045d8:	4013      	ands	r3, r2
 80045da:	613b      	str	r3, [r7, #16]
 80045dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045de:	4b1f      	ldr	r3, [pc, #124]	; (800465c <HAL_TIM_MspPostInit+0xb8>)
 80045e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045e2:	4b1e      	ldr	r3, [pc, #120]	; (800465c <HAL_TIM_MspPostInit+0xb8>)
 80045e4:	2102      	movs	r1, #2
 80045e6:	430a      	orrs	r2, r1
 80045e8:	635a      	str	r2, [r3, #52]	; 0x34
 80045ea:	4b1c      	ldr	r3, [pc, #112]	; (800465c <HAL_TIM_MspPostInit+0xb8>)
 80045ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ee:	2202      	movs	r2, #2
 80045f0:	4013      	ands	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA11 [PA9]     ------> TIM1_CH4
    PB3     ------> TIM1_CH2
    PB6     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80045f6:	193b      	adds	r3, r7, r4
 80045f8:	2290      	movs	r2, #144	; 0x90
 80045fa:	0112      	lsls	r2, r2, #4
 80045fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045fe:	193b      	adds	r3, r7, r4
 8004600:	2202      	movs	r2, #2
 8004602:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004604:	193b      	adds	r3, r7, r4
 8004606:	2200      	movs	r2, #0
 8004608:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800460a:	193b      	adds	r3, r7, r4
 800460c:	2200      	movs	r2, #0
 800460e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004610:	193b      	adds	r3, r7, r4
 8004612:	2202      	movs	r2, #2
 8004614:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004616:	193a      	adds	r2, r7, r4
 8004618:	23a0      	movs	r3, #160	; 0xa0
 800461a:	05db      	lsls	r3, r3, #23
 800461c:	0011      	movs	r1, r2
 800461e:	0018      	movs	r0, r3
 8004620:	f000 fc46 	bl	8004eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8004624:	0021      	movs	r1, r4
 8004626:	187b      	adds	r3, r7, r1
 8004628:	2248      	movs	r2, #72	; 0x48
 800462a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800462c:	187b      	adds	r3, r7, r1
 800462e:	2202      	movs	r2, #2
 8004630:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004632:	187b      	adds	r3, r7, r1
 8004634:	2200      	movs	r2, #0
 8004636:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004638:	187b      	adds	r3, r7, r1
 800463a:	2200      	movs	r2, #0
 800463c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800463e:	187b      	adds	r3, r7, r1
 8004640:	2201      	movs	r2, #1
 8004642:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004644:	187b      	adds	r3, r7, r1
 8004646:	4a06      	ldr	r2, [pc, #24]	; (8004660 <HAL_TIM_MspPostInit+0xbc>)
 8004648:	0019      	movs	r1, r3
 800464a:	0010      	movs	r0, r2
 800464c:	f000 fc30 	bl	8004eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004650:	46c0      	nop			; (mov r8, r8)
 8004652:	46bd      	mov	sp, r7
 8004654:	b00b      	add	sp, #44	; 0x2c
 8004656:	bd90      	pop	{r4, r7, pc}
 8004658:	40012c00 	.word	0x40012c00
 800465c:	40021000 	.word	0x40021000
 8004660:	50000400 	.word	0x50000400

08004664 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a24      	ldr	r2, [pc, #144]	; (8004704 <HAL_TIM_Base_MspDeInit+0xa0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d106      	bne.n	8004684 <HAL_TIM_Base_MspDeInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 8004676:	4b24      	ldr	r3, [pc, #144]	; (8004708 <HAL_TIM_Base_MspDeInit+0xa4>)
 8004678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800467a:	4b23      	ldr	r3, [pc, #140]	; (8004708 <HAL_TIM_Base_MspDeInit+0xa4>)
 800467c:	4923      	ldr	r1, [pc, #140]	; (800470c <HAL_TIM_Base_MspDeInit+0xa8>)
 800467e:	400a      	ands	r2, r1
 8004680:	641a      	str	r2, [r3, #64]	; 0x40
  /* USER CODE BEGIN TIM17_MspDeInit 1 */

  /* USER CODE END TIM17_MspDeInit 1 */
  }

}
 8004682:	e03b      	b.n	80046fc <HAL_TIM_Base_MspDeInit+0x98>
  else if(htim_base->Instance==TIM2)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	2380      	movs	r3, #128	; 0x80
 800468a:	05db      	lsls	r3, r3, #23
 800468c:	429a      	cmp	r2, r3
 800468e:	d106      	bne.n	800469e <HAL_TIM_Base_MspDeInit+0x3a>
    __HAL_RCC_TIM2_CLK_DISABLE();
 8004690:	4b1d      	ldr	r3, [pc, #116]	; (8004708 <HAL_TIM_Base_MspDeInit+0xa4>)
 8004692:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004694:	4b1c      	ldr	r3, [pc, #112]	; (8004708 <HAL_TIM_Base_MspDeInit+0xa4>)
 8004696:	2101      	movs	r1, #1
 8004698:	438a      	bics	r2, r1
 800469a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800469c:	e02e      	b.n	80046fc <HAL_TIM_Base_MspDeInit+0x98>
  else if(htim_base->Instance==TIM3)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a1b      	ldr	r2, [pc, #108]	; (8004710 <HAL_TIM_Base_MspDeInit+0xac>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d106      	bne.n	80046b6 <HAL_TIM_Base_MspDeInit+0x52>
    __HAL_RCC_TIM3_CLK_DISABLE();
 80046a8:	4b17      	ldr	r3, [pc, #92]	; (8004708 <HAL_TIM_Base_MspDeInit+0xa4>)
 80046aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046ac:	4b16      	ldr	r3, [pc, #88]	; (8004708 <HAL_TIM_Base_MspDeInit+0xa4>)
 80046ae:	2102      	movs	r1, #2
 80046b0:	438a      	bics	r2, r1
 80046b2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80046b4:	e022      	b.n	80046fc <HAL_TIM_Base_MspDeInit+0x98>
  else if(htim_base->Instance==TIM14)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a16      	ldr	r2, [pc, #88]	; (8004714 <HAL_TIM_Base_MspDeInit+0xb0>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d106      	bne.n	80046ce <HAL_TIM_Base_MspDeInit+0x6a>
    __HAL_RCC_TIM14_CLK_DISABLE();
 80046c0:	4b11      	ldr	r3, [pc, #68]	; (8004708 <HAL_TIM_Base_MspDeInit+0xa4>)
 80046c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046c4:	4b10      	ldr	r3, [pc, #64]	; (8004708 <HAL_TIM_Base_MspDeInit+0xa4>)
 80046c6:	4914      	ldr	r1, [pc, #80]	; (8004718 <HAL_TIM_Base_MspDeInit+0xb4>)
 80046c8:	400a      	ands	r2, r1
 80046ca:	641a      	str	r2, [r3, #64]	; 0x40
}
 80046cc:	e016      	b.n	80046fc <HAL_TIM_Base_MspDeInit+0x98>
  else if(htim_base->Instance==TIM16)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a12      	ldr	r2, [pc, #72]	; (800471c <HAL_TIM_Base_MspDeInit+0xb8>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d106      	bne.n	80046e6 <HAL_TIM_Base_MspDeInit+0x82>
    __HAL_RCC_TIM16_CLK_DISABLE();
 80046d8:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <HAL_TIM_Base_MspDeInit+0xa4>)
 80046da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046dc:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <HAL_TIM_Base_MspDeInit+0xa4>)
 80046de:	4910      	ldr	r1, [pc, #64]	; (8004720 <HAL_TIM_Base_MspDeInit+0xbc>)
 80046e0:	400a      	ands	r2, r1
 80046e2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80046e4:	e00a      	b.n	80046fc <HAL_TIM_Base_MspDeInit+0x98>
  else if(htim_base->Instance==TIM17)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a0e      	ldr	r2, [pc, #56]	; (8004724 <HAL_TIM_Base_MspDeInit+0xc0>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d105      	bne.n	80046fc <HAL_TIM_Base_MspDeInit+0x98>
    __HAL_RCC_TIM17_CLK_DISABLE();
 80046f0:	4b05      	ldr	r3, [pc, #20]	; (8004708 <HAL_TIM_Base_MspDeInit+0xa4>)
 80046f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046f4:	4b04      	ldr	r3, [pc, #16]	; (8004708 <HAL_TIM_Base_MspDeInit+0xa4>)
 80046f6:	490c      	ldr	r1, [pc, #48]	; (8004728 <HAL_TIM_Base_MspDeInit+0xc4>)
 80046f8:	400a      	ands	r2, r1
 80046fa:	641a      	str	r2, [r3, #64]	; 0x40
}
 80046fc:	46c0      	nop			; (mov r8, r8)
 80046fe:	46bd      	mov	sp, r7
 8004700:	b002      	add	sp, #8
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40012c00 	.word	0x40012c00
 8004708:	40021000 	.word	0x40021000
 800470c:	fffff7ff 	.word	0xfffff7ff
 8004710:	40000400 	.word	0x40000400
 8004714:	40002000 	.word	0x40002000
 8004718:	ffff7fff 	.word	0xffff7fff
 800471c:	40014400 	.word	0x40014400
 8004720:	fffdffff 	.word	0xfffdffff
 8004724:	40014800 	.word	0x40014800
 8004728:	fffbffff 	.word	0xfffbffff

0800472c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800472c:	b590      	push	{r4, r7, lr}
 800472e:	b095      	sub	sp, #84	; 0x54
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004734:	233c      	movs	r3, #60	; 0x3c
 8004736:	18fb      	adds	r3, r7, r3
 8004738:	0018      	movs	r0, r3
 800473a:	2314      	movs	r3, #20
 800473c:	001a      	movs	r2, r3
 800473e:	2100      	movs	r1, #0
 8004740:	f004 fe88 	bl	8009454 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004744:	2414      	movs	r4, #20
 8004746:	193b      	adds	r3, r7, r4
 8004748:	0018      	movs	r0, r3
 800474a:	2328      	movs	r3, #40	; 0x28
 800474c:	001a      	movs	r2, r3
 800474e:	2100      	movs	r1, #0
 8004750:	f004 fe80 	bl	8009454 <memset>
  if(huart->Instance==USART1)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a27      	ldr	r2, [pc, #156]	; (80047f8 <HAL_UART_MspInit+0xcc>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d147      	bne.n	80047ee <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800475e:	193b      	adds	r3, r7, r4
 8004760:	2201      	movs	r2, #1
 8004762:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004764:	193b      	adds	r3, r7, r4
 8004766:	2200      	movs	r2, #0
 8004768:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800476a:	193b      	adds	r3, r7, r4
 800476c:	0018      	movs	r0, r3
 800476e:	f001 fb17 	bl	8005da0 <HAL_RCCEx_PeriphCLKConfig>
 8004772:	1e03      	subs	r3, r0, #0
 8004774:	d001      	beq.n	800477a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004776:	f7ff f9d5 	bl	8003b24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800477a:	4b20      	ldr	r3, [pc, #128]	; (80047fc <HAL_UART_MspInit+0xd0>)
 800477c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800477e:	4b1f      	ldr	r3, [pc, #124]	; (80047fc <HAL_UART_MspInit+0xd0>)
 8004780:	2180      	movs	r1, #128	; 0x80
 8004782:	01c9      	lsls	r1, r1, #7
 8004784:	430a      	orrs	r2, r1
 8004786:	641a      	str	r2, [r3, #64]	; 0x40
 8004788:	4b1c      	ldr	r3, [pc, #112]	; (80047fc <HAL_UART_MspInit+0xd0>)
 800478a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800478c:	2380      	movs	r3, #128	; 0x80
 800478e:	01db      	lsls	r3, r3, #7
 8004790:	4013      	ands	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
 8004794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004796:	4b19      	ldr	r3, [pc, #100]	; (80047fc <HAL_UART_MspInit+0xd0>)
 8004798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800479a:	4b18      	ldr	r3, [pc, #96]	; (80047fc <HAL_UART_MspInit+0xd0>)
 800479c:	2101      	movs	r1, #1
 800479e:	430a      	orrs	r2, r1
 80047a0:	635a      	str	r2, [r3, #52]	; 0x34
 80047a2:	4b16      	ldr	r3, [pc, #88]	; (80047fc <HAL_UART_MspInit+0xd0>)
 80047a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a6:	2201      	movs	r2, #1
 80047a8:	4013      	ands	r3, r2
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80047ae:	213c      	movs	r1, #60	; 0x3c
 80047b0:	187b      	adds	r3, r7, r1
 80047b2:	22c0      	movs	r2, #192	; 0xc0
 80047b4:	00d2      	lsls	r2, r2, #3
 80047b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047b8:	187b      	adds	r3, r7, r1
 80047ba:	2202      	movs	r2, #2
 80047bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047be:	187b      	adds	r3, r7, r1
 80047c0:	2200      	movs	r2, #0
 80047c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047c4:	187b      	adds	r3, r7, r1
 80047c6:	2200      	movs	r2, #0
 80047c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80047ca:	187b      	adds	r3, r7, r1
 80047cc:	2201      	movs	r2, #1
 80047ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047d0:	187a      	adds	r2, r7, r1
 80047d2:	23a0      	movs	r3, #160	; 0xa0
 80047d4:	05db      	lsls	r3, r3, #23
 80047d6:	0011      	movs	r1, r2
 80047d8:	0018      	movs	r0, r3
 80047da:	f000 fb69 	bl	8004eb0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80047de:	2200      	movs	r2, #0
 80047e0:	2100      	movs	r1, #0
 80047e2:	201b      	movs	r0, #27
 80047e4:	f000 fa66 	bl	8004cb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80047e8:	201b      	movs	r0, #27
 80047ea:	f000 fa78 	bl	8004cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80047ee:	46c0      	nop			; (mov r8, r8)
 80047f0:	46bd      	mov	sp, r7
 80047f2:	b015      	add	sp, #84	; 0x54
 80047f4:	bd90      	pop	{r4, r7, pc}
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	40013800 	.word	0x40013800
 80047fc:	40021000 	.word	0x40021000

08004800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004804:	e7fe      	b.n	8004804 <NMI_Handler+0x4>

08004806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800480a:	e7fe      	b.n	800480a <HardFault_Handler+0x4>

0800480c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004810:	46c0      	nop			; (mov r8, r8)
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800481a:	46c0      	nop			; (mov r8, r8)
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004824:	f000 f97e 	bl	8004b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004828:	46c0      	nop			; (mov r8, r8)
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004832:	2001      	movs	r0, #1
 8004834:	f000 fcf6 	bl	8005224 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004838:	2002      	movs	r0, #2
 800483a:	f000 fcf3 	bl	8005224 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800483e:	46c0      	nop			; (mov r8, r8)
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004848:	2004      	movs	r0, #4
 800484a:	f000 fceb 	bl	8005224 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800484e:	2008      	movs	r0, #8
 8004850:	f000 fce8 	bl	8005224 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8004854:	46c0      	nop			; (mov r8, r8)
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004860:	4b03      	ldr	r3, [pc, #12]	; (8004870 <USART1_IRQHandler+0x14>)
 8004862:	0018      	movs	r0, r3
 8004864:	f002 fe84 	bl	8007570 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004868:	46c0      	nop			; (mov r8, r8)
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	46c0      	nop			; (mov r8, r8)
 8004870:	20000430 	.word	0x20000430

08004874 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
  return 1;
 8004878:	2301      	movs	r3, #1
}
 800487a:	0018      	movs	r0, r3
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <_kill>:

int _kill(int pid, int sig)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800488a:	f004 fdb9 	bl	8009400 <__errno>
 800488e:	0003      	movs	r3, r0
 8004890:	2216      	movs	r2, #22
 8004892:	601a      	str	r2, [r3, #0]
  return -1;
 8004894:	2301      	movs	r3, #1
 8004896:	425b      	negs	r3, r3
}
 8004898:	0018      	movs	r0, r3
 800489a:	46bd      	mov	sp, r7
 800489c:	b002      	add	sp, #8
 800489e:	bd80      	pop	{r7, pc}

080048a0 <_exit>:

void _exit (int status)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80048a8:	2301      	movs	r3, #1
 80048aa:	425a      	negs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	0011      	movs	r1, r2
 80048b0:	0018      	movs	r0, r3
 80048b2:	f7ff ffe5 	bl	8004880 <_kill>
  while (1) {}    /* Make sure we hang here */
 80048b6:	e7fe      	b.n	80048b6 <_exit+0x16>

080048b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048c4:	2300      	movs	r3, #0
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	e00a      	b.n	80048e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80048ca:	e000      	b.n	80048ce <_read+0x16>
 80048cc:	bf00      	nop
 80048ce:	0001      	movs	r1, r0
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	1c5a      	adds	r2, r3, #1
 80048d4:	60ba      	str	r2, [r7, #8]
 80048d6:	b2ca      	uxtb	r2, r1
 80048d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	3301      	adds	r3, #1
 80048de:	617b      	str	r3, [r7, #20]
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	dbf0      	blt.n	80048ca <_read+0x12>
  }

  return len;
 80048e8:	687b      	ldr	r3, [r7, #4]
}
 80048ea:	0018      	movs	r0, r3
 80048ec:	46bd      	mov	sp, r7
 80048ee:	b006      	add	sp, #24
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b086      	sub	sp, #24
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	60f8      	str	r0, [r7, #12]
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048fe:	2300      	movs	r3, #0
 8004900:	617b      	str	r3, [r7, #20]
 8004902:	e009      	b.n	8004918 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	1c5a      	adds	r2, r3, #1
 8004908:	60ba      	str	r2, [r7, #8]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	0018      	movs	r0, r3
 800490e:	f7fe fc1b 	bl	8003148 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	3301      	adds	r3, #1
 8004916:	617b      	str	r3, [r7, #20]
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	429a      	cmp	r2, r3
 800491e:	dbf1      	blt.n	8004904 <_write+0x12>
  }
  return len;
 8004920:	687b      	ldr	r3, [r7, #4]
}
 8004922:	0018      	movs	r0, r3
 8004924:	46bd      	mov	sp, r7
 8004926:	b006      	add	sp, #24
 8004928:	bd80      	pop	{r7, pc}

0800492a <_close>:

int _close(int file)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b082      	sub	sp, #8
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004932:	2301      	movs	r3, #1
 8004934:	425b      	negs	r3, r3
}
 8004936:	0018      	movs	r0, r3
 8004938:	46bd      	mov	sp, r7
 800493a:	b002      	add	sp, #8
 800493c:	bd80      	pop	{r7, pc}

0800493e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b082      	sub	sp, #8
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	2280      	movs	r2, #128	; 0x80
 800494c:	0192      	lsls	r2, r2, #6
 800494e:	605a      	str	r2, [r3, #4]
  return 0;
 8004950:	2300      	movs	r3, #0
}
 8004952:	0018      	movs	r0, r3
 8004954:	46bd      	mov	sp, r7
 8004956:	b002      	add	sp, #8
 8004958:	bd80      	pop	{r7, pc}

0800495a <_isatty>:

int _isatty(int file)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b082      	sub	sp, #8
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004962:	2301      	movs	r3, #1
}
 8004964:	0018      	movs	r0, r3
 8004966:	46bd      	mov	sp, r7
 8004968:	b002      	add	sp, #8
 800496a:	bd80      	pop	{r7, pc}

0800496c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004978:	2300      	movs	r3, #0
}
 800497a:	0018      	movs	r0, r3
 800497c:	46bd      	mov	sp, r7
 800497e:	b004      	add	sp, #16
 8004980:	bd80      	pop	{r7, pc}
	...

08004984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800498c:	4a14      	ldr	r2, [pc, #80]	; (80049e0 <_sbrk+0x5c>)
 800498e:	4b15      	ldr	r3, [pc, #84]	; (80049e4 <_sbrk+0x60>)
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004998:	4b13      	ldr	r3, [pc, #76]	; (80049e8 <_sbrk+0x64>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d102      	bne.n	80049a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80049a0:	4b11      	ldr	r3, [pc, #68]	; (80049e8 <_sbrk+0x64>)
 80049a2:	4a12      	ldr	r2, [pc, #72]	; (80049ec <_sbrk+0x68>)
 80049a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80049a6:	4b10      	ldr	r3, [pc, #64]	; (80049e8 <_sbrk+0x64>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	18d3      	adds	r3, r2, r3
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d207      	bcs.n	80049c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80049b4:	f004 fd24 	bl	8009400 <__errno>
 80049b8:	0003      	movs	r3, r0
 80049ba:	220c      	movs	r2, #12
 80049bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80049be:	2301      	movs	r3, #1
 80049c0:	425b      	negs	r3, r3
 80049c2:	e009      	b.n	80049d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80049c4:	4b08      	ldr	r3, [pc, #32]	; (80049e8 <_sbrk+0x64>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80049ca:	4b07      	ldr	r3, [pc, #28]	; (80049e8 <_sbrk+0x64>)
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	18d2      	adds	r2, r2, r3
 80049d2:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <_sbrk+0x64>)
 80049d4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80049d6:	68fb      	ldr	r3, [r7, #12]
}
 80049d8:	0018      	movs	r0, r3
 80049da:	46bd      	mov	sp, r7
 80049dc:	b006      	add	sp, #24
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	20002000 	.word	0x20002000
 80049e4:	000000ff 	.word	0x000000ff
 80049e8:	20000554 	.word	0x20000554
 80049ec:	20000570 	.word	0x20000570

080049f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80049f4:	46c0      	nop			; (mov r8, r8)
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
	...

080049fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80049fc:	480d      	ldr	r0, [pc, #52]	; (8004a34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80049fe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004a00:	f7ff fff6 	bl	80049f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a04:	480c      	ldr	r0, [pc, #48]	; (8004a38 <LoopForever+0x6>)
  ldr r1, =_edata
 8004a06:	490d      	ldr	r1, [pc, #52]	; (8004a3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004a08:	4a0d      	ldr	r2, [pc, #52]	; (8004a40 <LoopForever+0xe>)
  movs r3, #0
 8004a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a0c:	e002      	b.n	8004a14 <LoopCopyDataInit>

08004a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a12:	3304      	adds	r3, #4

08004a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a18:	d3f9      	bcc.n	8004a0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a1a:	4a0a      	ldr	r2, [pc, #40]	; (8004a44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004a1c:	4c0a      	ldr	r4, [pc, #40]	; (8004a48 <LoopForever+0x16>)
  movs r3, #0
 8004a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a20:	e001      	b.n	8004a26 <LoopFillZerobss>

08004a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a24:	3204      	adds	r2, #4

08004a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a28:	d3fb      	bcc.n	8004a22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004a2a:	f004 fcef 	bl	800940c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004a2e:	f7fe fcb9 	bl	80033a4 <main>

08004a32 <LoopForever>:

LoopForever:
  b LoopForever
 8004a32:	e7fe      	b.n	8004a32 <LoopForever>
  ldr   r0, =_estack
 8004a34:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a3c:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8004a40:	0800c77c 	.word	0x0800c77c
  ldr r2, =_sbss
 8004a44:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8004a48:	2000056c 	.word	0x2000056c

08004a4c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004a4c:	e7fe      	b.n	8004a4c <ADC1_IRQHandler>
	...

08004a50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004a56:	1dfb      	adds	r3, r7, #7
 8004a58:	2200      	movs	r2, #0
 8004a5a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a5c:	4b0b      	ldr	r3, [pc, #44]	; (8004a8c <HAL_Init+0x3c>)
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	4b0a      	ldr	r3, [pc, #40]	; (8004a8c <HAL_Init+0x3c>)
 8004a62:	2180      	movs	r1, #128	; 0x80
 8004a64:	0049      	lsls	r1, r1, #1
 8004a66:	430a      	orrs	r2, r1
 8004a68:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	f000 f810 	bl	8004a90 <HAL_InitTick>
 8004a70:	1e03      	subs	r3, r0, #0
 8004a72:	d003      	beq.n	8004a7c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004a74:	1dfb      	adds	r3, r7, #7
 8004a76:	2201      	movs	r2, #1
 8004a78:	701a      	strb	r2, [r3, #0]
 8004a7a:	e001      	b.n	8004a80 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004a7c:	f7ff fcbe 	bl	80043fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004a80:	1dfb      	adds	r3, r7, #7
 8004a82:	781b      	ldrb	r3, [r3, #0]
}
 8004a84:	0018      	movs	r0, r3
 8004a86:	46bd      	mov	sp, r7
 8004a88:	b002      	add	sp, #8
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	40022000 	.word	0x40022000

08004a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a90:	b590      	push	{r4, r7, lr}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004a98:	230f      	movs	r3, #15
 8004a9a:	18fb      	adds	r3, r7, r3
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004aa0:	4b1d      	ldr	r3, [pc, #116]	; (8004b18 <HAL_InitTick+0x88>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d02b      	beq.n	8004b00 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004aa8:	4b1c      	ldr	r3, [pc, #112]	; (8004b1c <HAL_InitTick+0x8c>)
 8004aaa:	681c      	ldr	r4, [r3, #0]
 8004aac:	4b1a      	ldr	r3, [pc, #104]	; (8004b18 <HAL_InitTick+0x88>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	0019      	movs	r1, r3
 8004ab2:	23fa      	movs	r3, #250	; 0xfa
 8004ab4:	0098      	lsls	r0, r3, #2
 8004ab6:	f7fb fb41 	bl	800013c <__udivsi3>
 8004aba:	0003      	movs	r3, r0
 8004abc:	0019      	movs	r1, r3
 8004abe:	0020      	movs	r0, r4
 8004ac0:	f7fb fb3c 	bl	800013c <__udivsi3>
 8004ac4:	0003      	movs	r3, r0
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	f000 f919 	bl	8004cfe <HAL_SYSTICK_Config>
 8004acc:	1e03      	subs	r3, r0, #0
 8004ace:	d112      	bne.n	8004af6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	d80a      	bhi.n	8004aec <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ad6:	6879      	ldr	r1, [r7, #4]
 8004ad8:	2301      	movs	r3, #1
 8004ada:	425b      	negs	r3, r3
 8004adc:	2200      	movs	r2, #0
 8004ade:	0018      	movs	r0, r3
 8004ae0:	f000 f8e8 	bl	8004cb4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004ae4:	4b0e      	ldr	r3, [pc, #56]	; (8004b20 <HAL_InitTick+0x90>)
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	e00d      	b.n	8004b08 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004aec:	230f      	movs	r3, #15
 8004aee:	18fb      	adds	r3, r7, r3
 8004af0:	2201      	movs	r2, #1
 8004af2:	701a      	strb	r2, [r3, #0]
 8004af4:	e008      	b.n	8004b08 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004af6:	230f      	movs	r3, #15
 8004af8:	18fb      	adds	r3, r7, r3
 8004afa:	2201      	movs	r2, #1
 8004afc:	701a      	strb	r2, [r3, #0]
 8004afe:	e003      	b.n	8004b08 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004b00:	230f      	movs	r3, #15
 8004b02:	18fb      	adds	r3, r7, r3
 8004b04:	2201      	movs	r2, #1
 8004b06:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004b08:	230f      	movs	r3, #15
 8004b0a:	18fb      	adds	r3, r7, r3
 8004b0c:	781b      	ldrb	r3, [r3, #0]
}
 8004b0e:	0018      	movs	r0, r3
 8004b10:	46bd      	mov	sp, r7
 8004b12:	b005      	add	sp, #20
 8004b14:	bd90      	pop	{r4, r7, pc}
 8004b16:	46c0      	nop			; (mov r8, r8)
 8004b18:	20000038 	.word	0x20000038
 8004b1c:	20000030 	.word	0x20000030
 8004b20:	20000034 	.word	0x20000034

08004b24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004b28:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <HAL_IncTick+0x1c>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	001a      	movs	r2, r3
 8004b2e:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <HAL_IncTick+0x20>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	18d2      	adds	r2, r2, r3
 8004b34:	4b03      	ldr	r3, [pc, #12]	; (8004b44 <HAL_IncTick+0x20>)
 8004b36:	601a      	str	r2, [r3, #0]
}
 8004b38:	46c0      	nop			; (mov r8, r8)
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	20000038 	.word	0x20000038
 8004b44:	20000558 	.word	0x20000558

08004b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8004b4c:	4b02      	ldr	r3, [pc, #8]	; (8004b58 <HAL_GetTick+0x10>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
}
 8004b50:	0018      	movs	r0, r3
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	46c0      	nop			; (mov r8, r8)
 8004b58:	20000558 	.word	0x20000558

08004b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	0002      	movs	r2, r0
 8004b64:	1dfb      	adds	r3, r7, #7
 8004b66:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004b68:	1dfb      	adds	r3, r7, #7
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	2b7f      	cmp	r3, #127	; 0x7f
 8004b6e:	d809      	bhi.n	8004b84 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b70:	1dfb      	adds	r3, r7, #7
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	001a      	movs	r2, r3
 8004b76:	231f      	movs	r3, #31
 8004b78:	401a      	ands	r2, r3
 8004b7a:	4b04      	ldr	r3, [pc, #16]	; (8004b8c <__NVIC_EnableIRQ+0x30>)
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	4091      	lsls	r1, r2
 8004b80:	000a      	movs	r2, r1
 8004b82:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004b84:	46c0      	nop			; (mov r8, r8)
 8004b86:	46bd      	mov	sp, r7
 8004b88:	b002      	add	sp, #8
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	e000e100 	.word	0xe000e100

08004b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b90:	b590      	push	{r4, r7, lr}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	0002      	movs	r2, r0
 8004b98:	6039      	str	r1, [r7, #0]
 8004b9a:	1dfb      	adds	r3, r7, #7
 8004b9c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004b9e:	1dfb      	adds	r3, r7, #7
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ba4:	d828      	bhi.n	8004bf8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ba6:	4a2f      	ldr	r2, [pc, #188]	; (8004c64 <__NVIC_SetPriority+0xd4>)
 8004ba8:	1dfb      	adds	r3, r7, #7
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	b25b      	sxtb	r3, r3
 8004bae:	089b      	lsrs	r3, r3, #2
 8004bb0:	33c0      	adds	r3, #192	; 0xc0
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	589b      	ldr	r3, [r3, r2]
 8004bb6:	1dfa      	adds	r2, r7, #7
 8004bb8:	7812      	ldrb	r2, [r2, #0]
 8004bba:	0011      	movs	r1, r2
 8004bbc:	2203      	movs	r2, #3
 8004bbe:	400a      	ands	r2, r1
 8004bc0:	00d2      	lsls	r2, r2, #3
 8004bc2:	21ff      	movs	r1, #255	; 0xff
 8004bc4:	4091      	lsls	r1, r2
 8004bc6:	000a      	movs	r2, r1
 8004bc8:	43d2      	mvns	r2, r2
 8004bca:	401a      	ands	r2, r3
 8004bcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	019b      	lsls	r3, r3, #6
 8004bd2:	22ff      	movs	r2, #255	; 0xff
 8004bd4:	401a      	ands	r2, r3
 8004bd6:	1dfb      	adds	r3, r7, #7
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	0018      	movs	r0, r3
 8004bdc:	2303      	movs	r3, #3
 8004bde:	4003      	ands	r3, r0
 8004be0:	00db      	lsls	r3, r3, #3
 8004be2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004be4:	481f      	ldr	r0, [pc, #124]	; (8004c64 <__NVIC_SetPriority+0xd4>)
 8004be6:	1dfb      	adds	r3, r7, #7
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	b25b      	sxtb	r3, r3
 8004bec:	089b      	lsrs	r3, r3, #2
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	33c0      	adds	r3, #192	; 0xc0
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004bf6:	e031      	b.n	8004c5c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004bf8:	4a1b      	ldr	r2, [pc, #108]	; (8004c68 <__NVIC_SetPriority+0xd8>)
 8004bfa:	1dfb      	adds	r3, r7, #7
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	0019      	movs	r1, r3
 8004c00:	230f      	movs	r3, #15
 8004c02:	400b      	ands	r3, r1
 8004c04:	3b08      	subs	r3, #8
 8004c06:	089b      	lsrs	r3, r3, #2
 8004c08:	3306      	adds	r3, #6
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	18d3      	adds	r3, r2, r3
 8004c0e:	3304      	adds	r3, #4
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	1dfa      	adds	r2, r7, #7
 8004c14:	7812      	ldrb	r2, [r2, #0]
 8004c16:	0011      	movs	r1, r2
 8004c18:	2203      	movs	r2, #3
 8004c1a:	400a      	ands	r2, r1
 8004c1c:	00d2      	lsls	r2, r2, #3
 8004c1e:	21ff      	movs	r1, #255	; 0xff
 8004c20:	4091      	lsls	r1, r2
 8004c22:	000a      	movs	r2, r1
 8004c24:	43d2      	mvns	r2, r2
 8004c26:	401a      	ands	r2, r3
 8004c28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	019b      	lsls	r3, r3, #6
 8004c2e:	22ff      	movs	r2, #255	; 0xff
 8004c30:	401a      	ands	r2, r3
 8004c32:	1dfb      	adds	r3, r7, #7
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	0018      	movs	r0, r3
 8004c38:	2303      	movs	r3, #3
 8004c3a:	4003      	ands	r3, r0
 8004c3c:	00db      	lsls	r3, r3, #3
 8004c3e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c40:	4809      	ldr	r0, [pc, #36]	; (8004c68 <__NVIC_SetPriority+0xd8>)
 8004c42:	1dfb      	adds	r3, r7, #7
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	001c      	movs	r4, r3
 8004c48:	230f      	movs	r3, #15
 8004c4a:	4023      	ands	r3, r4
 8004c4c:	3b08      	subs	r3, #8
 8004c4e:	089b      	lsrs	r3, r3, #2
 8004c50:	430a      	orrs	r2, r1
 8004c52:	3306      	adds	r3, #6
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	18c3      	adds	r3, r0, r3
 8004c58:	3304      	adds	r3, #4
 8004c5a:	601a      	str	r2, [r3, #0]
}
 8004c5c:	46c0      	nop			; (mov r8, r8)
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	b003      	add	sp, #12
 8004c62:	bd90      	pop	{r4, r7, pc}
 8004c64:	e000e100 	.word	0xe000e100
 8004c68:	e000ed00 	.word	0xe000ed00

08004c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	1e5a      	subs	r2, r3, #1
 8004c78:	2380      	movs	r3, #128	; 0x80
 8004c7a:	045b      	lsls	r3, r3, #17
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d301      	bcc.n	8004c84 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c80:	2301      	movs	r3, #1
 8004c82:	e010      	b.n	8004ca6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c84:	4b0a      	ldr	r3, [pc, #40]	; (8004cb0 <SysTick_Config+0x44>)
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	3a01      	subs	r2, #1
 8004c8a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	425b      	negs	r3, r3
 8004c90:	2103      	movs	r1, #3
 8004c92:	0018      	movs	r0, r3
 8004c94:	f7ff ff7c 	bl	8004b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c98:	4b05      	ldr	r3, [pc, #20]	; (8004cb0 <SysTick_Config+0x44>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c9e:	4b04      	ldr	r3, [pc, #16]	; (8004cb0 <SysTick_Config+0x44>)
 8004ca0:	2207      	movs	r2, #7
 8004ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	b002      	add	sp, #8
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	46c0      	nop			; (mov r8, r8)
 8004cb0:	e000e010 	.word	0xe000e010

08004cb4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60b9      	str	r1, [r7, #8]
 8004cbc:	607a      	str	r2, [r7, #4]
 8004cbe:	210f      	movs	r1, #15
 8004cc0:	187b      	adds	r3, r7, r1
 8004cc2:	1c02      	adds	r2, r0, #0
 8004cc4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	187b      	adds	r3, r7, r1
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	b25b      	sxtb	r3, r3
 8004cce:	0011      	movs	r1, r2
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	f7ff ff5d 	bl	8004b90 <__NVIC_SetPriority>
}
 8004cd6:	46c0      	nop			; (mov r8, r8)
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	b004      	add	sp, #16
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b082      	sub	sp, #8
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	0002      	movs	r2, r0
 8004ce6:	1dfb      	adds	r3, r7, #7
 8004ce8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cea:	1dfb      	adds	r3, r7, #7
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	b25b      	sxtb	r3, r3
 8004cf0:	0018      	movs	r0, r3
 8004cf2:	f7ff ff33 	bl	8004b5c <__NVIC_EnableIRQ>
}
 8004cf6:	46c0      	nop			; (mov r8, r8)
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	b002      	add	sp, #8
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b082      	sub	sp, #8
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	0018      	movs	r0, r3
 8004d0a:	f7ff ffaf 	bl	8004c6c <SysTick_Config>
 8004d0e:	0003      	movs	r3, r0
}
 8004d10:	0018      	movs	r0, r3
 8004d12:	46bd      	mov	sp, r7
 8004d14:	b002      	add	sp, #8
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e050      	b.n	8004dcc <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2225      	movs	r2, #37	; 0x25
 8004d2e:	5c9b      	ldrb	r3, [r3, r2]
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d008      	beq.n	8004d48 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2204      	movs	r2, #4
 8004d3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2224      	movs	r2, #36	; 0x24
 8004d40:	2100      	movs	r1, #0
 8004d42:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e041      	b.n	8004dcc <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	210e      	movs	r1, #14
 8004d54:	438a      	bics	r2, r1
 8004d56:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d62:	491c      	ldr	r1, [pc, #112]	; (8004dd4 <HAL_DMA_Abort+0xbc>)
 8004d64:	400a      	ands	r2, r1
 8004d66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2101      	movs	r1, #1
 8004d74:	438a      	bics	r2, r1
 8004d76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8004d78:	4b17      	ldr	r3, [pc, #92]	; (8004dd8 <HAL_DMA_Abort+0xc0>)
 8004d7a:	6859      	ldr	r1, [r3, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	221c      	movs	r2, #28
 8004d82:	4013      	ands	r3, r2
 8004d84:	2201      	movs	r2, #1
 8004d86:	409a      	lsls	r2, r3
 8004d88:	4b13      	ldr	r3, [pc, #76]	; (8004dd8 <HAL_DMA_Abort+0xc0>)
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004d96:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00c      	beq.n	8004dba <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004daa:	490a      	ldr	r1, [pc, #40]	; (8004dd4 <HAL_DMA_Abort+0xbc>)
 8004dac:	400a      	ands	r2, r1
 8004dae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004db8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2225      	movs	r2, #37	; 0x25
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2224      	movs	r2, #36	; 0x24
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	0018      	movs	r0, r3
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	b002      	add	sp, #8
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	fffffeff 	.word	0xfffffeff
 8004dd8:	40020000 	.word	0x40020000

08004ddc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004de4:	210f      	movs	r1, #15
 8004de6:	187b      	adds	r3, r7, r1
 8004de8:	2200      	movs	r2, #0
 8004dea:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2225      	movs	r2, #37	; 0x25
 8004df0:	5c9b      	ldrb	r3, [r3, r2]
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d006      	beq.n	8004e06 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2204      	movs	r2, #4
 8004dfc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004dfe:	187b      	adds	r3, r7, r1
 8004e00:	2201      	movs	r2, #1
 8004e02:	701a      	strb	r2, [r3, #0]
 8004e04:	e049      	b.n	8004e9a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	210e      	movs	r1, #14
 8004e12:	438a      	bics	r2, r1
 8004e14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2101      	movs	r1, #1
 8004e22:	438a      	bics	r2, r1
 8004e24:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e30:	491d      	ldr	r1, [pc, #116]	; (8004ea8 <HAL_DMA_Abort_IT+0xcc>)
 8004e32:	400a      	ands	r2, r1
 8004e34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8004e36:	4b1d      	ldr	r3, [pc, #116]	; (8004eac <HAL_DMA_Abort_IT+0xd0>)
 8004e38:	6859      	ldr	r1, [r3, #4]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	221c      	movs	r2, #28
 8004e40:	4013      	ands	r3, r2
 8004e42:	2201      	movs	r2, #1
 8004e44:	409a      	lsls	r2, r3
 8004e46:	4b19      	ldr	r3, [pc, #100]	; (8004eac <HAL_DMA_Abort_IT+0xd0>)
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004e54:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00c      	beq.n	8004e78 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e68:	490f      	ldr	r1, [pc, #60]	; (8004ea8 <HAL_DMA_Abort_IT+0xcc>)
 8004e6a:	400a      	ands	r2, r1
 8004e6c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004e76:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2225      	movs	r2, #37	; 0x25
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2224      	movs	r2, #36	; 0x24
 8004e84:	2100      	movs	r1, #0
 8004e86:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d004      	beq.n	8004e9a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	0010      	movs	r0, r2
 8004e98:	4798      	blx	r3
    }
  }
  return status;
 8004e9a:	230f      	movs	r3, #15
 8004e9c:	18fb      	adds	r3, r7, r3
 8004e9e:	781b      	ldrb	r3, [r3, #0]
}
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	b004      	add	sp, #16
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	fffffeff 	.word	0xfffffeff
 8004eac:	40020000 	.word	0x40020000

08004eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ebe:	e147      	b.n	8005150 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2101      	movs	r1, #1
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4091      	lsls	r1, r2
 8004eca:	000a      	movs	r2, r1
 8004ecc:	4013      	ands	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d100      	bne.n	8004ed8 <HAL_GPIO_Init+0x28>
 8004ed6:	e138      	b.n	800514a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2203      	movs	r2, #3
 8004ede:	4013      	ands	r3, r2
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d005      	beq.n	8004ef0 <HAL_GPIO_Init+0x40>
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	2203      	movs	r2, #3
 8004eea:	4013      	ands	r3, r2
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d130      	bne.n	8004f52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	2203      	movs	r2, #3
 8004efc:	409a      	lsls	r2, r3
 8004efe:	0013      	movs	r3, r2
 8004f00:	43da      	mvns	r2, r3
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	4013      	ands	r3, r2
 8004f06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	68da      	ldr	r2, [r3, #12]
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	005b      	lsls	r3, r3, #1
 8004f10:	409a      	lsls	r2, r3
 8004f12:	0013      	movs	r3, r2
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f26:	2201      	movs	r2, #1
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	409a      	lsls	r2, r3
 8004f2c:	0013      	movs	r3, r2
 8004f2e:	43da      	mvns	r2, r3
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	4013      	ands	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	091b      	lsrs	r3, r3, #4
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	401a      	ands	r2, r3
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	409a      	lsls	r2, r3
 8004f44:	0013      	movs	r3, r2
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2203      	movs	r2, #3
 8004f58:	4013      	ands	r3, r2
 8004f5a:	2b03      	cmp	r3, #3
 8004f5c:	d017      	beq.n	8004f8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	2203      	movs	r2, #3
 8004f6a:	409a      	lsls	r2, r3
 8004f6c:	0013      	movs	r3, r2
 8004f6e:	43da      	mvns	r2, r3
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	4013      	ands	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	689a      	ldr	r2, [r3, #8]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	409a      	lsls	r2, r3
 8004f80:	0013      	movs	r3, r2
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	2203      	movs	r2, #3
 8004f94:	4013      	ands	r3, r2
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d123      	bne.n	8004fe2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	08da      	lsrs	r2, r3, #3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	3208      	adds	r2, #8
 8004fa2:	0092      	lsls	r2, r2, #2
 8004fa4:	58d3      	ldr	r3, [r2, r3]
 8004fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2207      	movs	r2, #7
 8004fac:	4013      	ands	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	220f      	movs	r2, #15
 8004fb2:	409a      	lsls	r2, r3
 8004fb4:	0013      	movs	r3, r2
 8004fb6:	43da      	mvns	r2, r3
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	691a      	ldr	r2, [r3, #16]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2107      	movs	r1, #7
 8004fc6:	400b      	ands	r3, r1
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	409a      	lsls	r2, r3
 8004fcc:	0013      	movs	r3, r2
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	08da      	lsrs	r2, r3, #3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3208      	adds	r2, #8
 8004fdc:	0092      	lsls	r2, r2, #2
 8004fde:	6939      	ldr	r1, [r7, #16]
 8004fe0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	2203      	movs	r2, #3
 8004fee:	409a      	lsls	r2, r3
 8004ff0:	0013      	movs	r3, r2
 8004ff2:	43da      	mvns	r2, r3
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2203      	movs	r2, #3
 8005000:	401a      	ands	r2, r3
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	409a      	lsls	r2, r3
 8005008:	0013      	movs	r3, r2
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	4313      	orrs	r3, r2
 800500e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	23c0      	movs	r3, #192	; 0xc0
 800501c:	029b      	lsls	r3, r3, #10
 800501e:	4013      	ands	r3, r2
 8005020:	d100      	bne.n	8005024 <HAL_GPIO_Init+0x174>
 8005022:	e092      	b.n	800514a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005024:	4a50      	ldr	r2, [pc, #320]	; (8005168 <HAL_GPIO_Init+0x2b8>)
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	089b      	lsrs	r3, r3, #2
 800502a:	3318      	adds	r3, #24
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	589b      	ldr	r3, [r3, r2]
 8005030:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2203      	movs	r2, #3
 8005036:	4013      	ands	r3, r2
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	220f      	movs	r2, #15
 800503c:	409a      	lsls	r2, r3
 800503e:	0013      	movs	r3, r2
 8005040:	43da      	mvns	r2, r3
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	4013      	ands	r3, r2
 8005046:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	23a0      	movs	r3, #160	; 0xa0
 800504c:	05db      	lsls	r3, r3, #23
 800504e:	429a      	cmp	r2, r3
 8005050:	d013      	beq.n	800507a <HAL_GPIO_Init+0x1ca>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a45      	ldr	r2, [pc, #276]	; (800516c <HAL_GPIO_Init+0x2bc>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d00d      	beq.n	8005076 <HAL_GPIO_Init+0x1c6>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a44      	ldr	r2, [pc, #272]	; (8005170 <HAL_GPIO_Init+0x2c0>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d007      	beq.n	8005072 <HAL_GPIO_Init+0x1c2>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a43      	ldr	r2, [pc, #268]	; (8005174 <HAL_GPIO_Init+0x2c4>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d101      	bne.n	800506e <HAL_GPIO_Init+0x1be>
 800506a:	2303      	movs	r3, #3
 800506c:	e006      	b.n	800507c <HAL_GPIO_Init+0x1cc>
 800506e:	2305      	movs	r3, #5
 8005070:	e004      	b.n	800507c <HAL_GPIO_Init+0x1cc>
 8005072:	2302      	movs	r3, #2
 8005074:	e002      	b.n	800507c <HAL_GPIO_Init+0x1cc>
 8005076:	2301      	movs	r3, #1
 8005078:	e000      	b.n	800507c <HAL_GPIO_Init+0x1cc>
 800507a:	2300      	movs	r3, #0
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	2103      	movs	r1, #3
 8005080:	400a      	ands	r2, r1
 8005082:	00d2      	lsls	r2, r2, #3
 8005084:	4093      	lsls	r3, r2
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	4313      	orrs	r3, r2
 800508a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800508c:	4936      	ldr	r1, [pc, #216]	; (8005168 <HAL_GPIO_Init+0x2b8>)
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	089b      	lsrs	r3, r3, #2
 8005092:	3318      	adds	r3, #24
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800509a:	4b33      	ldr	r3, [pc, #204]	; (8005168 <HAL_GPIO_Init+0x2b8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	43da      	mvns	r2, r3
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	4013      	ands	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	2380      	movs	r3, #128	; 0x80
 80050b0:	035b      	lsls	r3, r3, #13
 80050b2:	4013      	ands	r3, r2
 80050b4:	d003      	beq.n	80050be <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80050be:	4b2a      	ldr	r3, [pc, #168]	; (8005168 <HAL_GPIO_Init+0x2b8>)
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80050c4:	4b28      	ldr	r3, [pc, #160]	; (8005168 <HAL_GPIO_Init+0x2b8>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	43da      	mvns	r2, r3
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	4013      	ands	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	2380      	movs	r3, #128	; 0x80
 80050da:	039b      	lsls	r3, r3, #14
 80050dc:	4013      	ands	r3, r2
 80050de:	d003      	beq.n	80050e8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80050e8:	4b1f      	ldr	r3, [pc, #124]	; (8005168 <HAL_GPIO_Init+0x2b8>)
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80050ee:	4a1e      	ldr	r2, [pc, #120]	; (8005168 <HAL_GPIO_Init+0x2b8>)
 80050f0:	2384      	movs	r3, #132	; 0x84
 80050f2:	58d3      	ldr	r3, [r2, r3]
 80050f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	43da      	mvns	r2, r3
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	4013      	ands	r3, r2
 80050fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	2380      	movs	r3, #128	; 0x80
 8005106:	029b      	lsls	r3, r3, #10
 8005108:	4013      	ands	r3, r2
 800510a:	d003      	beq.n	8005114 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	4313      	orrs	r3, r2
 8005112:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005114:	4914      	ldr	r1, [pc, #80]	; (8005168 <HAL_GPIO_Init+0x2b8>)
 8005116:	2284      	movs	r2, #132	; 0x84
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800511c:	4a12      	ldr	r2, [pc, #72]	; (8005168 <HAL_GPIO_Init+0x2b8>)
 800511e:	2380      	movs	r3, #128	; 0x80
 8005120:	58d3      	ldr	r3, [r2, r3]
 8005122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	43da      	mvns	r2, r3
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	4013      	ands	r3, r2
 800512c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	2380      	movs	r3, #128	; 0x80
 8005134:	025b      	lsls	r3, r3, #9
 8005136:	4013      	ands	r3, r2
 8005138:	d003      	beq.n	8005142 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4313      	orrs	r3, r2
 8005140:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005142:	4909      	ldr	r1, [pc, #36]	; (8005168 <HAL_GPIO_Init+0x2b8>)
 8005144:	2280      	movs	r2, #128	; 0x80
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	3301      	adds	r3, #1
 800514e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	40da      	lsrs	r2, r3
 8005158:	1e13      	subs	r3, r2, #0
 800515a:	d000      	beq.n	800515e <HAL_GPIO_Init+0x2ae>
 800515c:	e6b0      	b.n	8004ec0 <HAL_GPIO_Init+0x10>
  }
}
 800515e:	46c0      	nop			; (mov r8, r8)
 8005160:	46c0      	nop			; (mov r8, r8)
 8005162:	46bd      	mov	sp, r7
 8005164:	b006      	add	sp, #24
 8005166:	bd80      	pop	{r7, pc}
 8005168:	40021800 	.word	0x40021800
 800516c:	50000400 	.word	0x50000400
 8005170:	50000800 	.word	0x50000800
 8005174:	50000c00 	.word	0x50000c00

08005178 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	000a      	movs	r2, r1
 8005182:	1cbb      	adds	r3, r7, #2
 8005184:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	1cba      	adds	r2, r7, #2
 800518c:	8812      	ldrh	r2, [r2, #0]
 800518e:	4013      	ands	r3, r2
 8005190:	d004      	beq.n	800519c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005192:	230f      	movs	r3, #15
 8005194:	18fb      	adds	r3, r7, r3
 8005196:	2201      	movs	r2, #1
 8005198:	701a      	strb	r2, [r3, #0]
 800519a:	e003      	b.n	80051a4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800519c:	230f      	movs	r3, #15
 800519e:	18fb      	adds	r3, r7, r3
 80051a0:	2200      	movs	r2, #0
 80051a2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80051a4:	230f      	movs	r3, #15
 80051a6:	18fb      	adds	r3, r7, r3
 80051a8:	781b      	ldrb	r3, [r3, #0]
}
 80051aa:	0018      	movs	r0, r3
 80051ac:	46bd      	mov	sp, r7
 80051ae:	b004      	add	sp, #16
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b082      	sub	sp, #8
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	0008      	movs	r0, r1
 80051bc:	0011      	movs	r1, r2
 80051be:	1cbb      	adds	r3, r7, #2
 80051c0:	1c02      	adds	r2, r0, #0
 80051c2:	801a      	strh	r2, [r3, #0]
 80051c4:	1c7b      	adds	r3, r7, #1
 80051c6:	1c0a      	adds	r2, r1, #0
 80051c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051ca:	1c7b      	adds	r3, r7, #1
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d004      	beq.n	80051dc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80051d2:	1cbb      	adds	r3, r7, #2
 80051d4:	881a      	ldrh	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80051da:	e003      	b.n	80051e4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80051dc:	1cbb      	adds	r3, r7, #2
 80051de:	881a      	ldrh	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80051e4:	46c0      	nop			; (mov r8, r8)
 80051e6:	46bd      	mov	sp, r7
 80051e8:	b002      	add	sp, #8
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	000a      	movs	r2, r1
 80051f6:	1cbb      	adds	r3, r7, #2
 80051f8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005200:	1cbb      	adds	r3, r7, #2
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4013      	ands	r3, r2
 8005208:	041a      	lsls	r2, r3, #16
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	43db      	mvns	r3, r3
 800520e:	1cb9      	adds	r1, r7, #2
 8005210:	8809      	ldrh	r1, [r1, #0]
 8005212:	400b      	ands	r3, r1
 8005214:	431a      	orrs	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	619a      	str	r2, [r3, #24]
}
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	46bd      	mov	sp, r7
 800521e:	b004      	add	sp, #16
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	0002      	movs	r2, r0
 800522c:	1dbb      	adds	r3, r7, #6
 800522e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8005230:	4b10      	ldr	r3, [pc, #64]	; (8005274 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	1dba      	adds	r2, r7, #6
 8005236:	8812      	ldrh	r2, [r2, #0]
 8005238:	4013      	ands	r3, r2
 800523a:	d008      	beq.n	800524e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800523c:	4b0d      	ldr	r3, [pc, #52]	; (8005274 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800523e:	1dba      	adds	r2, r7, #6
 8005240:	8812      	ldrh	r2, [r2, #0]
 8005242:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8005244:	1dbb      	adds	r3, r7, #6
 8005246:	881b      	ldrh	r3, [r3, #0]
 8005248:	0018      	movs	r0, r3
 800524a:	f7fd fb45 	bl	80028d8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800524e:	4b09      	ldr	r3, [pc, #36]	; (8005274 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	1dba      	adds	r2, r7, #6
 8005254:	8812      	ldrh	r2, [r2, #0]
 8005256:	4013      	ands	r3, r2
 8005258:	d008      	beq.n	800526c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800525a:	4b06      	ldr	r3, [pc, #24]	; (8005274 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800525c:	1dba      	adds	r2, r7, #6
 800525e:	8812      	ldrh	r2, [r2, #0]
 8005260:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8005262:	1dbb      	adds	r3, r7, #6
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	0018      	movs	r0, r3
 8005268:	f000 f806 	bl	8005278 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800526c:	46c0      	nop			; (mov r8, r8)
 800526e:	46bd      	mov	sp, r7
 8005270:	b002      	add	sp, #8
 8005272:	bd80      	pop	{r7, pc}
 8005274:	40021800 	.word	0x40021800

08005278 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	0002      	movs	r2, r0
 8005280:	1dbb      	adds	r3, r7, #6
 8005282:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8005284:	46c0      	nop			; (mov r8, r8)
 8005286:	46bd      	mov	sp, r7
 8005288:	b002      	add	sp, #8
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_PWREx_ConfigPVD>:
  * @note   User should take care that rising threshold is higher than falling
  *         one in order to avoid having always PVDO output set.
  * @retval HAL_OK
  */
HAL_StatusTypeDef HAL_PWREx_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PVD level bits only according to PVDLevel value */
  MODIFY_REG(PWR->CR2, (PWR_CR2_PVDFT | PWR_CR2_PVDRT), sConfigPVD->PVDLevel);
 8005294:	4b30      	ldr	r3, [pc, #192]	; (8005358 <HAL_PWREx_ConfigPVD+0xcc>)
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	227e      	movs	r2, #126	; 0x7e
 800529a:	4393      	bics	r3, r2
 800529c:	0019      	movs	r1, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	4b2d      	ldr	r3, [pc, #180]	; (8005358 <HAL_PWREx_ConfigPVD+0xcc>)
 80052a4:	430a      	orrs	r2, r1
 80052a6:	605a      	str	r2, [r3, #4]

  /* Clear any previous config, in case no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 80052a8:	4a2c      	ldr	r2, [pc, #176]	; (800535c <HAL_PWREx_ConfigPVD+0xd0>)
 80052aa:	2384      	movs	r3, #132	; 0x84
 80052ac:	58d3      	ldr	r3, [r2, r3]
 80052ae:	492b      	ldr	r1, [pc, #172]	; (800535c <HAL_PWREx_ConfigPVD+0xd0>)
 80052b0:	4a2b      	ldr	r2, [pc, #172]	; (8005360 <HAL_PWREx_ConfigPVD+0xd4>)
 80052b2:	4013      	ands	r3, r2
 80052b4:	2284      	movs	r2, #132	; 0x84
 80052b6:	508b      	str	r3, [r1, r2]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80052b8:	4a28      	ldr	r2, [pc, #160]	; (800535c <HAL_PWREx_ConfigPVD+0xd0>)
 80052ba:	2380      	movs	r3, #128	; 0x80
 80052bc:	58d3      	ldr	r3, [r2, r3]
 80052be:	4927      	ldr	r1, [pc, #156]	; (800535c <HAL_PWREx_ConfigPVD+0xd0>)
 80052c0:	4a27      	ldr	r2, [pc, #156]	; (8005360 <HAL_PWREx_ConfigPVD+0xd4>)
 80052c2:	4013      	ands	r3, r2
 80052c4:	2280      	movs	r2, #128	; 0x80
 80052c6:	508b      	str	r3, [r1, r2]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 80052c8:	4b24      	ldr	r3, [pc, #144]	; (800535c <HAL_PWREx_ConfigPVD+0xd0>)
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	4b23      	ldr	r3, [pc, #140]	; (800535c <HAL_PWREx_ConfigPVD+0xd0>)
 80052ce:	4924      	ldr	r1, [pc, #144]	; (8005360 <HAL_PWREx_ConfigPVD+0xd4>)
 80052d0:	400a      	ands	r2, r1
 80052d2:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80052d4:	4b21      	ldr	r3, [pc, #132]	; (800535c <HAL_PWREx_ConfigPVD+0xd0>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	4b20      	ldr	r3, [pc, #128]	; (800535c <HAL_PWREx_ConfigPVD+0xd0>)
 80052da:	4921      	ldr	r1, [pc, #132]	; (8005360 <HAL_PWREx_ConfigPVD+0xd4>)
 80052dc:	400a      	ands	r2, r1
 80052de:	601a      	str	r2, [r3, #0]

  /* Configure interrupt mode */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	2380      	movs	r3, #128	; 0x80
 80052e6:	025b      	lsls	r3, r3, #9
 80052e8:	4013      	ands	r3, r2
 80052ea:	d008      	beq.n	80052fe <HAL_PWREx_ConfigPVD+0x72>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80052ec:	4a1b      	ldr	r2, [pc, #108]	; (800535c <HAL_PWREx_ConfigPVD+0xd0>)
 80052ee:	2380      	movs	r3, #128	; 0x80
 80052f0:	58d3      	ldr	r3, [r2, r3]
 80052f2:	491a      	ldr	r1, [pc, #104]	; (800535c <HAL_PWREx_ConfigPVD+0xd0>)
 80052f4:	2280      	movs	r2, #128	; 0x80
 80052f6:	0252      	lsls	r2, r2, #9
 80052f8:	4313      	orrs	r3, r2
 80052fa:	2280      	movs	r2, #128	; 0x80
 80052fc:	508b      	str	r3, [r1, r2]
  }

  /* Configure event mode */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	2380      	movs	r3, #128	; 0x80
 8005304:	029b      	lsls	r3, r3, #10
 8005306:	4013      	ands	r3, r2
 8005308:	d008      	beq.n	800531c <HAL_PWREx_ConfigPVD+0x90>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 800530a:	4a14      	ldr	r2, [pc, #80]	; (800535c <HAL_PWREx_ConfigPVD+0xd0>)
 800530c:	2384      	movs	r3, #132	; 0x84
 800530e:	58d3      	ldr	r3, [r2, r3]
 8005310:	4912      	ldr	r1, [pc, #72]	; (800535c <HAL_PWREx_ConfigPVD+0xd0>)
 8005312:	2280      	movs	r2, #128	; 0x80
 8005314:	0252      	lsls	r2, r2, #9
 8005316:	4313      	orrs	r3, r2
 8005318:	2284      	movs	r2, #132	; 0x84
 800531a:	508b      	str	r3, [r1, r2]
  }

  /* Configure the edge */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	4013      	ands	r3, r2
 8005324:	d006      	beq.n	8005334 <HAL_PWREx_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8005326:	4b0d      	ldr	r3, [pc, #52]	; (800535c <HAL_PWREx_ConfigPVD+0xd0>)
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	4b0c      	ldr	r3, [pc, #48]	; (800535c <HAL_PWREx_ConfigPVD+0xd0>)
 800532c:	2180      	movs	r1, #128	; 0x80
 800532e:	0249      	lsls	r1, r1, #9
 8005330:	430a      	orrs	r2, r1
 8005332:	601a      	str	r2, [r3, #0]
  }

  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	2202      	movs	r2, #2
 800533a:	4013      	ands	r3, r2
 800533c:	d006      	beq.n	800534c <HAL_PWREx_ConfigPVD+0xc0>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800533e:	4b07      	ldr	r3, [pc, #28]	; (800535c <HAL_PWREx_ConfigPVD+0xd0>)
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	4b06      	ldr	r3, [pc, #24]	; (800535c <HAL_PWREx_ConfigPVD+0xd0>)
 8005344:	2180      	movs	r1, #128	; 0x80
 8005346:	0249      	lsls	r1, r1, #9
 8005348:	430a      	orrs	r2, r1
 800534a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	0018      	movs	r0, r3
 8005350:	46bd      	mov	sp, r7
 8005352:	b002      	add	sp, #8
 8005354:	bd80      	pop	{r7, pc}
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	40007000 	.word	0x40007000
 800535c:	40021800 	.word	0x40021800
 8005360:	fffeffff 	.word	0xfffeffff

08005364 <HAL_PWREx_EnablePVD>:
/**
  * @brief  Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWREx_EnablePVD(void)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8005368:	4b04      	ldr	r3, [pc, #16]	; (800537c <HAL_PWREx_EnablePVD+0x18>)
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	4b03      	ldr	r3, [pc, #12]	; (800537c <HAL_PWREx_EnablePVD+0x18>)
 800536e:	2101      	movs	r1, #1
 8005370:	430a      	orrs	r2, r1
 8005372:	605a      	str	r2, [r3, #4]
}
 8005374:	46c0      	nop			; (mov r8, r8)
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	46c0      	nop			; (mov r8, r8)
 800537c:	40007000 	.word	0x40007000

08005380 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005388:	4b19      	ldr	r3, [pc, #100]	; (80053f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a19      	ldr	r2, [pc, #100]	; (80053f4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800538e:	4013      	ands	r3, r2
 8005390:	0019      	movs	r1, r3
 8005392:	4b17      	ldr	r3, [pc, #92]	; (80053f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	430a      	orrs	r2, r1
 8005398:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	2380      	movs	r3, #128	; 0x80
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d11f      	bne.n	80053e4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80053a4:	4b14      	ldr	r3, [pc, #80]	; (80053f8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	0013      	movs	r3, r2
 80053aa:	005b      	lsls	r3, r3, #1
 80053ac:	189b      	adds	r3, r3, r2
 80053ae:	005b      	lsls	r3, r3, #1
 80053b0:	4912      	ldr	r1, [pc, #72]	; (80053fc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80053b2:	0018      	movs	r0, r3
 80053b4:	f7fa fec2 	bl	800013c <__udivsi3>
 80053b8:	0003      	movs	r3, r0
 80053ba:	3301      	adds	r3, #1
 80053bc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80053be:	e008      	b.n	80053d2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d003      	beq.n	80053ce <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	3b01      	subs	r3, #1
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	e001      	b.n	80053d2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e009      	b.n	80053e6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80053d2:	4b07      	ldr	r3, [pc, #28]	; (80053f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80053d4:	695a      	ldr	r2, [r3, #20]
 80053d6:	2380      	movs	r3, #128	; 0x80
 80053d8:	00db      	lsls	r3, r3, #3
 80053da:	401a      	ands	r2, r3
 80053dc:	2380      	movs	r3, #128	; 0x80
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d0ed      	beq.n	80053c0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	0018      	movs	r0, r3
 80053e8:	46bd      	mov	sp, r7
 80053ea:	b004      	add	sp, #16
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	46c0      	nop			; (mov r8, r8)
 80053f0:	40007000 	.word	0x40007000
 80053f4:	fffff9ff 	.word	0xfffff9ff
 80053f8:	20000030 	.word	0x20000030
 80053fc:	000f4240 	.word	0x000f4240

08005400 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005404:	4b03      	ldr	r3, [pc, #12]	; (8005414 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	23e0      	movs	r3, #224	; 0xe0
 800540a:	01db      	lsls	r3, r3, #7
 800540c:	4013      	ands	r3, r2
}
 800540e:	0018      	movs	r0, r3
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	40021000 	.word	0x40021000

08005418 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b088      	sub	sp, #32
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e2fe      	b.n	8005a28 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2201      	movs	r2, #1
 8005430:	4013      	ands	r3, r2
 8005432:	d100      	bne.n	8005436 <HAL_RCC_OscConfig+0x1e>
 8005434:	e07c      	b.n	8005530 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005436:	4bc3      	ldr	r3, [pc, #780]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	2238      	movs	r2, #56	; 0x38
 800543c:	4013      	ands	r3, r2
 800543e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005440:	4bc0      	ldr	r3, [pc, #768]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	2203      	movs	r2, #3
 8005446:	4013      	ands	r3, r2
 8005448:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	2b10      	cmp	r3, #16
 800544e:	d102      	bne.n	8005456 <HAL_RCC_OscConfig+0x3e>
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	2b03      	cmp	r3, #3
 8005454:	d002      	beq.n	800545c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	2b08      	cmp	r3, #8
 800545a:	d10b      	bne.n	8005474 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800545c:	4bb9      	ldr	r3, [pc, #740]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	2380      	movs	r3, #128	; 0x80
 8005462:	029b      	lsls	r3, r3, #10
 8005464:	4013      	ands	r3, r2
 8005466:	d062      	beq.n	800552e <HAL_RCC_OscConfig+0x116>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d15e      	bne.n	800552e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e2d9      	b.n	8005a28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	2380      	movs	r3, #128	; 0x80
 800547a:	025b      	lsls	r3, r3, #9
 800547c:	429a      	cmp	r2, r3
 800547e:	d107      	bne.n	8005490 <HAL_RCC_OscConfig+0x78>
 8005480:	4bb0      	ldr	r3, [pc, #704]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	4baf      	ldr	r3, [pc, #700]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 8005486:	2180      	movs	r1, #128	; 0x80
 8005488:	0249      	lsls	r1, r1, #9
 800548a:	430a      	orrs	r2, r1
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	e020      	b.n	80054d2 <HAL_RCC_OscConfig+0xba>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	23a0      	movs	r3, #160	; 0xa0
 8005496:	02db      	lsls	r3, r3, #11
 8005498:	429a      	cmp	r2, r3
 800549a:	d10e      	bne.n	80054ba <HAL_RCC_OscConfig+0xa2>
 800549c:	4ba9      	ldr	r3, [pc, #676]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	4ba8      	ldr	r3, [pc, #672]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 80054a2:	2180      	movs	r1, #128	; 0x80
 80054a4:	02c9      	lsls	r1, r1, #11
 80054a6:	430a      	orrs	r2, r1
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	4ba6      	ldr	r3, [pc, #664]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	4ba5      	ldr	r3, [pc, #660]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 80054b0:	2180      	movs	r1, #128	; 0x80
 80054b2:	0249      	lsls	r1, r1, #9
 80054b4:	430a      	orrs	r2, r1
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	e00b      	b.n	80054d2 <HAL_RCC_OscConfig+0xba>
 80054ba:	4ba2      	ldr	r3, [pc, #648]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	4ba1      	ldr	r3, [pc, #644]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 80054c0:	49a1      	ldr	r1, [pc, #644]	; (8005748 <HAL_RCC_OscConfig+0x330>)
 80054c2:	400a      	ands	r2, r1
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	4b9f      	ldr	r3, [pc, #636]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	4b9e      	ldr	r3, [pc, #632]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 80054cc:	499f      	ldr	r1, [pc, #636]	; (800574c <HAL_RCC_OscConfig+0x334>)
 80054ce:	400a      	ands	r2, r1
 80054d0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d014      	beq.n	8005504 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054da:	f7ff fb35 	bl	8004b48 <HAL_GetTick>
 80054de:	0003      	movs	r3, r0
 80054e0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054e4:	f7ff fb30 	bl	8004b48 <HAL_GetTick>
 80054e8:	0002      	movs	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b64      	cmp	r3, #100	; 0x64
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e298      	b.n	8005a28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054f6:	4b93      	ldr	r3, [pc, #588]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	2380      	movs	r3, #128	; 0x80
 80054fc:	029b      	lsls	r3, r3, #10
 80054fe:	4013      	ands	r3, r2
 8005500:	d0f0      	beq.n	80054e4 <HAL_RCC_OscConfig+0xcc>
 8005502:	e015      	b.n	8005530 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005504:	f7ff fb20 	bl	8004b48 <HAL_GetTick>
 8005508:	0003      	movs	r3, r0
 800550a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800550c:	e008      	b.n	8005520 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800550e:	f7ff fb1b 	bl	8004b48 <HAL_GetTick>
 8005512:	0002      	movs	r2, r0
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b64      	cmp	r3, #100	; 0x64
 800551a:	d901      	bls.n	8005520 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e283      	b.n	8005a28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005520:	4b88      	ldr	r3, [pc, #544]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	2380      	movs	r3, #128	; 0x80
 8005526:	029b      	lsls	r3, r3, #10
 8005528:	4013      	ands	r3, r2
 800552a:	d1f0      	bne.n	800550e <HAL_RCC_OscConfig+0xf6>
 800552c:	e000      	b.n	8005530 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800552e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2202      	movs	r2, #2
 8005536:	4013      	ands	r3, r2
 8005538:	d100      	bne.n	800553c <HAL_RCC_OscConfig+0x124>
 800553a:	e099      	b.n	8005670 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800553c:	4b81      	ldr	r3, [pc, #516]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	2238      	movs	r2, #56	; 0x38
 8005542:	4013      	ands	r3, r2
 8005544:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005546:	4b7f      	ldr	r3, [pc, #508]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	2203      	movs	r2, #3
 800554c:	4013      	ands	r3, r2
 800554e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	2b10      	cmp	r3, #16
 8005554:	d102      	bne.n	800555c <HAL_RCC_OscConfig+0x144>
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2b02      	cmp	r3, #2
 800555a:	d002      	beq.n	8005562 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d135      	bne.n	80055ce <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005562:	4b78      	ldr	r3, [pc, #480]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	2380      	movs	r3, #128	; 0x80
 8005568:	00db      	lsls	r3, r3, #3
 800556a:	4013      	ands	r3, r2
 800556c:	d005      	beq.n	800557a <HAL_RCC_OscConfig+0x162>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e256      	b.n	8005a28 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800557a:	4b72      	ldr	r3, [pc, #456]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	4a74      	ldr	r2, [pc, #464]	; (8005750 <HAL_RCC_OscConfig+0x338>)
 8005580:	4013      	ands	r3, r2
 8005582:	0019      	movs	r1, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	021a      	lsls	r2, r3, #8
 800558a:	4b6e      	ldr	r3, [pc, #440]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 800558c:	430a      	orrs	r2, r1
 800558e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d112      	bne.n	80055bc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005596:	4b6b      	ldr	r3, [pc, #428]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a6e      	ldr	r2, [pc, #440]	; (8005754 <HAL_RCC_OscConfig+0x33c>)
 800559c:	4013      	ands	r3, r2
 800559e:	0019      	movs	r1, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	691a      	ldr	r2, [r3, #16]
 80055a4:	4b67      	ldr	r3, [pc, #412]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 80055a6:	430a      	orrs	r2, r1
 80055a8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80055aa:	4b66      	ldr	r3, [pc, #408]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	0adb      	lsrs	r3, r3, #11
 80055b0:	2207      	movs	r2, #7
 80055b2:	4013      	ands	r3, r2
 80055b4:	4a68      	ldr	r2, [pc, #416]	; (8005758 <HAL_RCC_OscConfig+0x340>)
 80055b6:	40da      	lsrs	r2, r3
 80055b8:	4b68      	ldr	r3, [pc, #416]	; (800575c <HAL_RCC_OscConfig+0x344>)
 80055ba:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80055bc:	4b68      	ldr	r3, [pc, #416]	; (8005760 <HAL_RCC_OscConfig+0x348>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	0018      	movs	r0, r3
 80055c2:	f7ff fa65 	bl	8004a90 <HAL_InitTick>
 80055c6:	1e03      	subs	r3, r0, #0
 80055c8:	d051      	beq.n	800566e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e22c      	b.n	8005a28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d030      	beq.n	8005638 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80055d6:	4b5b      	ldr	r3, [pc, #364]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a5e      	ldr	r2, [pc, #376]	; (8005754 <HAL_RCC_OscConfig+0x33c>)
 80055dc:	4013      	ands	r3, r2
 80055de:	0019      	movs	r1, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691a      	ldr	r2, [r3, #16]
 80055e4:	4b57      	ldr	r3, [pc, #348]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 80055e6:	430a      	orrs	r2, r1
 80055e8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80055ea:	4b56      	ldr	r3, [pc, #344]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	4b55      	ldr	r3, [pc, #340]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 80055f0:	2180      	movs	r1, #128	; 0x80
 80055f2:	0049      	lsls	r1, r1, #1
 80055f4:	430a      	orrs	r2, r1
 80055f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f8:	f7ff faa6 	bl	8004b48 <HAL_GetTick>
 80055fc:	0003      	movs	r3, r0
 80055fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005600:	e008      	b.n	8005614 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005602:	f7ff faa1 	bl	8004b48 <HAL_GetTick>
 8005606:	0002      	movs	r2, r0
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d901      	bls.n	8005614 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e209      	b.n	8005a28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005614:	4b4b      	ldr	r3, [pc, #300]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	2380      	movs	r3, #128	; 0x80
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	4013      	ands	r3, r2
 800561e:	d0f0      	beq.n	8005602 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005620:	4b48      	ldr	r3, [pc, #288]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	4a4a      	ldr	r2, [pc, #296]	; (8005750 <HAL_RCC_OscConfig+0x338>)
 8005626:	4013      	ands	r3, r2
 8005628:	0019      	movs	r1, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	021a      	lsls	r2, r3, #8
 8005630:	4b44      	ldr	r3, [pc, #272]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 8005632:	430a      	orrs	r2, r1
 8005634:	605a      	str	r2, [r3, #4]
 8005636:	e01b      	b.n	8005670 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005638:	4b42      	ldr	r3, [pc, #264]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	4b41      	ldr	r3, [pc, #260]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 800563e:	4949      	ldr	r1, [pc, #292]	; (8005764 <HAL_RCC_OscConfig+0x34c>)
 8005640:	400a      	ands	r2, r1
 8005642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005644:	f7ff fa80 	bl	8004b48 <HAL_GetTick>
 8005648:	0003      	movs	r3, r0
 800564a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800564c:	e008      	b.n	8005660 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800564e:	f7ff fa7b 	bl	8004b48 <HAL_GetTick>
 8005652:	0002      	movs	r2, r0
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e1e3      	b.n	8005a28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005660:	4b38      	ldr	r3, [pc, #224]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	2380      	movs	r3, #128	; 0x80
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	4013      	ands	r3, r2
 800566a:	d1f0      	bne.n	800564e <HAL_RCC_OscConfig+0x236>
 800566c:	e000      	b.n	8005670 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800566e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2208      	movs	r2, #8
 8005676:	4013      	ands	r3, r2
 8005678:	d047      	beq.n	800570a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800567a:	4b32      	ldr	r3, [pc, #200]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	2238      	movs	r2, #56	; 0x38
 8005680:	4013      	ands	r3, r2
 8005682:	2b18      	cmp	r3, #24
 8005684:	d10a      	bne.n	800569c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005686:	4b2f      	ldr	r3, [pc, #188]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 8005688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800568a:	2202      	movs	r2, #2
 800568c:	4013      	ands	r3, r2
 800568e:	d03c      	beq.n	800570a <HAL_RCC_OscConfig+0x2f2>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d138      	bne.n	800570a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e1c5      	b.n	8005a28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d019      	beq.n	80056d8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80056a4:	4b27      	ldr	r3, [pc, #156]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 80056a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80056a8:	4b26      	ldr	r3, [pc, #152]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 80056aa:	2101      	movs	r1, #1
 80056ac:	430a      	orrs	r2, r1
 80056ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b0:	f7ff fa4a 	bl	8004b48 <HAL_GetTick>
 80056b4:	0003      	movs	r3, r0
 80056b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056b8:	e008      	b.n	80056cc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056ba:	f7ff fa45 	bl	8004b48 <HAL_GetTick>
 80056be:	0002      	movs	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e1ad      	b.n	8005a28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056cc:	4b1d      	ldr	r3, [pc, #116]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 80056ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056d0:	2202      	movs	r2, #2
 80056d2:	4013      	ands	r3, r2
 80056d4:	d0f1      	beq.n	80056ba <HAL_RCC_OscConfig+0x2a2>
 80056d6:	e018      	b.n	800570a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80056d8:	4b1a      	ldr	r3, [pc, #104]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 80056da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80056dc:	4b19      	ldr	r3, [pc, #100]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 80056de:	2101      	movs	r1, #1
 80056e0:	438a      	bics	r2, r1
 80056e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e4:	f7ff fa30 	bl	8004b48 <HAL_GetTick>
 80056e8:	0003      	movs	r3, r0
 80056ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80056ec:	e008      	b.n	8005700 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056ee:	f7ff fa2b 	bl	8004b48 <HAL_GetTick>
 80056f2:	0002      	movs	r2, r0
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d901      	bls.n	8005700 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e193      	b.n	8005a28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005700:	4b10      	ldr	r3, [pc, #64]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 8005702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005704:	2202      	movs	r2, #2
 8005706:	4013      	ands	r3, r2
 8005708:	d1f1      	bne.n	80056ee <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2204      	movs	r2, #4
 8005710:	4013      	ands	r3, r2
 8005712:	d100      	bne.n	8005716 <HAL_RCC_OscConfig+0x2fe>
 8005714:	e0c6      	b.n	80058a4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005716:	231f      	movs	r3, #31
 8005718:	18fb      	adds	r3, r7, r3
 800571a:	2200      	movs	r2, #0
 800571c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800571e:	4b09      	ldr	r3, [pc, #36]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	2238      	movs	r2, #56	; 0x38
 8005724:	4013      	ands	r3, r2
 8005726:	2b20      	cmp	r3, #32
 8005728:	d11e      	bne.n	8005768 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800572a:	4b06      	ldr	r3, [pc, #24]	; (8005744 <HAL_RCC_OscConfig+0x32c>)
 800572c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800572e:	2202      	movs	r2, #2
 8005730:	4013      	ands	r3, r2
 8005732:	d100      	bne.n	8005736 <HAL_RCC_OscConfig+0x31e>
 8005734:	e0b6      	b.n	80058a4 <HAL_RCC_OscConfig+0x48c>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d000      	beq.n	8005740 <HAL_RCC_OscConfig+0x328>
 800573e:	e0b1      	b.n	80058a4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e171      	b.n	8005a28 <HAL_RCC_OscConfig+0x610>
 8005744:	40021000 	.word	0x40021000
 8005748:	fffeffff 	.word	0xfffeffff
 800574c:	fffbffff 	.word	0xfffbffff
 8005750:	ffff80ff 	.word	0xffff80ff
 8005754:	ffffc7ff 	.word	0xffffc7ff
 8005758:	00f42400 	.word	0x00f42400
 800575c:	20000030 	.word	0x20000030
 8005760:	20000034 	.word	0x20000034
 8005764:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005768:	4bb1      	ldr	r3, [pc, #708]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 800576a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800576c:	2380      	movs	r3, #128	; 0x80
 800576e:	055b      	lsls	r3, r3, #21
 8005770:	4013      	ands	r3, r2
 8005772:	d101      	bne.n	8005778 <HAL_RCC_OscConfig+0x360>
 8005774:	2301      	movs	r3, #1
 8005776:	e000      	b.n	800577a <HAL_RCC_OscConfig+0x362>
 8005778:	2300      	movs	r3, #0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d011      	beq.n	80057a2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800577e:	4bac      	ldr	r3, [pc, #688]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 8005780:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005782:	4bab      	ldr	r3, [pc, #684]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 8005784:	2180      	movs	r1, #128	; 0x80
 8005786:	0549      	lsls	r1, r1, #21
 8005788:	430a      	orrs	r2, r1
 800578a:	63da      	str	r2, [r3, #60]	; 0x3c
 800578c:	4ba8      	ldr	r3, [pc, #672]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 800578e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005790:	2380      	movs	r3, #128	; 0x80
 8005792:	055b      	lsls	r3, r3, #21
 8005794:	4013      	ands	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]
 8005798:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800579a:	231f      	movs	r3, #31
 800579c:	18fb      	adds	r3, r7, r3
 800579e:	2201      	movs	r2, #1
 80057a0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057a2:	4ba4      	ldr	r3, [pc, #656]	; (8005a34 <HAL_RCC_OscConfig+0x61c>)
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	2380      	movs	r3, #128	; 0x80
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	4013      	ands	r3, r2
 80057ac:	d11a      	bne.n	80057e4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057ae:	4ba1      	ldr	r3, [pc, #644]	; (8005a34 <HAL_RCC_OscConfig+0x61c>)
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	4ba0      	ldr	r3, [pc, #640]	; (8005a34 <HAL_RCC_OscConfig+0x61c>)
 80057b4:	2180      	movs	r1, #128	; 0x80
 80057b6:	0049      	lsls	r1, r1, #1
 80057b8:	430a      	orrs	r2, r1
 80057ba:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80057bc:	f7ff f9c4 	bl	8004b48 <HAL_GetTick>
 80057c0:	0003      	movs	r3, r0
 80057c2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057c4:	e008      	b.n	80057d8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057c6:	f7ff f9bf 	bl	8004b48 <HAL_GetTick>
 80057ca:	0002      	movs	r2, r0
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d901      	bls.n	80057d8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e127      	b.n	8005a28 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057d8:	4b96      	ldr	r3, [pc, #600]	; (8005a34 <HAL_RCC_OscConfig+0x61c>)
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	2380      	movs	r3, #128	; 0x80
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	4013      	ands	r3, r2
 80057e2:	d0f0      	beq.n	80057c6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d106      	bne.n	80057fa <HAL_RCC_OscConfig+0x3e2>
 80057ec:	4b90      	ldr	r3, [pc, #576]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 80057ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80057f0:	4b8f      	ldr	r3, [pc, #572]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 80057f2:	2101      	movs	r1, #1
 80057f4:	430a      	orrs	r2, r1
 80057f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80057f8:	e01c      	b.n	8005834 <HAL_RCC_OscConfig+0x41c>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	2b05      	cmp	r3, #5
 8005800:	d10c      	bne.n	800581c <HAL_RCC_OscConfig+0x404>
 8005802:	4b8b      	ldr	r3, [pc, #556]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 8005804:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005806:	4b8a      	ldr	r3, [pc, #552]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 8005808:	2104      	movs	r1, #4
 800580a:	430a      	orrs	r2, r1
 800580c:	65da      	str	r2, [r3, #92]	; 0x5c
 800580e:	4b88      	ldr	r3, [pc, #544]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 8005810:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005812:	4b87      	ldr	r3, [pc, #540]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 8005814:	2101      	movs	r1, #1
 8005816:	430a      	orrs	r2, r1
 8005818:	65da      	str	r2, [r3, #92]	; 0x5c
 800581a:	e00b      	b.n	8005834 <HAL_RCC_OscConfig+0x41c>
 800581c:	4b84      	ldr	r3, [pc, #528]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 800581e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005820:	4b83      	ldr	r3, [pc, #524]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 8005822:	2101      	movs	r1, #1
 8005824:	438a      	bics	r2, r1
 8005826:	65da      	str	r2, [r3, #92]	; 0x5c
 8005828:	4b81      	ldr	r3, [pc, #516]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 800582a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800582c:	4b80      	ldr	r3, [pc, #512]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 800582e:	2104      	movs	r1, #4
 8005830:	438a      	bics	r2, r1
 8005832:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d014      	beq.n	8005866 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583c:	f7ff f984 	bl	8004b48 <HAL_GetTick>
 8005840:	0003      	movs	r3, r0
 8005842:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005844:	e009      	b.n	800585a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005846:	f7ff f97f 	bl	8004b48 <HAL_GetTick>
 800584a:	0002      	movs	r2, r0
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	4a79      	ldr	r2, [pc, #484]	; (8005a38 <HAL_RCC_OscConfig+0x620>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e0e6      	b.n	8005a28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800585a:	4b75      	ldr	r3, [pc, #468]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 800585c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800585e:	2202      	movs	r2, #2
 8005860:	4013      	ands	r3, r2
 8005862:	d0f0      	beq.n	8005846 <HAL_RCC_OscConfig+0x42e>
 8005864:	e013      	b.n	800588e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005866:	f7ff f96f 	bl	8004b48 <HAL_GetTick>
 800586a:	0003      	movs	r3, r0
 800586c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800586e:	e009      	b.n	8005884 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005870:	f7ff f96a 	bl	8004b48 <HAL_GetTick>
 8005874:	0002      	movs	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	4a6f      	ldr	r2, [pc, #444]	; (8005a38 <HAL_RCC_OscConfig+0x620>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d901      	bls.n	8005884 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e0d1      	b.n	8005a28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005884:	4b6a      	ldr	r3, [pc, #424]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 8005886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005888:	2202      	movs	r2, #2
 800588a:	4013      	ands	r3, r2
 800588c:	d1f0      	bne.n	8005870 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800588e:	231f      	movs	r3, #31
 8005890:	18fb      	adds	r3, r7, r3
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d105      	bne.n	80058a4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005898:	4b65      	ldr	r3, [pc, #404]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 800589a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800589c:	4b64      	ldr	r3, [pc, #400]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 800589e:	4967      	ldr	r1, [pc, #412]	; (8005a3c <HAL_RCC_OscConfig+0x624>)
 80058a0:	400a      	ands	r2, r1
 80058a2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	69db      	ldr	r3, [r3, #28]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d100      	bne.n	80058ae <HAL_RCC_OscConfig+0x496>
 80058ac:	e0bb      	b.n	8005a26 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058ae:	4b60      	ldr	r3, [pc, #384]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	2238      	movs	r2, #56	; 0x38
 80058b4:	4013      	ands	r3, r2
 80058b6:	2b10      	cmp	r3, #16
 80058b8:	d100      	bne.n	80058bc <HAL_RCC_OscConfig+0x4a4>
 80058ba:	e07b      	b.n	80059b4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	69db      	ldr	r3, [r3, #28]
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d156      	bne.n	8005972 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058c4:	4b5a      	ldr	r3, [pc, #360]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	4b59      	ldr	r3, [pc, #356]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 80058ca:	495d      	ldr	r1, [pc, #372]	; (8005a40 <HAL_RCC_OscConfig+0x628>)
 80058cc:	400a      	ands	r2, r1
 80058ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d0:	f7ff f93a 	bl	8004b48 <HAL_GetTick>
 80058d4:	0003      	movs	r3, r0
 80058d6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058d8:	e008      	b.n	80058ec <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058da:	f7ff f935 	bl	8004b48 <HAL_GetTick>
 80058de:	0002      	movs	r2, r0
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d901      	bls.n	80058ec <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e09d      	b.n	8005a28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058ec:	4b50      	ldr	r3, [pc, #320]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	2380      	movs	r3, #128	; 0x80
 80058f2:	049b      	lsls	r3, r3, #18
 80058f4:	4013      	ands	r3, r2
 80058f6:	d1f0      	bne.n	80058da <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058f8:	4b4d      	ldr	r3, [pc, #308]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	4a51      	ldr	r2, [pc, #324]	; (8005a44 <HAL_RCC_OscConfig+0x62c>)
 80058fe:	4013      	ands	r3, r2
 8005900:	0019      	movs	r1, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1a      	ldr	r2, [r3, #32]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	431a      	orrs	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005910:	021b      	lsls	r3, r3, #8
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005918:	431a      	orrs	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005924:	431a      	orrs	r2, r3
 8005926:	4b42      	ldr	r3, [pc, #264]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 8005928:	430a      	orrs	r2, r1
 800592a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800592c:	4b40      	ldr	r3, [pc, #256]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	4b3f      	ldr	r3, [pc, #252]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 8005932:	2180      	movs	r1, #128	; 0x80
 8005934:	0449      	lsls	r1, r1, #17
 8005936:	430a      	orrs	r2, r1
 8005938:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800593a:	4b3d      	ldr	r3, [pc, #244]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	4b3c      	ldr	r3, [pc, #240]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 8005940:	2180      	movs	r1, #128	; 0x80
 8005942:	0549      	lsls	r1, r1, #21
 8005944:	430a      	orrs	r2, r1
 8005946:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005948:	f7ff f8fe 	bl	8004b48 <HAL_GetTick>
 800594c:	0003      	movs	r3, r0
 800594e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005950:	e008      	b.n	8005964 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005952:	f7ff f8f9 	bl	8004b48 <HAL_GetTick>
 8005956:	0002      	movs	r2, r0
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d901      	bls.n	8005964 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e061      	b.n	8005a28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005964:	4b32      	ldr	r3, [pc, #200]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	2380      	movs	r3, #128	; 0x80
 800596a:	049b      	lsls	r3, r3, #18
 800596c:	4013      	ands	r3, r2
 800596e:	d0f0      	beq.n	8005952 <HAL_RCC_OscConfig+0x53a>
 8005970:	e059      	b.n	8005a26 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005972:	4b2f      	ldr	r3, [pc, #188]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	4b2e      	ldr	r3, [pc, #184]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 8005978:	4931      	ldr	r1, [pc, #196]	; (8005a40 <HAL_RCC_OscConfig+0x628>)
 800597a:	400a      	ands	r2, r1
 800597c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597e:	f7ff f8e3 	bl	8004b48 <HAL_GetTick>
 8005982:	0003      	movs	r3, r0
 8005984:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005988:	f7ff f8de 	bl	8004b48 <HAL_GetTick>
 800598c:	0002      	movs	r2, r0
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e046      	b.n	8005a28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800599a:	4b25      	ldr	r3, [pc, #148]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	2380      	movs	r3, #128	; 0x80
 80059a0:	049b      	lsls	r3, r3, #18
 80059a2:	4013      	ands	r3, r2
 80059a4:	d1f0      	bne.n	8005988 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80059a6:	4b22      	ldr	r3, [pc, #136]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 80059a8:	68da      	ldr	r2, [r3, #12]
 80059aa:	4b21      	ldr	r3, [pc, #132]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 80059ac:	4926      	ldr	r1, [pc, #152]	; (8005a48 <HAL_RCC_OscConfig+0x630>)
 80059ae:	400a      	ands	r2, r1
 80059b0:	60da      	str	r2, [r3, #12]
 80059b2:	e038      	b.n	8005a26 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	69db      	ldr	r3, [r3, #28]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d101      	bne.n	80059c0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e033      	b.n	8005a28 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80059c0:	4b1b      	ldr	r3, [pc, #108]	; (8005a30 <HAL_RCC_OscConfig+0x618>)
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2203      	movs	r2, #3
 80059ca:	401a      	ands	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d126      	bne.n	8005a22 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	2270      	movs	r2, #112	; 0x70
 80059d8:	401a      	ands	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059de:	429a      	cmp	r2, r3
 80059e0:	d11f      	bne.n	8005a22 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	23fe      	movs	r3, #254	; 0xfe
 80059e6:	01db      	lsls	r3, r3, #7
 80059e8:	401a      	ands	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ee:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d116      	bne.n	8005a22 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	23f8      	movs	r3, #248	; 0xf8
 80059f8:	039b      	lsls	r3, r3, #14
 80059fa:	401a      	ands	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d10e      	bne.n	8005a22 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	23e0      	movs	r3, #224	; 0xe0
 8005a08:	051b      	lsls	r3, r3, #20
 8005a0a:	401a      	ands	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d106      	bne.n	8005a22 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	0f5b      	lsrs	r3, r3, #29
 8005a18:	075a      	lsls	r2, r3, #29
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d001      	beq.n	8005a26 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e000      	b.n	8005a28 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	0018      	movs	r0, r3
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	b008      	add	sp, #32
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	40021000 	.word	0x40021000
 8005a34:	40007000 	.word	0x40007000
 8005a38:	00001388 	.word	0x00001388
 8005a3c:	efffffff 	.word	0xefffffff
 8005a40:	feffffff 	.word	0xfeffffff
 8005a44:	11c1808c 	.word	0x11c1808c
 8005a48:	eefefffc 	.word	0xeefefffc

08005a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d101      	bne.n	8005a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e0e9      	b.n	8005c34 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a60:	4b76      	ldr	r3, [pc, #472]	; (8005c3c <HAL_RCC_ClockConfig+0x1f0>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2207      	movs	r2, #7
 8005a66:	4013      	ands	r3, r2
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d91e      	bls.n	8005aac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a6e:	4b73      	ldr	r3, [pc, #460]	; (8005c3c <HAL_RCC_ClockConfig+0x1f0>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2207      	movs	r2, #7
 8005a74:	4393      	bics	r3, r2
 8005a76:	0019      	movs	r1, r3
 8005a78:	4b70      	ldr	r3, [pc, #448]	; (8005c3c <HAL_RCC_ClockConfig+0x1f0>)
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005a80:	f7ff f862 	bl	8004b48 <HAL_GetTick>
 8005a84:	0003      	movs	r3, r0
 8005a86:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005a88:	e009      	b.n	8005a9e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a8a:	f7ff f85d 	bl	8004b48 <HAL_GetTick>
 8005a8e:	0002      	movs	r2, r0
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	4a6a      	ldr	r2, [pc, #424]	; (8005c40 <HAL_RCC_ClockConfig+0x1f4>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e0ca      	b.n	8005c34 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005a9e:	4b67      	ldr	r3, [pc, #412]	; (8005c3c <HAL_RCC_ClockConfig+0x1f0>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2207      	movs	r2, #7
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d1ee      	bne.n	8005a8a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	d015      	beq.n	8005ae2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2204      	movs	r2, #4
 8005abc:	4013      	ands	r3, r2
 8005abe:	d006      	beq.n	8005ace <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005ac0:	4b60      	ldr	r3, [pc, #384]	; (8005c44 <HAL_RCC_ClockConfig+0x1f8>)
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	4b5f      	ldr	r3, [pc, #380]	; (8005c44 <HAL_RCC_ClockConfig+0x1f8>)
 8005ac6:	21e0      	movs	r1, #224	; 0xe0
 8005ac8:	01c9      	lsls	r1, r1, #7
 8005aca:	430a      	orrs	r2, r1
 8005acc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ace:	4b5d      	ldr	r3, [pc, #372]	; (8005c44 <HAL_RCC_ClockConfig+0x1f8>)
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	4a5d      	ldr	r2, [pc, #372]	; (8005c48 <HAL_RCC_ClockConfig+0x1fc>)
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	0019      	movs	r1, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	4b59      	ldr	r3, [pc, #356]	; (8005c44 <HAL_RCC_ClockConfig+0x1f8>)
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	4013      	ands	r3, r2
 8005aea:	d057      	beq.n	8005b9c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d107      	bne.n	8005b04 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005af4:	4b53      	ldr	r3, [pc, #332]	; (8005c44 <HAL_RCC_ClockConfig+0x1f8>)
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	2380      	movs	r3, #128	; 0x80
 8005afa:	029b      	lsls	r3, r3, #10
 8005afc:	4013      	ands	r3, r2
 8005afe:	d12b      	bne.n	8005b58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e097      	b.n	8005c34 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d107      	bne.n	8005b1c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b0c:	4b4d      	ldr	r3, [pc, #308]	; (8005c44 <HAL_RCC_ClockConfig+0x1f8>)
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	2380      	movs	r3, #128	; 0x80
 8005b12:	049b      	lsls	r3, r3, #18
 8005b14:	4013      	ands	r3, r2
 8005b16:	d11f      	bne.n	8005b58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e08b      	b.n	8005c34 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d107      	bne.n	8005b34 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b24:	4b47      	ldr	r3, [pc, #284]	; (8005c44 <HAL_RCC_ClockConfig+0x1f8>)
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	2380      	movs	r3, #128	; 0x80
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	d113      	bne.n	8005b58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e07f      	b.n	8005c34 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	2b03      	cmp	r3, #3
 8005b3a:	d106      	bne.n	8005b4a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b3c:	4b41      	ldr	r3, [pc, #260]	; (8005c44 <HAL_RCC_ClockConfig+0x1f8>)
 8005b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b40:	2202      	movs	r2, #2
 8005b42:	4013      	ands	r3, r2
 8005b44:	d108      	bne.n	8005b58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e074      	b.n	8005c34 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b4a:	4b3e      	ldr	r3, [pc, #248]	; (8005c44 <HAL_RCC_ClockConfig+0x1f8>)
 8005b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b4e:	2202      	movs	r2, #2
 8005b50:	4013      	ands	r3, r2
 8005b52:	d101      	bne.n	8005b58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e06d      	b.n	8005c34 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b58:	4b3a      	ldr	r3, [pc, #232]	; (8005c44 <HAL_RCC_ClockConfig+0x1f8>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	2207      	movs	r2, #7
 8005b5e:	4393      	bics	r3, r2
 8005b60:	0019      	movs	r1, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	4b37      	ldr	r3, [pc, #220]	; (8005c44 <HAL_RCC_ClockConfig+0x1f8>)
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b6c:	f7fe ffec 	bl	8004b48 <HAL_GetTick>
 8005b70:	0003      	movs	r3, r0
 8005b72:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b74:	e009      	b.n	8005b8a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b76:	f7fe ffe7 	bl	8004b48 <HAL_GetTick>
 8005b7a:	0002      	movs	r2, r0
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	4a2f      	ldr	r2, [pc, #188]	; (8005c40 <HAL_RCC_ClockConfig+0x1f4>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d901      	bls.n	8005b8a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e054      	b.n	8005c34 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b8a:	4b2e      	ldr	r3, [pc, #184]	; (8005c44 <HAL_RCC_ClockConfig+0x1f8>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	2238      	movs	r2, #56	; 0x38
 8005b90:	401a      	ands	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d1ec      	bne.n	8005b76 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b9c:	4b27      	ldr	r3, [pc, #156]	; (8005c3c <HAL_RCC_ClockConfig+0x1f0>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2207      	movs	r2, #7
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d21e      	bcs.n	8005be8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005baa:	4b24      	ldr	r3, [pc, #144]	; (8005c3c <HAL_RCC_ClockConfig+0x1f0>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2207      	movs	r2, #7
 8005bb0:	4393      	bics	r3, r2
 8005bb2:	0019      	movs	r1, r3
 8005bb4:	4b21      	ldr	r3, [pc, #132]	; (8005c3c <HAL_RCC_ClockConfig+0x1f0>)
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005bbc:	f7fe ffc4 	bl	8004b48 <HAL_GetTick>
 8005bc0:	0003      	movs	r3, r0
 8005bc2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005bc4:	e009      	b.n	8005bda <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bc6:	f7fe ffbf 	bl	8004b48 <HAL_GetTick>
 8005bca:	0002      	movs	r2, r0
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	4a1b      	ldr	r2, [pc, #108]	; (8005c40 <HAL_RCC_ClockConfig+0x1f4>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d901      	bls.n	8005bda <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e02c      	b.n	8005c34 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005bda:	4b18      	ldr	r3, [pc, #96]	; (8005c3c <HAL_RCC_ClockConfig+0x1f0>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2207      	movs	r2, #7
 8005be0:	4013      	ands	r3, r2
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d1ee      	bne.n	8005bc6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2204      	movs	r2, #4
 8005bee:	4013      	ands	r3, r2
 8005bf0:	d009      	beq.n	8005c06 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005bf2:	4b14      	ldr	r3, [pc, #80]	; (8005c44 <HAL_RCC_ClockConfig+0x1f8>)
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	4a15      	ldr	r2, [pc, #84]	; (8005c4c <HAL_RCC_ClockConfig+0x200>)
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	0019      	movs	r1, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68da      	ldr	r2, [r3, #12]
 8005c00:	4b10      	ldr	r3, [pc, #64]	; (8005c44 <HAL_RCC_ClockConfig+0x1f8>)
 8005c02:	430a      	orrs	r2, r1
 8005c04:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005c06:	f000 f829 	bl	8005c5c <HAL_RCC_GetSysClockFreq>
 8005c0a:	0001      	movs	r1, r0
 8005c0c:	4b0d      	ldr	r3, [pc, #52]	; (8005c44 <HAL_RCC_ClockConfig+0x1f8>)
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	0a1b      	lsrs	r3, r3, #8
 8005c12:	220f      	movs	r2, #15
 8005c14:	401a      	ands	r2, r3
 8005c16:	4b0e      	ldr	r3, [pc, #56]	; (8005c50 <HAL_RCC_ClockConfig+0x204>)
 8005c18:	0092      	lsls	r2, r2, #2
 8005c1a:	58d3      	ldr	r3, [r2, r3]
 8005c1c:	221f      	movs	r2, #31
 8005c1e:	4013      	ands	r3, r2
 8005c20:	000a      	movs	r2, r1
 8005c22:	40da      	lsrs	r2, r3
 8005c24:	4b0b      	ldr	r3, [pc, #44]	; (8005c54 <HAL_RCC_ClockConfig+0x208>)
 8005c26:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005c28:	4b0b      	ldr	r3, [pc, #44]	; (8005c58 <HAL_RCC_ClockConfig+0x20c>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	f7fe ff2f 	bl	8004a90 <HAL_InitTick>
 8005c32:	0003      	movs	r3, r0
}
 8005c34:	0018      	movs	r0, r3
 8005c36:	46bd      	mov	sp, r7
 8005c38:	b004      	add	sp, #16
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	40022000 	.word	0x40022000
 8005c40:	00001388 	.word	0x00001388
 8005c44:	40021000 	.word	0x40021000
 8005c48:	fffff0ff 	.word	0xfffff0ff
 8005c4c:	ffff8fff 	.word	0xffff8fff
 8005c50:	0800c2b8 	.word	0x0800c2b8
 8005c54:	20000030 	.word	0x20000030
 8005c58:	20000034 	.word	0x20000034

08005c5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c62:	4b3c      	ldr	r3, [pc, #240]	; (8005d54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	2238      	movs	r2, #56	; 0x38
 8005c68:	4013      	ands	r3, r2
 8005c6a:	d10f      	bne.n	8005c8c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005c6c:	4b39      	ldr	r3, [pc, #228]	; (8005d54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	0adb      	lsrs	r3, r3, #11
 8005c72:	2207      	movs	r2, #7
 8005c74:	4013      	ands	r3, r2
 8005c76:	2201      	movs	r2, #1
 8005c78:	409a      	lsls	r2, r3
 8005c7a:	0013      	movs	r3, r2
 8005c7c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005c7e:	6839      	ldr	r1, [r7, #0]
 8005c80:	4835      	ldr	r0, [pc, #212]	; (8005d58 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005c82:	f7fa fa5b 	bl	800013c <__udivsi3>
 8005c86:	0003      	movs	r3, r0
 8005c88:	613b      	str	r3, [r7, #16]
 8005c8a:	e05d      	b.n	8005d48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c8c:	4b31      	ldr	r3, [pc, #196]	; (8005d54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	2238      	movs	r2, #56	; 0x38
 8005c92:	4013      	ands	r3, r2
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d102      	bne.n	8005c9e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c98:	4b30      	ldr	r3, [pc, #192]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x100>)
 8005c9a:	613b      	str	r3, [r7, #16]
 8005c9c:	e054      	b.n	8005d48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c9e:	4b2d      	ldr	r3, [pc, #180]	; (8005d54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	2238      	movs	r2, #56	; 0x38
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	2b10      	cmp	r3, #16
 8005ca8:	d138      	bne.n	8005d1c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005caa:	4b2a      	ldr	r3, [pc, #168]	; (8005d54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	2203      	movs	r2, #3
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005cb4:	4b27      	ldr	r3, [pc, #156]	; (8005d54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	091b      	lsrs	r3, r3, #4
 8005cba:	2207      	movs	r2, #7
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2b03      	cmp	r3, #3
 8005cc6:	d10d      	bne.n	8005ce4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005cc8:	68b9      	ldr	r1, [r7, #8]
 8005cca:	4824      	ldr	r0, [pc, #144]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x100>)
 8005ccc:	f7fa fa36 	bl	800013c <__udivsi3>
 8005cd0:	0003      	movs	r3, r0
 8005cd2:	0019      	movs	r1, r3
 8005cd4:	4b1f      	ldr	r3, [pc, #124]	; (8005d54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	0a1b      	lsrs	r3, r3, #8
 8005cda:	227f      	movs	r2, #127	; 0x7f
 8005cdc:	4013      	ands	r3, r2
 8005cde:	434b      	muls	r3, r1
 8005ce0:	617b      	str	r3, [r7, #20]
        break;
 8005ce2:	e00d      	b.n	8005d00 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005ce4:	68b9      	ldr	r1, [r7, #8]
 8005ce6:	481c      	ldr	r0, [pc, #112]	; (8005d58 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005ce8:	f7fa fa28 	bl	800013c <__udivsi3>
 8005cec:	0003      	movs	r3, r0
 8005cee:	0019      	movs	r1, r3
 8005cf0:	4b18      	ldr	r3, [pc, #96]	; (8005d54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	0a1b      	lsrs	r3, r3, #8
 8005cf6:	227f      	movs	r2, #127	; 0x7f
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	434b      	muls	r3, r1
 8005cfc:	617b      	str	r3, [r7, #20]
        break;
 8005cfe:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005d00:	4b14      	ldr	r3, [pc, #80]	; (8005d54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	0f5b      	lsrs	r3, r3, #29
 8005d06:	2207      	movs	r2, #7
 8005d08:	4013      	ands	r3, r2
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005d0e:	6879      	ldr	r1, [r7, #4]
 8005d10:	6978      	ldr	r0, [r7, #20]
 8005d12:	f7fa fa13 	bl	800013c <__udivsi3>
 8005d16:	0003      	movs	r3, r0
 8005d18:	613b      	str	r3, [r7, #16]
 8005d1a:	e015      	b.n	8005d48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005d1c:	4b0d      	ldr	r3, [pc, #52]	; (8005d54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	2238      	movs	r2, #56	; 0x38
 8005d22:	4013      	ands	r3, r2
 8005d24:	2b20      	cmp	r3, #32
 8005d26:	d103      	bne.n	8005d30 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005d28:	2380      	movs	r3, #128	; 0x80
 8005d2a:	021b      	lsls	r3, r3, #8
 8005d2c:	613b      	str	r3, [r7, #16]
 8005d2e:	e00b      	b.n	8005d48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005d30:	4b08      	ldr	r3, [pc, #32]	; (8005d54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	2238      	movs	r2, #56	; 0x38
 8005d36:	4013      	ands	r3, r2
 8005d38:	2b18      	cmp	r3, #24
 8005d3a:	d103      	bne.n	8005d44 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005d3c:	23fa      	movs	r3, #250	; 0xfa
 8005d3e:	01db      	lsls	r3, r3, #7
 8005d40:	613b      	str	r3, [r7, #16]
 8005d42:	e001      	b.n	8005d48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005d48:	693b      	ldr	r3, [r7, #16]
}
 8005d4a:	0018      	movs	r0, r3
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	b006      	add	sp, #24
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	46c0      	nop			; (mov r8, r8)
 8005d54:	40021000 	.word	0x40021000
 8005d58:	00f42400 	.word	0x00f42400
 8005d5c:	007a1200 	.word	0x007a1200

08005d60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d64:	4b02      	ldr	r3, [pc, #8]	; (8005d70 <HAL_RCC_GetHCLKFreq+0x10>)
 8005d66:	681b      	ldr	r3, [r3, #0]
}
 8005d68:	0018      	movs	r0, r3
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	46c0      	nop			; (mov r8, r8)
 8005d70:	20000030 	.word	0x20000030

08005d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d74:	b5b0      	push	{r4, r5, r7, lr}
 8005d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005d78:	f7ff fff2 	bl	8005d60 <HAL_RCC_GetHCLKFreq>
 8005d7c:	0004      	movs	r4, r0
 8005d7e:	f7ff fb3f 	bl	8005400 <LL_RCC_GetAPB1Prescaler>
 8005d82:	0003      	movs	r3, r0
 8005d84:	0b1a      	lsrs	r2, r3, #12
 8005d86:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d88:	0092      	lsls	r2, r2, #2
 8005d8a:	58d3      	ldr	r3, [r2, r3]
 8005d8c:	221f      	movs	r2, #31
 8005d8e:	4013      	ands	r3, r2
 8005d90:	40dc      	lsrs	r4, r3
 8005d92:	0023      	movs	r3, r4
}
 8005d94:	0018      	movs	r0, r3
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bdb0      	pop	{r4, r5, r7, pc}
 8005d9a:	46c0      	nop			; (mov r8, r8)
 8005d9c:	0800c2f8 	.word	0x0800c2f8

08005da0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005da8:	2313      	movs	r3, #19
 8005daa:	18fb      	adds	r3, r7, r3
 8005dac:	2200      	movs	r2, #0
 8005dae:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005db0:	2312      	movs	r3, #18
 8005db2:	18fb      	adds	r3, r7, r3
 8005db4:	2200      	movs	r2, #0
 8005db6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	2380      	movs	r3, #128	; 0x80
 8005dbe:	029b      	lsls	r3, r3, #10
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	d100      	bne.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005dc4:	e0a3      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dc6:	2011      	movs	r0, #17
 8005dc8:	183b      	adds	r3, r7, r0
 8005dca:	2200      	movs	r2, #0
 8005dcc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dce:	4ba5      	ldr	r3, [pc, #660]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005dd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dd2:	2380      	movs	r3, #128	; 0x80
 8005dd4:	055b      	lsls	r3, r3, #21
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	d110      	bne.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dda:	4ba2      	ldr	r3, [pc, #648]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005ddc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dde:	4ba1      	ldr	r3, [pc, #644]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005de0:	2180      	movs	r1, #128	; 0x80
 8005de2:	0549      	lsls	r1, r1, #21
 8005de4:	430a      	orrs	r2, r1
 8005de6:	63da      	str	r2, [r3, #60]	; 0x3c
 8005de8:	4b9e      	ldr	r3, [pc, #632]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005dea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dec:	2380      	movs	r3, #128	; 0x80
 8005dee:	055b      	lsls	r3, r3, #21
 8005df0:	4013      	ands	r3, r2
 8005df2:	60bb      	str	r3, [r7, #8]
 8005df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005df6:	183b      	adds	r3, r7, r0
 8005df8:	2201      	movs	r2, #1
 8005dfa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dfc:	4b9a      	ldr	r3, [pc, #616]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	4b99      	ldr	r3, [pc, #612]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005e02:	2180      	movs	r1, #128	; 0x80
 8005e04:	0049      	lsls	r1, r1, #1
 8005e06:	430a      	orrs	r2, r1
 8005e08:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e0a:	f7fe fe9d 	bl	8004b48 <HAL_GetTick>
 8005e0e:	0003      	movs	r3, r0
 8005e10:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e12:	e00b      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e14:	f7fe fe98 	bl	8004b48 <HAL_GetTick>
 8005e18:	0002      	movs	r2, r0
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d904      	bls.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005e22:	2313      	movs	r3, #19
 8005e24:	18fb      	adds	r3, r7, r3
 8005e26:	2203      	movs	r2, #3
 8005e28:	701a      	strb	r2, [r3, #0]
        break;
 8005e2a:	e005      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e2c:	4b8e      	ldr	r3, [pc, #568]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	2380      	movs	r3, #128	; 0x80
 8005e32:	005b      	lsls	r3, r3, #1
 8005e34:	4013      	ands	r3, r2
 8005e36:	d0ed      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005e38:	2313      	movs	r3, #19
 8005e3a:	18fb      	adds	r3, r7, r3
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d154      	bne.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e42:	4b88      	ldr	r3, [pc, #544]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005e46:	23c0      	movs	r3, #192	; 0xc0
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d019      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d014      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e5e:	4b81      	ldr	r3, [pc, #516]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e62:	4a82      	ldr	r2, [pc, #520]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005e64:	4013      	ands	r3, r2
 8005e66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e68:	4b7e      	ldr	r3, [pc, #504]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005e6c:	4b7d      	ldr	r3, [pc, #500]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e6e:	2180      	movs	r1, #128	; 0x80
 8005e70:	0249      	lsls	r1, r1, #9
 8005e72:	430a      	orrs	r2, r1
 8005e74:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e76:	4b7b      	ldr	r3, [pc, #492]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005e7a:	4b7a      	ldr	r3, [pc, #488]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e7c:	497c      	ldr	r1, [pc, #496]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8005e7e:	400a      	ands	r2, r1
 8005e80:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e82:	4b78      	ldr	r3, [pc, #480]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	d016      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e90:	f7fe fe5a 	bl	8004b48 <HAL_GetTick>
 8005e94:	0003      	movs	r3, r0
 8005e96:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e98:	e00c      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e9a:	f7fe fe55 	bl	8004b48 <HAL_GetTick>
 8005e9e:	0002      	movs	r2, r0
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	4a73      	ldr	r2, [pc, #460]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d904      	bls.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005eaa:	2313      	movs	r3, #19
 8005eac:	18fb      	adds	r3, r7, r3
 8005eae:	2203      	movs	r2, #3
 8005eb0:	701a      	strb	r2, [r3, #0]
            break;
 8005eb2:	e004      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005eb4:	4b6b      	ldr	r3, [pc, #428]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eb8:	2202      	movs	r2, #2
 8005eba:	4013      	ands	r3, r2
 8005ebc:	d0ed      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005ebe:	2313      	movs	r3, #19
 8005ec0:	18fb      	adds	r3, r7, r3
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10a      	bne.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ec8:	4b66      	ldr	r3, [pc, #408]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ecc:	4a67      	ldr	r2, [pc, #412]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005ece:	4013      	ands	r3, r2
 8005ed0:	0019      	movs	r1, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ed6:	4b63      	ldr	r3, [pc, #396]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	65da      	str	r2, [r3, #92]	; 0x5c
 8005edc:	e00c      	b.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ede:	2312      	movs	r3, #18
 8005ee0:	18fb      	adds	r3, r7, r3
 8005ee2:	2213      	movs	r2, #19
 8005ee4:	18ba      	adds	r2, r7, r2
 8005ee6:	7812      	ldrb	r2, [r2, #0]
 8005ee8:	701a      	strb	r2, [r3, #0]
 8005eea:	e005      	b.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eec:	2312      	movs	r3, #18
 8005eee:	18fb      	adds	r3, r7, r3
 8005ef0:	2213      	movs	r2, #19
 8005ef2:	18ba      	adds	r2, r7, r2
 8005ef4:	7812      	ldrb	r2, [r2, #0]
 8005ef6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ef8:	2311      	movs	r3, #17
 8005efa:	18fb      	adds	r3, r7, r3
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d105      	bne.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f02:	4b58      	ldr	r3, [pc, #352]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f06:	4b57      	ldr	r3, [pc, #348]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f08:	495b      	ldr	r1, [pc, #364]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005f0a:	400a      	ands	r2, r1
 8005f0c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2201      	movs	r2, #1
 8005f14:	4013      	ands	r3, r2
 8005f16:	d009      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f18:	4b52      	ldr	r3, [pc, #328]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f1c:	2203      	movs	r2, #3
 8005f1e:	4393      	bics	r3, r2
 8005f20:	0019      	movs	r1, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	4b4f      	ldr	r3, [pc, #316]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2210      	movs	r2, #16
 8005f32:	4013      	ands	r3, r2
 8005f34:	d009      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f36:	4b4b      	ldr	r3, [pc, #300]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3a:	4a50      	ldr	r2, [pc, #320]	; (800607c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	0019      	movs	r1, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	4b47      	ldr	r3, [pc, #284]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f46:	430a      	orrs	r2, r1
 8005f48:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	2380      	movs	r3, #128	; 0x80
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4013      	ands	r3, r2
 8005f54:	d009      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f56:	4b43      	ldr	r3, [pc, #268]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5a:	4a49      	ldr	r2, [pc, #292]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	0019      	movs	r1, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	695a      	ldr	r2, [r3, #20]
 8005f64:	4b3f      	ldr	r3, [pc, #252]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f66:	430a      	orrs	r2, r1
 8005f68:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	2380      	movs	r3, #128	; 0x80
 8005f70:	00db      	lsls	r3, r3, #3
 8005f72:	4013      	ands	r3, r2
 8005f74:	d009      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f76:	4b3b      	ldr	r3, [pc, #236]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7a:	4a42      	ldr	r2, [pc, #264]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	0019      	movs	r1, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	699a      	ldr	r2, [r3, #24]
 8005f84:	4b37      	ldr	r3, [pc, #220]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f86:	430a      	orrs	r2, r1
 8005f88:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	4013      	ands	r3, r2
 8005f92:	d009      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f94:	4b33      	ldr	r3, [pc, #204]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f98:	4a3b      	ldr	r2, [pc, #236]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	0019      	movs	r1, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68da      	ldr	r2, [r3, #12]
 8005fa2:	4b30      	ldr	r3, [pc, #192]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	2380      	movs	r3, #128	; 0x80
 8005fae:	01db      	lsls	r3, r3, #7
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	d015      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fb4:	4b2b      	ldr	r3, [pc, #172]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	0899      	lsrs	r1, r3, #2
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	69da      	ldr	r2, [r3, #28]
 8005fc0:	4b28      	ldr	r3, [pc, #160]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	69da      	ldr	r2, [r3, #28]
 8005fca:	2380      	movs	r3, #128	; 0x80
 8005fcc:	05db      	lsls	r3, r3, #23
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d106      	bne.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005fd2:	4b24      	ldr	r3, [pc, #144]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005fd4:	68da      	ldr	r2, [r3, #12]
 8005fd6:	4b23      	ldr	r3, [pc, #140]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005fd8:	2180      	movs	r1, #128	; 0x80
 8005fda:	0249      	lsls	r1, r1, #9
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	2380      	movs	r3, #128	; 0x80
 8005fe6:	039b      	lsls	r3, r3, #14
 8005fe8:	4013      	ands	r3, r2
 8005fea:	d016      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005fec:	4b1d      	ldr	r3, [pc, #116]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff0:	4a26      	ldr	r2, [pc, #152]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	0019      	movs	r1, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1a      	ldr	r2, [r3, #32]
 8005ffa:	4b1a      	ldr	r3, [pc, #104]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a1a      	ldr	r2, [r3, #32]
 8006004:	2380      	movs	r3, #128	; 0x80
 8006006:	03db      	lsls	r3, r3, #15
 8006008:	429a      	cmp	r2, r3
 800600a:	d106      	bne.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800600c:	4b15      	ldr	r3, [pc, #84]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800600e:	68da      	ldr	r2, [r3, #12]
 8006010:	4b14      	ldr	r3, [pc, #80]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006012:	2180      	movs	r1, #128	; 0x80
 8006014:	0449      	lsls	r1, r1, #17
 8006016:	430a      	orrs	r2, r1
 8006018:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	2380      	movs	r3, #128	; 0x80
 8006020:	011b      	lsls	r3, r3, #4
 8006022:	4013      	ands	r3, r2
 8006024:	d016      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006026:	4b0f      	ldr	r3, [pc, #60]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602a:	4a19      	ldr	r2, [pc, #100]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800602c:	4013      	ands	r3, r2
 800602e:	0019      	movs	r1, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	691a      	ldr	r2, [r3, #16]
 8006034:	4b0b      	ldr	r3, [pc, #44]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006036:	430a      	orrs	r2, r1
 8006038:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691a      	ldr	r2, [r3, #16]
 800603e:	2380      	movs	r3, #128	; 0x80
 8006040:	01db      	lsls	r3, r3, #7
 8006042:	429a      	cmp	r2, r3
 8006044:	d106      	bne.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006046:	4b07      	ldr	r3, [pc, #28]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006048:	68da      	ldr	r2, [r3, #12]
 800604a:	4b06      	ldr	r3, [pc, #24]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800604c:	2180      	movs	r1, #128	; 0x80
 800604e:	0249      	lsls	r1, r1, #9
 8006050:	430a      	orrs	r2, r1
 8006052:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006054:	2312      	movs	r3, #18
 8006056:	18fb      	adds	r3, r7, r3
 8006058:	781b      	ldrb	r3, [r3, #0]
}
 800605a:	0018      	movs	r0, r3
 800605c:	46bd      	mov	sp, r7
 800605e:	b006      	add	sp, #24
 8006060:	bd80      	pop	{r7, pc}
 8006062:	46c0      	nop			; (mov r8, r8)
 8006064:	40021000 	.word	0x40021000
 8006068:	40007000 	.word	0x40007000
 800606c:	fffffcff 	.word	0xfffffcff
 8006070:	fffeffff 	.word	0xfffeffff
 8006074:	00001388 	.word	0x00001388
 8006078:	efffffff 	.word	0xefffffff
 800607c:	fffff3ff 	.word	0xfffff3ff
 8006080:	fff3ffff 	.word	0xfff3ffff
 8006084:	ffcfffff 	.word	0xffcfffff
 8006088:	ffffcfff 	.word	0xffffcfff
 800608c:	ffbfffff 	.word	0xffbfffff
 8006090:	ffff3fff 	.word	0xffff3fff

08006094 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e04a      	b.n	800613c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	223d      	movs	r2, #61	; 0x3d
 80060aa:	5c9b      	ldrb	r3, [r3, r2]
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d107      	bne.n	80060c2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	223c      	movs	r2, #60	; 0x3c
 80060b6:	2100      	movs	r1, #0
 80060b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	0018      	movs	r0, r3
 80060be:	f7fe f9d1 	bl	8004464 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	223d      	movs	r2, #61	; 0x3d
 80060c6:	2102      	movs	r1, #2
 80060c8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	3304      	adds	r3, #4
 80060d2:	0019      	movs	r1, r3
 80060d4:	0010      	movs	r0, r2
 80060d6:	f000 fc79 	bl	80069cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2248      	movs	r2, #72	; 0x48
 80060de:	2101      	movs	r1, #1
 80060e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	223e      	movs	r2, #62	; 0x3e
 80060e6:	2101      	movs	r1, #1
 80060e8:	5499      	strb	r1, [r3, r2]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	223f      	movs	r2, #63	; 0x3f
 80060ee:	2101      	movs	r1, #1
 80060f0:	5499      	strb	r1, [r3, r2]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2240      	movs	r2, #64	; 0x40
 80060f6:	2101      	movs	r1, #1
 80060f8:	5499      	strb	r1, [r3, r2]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2241      	movs	r2, #65	; 0x41
 80060fe:	2101      	movs	r1, #1
 8006100:	5499      	strb	r1, [r3, r2]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2242      	movs	r2, #66	; 0x42
 8006106:	2101      	movs	r1, #1
 8006108:	5499      	strb	r1, [r3, r2]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2243      	movs	r2, #67	; 0x43
 800610e:	2101      	movs	r1, #1
 8006110:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2244      	movs	r2, #68	; 0x44
 8006116:	2101      	movs	r1, #1
 8006118:	5499      	strb	r1, [r3, r2]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2245      	movs	r2, #69	; 0x45
 800611e:	2101      	movs	r1, #1
 8006120:	5499      	strb	r1, [r3, r2]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2246      	movs	r2, #70	; 0x46
 8006126:	2101      	movs	r1, #1
 8006128:	5499      	strb	r1, [r3, r2]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2247      	movs	r2, #71	; 0x47
 800612e:	2101      	movs	r1, #1
 8006130:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	223d      	movs	r2, #61	; 0x3d
 8006136:	2101      	movs	r1, #1
 8006138:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	0018      	movs	r0, r3
 800613e:	46bd      	mov	sp, r7
 8006140:	b002      	add	sp, #8
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	223d      	movs	r2, #61	; 0x3d
 8006150:	2102      	movs	r1, #2
 8006152:	5499      	strb	r1, [r3, r2]

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	4a27      	ldr	r2, [pc, #156]	; (80061f8 <HAL_TIM_Base_DeInit+0xb4>)
 800615c:	4013      	ands	r3, r2
 800615e:	d10d      	bne.n	800617c <HAL_TIM_Base_DeInit+0x38>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	4a25      	ldr	r2, [pc, #148]	; (80061fc <HAL_TIM_Base_DeInit+0xb8>)
 8006168:	4013      	ands	r3, r2
 800616a:	d107      	bne.n	800617c <HAL_TIM_Base_DeInit+0x38>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2101      	movs	r1, #1
 8006178:	438a      	bics	r2, r1
 800617a:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	0018      	movs	r0, r3
 8006180:	f7fe fa70 	bl	8004664 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2248      	movs	r2, #72	; 0x48
 8006188:	2100      	movs	r1, #0
 800618a:	5499      	strb	r1, [r3, r2]

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	223e      	movs	r2, #62	; 0x3e
 8006190:	2100      	movs	r1, #0
 8006192:	5499      	strb	r1, [r3, r2]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	223f      	movs	r2, #63	; 0x3f
 8006198:	2100      	movs	r1, #0
 800619a:	5499      	strb	r1, [r3, r2]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2240      	movs	r2, #64	; 0x40
 80061a0:	2100      	movs	r1, #0
 80061a2:	5499      	strb	r1, [r3, r2]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2241      	movs	r2, #65	; 0x41
 80061a8:	2100      	movs	r1, #0
 80061aa:	5499      	strb	r1, [r3, r2]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2242      	movs	r2, #66	; 0x42
 80061b0:	2100      	movs	r1, #0
 80061b2:	5499      	strb	r1, [r3, r2]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2243      	movs	r2, #67	; 0x43
 80061b8:	2100      	movs	r1, #0
 80061ba:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2244      	movs	r2, #68	; 0x44
 80061c0:	2100      	movs	r1, #0
 80061c2:	5499      	strb	r1, [r3, r2]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2245      	movs	r2, #69	; 0x45
 80061c8:	2100      	movs	r1, #0
 80061ca:	5499      	strb	r1, [r3, r2]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2246      	movs	r2, #70	; 0x46
 80061d0:	2100      	movs	r1, #0
 80061d2:	5499      	strb	r1, [r3, r2]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2247      	movs	r2, #71	; 0x47
 80061d8:	2100      	movs	r1, #0
 80061da:	5499      	strb	r1, [r3, r2]

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	223d      	movs	r2, #61	; 0x3d
 80061e0:	2100      	movs	r1, #0
 80061e2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	223c      	movs	r2, #60	; 0x3c
 80061e8:	2100      	movs	r1, #0
 80061ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	0018      	movs	r0, r3
 80061f0:	46bd      	mov	sp, r7
 80061f2:	b002      	add	sp, #8
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	46c0      	nop			; (mov r8, r8)
 80061f8:	00001111 	.word	0x00001111
 80061fc:	00000444 	.word	0x00000444

08006200 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	223d      	movs	r2, #61	; 0x3d
 800620c:	5c9b      	ldrb	r3, [r3, r2]
 800620e:	b2db      	uxtb	r3, r3
 8006210:	2b01      	cmp	r3, #1
 8006212:	d001      	beq.n	8006218 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e035      	b.n	8006284 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	223d      	movs	r2, #61	; 0x3d
 800621c:	2102      	movs	r1, #2
 800621e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a19      	ldr	r2, [pc, #100]	; (800628c <HAL_TIM_Base_Start+0x8c>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d00a      	beq.n	8006240 <HAL_TIM_Base_Start+0x40>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	2380      	movs	r3, #128	; 0x80
 8006230:	05db      	lsls	r3, r3, #23
 8006232:	429a      	cmp	r2, r3
 8006234:	d004      	beq.n	8006240 <HAL_TIM_Base_Start+0x40>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a15      	ldr	r2, [pc, #84]	; (8006290 <HAL_TIM_Base_Start+0x90>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d116      	bne.n	800626e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	4a13      	ldr	r2, [pc, #76]	; (8006294 <HAL_TIM_Base_Start+0x94>)
 8006248:	4013      	ands	r3, r2
 800624a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2b06      	cmp	r3, #6
 8006250:	d016      	beq.n	8006280 <HAL_TIM_Base_Start+0x80>
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	2380      	movs	r3, #128	; 0x80
 8006256:	025b      	lsls	r3, r3, #9
 8006258:	429a      	cmp	r2, r3
 800625a:	d011      	beq.n	8006280 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2101      	movs	r1, #1
 8006268:	430a      	orrs	r2, r1
 800626a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800626c:	e008      	b.n	8006280 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2101      	movs	r1, #1
 800627a:	430a      	orrs	r2, r1
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	e000      	b.n	8006282 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006280:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	0018      	movs	r0, r3
 8006286:	46bd      	mov	sp, r7
 8006288:	b004      	add	sp, #16
 800628a:	bd80      	pop	{r7, pc}
 800628c:	40012c00 	.word	0x40012c00
 8006290:	40000400 	.word	0x40000400
 8006294:	00010007 	.word	0x00010007

08006298 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e04a      	b.n	8006340 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	223d      	movs	r2, #61	; 0x3d
 80062ae:	5c9b      	ldrb	r3, [r3, r2]
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d107      	bne.n	80062c6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	223c      	movs	r2, #60	; 0x3c
 80062ba:	2100      	movs	r1, #0
 80062bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	0018      	movs	r0, r3
 80062c2:	f000 f841 	bl	8006348 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	223d      	movs	r2, #61	; 0x3d
 80062ca:	2102      	movs	r1, #2
 80062cc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	3304      	adds	r3, #4
 80062d6:	0019      	movs	r1, r3
 80062d8:	0010      	movs	r0, r2
 80062da:	f000 fb77 	bl	80069cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2248      	movs	r2, #72	; 0x48
 80062e2:	2101      	movs	r1, #1
 80062e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	223e      	movs	r2, #62	; 0x3e
 80062ea:	2101      	movs	r1, #1
 80062ec:	5499      	strb	r1, [r3, r2]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	223f      	movs	r2, #63	; 0x3f
 80062f2:	2101      	movs	r1, #1
 80062f4:	5499      	strb	r1, [r3, r2]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2240      	movs	r2, #64	; 0x40
 80062fa:	2101      	movs	r1, #1
 80062fc:	5499      	strb	r1, [r3, r2]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2241      	movs	r2, #65	; 0x41
 8006302:	2101      	movs	r1, #1
 8006304:	5499      	strb	r1, [r3, r2]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2242      	movs	r2, #66	; 0x42
 800630a:	2101      	movs	r1, #1
 800630c:	5499      	strb	r1, [r3, r2]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2243      	movs	r2, #67	; 0x43
 8006312:	2101      	movs	r1, #1
 8006314:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2244      	movs	r2, #68	; 0x44
 800631a:	2101      	movs	r1, #1
 800631c:	5499      	strb	r1, [r3, r2]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2245      	movs	r2, #69	; 0x45
 8006322:	2101      	movs	r1, #1
 8006324:	5499      	strb	r1, [r3, r2]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2246      	movs	r2, #70	; 0x46
 800632a:	2101      	movs	r1, #1
 800632c:	5499      	strb	r1, [r3, r2]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2247      	movs	r2, #71	; 0x47
 8006332:	2101      	movs	r1, #1
 8006334:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	223d      	movs	r2, #61	; 0x3d
 800633a:	2101      	movs	r1, #1
 800633c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	0018      	movs	r0, r3
 8006342:	46bd      	mov	sp, r7
 8006344:	b002      	add	sp, #8
 8006346:	bd80      	pop	{r7, pc}

08006348 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006350:	46c0      	nop			; (mov r8, r8)
 8006352:	46bd      	mov	sp, r7
 8006354:	b002      	add	sp, #8
 8006356:	bd80      	pop	{r7, pc}

08006358 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d108      	bne.n	800637a <HAL_TIM_PWM_Start+0x22>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	223e      	movs	r2, #62	; 0x3e
 800636c:	5c9b      	ldrb	r3, [r3, r2]
 800636e:	b2db      	uxtb	r3, r3
 8006370:	3b01      	subs	r3, #1
 8006372:	1e5a      	subs	r2, r3, #1
 8006374:	4193      	sbcs	r3, r2
 8006376:	b2db      	uxtb	r3, r3
 8006378:	e037      	b.n	80063ea <HAL_TIM_PWM_Start+0x92>
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2b04      	cmp	r3, #4
 800637e:	d108      	bne.n	8006392 <HAL_TIM_PWM_Start+0x3a>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	223f      	movs	r2, #63	; 0x3f
 8006384:	5c9b      	ldrb	r3, [r3, r2]
 8006386:	b2db      	uxtb	r3, r3
 8006388:	3b01      	subs	r3, #1
 800638a:	1e5a      	subs	r2, r3, #1
 800638c:	4193      	sbcs	r3, r2
 800638e:	b2db      	uxtb	r3, r3
 8006390:	e02b      	b.n	80063ea <HAL_TIM_PWM_Start+0x92>
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	2b08      	cmp	r3, #8
 8006396:	d108      	bne.n	80063aa <HAL_TIM_PWM_Start+0x52>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2240      	movs	r2, #64	; 0x40
 800639c:	5c9b      	ldrb	r3, [r3, r2]
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	3b01      	subs	r3, #1
 80063a2:	1e5a      	subs	r2, r3, #1
 80063a4:	4193      	sbcs	r3, r2
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	e01f      	b.n	80063ea <HAL_TIM_PWM_Start+0x92>
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2b0c      	cmp	r3, #12
 80063ae:	d108      	bne.n	80063c2 <HAL_TIM_PWM_Start+0x6a>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2241      	movs	r2, #65	; 0x41
 80063b4:	5c9b      	ldrb	r3, [r3, r2]
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	3b01      	subs	r3, #1
 80063ba:	1e5a      	subs	r2, r3, #1
 80063bc:	4193      	sbcs	r3, r2
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	e013      	b.n	80063ea <HAL_TIM_PWM_Start+0x92>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b10      	cmp	r3, #16
 80063c6:	d108      	bne.n	80063da <HAL_TIM_PWM_Start+0x82>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2242      	movs	r2, #66	; 0x42
 80063cc:	5c9b      	ldrb	r3, [r3, r2]
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	3b01      	subs	r3, #1
 80063d2:	1e5a      	subs	r2, r3, #1
 80063d4:	4193      	sbcs	r3, r2
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	e007      	b.n	80063ea <HAL_TIM_PWM_Start+0x92>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2243      	movs	r2, #67	; 0x43
 80063de:	5c9b      	ldrb	r3, [r3, r2]
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	3b01      	subs	r3, #1
 80063e4:	1e5a      	subs	r2, r3, #1
 80063e6:	4193      	sbcs	r3, r2
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e081      	b.n	80064f6 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d104      	bne.n	8006402 <HAL_TIM_PWM_Start+0xaa>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	223e      	movs	r2, #62	; 0x3e
 80063fc:	2102      	movs	r1, #2
 80063fe:	5499      	strb	r1, [r3, r2]
 8006400:	e023      	b.n	800644a <HAL_TIM_PWM_Start+0xf2>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b04      	cmp	r3, #4
 8006406:	d104      	bne.n	8006412 <HAL_TIM_PWM_Start+0xba>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	223f      	movs	r2, #63	; 0x3f
 800640c:	2102      	movs	r1, #2
 800640e:	5499      	strb	r1, [r3, r2]
 8006410:	e01b      	b.n	800644a <HAL_TIM_PWM_Start+0xf2>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b08      	cmp	r3, #8
 8006416:	d104      	bne.n	8006422 <HAL_TIM_PWM_Start+0xca>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2240      	movs	r2, #64	; 0x40
 800641c:	2102      	movs	r1, #2
 800641e:	5499      	strb	r1, [r3, r2]
 8006420:	e013      	b.n	800644a <HAL_TIM_PWM_Start+0xf2>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b0c      	cmp	r3, #12
 8006426:	d104      	bne.n	8006432 <HAL_TIM_PWM_Start+0xda>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2241      	movs	r2, #65	; 0x41
 800642c:	2102      	movs	r1, #2
 800642e:	5499      	strb	r1, [r3, r2]
 8006430:	e00b      	b.n	800644a <HAL_TIM_PWM_Start+0xf2>
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b10      	cmp	r3, #16
 8006436:	d104      	bne.n	8006442 <HAL_TIM_PWM_Start+0xea>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2242      	movs	r2, #66	; 0x42
 800643c:	2102      	movs	r1, #2
 800643e:	5499      	strb	r1, [r3, r2]
 8006440:	e003      	b.n	800644a <HAL_TIM_PWM_Start+0xf2>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2243      	movs	r2, #67	; 0x43
 8006446:	2102      	movs	r1, #2
 8006448:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6839      	ldr	r1, [r7, #0]
 8006450:	2201      	movs	r2, #1
 8006452:	0018      	movs	r0, r3
 8006454:	f000 fe68 	bl	8007128 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a28      	ldr	r2, [pc, #160]	; (8006500 <HAL_TIM_PWM_Start+0x1a8>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d009      	beq.n	8006476 <HAL_TIM_PWM_Start+0x11e>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a27      	ldr	r2, [pc, #156]	; (8006504 <HAL_TIM_PWM_Start+0x1ac>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d004      	beq.n	8006476 <HAL_TIM_PWM_Start+0x11e>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a25      	ldr	r2, [pc, #148]	; (8006508 <HAL_TIM_PWM_Start+0x1b0>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d101      	bne.n	800647a <HAL_TIM_PWM_Start+0x122>
 8006476:	2301      	movs	r3, #1
 8006478:	e000      	b.n	800647c <HAL_TIM_PWM_Start+0x124>
 800647a:	2300      	movs	r3, #0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d008      	beq.n	8006492 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2180      	movs	r1, #128	; 0x80
 800648c:	0209      	lsls	r1, r1, #8
 800648e:	430a      	orrs	r2, r1
 8006490:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a1a      	ldr	r2, [pc, #104]	; (8006500 <HAL_TIM_PWM_Start+0x1a8>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d00a      	beq.n	80064b2 <HAL_TIM_PWM_Start+0x15a>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	2380      	movs	r3, #128	; 0x80
 80064a2:	05db      	lsls	r3, r3, #23
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d004      	beq.n	80064b2 <HAL_TIM_PWM_Start+0x15a>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a17      	ldr	r2, [pc, #92]	; (800650c <HAL_TIM_PWM_Start+0x1b4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d116      	bne.n	80064e0 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	4a15      	ldr	r2, [pc, #84]	; (8006510 <HAL_TIM_PWM_Start+0x1b8>)
 80064ba:	4013      	ands	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2b06      	cmp	r3, #6
 80064c2:	d016      	beq.n	80064f2 <HAL_TIM_PWM_Start+0x19a>
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	2380      	movs	r3, #128	; 0x80
 80064c8:	025b      	lsls	r3, r3, #9
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d011      	beq.n	80064f2 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2101      	movs	r1, #1
 80064da:	430a      	orrs	r2, r1
 80064dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064de:	e008      	b.n	80064f2 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2101      	movs	r1, #1
 80064ec:	430a      	orrs	r2, r1
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	e000      	b.n	80064f4 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064f2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	0018      	movs	r0, r3
 80064f8:	46bd      	mov	sp, r7
 80064fa:	b004      	add	sp, #16
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	46c0      	nop			; (mov r8, r8)
 8006500:	40012c00 	.word	0x40012c00
 8006504:	40014400 	.word	0x40014400
 8006508:	40014800 	.word	0x40014800
 800650c:	40000400 	.word	0x40000400
 8006510:	00010007 	.word	0x00010007

08006514 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6839      	ldr	r1, [r7, #0]
 8006524:	2200      	movs	r2, #0
 8006526:	0018      	movs	r0, r3
 8006528:	f000 fdfe 	bl	8007128 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a35      	ldr	r2, [pc, #212]	; (8006608 <HAL_TIM_PWM_Stop+0xf4>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d009      	beq.n	800654a <HAL_TIM_PWM_Stop+0x36>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a34      	ldr	r2, [pc, #208]	; (800660c <HAL_TIM_PWM_Stop+0xf8>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d004      	beq.n	800654a <HAL_TIM_PWM_Stop+0x36>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a32      	ldr	r2, [pc, #200]	; (8006610 <HAL_TIM_PWM_Stop+0xfc>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d101      	bne.n	800654e <HAL_TIM_PWM_Stop+0x3a>
 800654a:	2301      	movs	r3, #1
 800654c:	e000      	b.n	8006550 <HAL_TIM_PWM_Stop+0x3c>
 800654e:	2300      	movs	r3, #0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d013      	beq.n	800657c <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	4a2e      	ldr	r2, [pc, #184]	; (8006614 <HAL_TIM_PWM_Stop+0x100>)
 800655c:	4013      	ands	r3, r2
 800655e:	d10d      	bne.n	800657c <HAL_TIM_PWM_Stop+0x68>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	4a2c      	ldr	r2, [pc, #176]	; (8006618 <HAL_TIM_PWM_Stop+0x104>)
 8006568:	4013      	ands	r3, r2
 800656a:	d107      	bne.n	800657c <HAL_TIM_PWM_Stop+0x68>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4929      	ldr	r1, [pc, #164]	; (800661c <HAL_TIM_PWM_Stop+0x108>)
 8006578:	400a      	ands	r2, r1
 800657a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	4a24      	ldr	r2, [pc, #144]	; (8006614 <HAL_TIM_PWM_Stop+0x100>)
 8006584:	4013      	ands	r3, r2
 8006586:	d10d      	bne.n	80065a4 <HAL_TIM_PWM_Stop+0x90>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	4a22      	ldr	r2, [pc, #136]	; (8006618 <HAL_TIM_PWM_Stop+0x104>)
 8006590:	4013      	ands	r3, r2
 8006592:	d107      	bne.n	80065a4 <HAL_TIM_PWM_Stop+0x90>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2101      	movs	r1, #1
 80065a0:	438a      	bics	r2, r1
 80065a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d104      	bne.n	80065b4 <HAL_TIM_PWM_Stop+0xa0>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	223e      	movs	r2, #62	; 0x3e
 80065ae:	2101      	movs	r1, #1
 80065b0:	5499      	strb	r1, [r3, r2]
 80065b2:	e023      	b.n	80065fc <HAL_TIM_PWM_Stop+0xe8>
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	d104      	bne.n	80065c4 <HAL_TIM_PWM_Stop+0xb0>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	223f      	movs	r2, #63	; 0x3f
 80065be:	2101      	movs	r1, #1
 80065c0:	5499      	strb	r1, [r3, r2]
 80065c2:	e01b      	b.n	80065fc <HAL_TIM_PWM_Stop+0xe8>
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	2b08      	cmp	r3, #8
 80065c8:	d104      	bne.n	80065d4 <HAL_TIM_PWM_Stop+0xc0>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2240      	movs	r2, #64	; 0x40
 80065ce:	2101      	movs	r1, #1
 80065d0:	5499      	strb	r1, [r3, r2]
 80065d2:	e013      	b.n	80065fc <HAL_TIM_PWM_Stop+0xe8>
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	2b0c      	cmp	r3, #12
 80065d8:	d104      	bne.n	80065e4 <HAL_TIM_PWM_Stop+0xd0>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2241      	movs	r2, #65	; 0x41
 80065de:	2101      	movs	r1, #1
 80065e0:	5499      	strb	r1, [r3, r2]
 80065e2:	e00b      	b.n	80065fc <HAL_TIM_PWM_Stop+0xe8>
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	2b10      	cmp	r3, #16
 80065e8:	d104      	bne.n	80065f4 <HAL_TIM_PWM_Stop+0xe0>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2242      	movs	r2, #66	; 0x42
 80065ee:	2101      	movs	r1, #1
 80065f0:	5499      	strb	r1, [r3, r2]
 80065f2:	e003      	b.n	80065fc <HAL_TIM_PWM_Stop+0xe8>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2243      	movs	r2, #67	; 0x43
 80065f8:	2101      	movs	r1, #1
 80065fa:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	0018      	movs	r0, r3
 8006600:	46bd      	mov	sp, r7
 8006602:	b002      	add	sp, #8
 8006604:	bd80      	pop	{r7, pc}
 8006606:	46c0      	nop			; (mov r8, r8)
 8006608:	40012c00 	.word	0x40012c00
 800660c:	40014400 	.word	0x40014400
 8006610:	40014800 	.word	0x40014800
 8006614:	00001111 	.word	0x00001111
 8006618:	00000444 	.word	0x00000444
 800661c:	ffff7fff 	.word	0xffff7fff

08006620 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800662c:	2317      	movs	r3, #23
 800662e:	18fb      	adds	r3, r7, r3
 8006630:	2200      	movs	r2, #0
 8006632:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	223c      	movs	r2, #60	; 0x3c
 8006638:	5c9b      	ldrb	r3, [r3, r2]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d101      	bne.n	8006642 <HAL_TIM_PWM_ConfigChannel+0x22>
 800663e:	2302      	movs	r3, #2
 8006640:	e0e5      	b.n	800680e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	223c      	movs	r2, #60	; 0x3c
 8006646:	2101      	movs	r1, #1
 8006648:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b14      	cmp	r3, #20
 800664e:	d900      	bls.n	8006652 <HAL_TIM_PWM_ConfigChannel+0x32>
 8006650:	e0d1      	b.n	80067f6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	009a      	lsls	r2, r3, #2
 8006656:	4b70      	ldr	r3, [pc, #448]	; (8006818 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8006658:	18d3      	adds	r3, r2, r3
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	0011      	movs	r1, r2
 8006666:	0018      	movs	r0, r3
 8006668:	f000 fa26 	bl	8006ab8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	699a      	ldr	r2, [r3, #24]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2108      	movs	r1, #8
 8006678:	430a      	orrs	r2, r1
 800667a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	699a      	ldr	r2, [r3, #24]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2104      	movs	r1, #4
 8006688:	438a      	bics	r2, r1
 800668a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6999      	ldr	r1, [r3, #24]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	691a      	ldr	r2, [r3, #16]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	619a      	str	r2, [r3, #24]
      break;
 800669e:	e0af      	b.n	8006800 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	0011      	movs	r1, r2
 80066a8:	0018      	movs	r0, r3
 80066aa:	f000 fa85 	bl	8006bb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	699a      	ldr	r2, [r3, #24]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2180      	movs	r1, #128	; 0x80
 80066ba:	0109      	lsls	r1, r1, #4
 80066bc:	430a      	orrs	r2, r1
 80066be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	699a      	ldr	r2, [r3, #24]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4954      	ldr	r1, [pc, #336]	; (800681c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80066cc:	400a      	ands	r2, r1
 80066ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6999      	ldr	r1, [r3, #24]
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	021a      	lsls	r2, r3, #8
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	619a      	str	r2, [r3, #24]
      break;
 80066e4:	e08c      	b.n	8006800 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	0011      	movs	r1, r2
 80066ee:	0018      	movs	r0, r3
 80066f0:	f000 fae0 	bl	8006cb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	69da      	ldr	r2, [r3, #28]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2108      	movs	r1, #8
 8006700:	430a      	orrs	r2, r1
 8006702:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	69da      	ldr	r2, [r3, #28]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2104      	movs	r1, #4
 8006710:	438a      	bics	r2, r1
 8006712:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	69d9      	ldr	r1, [r3, #28]
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	691a      	ldr	r2, [r3, #16]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	430a      	orrs	r2, r1
 8006724:	61da      	str	r2, [r3, #28]
      break;
 8006726:	e06b      	b.n	8006800 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	0011      	movs	r1, r2
 8006730:	0018      	movs	r0, r3
 8006732:	f000 fb41 	bl	8006db8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69da      	ldr	r2, [r3, #28]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2180      	movs	r1, #128	; 0x80
 8006742:	0109      	lsls	r1, r1, #4
 8006744:	430a      	orrs	r2, r1
 8006746:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	69da      	ldr	r2, [r3, #28]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4932      	ldr	r1, [pc, #200]	; (800681c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006754:	400a      	ands	r2, r1
 8006756:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	69d9      	ldr	r1, [r3, #28]
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	021a      	lsls	r2, r3, #8
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	430a      	orrs	r2, r1
 800676a:	61da      	str	r2, [r3, #28]
      break;
 800676c:	e048      	b.n	8006800 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	0011      	movs	r1, r2
 8006776:	0018      	movs	r0, r3
 8006778:	f000 fb82 	bl	8006e80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2108      	movs	r1, #8
 8006788:	430a      	orrs	r2, r1
 800678a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2104      	movs	r1, #4
 8006798:	438a      	bics	r2, r1
 800679a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	691a      	ldr	r2, [r3, #16]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067ae:	e027      	b.n	8006800 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	0011      	movs	r1, r2
 80067b8:	0018      	movs	r0, r3
 80067ba:	f000 fbbb 	bl	8006f34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2180      	movs	r1, #128	; 0x80
 80067ca:	0109      	lsls	r1, r1, #4
 80067cc:	430a      	orrs	r2, r1
 80067ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4910      	ldr	r1, [pc, #64]	; (800681c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80067dc:	400a      	ands	r2, r1
 80067de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	021a      	lsls	r2, r3, #8
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	430a      	orrs	r2, r1
 80067f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067f4:	e004      	b.n	8006800 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80067f6:	2317      	movs	r3, #23
 80067f8:	18fb      	adds	r3, r7, r3
 80067fa:	2201      	movs	r2, #1
 80067fc:	701a      	strb	r2, [r3, #0]
      break;
 80067fe:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	223c      	movs	r2, #60	; 0x3c
 8006804:	2100      	movs	r1, #0
 8006806:	5499      	strb	r1, [r3, r2]

  return status;
 8006808:	2317      	movs	r3, #23
 800680a:	18fb      	adds	r3, r7, r3
 800680c:	781b      	ldrb	r3, [r3, #0]
}
 800680e:	0018      	movs	r0, r3
 8006810:	46bd      	mov	sp, r7
 8006812:	b006      	add	sp, #24
 8006814:	bd80      	pop	{r7, pc}
 8006816:	46c0      	nop			; (mov r8, r8)
 8006818:	0800c318 	.word	0x0800c318
 800681c:	fffffbff 	.word	0xfffffbff

08006820 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800682a:	230f      	movs	r3, #15
 800682c:	18fb      	adds	r3, r7, r3
 800682e:	2200      	movs	r2, #0
 8006830:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	223c      	movs	r2, #60	; 0x3c
 8006836:	5c9b      	ldrb	r3, [r3, r2]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d101      	bne.n	8006840 <HAL_TIM_ConfigClockSource+0x20>
 800683c:	2302      	movs	r3, #2
 800683e:	e0bc      	b.n	80069ba <HAL_TIM_ConfigClockSource+0x19a>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	223c      	movs	r2, #60	; 0x3c
 8006844:	2101      	movs	r1, #1
 8006846:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	223d      	movs	r2, #61	; 0x3d
 800684c:	2102      	movs	r1, #2
 800684e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	4a5a      	ldr	r2, [pc, #360]	; (80069c4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800685c:	4013      	ands	r3, r2
 800685e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	4a59      	ldr	r2, [pc, #356]	; (80069c8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8006864:	4013      	ands	r3, r2
 8006866:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2280      	movs	r2, #128	; 0x80
 8006876:	0192      	lsls	r2, r2, #6
 8006878:	4293      	cmp	r3, r2
 800687a:	d040      	beq.n	80068fe <HAL_TIM_ConfigClockSource+0xde>
 800687c:	2280      	movs	r2, #128	; 0x80
 800687e:	0192      	lsls	r2, r2, #6
 8006880:	4293      	cmp	r3, r2
 8006882:	d900      	bls.n	8006886 <HAL_TIM_ConfigClockSource+0x66>
 8006884:	e088      	b.n	8006998 <HAL_TIM_ConfigClockSource+0x178>
 8006886:	2280      	movs	r2, #128	; 0x80
 8006888:	0152      	lsls	r2, r2, #5
 800688a:	4293      	cmp	r3, r2
 800688c:	d100      	bne.n	8006890 <HAL_TIM_ConfigClockSource+0x70>
 800688e:	e088      	b.n	80069a2 <HAL_TIM_ConfigClockSource+0x182>
 8006890:	2280      	movs	r2, #128	; 0x80
 8006892:	0152      	lsls	r2, r2, #5
 8006894:	4293      	cmp	r3, r2
 8006896:	d900      	bls.n	800689a <HAL_TIM_ConfigClockSource+0x7a>
 8006898:	e07e      	b.n	8006998 <HAL_TIM_ConfigClockSource+0x178>
 800689a:	2b70      	cmp	r3, #112	; 0x70
 800689c:	d018      	beq.n	80068d0 <HAL_TIM_ConfigClockSource+0xb0>
 800689e:	d900      	bls.n	80068a2 <HAL_TIM_ConfigClockSource+0x82>
 80068a0:	e07a      	b.n	8006998 <HAL_TIM_ConfigClockSource+0x178>
 80068a2:	2b60      	cmp	r3, #96	; 0x60
 80068a4:	d04f      	beq.n	8006946 <HAL_TIM_ConfigClockSource+0x126>
 80068a6:	d900      	bls.n	80068aa <HAL_TIM_ConfigClockSource+0x8a>
 80068a8:	e076      	b.n	8006998 <HAL_TIM_ConfigClockSource+0x178>
 80068aa:	2b50      	cmp	r3, #80	; 0x50
 80068ac:	d03b      	beq.n	8006926 <HAL_TIM_ConfigClockSource+0x106>
 80068ae:	d900      	bls.n	80068b2 <HAL_TIM_ConfigClockSource+0x92>
 80068b0:	e072      	b.n	8006998 <HAL_TIM_ConfigClockSource+0x178>
 80068b2:	2b40      	cmp	r3, #64	; 0x40
 80068b4:	d057      	beq.n	8006966 <HAL_TIM_ConfigClockSource+0x146>
 80068b6:	d900      	bls.n	80068ba <HAL_TIM_ConfigClockSource+0x9a>
 80068b8:	e06e      	b.n	8006998 <HAL_TIM_ConfigClockSource+0x178>
 80068ba:	2b30      	cmp	r3, #48	; 0x30
 80068bc:	d063      	beq.n	8006986 <HAL_TIM_ConfigClockSource+0x166>
 80068be:	d86b      	bhi.n	8006998 <HAL_TIM_ConfigClockSource+0x178>
 80068c0:	2b20      	cmp	r3, #32
 80068c2:	d060      	beq.n	8006986 <HAL_TIM_ConfigClockSource+0x166>
 80068c4:	d868      	bhi.n	8006998 <HAL_TIM_ConfigClockSource+0x178>
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d05d      	beq.n	8006986 <HAL_TIM_ConfigClockSource+0x166>
 80068ca:	2b10      	cmp	r3, #16
 80068cc:	d05b      	beq.n	8006986 <HAL_TIM_ConfigClockSource+0x166>
 80068ce:	e063      	b.n	8006998 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6818      	ldr	r0, [r3, #0]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	6899      	ldr	r1, [r3, #8]
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	685a      	ldr	r2, [r3, #4]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	f000 fc02 	bl	80070e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2277      	movs	r2, #119	; 0x77
 80068f0:	4313      	orrs	r3, r2
 80068f2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	609a      	str	r2, [r3, #8]
      break;
 80068fc:	e052      	b.n	80069a4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6818      	ldr	r0, [r3, #0]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	6899      	ldr	r1, [r3, #8]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f000 fbeb 	bl	80070e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	689a      	ldr	r2, [r3, #8]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2180      	movs	r1, #128	; 0x80
 800691e:	01c9      	lsls	r1, r1, #7
 8006920:	430a      	orrs	r2, r1
 8006922:	609a      	str	r2, [r3, #8]
      break;
 8006924:	e03e      	b.n	80069a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6818      	ldr	r0, [r3, #0]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	6859      	ldr	r1, [r3, #4]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	001a      	movs	r2, r3
 8006934:	f000 fb5c 	bl	8006ff0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2150      	movs	r1, #80	; 0x50
 800693e:	0018      	movs	r0, r3
 8006940:	f000 fbb6 	bl	80070b0 <TIM_ITRx_SetConfig>
      break;
 8006944:	e02e      	b.n	80069a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6818      	ldr	r0, [r3, #0]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	6859      	ldr	r1, [r3, #4]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	001a      	movs	r2, r3
 8006954:	f000 fb7a 	bl	800704c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2160      	movs	r1, #96	; 0x60
 800695e:	0018      	movs	r0, r3
 8006960:	f000 fba6 	bl	80070b0 <TIM_ITRx_SetConfig>
      break;
 8006964:	e01e      	b.n	80069a4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6818      	ldr	r0, [r3, #0]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	6859      	ldr	r1, [r3, #4]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	001a      	movs	r2, r3
 8006974:	f000 fb3c 	bl	8006ff0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2140      	movs	r1, #64	; 0x40
 800697e:	0018      	movs	r0, r3
 8006980:	f000 fb96 	bl	80070b0 <TIM_ITRx_SetConfig>
      break;
 8006984:	e00e      	b.n	80069a4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	0019      	movs	r1, r3
 8006990:	0010      	movs	r0, r2
 8006992:	f000 fb8d 	bl	80070b0 <TIM_ITRx_SetConfig>
      break;
 8006996:	e005      	b.n	80069a4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006998:	230f      	movs	r3, #15
 800699a:	18fb      	adds	r3, r7, r3
 800699c:	2201      	movs	r2, #1
 800699e:	701a      	strb	r2, [r3, #0]
      break;
 80069a0:	e000      	b.n	80069a4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80069a2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	223d      	movs	r2, #61	; 0x3d
 80069a8:	2101      	movs	r1, #1
 80069aa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	223c      	movs	r2, #60	; 0x3c
 80069b0:	2100      	movs	r1, #0
 80069b2:	5499      	strb	r1, [r3, r2]

  return status;
 80069b4:	230f      	movs	r3, #15
 80069b6:	18fb      	adds	r3, r7, r3
 80069b8:	781b      	ldrb	r3, [r3, #0]
}
 80069ba:	0018      	movs	r0, r3
 80069bc:	46bd      	mov	sp, r7
 80069be:	b004      	add	sp, #16
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	46c0      	nop			; (mov r8, r8)
 80069c4:	ffceff88 	.word	0xffceff88
 80069c8:	ffff00ff 	.word	0xffff00ff

080069cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a30      	ldr	r2, [pc, #192]	; (8006aa0 <TIM_Base_SetConfig+0xd4>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d008      	beq.n	80069f6 <TIM_Base_SetConfig+0x2a>
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	2380      	movs	r3, #128	; 0x80
 80069e8:	05db      	lsls	r3, r3, #23
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d003      	beq.n	80069f6 <TIM_Base_SetConfig+0x2a>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a2c      	ldr	r2, [pc, #176]	; (8006aa4 <TIM_Base_SetConfig+0xd8>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d108      	bne.n	8006a08 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2270      	movs	r2, #112	; 0x70
 80069fa:	4393      	bics	r3, r2
 80069fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a25      	ldr	r2, [pc, #148]	; (8006aa0 <TIM_Base_SetConfig+0xd4>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d014      	beq.n	8006a3a <TIM_Base_SetConfig+0x6e>
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	2380      	movs	r3, #128	; 0x80
 8006a14:	05db      	lsls	r3, r3, #23
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d00f      	beq.n	8006a3a <TIM_Base_SetConfig+0x6e>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a21      	ldr	r2, [pc, #132]	; (8006aa4 <TIM_Base_SetConfig+0xd8>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d00b      	beq.n	8006a3a <TIM_Base_SetConfig+0x6e>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a20      	ldr	r2, [pc, #128]	; (8006aa8 <TIM_Base_SetConfig+0xdc>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d007      	beq.n	8006a3a <TIM_Base_SetConfig+0x6e>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a1f      	ldr	r2, [pc, #124]	; (8006aac <TIM_Base_SetConfig+0xe0>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d003      	beq.n	8006a3a <TIM_Base_SetConfig+0x6e>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a1e      	ldr	r2, [pc, #120]	; (8006ab0 <TIM_Base_SetConfig+0xe4>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d108      	bne.n	8006a4c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	4a1d      	ldr	r2, [pc, #116]	; (8006ab4 <TIM_Base_SetConfig+0xe8>)
 8006a3e:	4013      	ands	r3, r2
 8006a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2280      	movs	r2, #128	; 0x80
 8006a50:	4393      	bics	r3, r2
 8006a52:	001a      	movs	r2, r3
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	689a      	ldr	r2, [r3, #8]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a0a      	ldr	r2, [pc, #40]	; (8006aa0 <TIM_Base_SetConfig+0xd4>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d007      	beq.n	8006a8a <TIM_Base_SetConfig+0xbe>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a0b      	ldr	r2, [pc, #44]	; (8006aac <TIM_Base_SetConfig+0xe0>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d003      	beq.n	8006a8a <TIM_Base_SetConfig+0xbe>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a0a      	ldr	r2, [pc, #40]	; (8006ab0 <TIM_Base_SetConfig+0xe4>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d103      	bne.n	8006a92 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	691a      	ldr	r2, [r3, #16]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	615a      	str	r2, [r3, #20]
}
 8006a98:	46c0      	nop			; (mov r8, r8)
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	b004      	add	sp, #16
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	40012c00 	.word	0x40012c00
 8006aa4:	40000400 	.word	0x40000400
 8006aa8:	40002000 	.word	0x40002000
 8006aac:	40014400 	.word	0x40014400
 8006ab0:	40014800 	.word	0x40014800
 8006ab4:	fffffcff 	.word	0xfffffcff

08006ab8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	4393      	bics	r3, r2
 8006aca:	001a      	movs	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a1b      	ldr	r3, [r3, #32]
 8006ad4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4a2e      	ldr	r2, [pc, #184]	; (8006ba0 <TIM_OC1_SetConfig+0xe8>)
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2203      	movs	r2, #3
 8006aee:	4393      	bics	r3, r2
 8006af0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	2202      	movs	r2, #2
 8006b00:	4393      	bics	r3, r2
 8006b02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a24      	ldr	r2, [pc, #144]	; (8006ba4 <TIM_OC1_SetConfig+0xec>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d007      	beq.n	8006b26 <TIM_OC1_SetConfig+0x6e>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a23      	ldr	r2, [pc, #140]	; (8006ba8 <TIM_OC1_SetConfig+0xf0>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d003      	beq.n	8006b26 <TIM_OC1_SetConfig+0x6e>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a22      	ldr	r2, [pc, #136]	; (8006bac <TIM_OC1_SetConfig+0xf4>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d10c      	bne.n	8006b40 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	2208      	movs	r2, #8
 8006b2a:	4393      	bics	r3, r2
 8006b2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	2204      	movs	r2, #4
 8006b3c:	4393      	bics	r3, r2
 8006b3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a18      	ldr	r2, [pc, #96]	; (8006ba4 <TIM_OC1_SetConfig+0xec>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d007      	beq.n	8006b58 <TIM_OC1_SetConfig+0xa0>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a17      	ldr	r2, [pc, #92]	; (8006ba8 <TIM_OC1_SetConfig+0xf0>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d003      	beq.n	8006b58 <TIM_OC1_SetConfig+0xa0>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a16      	ldr	r2, [pc, #88]	; (8006bac <TIM_OC1_SetConfig+0xf4>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d111      	bne.n	8006b7c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	4a15      	ldr	r2, [pc, #84]	; (8006bb0 <TIM_OC1_SetConfig+0xf8>)
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	4a14      	ldr	r2, [pc, #80]	; (8006bb4 <TIM_OC1_SetConfig+0xfc>)
 8006b64:	4013      	ands	r3, r2
 8006b66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	693a      	ldr	r2, [r7, #16]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	621a      	str	r2, [r3, #32]
}
 8006b96:	46c0      	nop			; (mov r8, r8)
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	b006      	add	sp, #24
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	46c0      	nop			; (mov r8, r8)
 8006ba0:	fffeff8f 	.word	0xfffeff8f
 8006ba4:	40012c00 	.word	0x40012c00
 8006ba8:	40014400 	.word	0x40014400
 8006bac:	40014800 	.word	0x40014800
 8006bb0:	fffffeff 	.word	0xfffffeff
 8006bb4:	fffffdff 	.word	0xfffffdff

08006bb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	2210      	movs	r2, #16
 8006bc8:	4393      	bics	r3, r2
 8006bca:	001a      	movs	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a1b      	ldr	r3, [r3, #32]
 8006bd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	4a2c      	ldr	r2, [pc, #176]	; (8006c98 <TIM_OC2_SetConfig+0xe0>)
 8006be6:	4013      	ands	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	4a2b      	ldr	r2, [pc, #172]	; (8006c9c <TIM_OC2_SetConfig+0xe4>)
 8006bee:	4013      	ands	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	021b      	lsls	r3, r3, #8
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	2220      	movs	r2, #32
 8006c02:	4393      	bics	r3, r2
 8006c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	011b      	lsls	r3, r3, #4
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a22      	ldr	r2, [pc, #136]	; (8006ca0 <TIM_OC2_SetConfig+0xe8>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d10d      	bne.n	8006c36 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	2280      	movs	r2, #128	; 0x80
 8006c1e:	4393      	bics	r3, r2
 8006c20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	011b      	lsls	r3, r3, #4
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	2240      	movs	r2, #64	; 0x40
 8006c32:	4393      	bics	r3, r2
 8006c34:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a19      	ldr	r2, [pc, #100]	; (8006ca0 <TIM_OC2_SetConfig+0xe8>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d007      	beq.n	8006c4e <TIM_OC2_SetConfig+0x96>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a18      	ldr	r2, [pc, #96]	; (8006ca4 <TIM_OC2_SetConfig+0xec>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d003      	beq.n	8006c4e <TIM_OC2_SetConfig+0x96>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a17      	ldr	r2, [pc, #92]	; (8006ca8 <TIM_OC2_SetConfig+0xf0>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d113      	bne.n	8006c76 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	4a16      	ldr	r2, [pc, #88]	; (8006cac <TIM_OC2_SetConfig+0xf4>)
 8006c52:	4013      	ands	r3, r2
 8006c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	4a15      	ldr	r2, [pc, #84]	; (8006cb0 <TIM_OC2_SetConfig+0xf8>)
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	621a      	str	r2, [r3, #32]
}
 8006c90:	46c0      	nop			; (mov r8, r8)
 8006c92:	46bd      	mov	sp, r7
 8006c94:	b006      	add	sp, #24
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	feff8fff 	.word	0xfeff8fff
 8006c9c:	fffffcff 	.word	0xfffffcff
 8006ca0:	40012c00 	.word	0x40012c00
 8006ca4:	40014400 	.word	0x40014400
 8006ca8:	40014800 	.word	0x40014800
 8006cac:	fffffbff 	.word	0xfffffbff
 8006cb0:	fffff7ff 	.word	0xfffff7ff

08006cb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b086      	sub	sp, #24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	4a33      	ldr	r2, [pc, #204]	; (8006d90 <TIM_OC3_SetConfig+0xdc>)
 8006cc4:	401a      	ands	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4a2d      	ldr	r2, [pc, #180]	; (8006d94 <TIM_OC3_SetConfig+0xe0>)
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2203      	movs	r2, #3
 8006ce8:	4393      	bics	r3, r2
 8006cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	4a27      	ldr	r2, [pc, #156]	; (8006d98 <TIM_OC3_SetConfig+0xe4>)
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	021b      	lsls	r3, r3, #8
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a23      	ldr	r2, [pc, #140]	; (8006d9c <TIM_OC3_SetConfig+0xe8>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d10d      	bne.n	8006d2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	4a22      	ldr	r2, [pc, #136]	; (8006da0 <TIM_OC3_SetConfig+0xec>)
 8006d16:	4013      	ands	r3, r2
 8006d18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	021b      	lsls	r3, r3, #8
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	4a1e      	ldr	r2, [pc, #120]	; (8006da4 <TIM_OC3_SetConfig+0xf0>)
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a1a      	ldr	r2, [pc, #104]	; (8006d9c <TIM_OC3_SetConfig+0xe8>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d007      	beq.n	8006d46 <TIM_OC3_SetConfig+0x92>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a1b      	ldr	r2, [pc, #108]	; (8006da8 <TIM_OC3_SetConfig+0xf4>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d003      	beq.n	8006d46 <TIM_OC3_SetConfig+0x92>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a1a      	ldr	r2, [pc, #104]	; (8006dac <TIM_OC3_SetConfig+0xf8>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d113      	bne.n	8006d6e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	4a19      	ldr	r2, [pc, #100]	; (8006db0 <TIM_OC3_SetConfig+0xfc>)
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	4a18      	ldr	r2, [pc, #96]	; (8006db4 <TIM_OC3_SetConfig+0x100>)
 8006d52:	4013      	ands	r3, r2
 8006d54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	011b      	lsls	r3, r3, #4
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	011b      	lsls	r3, r3, #4
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	621a      	str	r2, [r3, #32]
}
 8006d88:	46c0      	nop			; (mov r8, r8)
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	b006      	add	sp, #24
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	fffffeff 	.word	0xfffffeff
 8006d94:	fffeff8f 	.word	0xfffeff8f
 8006d98:	fffffdff 	.word	0xfffffdff
 8006d9c:	40012c00 	.word	0x40012c00
 8006da0:	fffff7ff 	.word	0xfffff7ff
 8006da4:	fffffbff 	.word	0xfffffbff
 8006da8:	40014400 	.word	0x40014400
 8006dac:	40014800 	.word	0x40014800
 8006db0:	ffffefff 	.word	0xffffefff
 8006db4:	ffffdfff 	.word	0xffffdfff

08006db8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	4a26      	ldr	r2, [pc, #152]	; (8006e60 <TIM_OC4_SetConfig+0xa8>)
 8006dc8:	401a      	ands	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	4a20      	ldr	r2, [pc, #128]	; (8006e64 <TIM_OC4_SetConfig+0xac>)
 8006de4:	4013      	ands	r3, r2
 8006de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	4a1f      	ldr	r2, [pc, #124]	; (8006e68 <TIM_OC4_SetConfig+0xb0>)
 8006dec:	4013      	ands	r3, r2
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	021b      	lsls	r3, r3, #8
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	4a1b      	ldr	r2, [pc, #108]	; (8006e6c <TIM_OC4_SetConfig+0xb4>)
 8006e00:	4013      	ands	r3, r2
 8006e02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	031b      	lsls	r3, r3, #12
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a17      	ldr	r2, [pc, #92]	; (8006e70 <TIM_OC4_SetConfig+0xb8>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d007      	beq.n	8006e28 <TIM_OC4_SetConfig+0x70>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a16      	ldr	r2, [pc, #88]	; (8006e74 <TIM_OC4_SetConfig+0xbc>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d003      	beq.n	8006e28 <TIM_OC4_SetConfig+0x70>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a15      	ldr	r2, [pc, #84]	; (8006e78 <TIM_OC4_SetConfig+0xc0>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d109      	bne.n	8006e3c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	4a14      	ldr	r2, [pc, #80]	; (8006e7c <TIM_OC4_SetConfig+0xc4>)
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	695b      	ldr	r3, [r3, #20]
 8006e34:	019b      	lsls	r3, r3, #6
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	621a      	str	r2, [r3, #32]
}
 8006e56:	46c0      	nop			; (mov r8, r8)
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	b006      	add	sp, #24
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	46c0      	nop			; (mov r8, r8)
 8006e60:	ffffefff 	.word	0xffffefff
 8006e64:	feff8fff 	.word	0xfeff8fff
 8006e68:	fffffcff 	.word	0xfffffcff
 8006e6c:	ffffdfff 	.word	0xffffdfff
 8006e70:	40012c00 	.word	0x40012c00
 8006e74:	40014400 	.word	0x40014400
 8006e78:	40014800 	.word	0x40014800
 8006e7c:	ffffbfff 	.word	0xffffbfff

08006e80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	4a23      	ldr	r2, [pc, #140]	; (8006f1c <TIM_OC5_SetConfig+0x9c>)
 8006e90:	401a      	ands	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	4a1d      	ldr	r2, [pc, #116]	; (8006f20 <TIM_OC5_SetConfig+0xa0>)
 8006eac:	4013      	ands	r3, r2
 8006eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	4a19      	ldr	r2, [pc, #100]	; (8006f24 <TIM_OC5_SetConfig+0xa4>)
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	041b      	lsls	r3, r3, #16
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a15      	ldr	r2, [pc, #84]	; (8006f28 <TIM_OC5_SetConfig+0xa8>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d007      	beq.n	8006ee6 <TIM_OC5_SetConfig+0x66>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a14      	ldr	r2, [pc, #80]	; (8006f2c <TIM_OC5_SetConfig+0xac>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d003      	beq.n	8006ee6 <TIM_OC5_SetConfig+0x66>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a13      	ldr	r2, [pc, #76]	; (8006f30 <TIM_OC5_SetConfig+0xb0>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d109      	bne.n	8006efa <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	4a0c      	ldr	r2, [pc, #48]	; (8006f1c <TIM_OC5_SetConfig+0x9c>)
 8006eea:	4013      	ands	r3, r2
 8006eec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	021b      	lsls	r3, r3, #8
 8006ef4:	697a      	ldr	r2, [r7, #20]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	621a      	str	r2, [r3, #32]
}
 8006f14:	46c0      	nop			; (mov r8, r8)
 8006f16:	46bd      	mov	sp, r7
 8006f18:	b006      	add	sp, #24
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	fffeffff 	.word	0xfffeffff
 8006f20:	fffeff8f 	.word	0xfffeff8f
 8006f24:	fffdffff 	.word	0xfffdffff
 8006f28:	40012c00 	.word	0x40012c00
 8006f2c:	40014400 	.word	0x40014400
 8006f30:	40014800 	.word	0x40014800

08006f34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	4a24      	ldr	r2, [pc, #144]	; (8006fd4 <TIM_OC6_SetConfig+0xa0>)
 8006f44:	401a      	ands	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	4a1e      	ldr	r2, [pc, #120]	; (8006fd8 <TIM_OC6_SetConfig+0xa4>)
 8006f60:	4013      	ands	r3, r2
 8006f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	021b      	lsls	r3, r3, #8
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	4a1a      	ldr	r2, [pc, #104]	; (8006fdc <TIM_OC6_SetConfig+0xa8>)
 8006f74:	4013      	ands	r3, r2
 8006f76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	051b      	lsls	r3, r3, #20
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a16      	ldr	r2, [pc, #88]	; (8006fe0 <TIM_OC6_SetConfig+0xac>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d007      	beq.n	8006f9c <TIM_OC6_SetConfig+0x68>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a15      	ldr	r2, [pc, #84]	; (8006fe4 <TIM_OC6_SetConfig+0xb0>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d003      	beq.n	8006f9c <TIM_OC6_SetConfig+0x68>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a14      	ldr	r2, [pc, #80]	; (8006fe8 <TIM_OC6_SetConfig+0xb4>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d109      	bne.n	8006fb0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	4a13      	ldr	r2, [pc, #76]	; (8006fec <TIM_OC6_SetConfig+0xb8>)
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	695b      	ldr	r3, [r3, #20]
 8006fa8:	029b      	lsls	r3, r3, #10
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	621a      	str	r2, [r3, #32]
}
 8006fca:	46c0      	nop			; (mov r8, r8)
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	b006      	add	sp, #24
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	46c0      	nop			; (mov r8, r8)
 8006fd4:	ffefffff 	.word	0xffefffff
 8006fd8:	feff8fff 	.word	0xfeff8fff
 8006fdc:	ffdfffff 	.word	0xffdfffff
 8006fe0:	40012c00 	.word	0x40012c00
 8006fe4:	40014400 	.word	0x40014400
 8006fe8:	40014800 	.word	0x40014800
 8006fec:	fffbffff 	.word	0xfffbffff

08006ff0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	2201      	movs	r2, #1
 8007008:	4393      	bics	r3, r2
 800700a:	001a      	movs	r2, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	22f0      	movs	r2, #240	; 0xf0
 800701a:	4393      	bics	r3, r2
 800701c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	011b      	lsls	r3, r3, #4
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	4313      	orrs	r3, r2
 8007026:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	220a      	movs	r2, #10
 800702c:	4393      	bics	r3, r2
 800702e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	4313      	orrs	r3, r2
 8007036:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	621a      	str	r2, [r3, #32]
}
 8007044:	46c0      	nop			; (mov r8, r8)
 8007046:	46bd      	mov	sp, r7
 8007048:	b006      	add	sp, #24
 800704a:	bd80      	pop	{r7, pc}

0800704c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6a1b      	ldr	r3, [r3, #32]
 800705c:	2210      	movs	r2, #16
 800705e:	4393      	bics	r3, r2
 8007060:	001a      	movs	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	4a0d      	ldr	r2, [pc, #52]	; (80070ac <TIM_TI2_ConfigInputStage+0x60>)
 8007076:	4013      	ands	r3, r2
 8007078:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	031b      	lsls	r3, r3, #12
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	4313      	orrs	r3, r2
 8007082:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	22a0      	movs	r2, #160	; 0xa0
 8007088:	4393      	bics	r3, r2
 800708a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	011b      	lsls	r3, r3, #4
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	4313      	orrs	r3, r2
 8007094:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	621a      	str	r2, [r3, #32]
}
 80070a2:	46c0      	nop			; (mov r8, r8)
 80070a4:	46bd      	mov	sp, r7
 80070a6:	b006      	add	sp, #24
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	46c0      	nop			; (mov r8, r8)
 80070ac:	ffff0fff 	.word	0xffff0fff

080070b0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	4a08      	ldr	r2, [pc, #32]	; (80070e4 <TIM_ITRx_SetConfig+0x34>)
 80070c4:	4013      	ands	r3, r2
 80070c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070c8:	683a      	ldr	r2, [r7, #0]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	2207      	movs	r2, #7
 80070d0:	4313      	orrs	r3, r2
 80070d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	609a      	str	r2, [r3, #8]
}
 80070da:	46c0      	nop			; (mov r8, r8)
 80070dc:	46bd      	mov	sp, r7
 80070de:	b004      	add	sp, #16
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	46c0      	nop			; (mov r8, r8)
 80070e4:	ffcfff8f 	.word	0xffcfff8f

080070e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
 80070f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	4a09      	ldr	r2, [pc, #36]	; (8007124 <TIM_ETR_SetConfig+0x3c>)
 8007100:	4013      	ands	r3, r2
 8007102:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	021a      	lsls	r2, r3, #8
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	431a      	orrs	r2, r3
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	4313      	orrs	r3, r2
 8007110:	697a      	ldr	r2, [r7, #20]
 8007112:	4313      	orrs	r3, r2
 8007114:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	697a      	ldr	r2, [r7, #20]
 800711a:	609a      	str	r2, [r3, #8]
}
 800711c:	46c0      	nop			; (mov r8, r8)
 800711e:	46bd      	mov	sp, r7
 8007120:	b006      	add	sp, #24
 8007122:	bd80      	pop	{r7, pc}
 8007124:	ffff00ff 	.word	0xffff00ff

08007128 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	221f      	movs	r2, #31
 8007138:	4013      	ands	r3, r2
 800713a:	2201      	movs	r2, #1
 800713c:	409a      	lsls	r2, r3
 800713e:	0013      	movs	r3, r2
 8007140:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	43d2      	mvns	r2, r2
 800714a:	401a      	ands	r2, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6a1a      	ldr	r2, [r3, #32]
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	211f      	movs	r1, #31
 8007158:	400b      	ands	r3, r1
 800715a:	6879      	ldr	r1, [r7, #4]
 800715c:	4099      	lsls	r1, r3
 800715e:	000b      	movs	r3, r1
 8007160:	431a      	orrs	r2, r3
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	621a      	str	r2, [r3, #32]
}
 8007166:	46c0      	nop			; (mov r8, r8)
 8007168:	46bd      	mov	sp, r7
 800716a:	b006      	add	sp, #24
 800716c:	bd80      	pop	{r7, pc}
	...

08007170 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	223c      	movs	r2, #60	; 0x3c
 800717e:	5c9b      	ldrb	r3, [r3, r2]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d101      	bne.n	8007188 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007184:	2302      	movs	r3, #2
 8007186:	e050      	b.n	800722a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	223c      	movs	r2, #60	; 0x3c
 800718c:	2101      	movs	r1, #1
 800718e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	223d      	movs	r2, #61	; 0x3d
 8007194:	2102      	movs	r1, #2
 8007196:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a21      	ldr	r2, [pc, #132]	; (8007234 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d108      	bne.n	80071c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	4a20      	ldr	r2, [pc, #128]	; (8007238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80071b6:	4013      	ands	r3, r2
 80071b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2270      	movs	r2, #112	; 0x70
 80071c8:	4393      	bics	r3, r2
 80071ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a14      	ldr	r2, [pc, #80]	; (8007234 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d00a      	beq.n	80071fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	2380      	movs	r3, #128	; 0x80
 80071ee:	05db      	lsls	r3, r3, #23
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d004      	beq.n	80071fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a10      	ldr	r2, [pc, #64]	; (800723c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d10c      	bne.n	8007218 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	2280      	movs	r2, #128	; 0x80
 8007202:	4393      	bics	r3, r2
 8007204:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	4313      	orrs	r3, r2
 800720e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68ba      	ldr	r2, [r7, #8]
 8007216:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	223d      	movs	r2, #61	; 0x3d
 800721c:	2101      	movs	r1, #1
 800721e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	223c      	movs	r2, #60	; 0x3c
 8007224:	2100      	movs	r1, #0
 8007226:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	0018      	movs	r0, r3
 800722c:	46bd      	mov	sp, r7
 800722e:	b004      	add	sp, #16
 8007230:	bd80      	pop	{r7, pc}
 8007232:	46c0      	nop			; (mov r8, r8)
 8007234:	40012c00 	.word	0x40012c00
 8007238:	ff0fffff 	.word	0xff0fffff
 800723c:	40000400 	.word	0x40000400

08007240 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800724a:	2300      	movs	r3, #0
 800724c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	223c      	movs	r2, #60	; 0x3c
 8007252:	5c9b      	ldrb	r3, [r3, r2]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d101      	bne.n	800725c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007258:	2302      	movs	r3, #2
 800725a:	e079      	b.n	8007350 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	223c      	movs	r2, #60	; 0x3c
 8007260:	2101      	movs	r1, #1
 8007262:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	22ff      	movs	r2, #255	; 0xff
 8007268:	4393      	bics	r3, r2
 800726a:	001a      	movs	r2, r3
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	4313      	orrs	r3, r2
 8007272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4a38      	ldr	r2, [pc, #224]	; (8007358 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8007278:	401a      	ands	r2, r3
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	4313      	orrs	r3, r2
 8007280:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	4a35      	ldr	r2, [pc, #212]	; (800735c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007286:	401a      	ands	r2, r3
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	4313      	orrs	r3, r2
 800728e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4a33      	ldr	r2, [pc, #204]	; (8007360 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007294:	401a      	ands	r2, r3
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4313      	orrs	r3, r2
 800729c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	4a30      	ldr	r2, [pc, #192]	; (8007364 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80072a2:	401a      	ands	r2, r3
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	4a2e      	ldr	r2, [pc, #184]	; (8007368 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80072b0:	401a      	ands	r2, r3
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	4a2b      	ldr	r2, [pc, #172]	; (800736c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80072be:	401a      	ands	r2, r3
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c4:	4313      	orrs	r3, r2
 80072c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	4a29      	ldr	r2, [pc, #164]	; (8007370 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80072cc:	401a      	ands	r2, r3
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	041b      	lsls	r3, r3, #16
 80072d4:	4313      	orrs	r3, r2
 80072d6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a25      	ldr	r2, [pc, #148]	; (8007374 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d106      	bne.n	80072f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	4a24      	ldr	r2, [pc, #144]	; (8007378 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80072e6:	401a      	ands	r2, r3
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	69db      	ldr	r3, [r3, #28]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a1f      	ldr	r2, [pc, #124]	; (8007374 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d121      	bne.n	800733e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	4a1f      	ldr	r2, [pc, #124]	; (800737c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80072fe:	401a      	ands	r2, r3
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007304:	051b      	lsls	r3, r3, #20
 8007306:	4313      	orrs	r3, r2
 8007308:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	4a1c      	ldr	r2, [pc, #112]	; (8007380 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800730e:	401a      	ands	r2, r3
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	4313      	orrs	r3, r2
 8007316:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	4a1a      	ldr	r2, [pc, #104]	; (8007384 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800731c:	401a      	ands	r2, r3
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007322:	4313      	orrs	r3, r2
 8007324:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a12      	ldr	r2, [pc, #72]	; (8007374 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d106      	bne.n	800733e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	4a15      	ldr	r2, [pc, #84]	; (8007388 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8007334:	401a      	ands	r2, r3
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733a:	4313      	orrs	r3, r2
 800733c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	223c      	movs	r2, #60	; 0x3c
 800734a:	2100      	movs	r1, #0
 800734c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	0018      	movs	r0, r3
 8007352:	46bd      	mov	sp, r7
 8007354:	b004      	add	sp, #16
 8007356:	bd80      	pop	{r7, pc}
 8007358:	fffffcff 	.word	0xfffffcff
 800735c:	fffffbff 	.word	0xfffffbff
 8007360:	fffff7ff 	.word	0xfffff7ff
 8007364:	ffffefff 	.word	0xffffefff
 8007368:	ffffdfff 	.word	0xffffdfff
 800736c:	ffffbfff 	.word	0xffffbfff
 8007370:	fff0ffff 	.word	0xfff0ffff
 8007374:	40012c00 	.word	0x40012c00
 8007378:	efffffff 	.word	0xefffffff
 800737c:	ff0fffff 	.word	0xff0fffff
 8007380:	feffffff 	.word	0xfeffffff
 8007384:	fdffffff 	.word	0xfdffffff
 8007388:	dfffffff 	.word	0xdfffffff

0800738c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e046      	b.n	800742c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2288      	movs	r2, #136	; 0x88
 80073a2:	589b      	ldr	r3, [r3, r2]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d107      	bne.n	80073b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2284      	movs	r2, #132	; 0x84
 80073ac:	2100      	movs	r1, #0
 80073ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	0018      	movs	r0, r3
 80073b4:	f7fd f9ba 	bl	800472c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2288      	movs	r2, #136	; 0x88
 80073bc:	2124      	movs	r1, #36	; 0x24
 80073be:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2101      	movs	r1, #1
 80073cc:	438a      	bics	r2, r1
 80073ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	0018      	movs	r0, r3
 80073d4:	f000 fc0a 	bl	8007bec <UART_SetConfig>
 80073d8:	0003      	movs	r3, r0
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d101      	bne.n	80073e2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e024      	b.n	800742c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d003      	beq.n	80073f2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	0018      	movs	r0, r3
 80073ee:	f000 fe75 	bl	80080dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	490d      	ldr	r1, [pc, #52]	; (8007434 <HAL_UART_Init+0xa8>)
 80073fe:	400a      	ands	r2, r1
 8007400:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	689a      	ldr	r2, [r3, #8]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	212a      	movs	r1, #42	; 0x2a
 800740e:	438a      	bics	r2, r1
 8007410:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2101      	movs	r1, #1
 800741e:	430a      	orrs	r2, r1
 8007420:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	0018      	movs	r0, r3
 8007426:	f000 ff0d 	bl	8008244 <UART_CheckIdleState>
 800742a:	0003      	movs	r3, r0
}
 800742c:	0018      	movs	r0, r3
 800742e:	46bd      	mov	sp, r7
 8007430:	b002      	add	sp, #8
 8007432:	bd80      	pop	{r7, pc}
 8007434:	ffffb7ff 	.word	0xffffb7ff

08007438 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b08a      	sub	sp, #40	; 0x28
 800743c:	af02      	add	r7, sp, #8
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	603b      	str	r3, [r7, #0]
 8007444:	1dbb      	adds	r3, r7, #6
 8007446:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2288      	movs	r2, #136	; 0x88
 800744c:	589b      	ldr	r3, [r3, r2]
 800744e:	2b20      	cmp	r3, #32
 8007450:	d000      	beq.n	8007454 <HAL_UART_Transmit+0x1c>
 8007452:	e088      	b.n	8007566 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <HAL_UART_Transmit+0x2a>
 800745a:	1dbb      	adds	r3, r7, #6
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d101      	bne.n	8007466 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e080      	b.n	8007568 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	689a      	ldr	r2, [r3, #8]
 800746a:	2380      	movs	r3, #128	; 0x80
 800746c:	015b      	lsls	r3, r3, #5
 800746e:	429a      	cmp	r2, r3
 8007470:	d109      	bne.n	8007486 <HAL_UART_Transmit+0x4e>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d105      	bne.n	8007486 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	2201      	movs	r2, #1
 800747e:	4013      	ands	r3, r2
 8007480:	d001      	beq.n	8007486 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e070      	b.n	8007568 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2290      	movs	r2, #144	; 0x90
 800748a:	2100      	movs	r1, #0
 800748c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2288      	movs	r2, #136	; 0x88
 8007492:	2121      	movs	r1, #33	; 0x21
 8007494:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007496:	f7fd fb57 	bl	8004b48 <HAL_GetTick>
 800749a:	0003      	movs	r3, r0
 800749c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	1dba      	adds	r2, r7, #6
 80074a2:	2154      	movs	r1, #84	; 0x54
 80074a4:	8812      	ldrh	r2, [r2, #0]
 80074a6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	1dba      	adds	r2, r7, #6
 80074ac:	2156      	movs	r1, #86	; 0x56
 80074ae:	8812      	ldrh	r2, [r2, #0]
 80074b0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	689a      	ldr	r2, [r3, #8]
 80074b6:	2380      	movs	r3, #128	; 0x80
 80074b8:	015b      	lsls	r3, r3, #5
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d108      	bne.n	80074d0 <HAL_UART_Transmit+0x98>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d104      	bne.n	80074d0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80074c6:	2300      	movs	r3, #0
 80074c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	61bb      	str	r3, [r7, #24]
 80074ce:	e003      	b.n	80074d8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074d4:	2300      	movs	r3, #0
 80074d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80074d8:	e02c      	b.n	8007534 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	9300      	str	r3, [sp, #0]
 80074e2:	0013      	movs	r3, r2
 80074e4:	2200      	movs	r2, #0
 80074e6:	2180      	movs	r1, #128	; 0x80
 80074e8:	f000 fefa 	bl	80082e0 <UART_WaitOnFlagUntilTimeout>
 80074ec:	1e03      	subs	r3, r0, #0
 80074ee:	d001      	beq.n	80074f4 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e039      	b.n	8007568 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10b      	bne.n	8007512 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	881b      	ldrh	r3, [r3, #0]
 80074fe:	001a      	movs	r2, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	05d2      	lsls	r2, r2, #23
 8007506:	0dd2      	lsrs	r2, r2, #23
 8007508:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	3302      	adds	r3, #2
 800750e:	61bb      	str	r3, [r7, #24]
 8007510:	e007      	b.n	8007522 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	781a      	ldrb	r2, [r3, #0]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	3301      	adds	r3, #1
 8007520:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2256      	movs	r2, #86	; 0x56
 8007526:	5a9b      	ldrh	r3, [r3, r2]
 8007528:	b29b      	uxth	r3, r3
 800752a:	3b01      	subs	r3, #1
 800752c:	b299      	uxth	r1, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2256      	movs	r2, #86	; 0x56
 8007532:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2256      	movs	r2, #86	; 0x56
 8007538:	5a9b      	ldrh	r3, [r3, r2]
 800753a:	b29b      	uxth	r3, r3
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1cc      	bne.n	80074da <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	9300      	str	r3, [sp, #0]
 8007548:	0013      	movs	r3, r2
 800754a:	2200      	movs	r2, #0
 800754c:	2140      	movs	r1, #64	; 0x40
 800754e:	f000 fec7 	bl	80082e0 <UART_WaitOnFlagUntilTimeout>
 8007552:	1e03      	subs	r3, r0, #0
 8007554:	d001      	beq.n	800755a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8007556:	2303      	movs	r3, #3
 8007558:	e006      	b.n	8007568 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2288      	movs	r2, #136	; 0x88
 800755e:	2120      	movs	r1, #32
 8007560:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007562:	2300      	movs	r3, #0
 8007564:	e000      	b.n	8007568 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8007566:	2302      	movs	r3, #2
  }
}
 8007568:	0018      	movs	r0, r3
 800756a:	46bd      	mov	sp, r7
 800756c:	b008      	add	sp, #32
 800756e:	bd80      	pop	{r7, pc}

08007570 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007570:	b5b0      	push	{r4, r5, r7, lr}
 8007572:	b0aa      	sub	sp, #168	; 0xa8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	22a4      	movs	r2, #164	; 0xa4
 8007580:	18b9      	adds	r1, r7, r2
 8007582:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	20a0      	movs	r0, #160	; 0xa0
 800758c:	1839      	adds	r1, r7, r0
 800758e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	249c      	movs	r4, #156	; 0x9c
 8007598:	1939      	adds	r1, r7, r4
 800759a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800759c:	0011      	movs	r1, r2
 800759e:	18bb      	adds	r3, r7, r2
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4aa2      	ldr	r2, [pc, #648]	; (800782c <HAL_UART_IRQHandler+0x2bc>)
 80075a4:	4013      	ands	r3, r2
 80075a6:	2298      	movs	r2, #152	; 0x98
 80075a8:	18bd      	adds	r5, r7, r2
 80075aa:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80075ac:	18bb      	adds	r3, r7, r2
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d11a      	bne.n	80075ea <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80075b4:	187b      	adds	r3, r7, r1
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2220      	movs	r2, #32
 80075ba:	4013      	ands	r3, r2
 80075bc:	d015      	beq.n	80075ea <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80075be:	183b      	adds	r3, r7, r0
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2220      	movs	r2, #32
 80075c4:	4013      	ands	r3, r2
 80075c6:	d105      	bne.n	80075d4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80075c8:	193b      	adds	r3, r7, r4
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	2380      	movs	r3, #128	; 0x80
 80075ce:	055b      	lsls	r3, r3, #21
 80075d0:	4013      	ands	r3, r2
 80075d2:	d00a      	beq.n	80075ea <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d100      	bne.n	80075de <HAL_UART_IRQHandler+0x6e>
 80075dc:	e2dc      	b.n	8007b98 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	0010      	movs	r0, r2
 80075e6:	4798      	blx	r3
      }
      return;
 80075e8:	e2d6      	b.n	8007b98 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80075ea:	2398      	movs	r3, #152	; 0x98
 80075ec:	18fb      	adds	r3, r7, r3
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d100      	bne.n	80075f6 <HAL_UART_IRQHandler+0x86>
 80075f4:	e122      	b.n	800783c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80075f6:	239c      	movs	r3, #156	; 0x9c
 80075f8:	18fb      	adds	r3, r7, r3
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a8c      	ldr	r2, [pc, #560]	; (8007830 <HAL_UART_IRQHandler+0x2c0>)
 80075fe:	4013      	ands	r3, r2
 8007600:	d106      	bne.n	8007610 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007602:	23a0      	movs	r3, #160	; 0xa0
 8007604:	18fb      	adds	r3, r7, r3
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a8a      	ldr	r2, [pc, #552]	; (8007834 <HAL_UART_IRQHandler+0x2c4>)
 800760a:	4013      	ands	r3, r2
 800760c:	d100      	bne.n	8007610 <HAL_UART_IRQHandler+0xa0>
 800760e:	e115      	b.n	800783c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007610:	23a4      	movs	r3, #164	; 0xa4
 8007612:	18fb      	adds	r3, r7, r3
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2201      	movs	r2, #1
 8007618:	4013      	ands	r3, r2
 800761a:	d012      	beq.n	8007642 <HAL_UART_IRQHandler+0xd2>
 800761c:	23a0      	movs	r3, #160	; 0xa0
 800761e:	18fb      	adds	r3, r7, r3
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	2380      	movs	r3, #128	; 0x80
 8007624:	005b      	lsls	r3, r3, #1
 8007626:	4013      	ands	r3, r2
 8007628:	d00b      	beq.n	8007642 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2201      	movs	r2, #1
 8007630:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2290      	movs	r2, #144	; 0x90
 8007636:	589b      	ldr	r3, [r3, r2]
 8007638:	2201      	movs	r2, #1
 800763a:	431a      	orrs	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2190      	movs	r1, #144	; 0x90
 8007640:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007642:	23a4      	movs	r3, #164	; 0xa4
 8007644:	18fb      	adds	r3, r7, r3
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2202      	movs	r2, #2
 800764a:	4013      	ands	r3, r2
 800764c:	d011      	beq.n	8007672 <HAL_UART_IRQHandler+0x102>
 800764e:	239c      	movs	r3, #156	; 0x9c
 8007650:	18fb      	adds	r3, r7, r3
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2201      	movs	r2, #1
 8007656:	4013      	ands	r3, r2
 8007658:	d00b      	beq.n	8007672 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2202      	movs	r2, #2
 8007660:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2290      	movs	r2, #144	; 0x90
 8007666:	589b      	ldr	r3, [r3, r2]
 8007668:	2204      	movs	r2, #4
 800766a:	431a      	orrs	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2190      	movs	r1, #144	; 0x90
 8007670:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007672:	23a4      	movs	r3, #164	; 0xa4
 8007674:	18fb      	adds	r3, r7, r3
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2204      	movs	r2, #4
 800767a:	4013      	ands	r3, r2
 800767c:	d011      	beq.n	80076a2 <HAL_UART_IRQHandler+0x132>
 800767e:	239c      	movs	r3, #156	; 0x9c
 8007680:	18fb      	adds	r3, r7, r3
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2201      	movs	r2, #1
 8007686:	4013      	ands	r3, r2
 8007688:	d00b      	beq.n	80076a2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2204      	movs	r2, #4
 8007690:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2290      	movs	r2, #144	; 0x90
 8007696:	589b      	ldr	r3, [r3, r2]
 8007698:	2202      	movs	r2, #2
 800769a:	431a      	orrs	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2190      	movs	r1, #144	; 0x90
 80076a0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80076a2:	23a4      	movs	r3, #164	; 0xa4
 80076a4:	18fb      	adds	r3, r7, r3
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2208      	movs	r2, #8
 80076aa:	4013      	ands	r3, r2
 80076ac:	d017      	beq.n	80076de <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80076ae:	23a0      	movs	r3, #160	; 0xa0
 80076b0:	18fb      	adds	r3, r7, r3
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2220      	movs	r2, #32
 80076b6:	4013      	ands	r3, r2
 80076b8:	d105      	bne.n	80076c6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80076ba:	239c      	movs	r3, #156	; 0x9c
 80076bc:	18fb      	adds	r3, r7, r3
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a5b      	ldr	r2, [pc, #364]	; (8007830 <HAL_UART_IRQHandler+0x2c0>)
 80076c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80076c4:	d00b      	beq.n	80076de <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2208      	movs	r2, #8
 80076cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2290      	movs	r2, #144	; 0x90
 80076d2:	589b      	ldr	r3, [r3, r2]
 80076d4:	2208      	movs	r2, #8
 80076d6:	431a      	orrs	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2190      	movs	r1, #144	; 0x90
 80076dc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80076de:	23a4      	movs	r3, #164	; 0xa4
 80076e0:	18fb      	adds	r3, r7, r3
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	2380      	movs	r3, #128	; 0x80
 80076e6:	011b      	lsls	r3, r3, #4
 80076e8:	4013      	ands	r3, r2
 80076ea:	d013      	beq.n	8007714 <HAL_UART_IRQHandler+0x1a4>
 80076ec:	23a0      	movs	r3, #160	; 0xa0
 80076ee:	18fb      	adds	r3, r7, r3
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	2380      	movs	r3, #128	; 0x80
 80076f4:	04db      	lsls	r3, r3, #19
 80076f6:	4013      	ands	r3, r2
 80076f8:	d00c      	beq.n	8007714 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2280      	movs	r2, #128	; 0x80
 8007700:	0112      	lsls	r2, r2, #4
 8007702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2290      	movs	r2, #144	; 0x90
 8007708:	589b      	ldr	r3, [r3, r2]
 800770a:	2220      	movs	r2, #32
 800770c:	431a      	orrs	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2190      	movs	r1, #144	; 0x90
 8007712:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2290      	movs	r2, #144	; 0x90
 8007718:	589b      	ldr	r3, [r3, r2]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d100      	bne.n	8007720 <HAL_UART_IRQHandler+0x1b0>
 800771e:	e23d      	b.n	8007b9c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007720:	23a4      	movs	r3, #164	; 0xa4
 8007722:	18fb      	adds	r3, r7, r3
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2220      	movs	r2, #32
 8007728:	4013      	ands	r3, r2
 800772a:	d015      	beq.n	8007758 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800772c:	23a0      	movs	r3, #160	; 0xa0
 800772e:	18fb      	adds	r3, r7, r3
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2220      	movs	r2, #32
 8007734:	4013      	ands	r3, r2
 8007736:	d106      	bne.n	8007746 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007738:	239c      	movs	r3, #156	; 0x9c
 800773a:	18fb      	adds	r3, r7, r3
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	2380      	movs	r3, #128	; 0x80
 8007740:	055b      	lsls	r3, r3, #21
 8007742:	4013      	ands	r3, r2
 8007744:	d008      	beq.n	8007758 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800774a:	2b00      	cmp	r3, #0
 800774c:	d004      	beq.n	8007758 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	0010      	movs	r0, r2
 8007756:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2290      	movs	r2, #144	; 0x90
 800775c:	589b      	ldr	r3, [r3, r2]
 800775e:	2194      	movs	r1, #148	; 0x94
 8007760:	187a      	adds	r2, r7, r1
 8007762:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	2240      	movs	r2, #64	; 0x40
 800776c:	4013      	ands	r3, r2
 800776e:	2b40      	cmp	r3, #64	; 0x40
 8007770:	d004      	beq.n	800777c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007772:	187b      	adds	r3, r7, r1
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2228      	movs	r2, #40	; 0x28
 8007778:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800777a:	d04c      	beq.n	8007816 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	0018      	movs	r0, r3
 8007780:	f000 ff9a 	bl	80086b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	2240      	movs	r2, #64	; 0x40
 800778c:	4013      	ands	r3, r2
 800778e:	2b40      	cmp	r3, #64	; 0x40
 8007790:	d13c      	bne.n	800780c <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007792:	f3ef 8310 	mrs	r3, PRIMASK
 8007796:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007798:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800779a:	2090      	movs	r0, #144	; 0x90
 800779c:	183a      	adds	r2, r7, r0
 800779e:	6013      	str	r3, [r2, #0]
 80077a0:	2301      	movs	r3, #1
 80077a2:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077a6:	f383 8810 	msr	PRIMASK, r3
}
 80077aa:	46c0      	nop			; (mov r8, r8)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	689a      	ldr	r2, [r3, #8]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2140      	movs	r1, #64	; 0x40
 80077b8:	438a      	bics	r2, r1
 80077ba:	609a      	str	r2, [r3, #8]
 80077bc:	183b      	adds	r3, r7, r0
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077c4:	f383 8810 	msr	PRIMASK, r3
}
 80077c8:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2280      	movs	r2, #128	; 0x80
 80077ce:	589b      	ldr	r3, [r3, r2]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d016      	beq.n	8007802 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2280      	movs	r2, #128	; 0x80
 80077d8:	589b      	ldr	r3, [r3, r2]
 80077da:	4a17      	ldr	r2, [pc, #92]	; (8007838 <HAL_UART_IRQHandler+0x2c8>)
 80077dc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2280      	movs	r2, #128	; 0x80
 80077e2:	589b      	ldr	r3, [r3, r2]
 80077e4:	0018      	movs	r0, r3
 80077e6:	f7fd faf9 	bl	8004ddc <HAL_DMA_Abort_IT>
 80077ea:	1e03      	subs	r3, r0, #0
 80077ec:	d01c      	beq.n	8007828 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2280      	movs	r2, #128	; 0x80
 80077f2:	589b      	ldr	r3, [r3, r2]
 80077f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	2180      	movs	r1, #128	; 0x80
 80077fa:	5852      	ldr	r2, [r2, r1]
 80077fc:	0010      	movs	r0, r2
 80077fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007800:	e012      	b.n	8007828 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	0018      	movs	r0, r3
 8007806:	f000 f9e9 	bl	8007bdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800780a:	e00d      	b.n	8007828 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	0018      	movs	r0, r3
 8007810:	f000 f9e4 	bl	8007bdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007814:	e008      	b.n	8007828 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	0018      	movs	r0, r3
 800781a:	f000 f9df 	bl	8007bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2290      	movs	r2, #144	; 0x90
 8007822:	2100      	movs	r1, #0
 8007824:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8007826:	e1b9      	b.n	8007b9c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007828:	46c0      	nop			; (mov r8, r8)
    return;
 800782a:	e1b7      	b.n	8007b9c <HAL_UART_IRQHandler+0x62c>
 800782c:	0000080f 	.word	0x0000080f
 8007830:	10000001 	.word	0x10000001
 8007834:	04000120 	.word	0x04000120
 8007838:	08008785 	.word	0x08008785

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007840:	2b01      	cmp	r3, #1
 8007842:	d000      	beq.n	8007846 <HAL_UART_IRQHandler+0x2d6>
 8007844:	e13e      	b.n	8007ac4 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007846:	23a4      	movs	r3, #164	; 0xa4
 8007848:	18fb      	adds	r3, r7, r3
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2210      	movs	r2, #16
 800784e:	4013      	ands	r3, r2
 8007850:	d100      	bne.n	8007854 <HAL_UART_IRQHandler+0x2e4>
 8007852:	e137      	b.n	8007ac4 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007854:	23a0      	movs	r3, #160	; 0xa0
 8007856:	18fb      	adds	r3, r7, r3
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2210      	movs	r2, #16
 800785c:	4013      	ands	r3, r2
 800785e:	d100      	bne.n	8007862 <HAL_UART_IRQHandler+0x2f2>
 8007860:	e130      	b.n	8007ac4 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2210      	movs	r2, #16
 8007868:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	2240      	movs	r2, #64	; 0x40
 8007872:	4013      	ands	r3, r2
 8007874:	2b40      	cmp	r3, #64	; 0x40
 8007876:	d000      	beq.n	800787a <HAL_UART_IRQHandler+0x30a>
 8007878:	e0a4      	b.n	80079c4 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2280      	movs	r2, #128	; 0x80
 800787e:	589b      	ldr	r3, [r3, r2]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	685a      	ldr	r2, [r3, #4]
 8007884:	217e      	movs	r1, #126	; 0x7e
 8007886:	187b      	adds	r3, r7, r1
 8007888:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800788a:	187b      	adds	r3, r7, r1
 800788c:	881b      	ldrh	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d100      	bne.n	8007894 <HAL_UART_IRQHandler+0x324>
 8007892:	e185      	b.n	8007ba0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	225c      	movs	r2, #92	; 0x5c
 8007898:	5a9b      	ldrh	r3, [r3, r2]
 800789a:	187a      	adds	r2, r7, r1
 800789c:	8812      	ldrh	r2, [r2, #0]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d300      	bcc.n	80078a4 <HAL_UART_IRQHandler+0x334>
 80078a2:	e17d      	b.n	8007ba0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	187a      	adds	r2, r7, r1
 80078a8:	215e      	movs	r1, #94	; 0x5e
 80078aa:	8812      	ldrh	r2, [r2, #0]
 80078ac:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2280      	movs	r2, #128	; 0x80
 80078b2:	589b      	ldr	r3, [r3, r2]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2220      	movs	r2, #32
 80078ba:	4013      	ands	r3, r2
 80078bc:	d170      	bne.n	80079a0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078be:	f3ef 8310 	mrs	r3, PRIMASK
 80078c2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80078c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80078c8:	2301      	movs	r3, #1
 80078ca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ce:	f383 8810 	msr	PRIMASK, r3
}
 80078d2:	46c0      	nop			; (mov r8, r8)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	49b4      	ldr	r1, [pc, #720]	; (8007bb0 <HAL_UART_IRQHandler+0x640>)
 80078e0:	400a      	ands	r2, r1
 80078e2:	601a      	str	r2, [r3, #0]
 80078e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ea:	f383 8810 	msr	PRIMASK, r3
}
 80078ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078f0:	f3ef 8310 	mrs	r3, PRIMASK
 80078f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80078f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078f8:	677b      	str	r3, [r7, #116]	; 0x74
 80078fa:	2301      	movs	r3, #1
 80078fc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007900:	f383 8810 	msr	PRIMASK, r3
}
 8007904:	46c0      	nop			; (mov r8, r8)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	689a      	ldr	r2, [r3, #8]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2101      	movs	r1, #1
 8007912:	438a      	bics	r2, r1
 8007914:	609a      	str	r2, [r3, #8]
 8007916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007918:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800791a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800791c:	f383 8810 	msr	PRIMASK, r3
}
 8007920:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007922:	f3ef 8310 	mrs	r3, PRIMASK
 8007926:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007928:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800792a:	673b      	str	r3, [r7, #112]	; 0x70
 800792c:	2301      	movs	r3, #1
 800792e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007932:	f383 8810 	msr	PRIMASK, r3
}
 8007936:	46c0      	nop			; (mov r8, r8)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	689a      	ldr	r2, [r3, #8]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2140      	movs	r1, #64	; 0x40
 8007944:	438a      	bics	r2, r1
 8007946:	609a      	str	r2, [r3, #8]
 8007948:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800794a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800794c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800794e:	f383 8810 	msr	PRIMASK, r3
}
 8007952:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	228c      	movs	r2, #140	; 0x8c
 8007958:	2120      	movs	r1, #32
 800795a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007962:	f3ef 8310 	mrs	r3, PRIMASK
 8007966:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007968:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800796a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800796c:	2301      	movs	r3, #1
 800796e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007970:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007972:	f383 8810 	msr	PRIMASK, r3
}
 8007976:	46c0      	nop			; (mov r8, r8)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2110      	movs	r1, #16
 8007984:	438a      	bics	r2, r1
 8007986:	601a      	str	r2, [r3, #0]
 8007988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800798a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800798c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800798e:	f383 8810 	msr	PRIMASK, r3
}
 8007992:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2280      	movs	r2, #128	; 0x80
 8007998:	589b      	ldr	r3, [r3, r2]
 800799a:	0018      	movs	r0, r3
 800799c:	f7fd f9bc 	bl	8004d18 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2202      	movs	r2, #2
 80079a4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	225c      	movs	r2, #92	; 0x5c
 80079aa:	5a9a      	ldrh	r2, [r3, r2]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	215e      	movs	r1, #94	; 0x5e
 80079b0:	5a5b      	ldrh	r3, [r3, r1]
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	0011      	movs	r1, r2
 80079bc:	0018      	movs	r0, r3
 80079be:	f7fb fbdf 	bl	8003180 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079c2:	e0ed      	b.n	8007ba0 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	225c      	movs	r2, #92	; 0x5c
 80079c8:	5a99      	ldrh	r1, [r3, r2]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	225e      	movs	r2, #94	; 0x5e
 80079ce:	5a9b      	ldrh	r3, [r3, r2]
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	208e      	movs	r0, #142	; 0x8e
 80079d4:	183b      	adds	r3, r7, r0
 80079d6:	1a8a      	subs	r2, r1, r2
 80079d8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	225e      	movs	r2, #94	; 0x5e
 80079de:	5a9b      	ldrh	r3, [r3, r2]
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d100      	bne.n	80079e8 <HAL_UART_IRQHandler+0x478>
 80079e6:	e0dd      	b.n	8007ba4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80079e8:	183b      	adds	r3, r7, r0
 80079ea:	881b      	ldrh	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d100      	bne.n	80079f2 <HAL_UART_IRQHandler+0x482>
 80079f0:	e0d8      	b.n	8007ba4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079f2:	f3ef 8310 	mrs	r3, PRIMASK
 80079f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80079f8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079fa:	2488      	movs	r4, #136	; 0x88
 80079fc:	193a      	adds	r2, r7, r4
 80079fe:	6013      	str	r3, [r2, #0]
 8007a00:	2301      	movs	r3, #1
 8007a02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	f383 8810 	msr	PRIMASK, r3
}
 8007a0a:	46c0      	nop			; (mov r8, r8)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4967      	ldr	r1, [pc, #412]	; (8007bb4 <HAL_UART_IRQHandler+0x644>)
 8007a18:	400a      	ands	r2, r1
 8007a1a:	601a      	str	r2, [r3, #0]
 8007a1c:	193b      	adds	r3, r7, r4
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	f383 8810 	msr	PRIMASK, r3
}
 8007a28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8007a2e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007a30:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a32:	2484      	movs	r4, #132	; 0x84
 8007a34:	193a      	adds	r2, r7, r4
 8007a36:	6013      	str	r3, [r2, #0]
 8007a38:	2301      	movs	r3, #1
 8007a3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	f383 8810 	msr	PRIMASK, r3
}
 8007a42:	46c0      	nop			; (mov r8, r8)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	689a      	ldr	r2, [r3, #8]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	495a      	ldr	r1, [pc, #360]	; (8007bb8 <HAL_UART_IRQHandler+0x648>)
 8007a50:	400a      	ands	r2, r1
 8007a52:	609a      	str	r2, [r3, #8]
 8007a54:	193b      	adds	r3, r7, r4
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a5a:	6a3b      	ldr	r3, [r7, #32]
 8007a5c:	f383 8810 	msr	PRIMASK, r3
}
 8007a60:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	228c      	movs	r2, #140	; 0x8c
 8007a66:	2120      	movs	r1, #32
 8007a68:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a76:	f3ef 8310 	mrs	r3, PRIMASK
 8007a7a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a7e:	2480      	movs	r4, #128	; 0x80
 8007a80:	193a      	adds	r2, r7, r4
 8007a82:	6013      	str	r3, [r2, #0]
 8007a84:	2301      	movs	r3, #1
 8007a86:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8a:	f383 8810 	msr	PRIMASK, r3
}
 8007a8e:	46c0      	nop			; (mov r8, r8)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2110      	movs	r1, #16
 8007a9c:	438a      	bics	r2, r1
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	193b      	adds	r3, r7, r4
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa8:	f383 8810 	msr	PRIMASK, r3
}
 8007aac:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2202      	movs	r2, #2
 8007ab2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ab4:	183b      	adds	r3, r7, r0
 8007ab6:	881a      	ldrh	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	0011      	movs	r1, r2
 8007abc:	0018      	movs	r0, r3
 8007abe:	f7fb fb5f 	bl	8003180 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ac2:	e06f      	b.n	8007ba4 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ac4:	23a4      	movs	r3, #164	; 0xa4
 8007ac6:	18fb      	adds	r3, r7, r3
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	2380      	movs	r3, #128	; 0x80
 8007acc:	035b      	lsls	r3, r3, #13
 8007ace:	4013      	ands	r3, r2
 8007ad0:	d010      	beq.n	8007af4 <HAL_UART_IRQHandler+0x584>
 8007ad2:	239c      	movs	r3, #156	; 0x9c
 8007ad4:	18fb      	adds	r3, r7, r3
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	2380      	movs	r3, #128	; 0x80
 8007ada:	03db      	lsls	r3, r3, #15
 8007adc:	4013      	ands	r3, r2
 8007ade:	d009      	beq.n	8007af4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2280      	movs	r2, #128	; 0x80
 8007ae6:	0352      	lsls	r2, r2, #13
 8007ae8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	0018      	movs	r0, r3
 8007aee:	f001 faed 	bl	80090cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007af2:	e05a      	b.n	8007baa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007af4:	23a4      	movs	r3, #164	; 0xa4
 8007af6:	18fb      	adds	r3, r7, r3
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2280      	movs	r2, #128	; 0x80
 8007afc:	4013      	ands	r3, r2
 8007afe:	d016      	beq.n	8007b2e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007b00:	23a0      	movs	r3, #160	; 0xa0
 8007b02:	18fb      	adds	r3, r7, r3
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2280      	movs	r2, #128	; 0x80
 8007b08:	4013      	ands	r3, r2
 8007b0a:	d106      	bne.n	8007b1a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007b0c:	239c      	movs	r3, #156	; 0x9c
 8007b0e:	18fb      	adds	r3, r7, r3
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	2380      	movs	r3, #128	; 0x80
 8007b14:	041b      	lsls	r3, r3, #16
 8007b16:	4013      	ands	r3, r2
 8007b18:	d009      	beq.n	8007b2e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d042      	beq.n	8007ba8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	0010      	movs	r0, r2
 8007b2a:	4798      	blx	r3
    }
    return;
 8007b2c:	e03c      	b.n	8007ba8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007b2e:	23a4      	movs	r3, #164	; 0xa4
 8007b30:	18fb      	adds	r3, r7, r3
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2240      	movs	r2, #64	; 0x40
 8007b36:	4013      	ands	r3, r2
 8007b38:	d00a      	beq.n	8007b50 <HAL_UART_IRQHandler+0x5e0>
 8007b3a:	23a0      	movs	r3, #160	; 0xa0
 8007b3c:	18fb      	adds	r3, r7, r3
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2240      	movs	r2, #64	; 0x40
 8007b42:	4013      	ands	r3, r2
 8007b44:	d004      	beq.n	8007b50 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	0018      	movs	r0, r3
 8007b4a:	f000 fe32 	bl	80087b2 <UART_EndTransmit_IT>
    return;
 8007b4e:	e02c      	b.n	8007baa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007b50:	23a4      	movs	r3, #164	; 0xa4
 8007b52:	18fb      	adds	r3, r7, r3
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	2380      	movs	r3, #128	; 0x80
 8007b58:	041b      	lsls	r3, r3, #16
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	d00b      	beq.n	8007b76 <HAL_UART_IRQHandler+0x606>
 8007b5e:	23a0      	movs	r3, #160	; 0xa0
 8007b60:	18fb      	adds	r3, r7, r3
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	2380      	movs	r3, #128	; 0x80
 8007b66:	05db      	lsls	r3, r3, #23
 8007b68:	4013      	ands	r3, r2
 8007b6a:	d004      	beq.n	8007b76 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	0018      	movs	r0, r3
 8007b70:	f001 fabc 	bl	80090ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b74:	e019      	b.n	8007baa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007b76:	23a4      	movs	r3, #164	; 0xa4
 8007b78:	18fb      	adds	r3, r7, r3
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	2380      	movs	r3, #128	; 0x80
 8007b7e:	045b      	lsls	r3, r3, #17
 8007b80:	4013      	ands	r3, r2
 8007b82:	d012      	beq.n	8007baa <HAL_UART_IRQHandler+0x63a>
 8007b84:	23a0      	movs	r3, #160	; 0xa0
 8007b86:	18fb      	adds	r3, r7, r3
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	da0d      	bge.n	8007baa <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	0018      	movs	r0, r3
 8007b92:	f001 faa3 	bl	80090dc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b96:	e008      	b.n	8007baa <HAL_UART_IRQHandler+0x63a>
      return;
 8007b98:	46c0      	nop			; (mov r8, r8)
 8007b9a:	e006      	b.n	8007baa <HAL_UART_IRQHandler+0x63a>
    return;
 8007b9c:	46c0      	nop			; (mov r8, r8)
 8007b9e:	e004      	b.n	8007baa <HAL_UART_IRQHandler+0x63a>
      return;
 8007ba0:	46c0      	nop			; (mov r8, r8)
 8007ba2:	e002      	b.n	8007baa <HAL_UART_IRQHandler+0x63a>
      return;
 8007ba4:	46c0      	nop			; (mov r8, r8)
 8007ba6:	e000      	b.n	8007baa <HAL_UART_IRQHandler+0x63a>
    return;
 8007ba8:	46c0      	nop			; (mov r8, r8)
  }
}
 8007baa:	46bd      	mov	sp, r7
 8007bac:	b02a      	add	sp, #168	; 0xa8
 8007bae:	bdb0      	pop	{r4, r5, r7, pc}
 8007bb0:	fffffeff 	.word	0xfffffeff
 8007bb4:	fffffedf 	.word	0xfffffedf
 8007bb8:	effffffe 	.word	0xeffffffe

08007bbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007bc4:	46c0      	nop			; (mov r8, r8)
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	b002      	add	sp, #8
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007bd4:	46c0      	nop			; (mov r8, r8)
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	b002      	add	sp, #8
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007be4:	46c0      	nop			; (mov r8, r8)
 8007be6:	46bd      	mov	sp, r7
 8007be8:	b002      	add	sp, #8
 8007bea:	bd80      	pop	{r7, pc}

08007bec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bec:	b5b0      	push	{r4, r5, r7, lr}
 8007bee:	b090      	sub	sp, #64	; 0x40
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007bf4:	231a      	movs	r3, #26
 8007bf6:	2220      	movs	r2, #32
 8007bf8:	189b      	adds	r3, r3, r2
 8007bfa:	19db      	adds	r3, r3, r7
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c02:	689a      	ldr	r2, [r3, #8]
 8007c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	431a      	orrs	r2, r3
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0c:	695b      	ldr	r3, [r3, #20]
 8007c0e:	431a      	orrs	r2, r3
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	69db      	ldr	r3, [r3, #28]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4ac4      	ldr	r2, [pc, #784]	; (8007f30 <UART_SetConfig+0x344>)
 8007c20:	4013      	ands	r3, r2
 8007c22:	0019      	movs	r1, r3
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c2a:	430b      	orrs	r3, r1
 8007c2c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	4abf      	ldr	r2, [pc, #764]	; (8007f34 <UART_SetConfig+0x348>)
 8007c36:	4013      	ands	r3, r2
 8007c38:	0018      	movs	r0, r3
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3c:	68d9      	ldr	r1, [r3, #12]
 8007c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	0003      	movs	r3, r0
 8007c44:	430b      	orrs	r3, r1
 8007c46:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4ab9      	ldr	r2, [pc, #740]	; (8007f38 <UART_SetConfig+0x34c>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d004      	beq.n	8007c62 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	6a1b      	ldr	r3, [r3, #32]
 8007c5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	4ab4      	ldr	r2, [pc, #720]	; (8007f3c <UART_SetConfig+0x350>)
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	0019      	movs	r1, r3
 8007c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c74:	430b      	orrs	r3, r1
 8007c76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7e:	220f      	movs	r2, #15
 8007c80:	4393      	bics	r3, r2
 8007c82:	0018      	movs	r0, r3
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	0003      	movs	r3, r0
 8007c8e:	430b      	orrs	r3, r1
 8007c90:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4aaa      	ldr	r2, [pc, #680]	; (8007f40 <UART_SetConfig+0x354>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d131      	bne.n	8007d00 <UART_SetConfig+0x114>
 8007c9c:	4ba9      	ldr	r3, [pc, #676]	; (8007f44 <UART_SetConfig+0x358>)
 8007c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca0:	2203      	movs	r2, #3
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	2b03      	cmp	r3, #3
 8007ca6:	d01d      	beq.n	8007ce4 <UART_SetConfig+0xf8>
 8007ca8:	d823      	bhi.n	8007cf2 <UART_SetConfig+0x106>
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d00c      	beq.n	8007cc8 <UART_SetConfig+0xdc>
 8007cae:	d820      	bhi.n	8007cf2 <UART_SetConfig+0x106>
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d002      	beq.n	8007cba <UART_SetConfig+0xce>
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d00e      	beq.n	8007cd6 <UART_SetConfig+0xea>
 8007cb8:	e01b      	b.n	8007cf2 <UART_SetConfig+0x106>
 8007cba:	231b      	movs	r3, #27
 8007cbc:	2220      	movs	r2, #32
 8007cbe:	189b      	adds	r3, r3, r2
 8007cc0:	19db      	adds	r3, r3, r7
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	701a      	strb	r2, [r3, #0]
 8007cc6:	e071      	b.n	8007dac <UART_SetConfig+0x1c0>
 8007cc8:	231b      	movs	r3, #27
 8007cca:	2220      	movs	r2, #32
 8007ccc:	189b      	adds	r3, r3, r2
 8007cce:	19db      	adds	r3, r3, r7
 8007cd0:	2202      	movs	r2, #2
 8007cd2:	701a      	strb	r2, [r3, #0]
 8007cd4:	e06a      	b.n	8007dac <UART_SetConfig+0x1c0>
 8007cd6:	231b      	movs	r3, #27
 8007cd8:	2220      	movs	r2, #32
 8007cda:	189b      	adds	r3, r3, r2
 8007cdc:	19db      	adds	r3, r3, r7
 8007cde:	2204      	movs	r2, #4
 8007ce0:	701a      	strb	r2, [r3, #0]
 8007ce2:	e063      	b.n	8007dac <UART_SetConfig+0x1c0>
 8007ce4:	231b      	movs	r3, #27
 8007ce6:	2220      	movs	r2, #32
 8007ce8:	189b      	adds	r3, r3, r2
 8007cea:	19db      	adds	r3, r3, r7
 8007cec:	2208      	movs	r2, #8
 8007cee:	701a      	strb	r2, [r3, #0]
 8007cf0:	e05c      	b.n	8007dac <UART_SetConfig+0x1c0>
 8007cf2:	231b      	movs	r3, #27
 8007cf4:	2220      	movs	r2, #32
 8007cf6:	189b      	adds	r3, r3, r2
 8007cf8:	19db      	adds	r3, r3, r7
 8007cfa:	2210      	movs	r2, #16
 8007cfc:	701a      	strb	r2, [r3, #0]
 8007cfe:	e055      	b.n	8007dac <UART_SetConfig+0x1c0>
 8007d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a90      	ldr	r2, [pc, #576]	; (8007f48 <UART_SetConfig+0x35c>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d106      	bne.n	8007d18 <UART_SetConfig+0x12c>
 8007d0a:	231b      	movs	r3, #27
 8007d0c:	2220      	movs	r2, #32
 8007d0e:	189b      	adds	r3, r3, r2
 8007d10:	19db      	adds	r3, r3, r7
 8007d12:	2200      	movs	r2, #0
 8007d14:	701a      	strb	r2, [r3, #0]
 8007d16:	e049      	b.n	8007dac <UART_SetConfig+0x1c0>
 8007d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a86      	ldr	r2, [pc, #536]	; (8007f38 <UART_SetConfig+0x34c>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d13e      	bne.n	8007da0 <UART_SetConfig+0x1b4>
 8007d22:	4b88      	ldr	r3, [pc, #544]	; (8007f44 <UART_SetConfig+0x358>)
 8007d24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d26:	23c0      	movs	r3, #192	; 0xc0
 8007d28:	011b      	lsls	r3, r3, #4
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	22c0      	movs	r2, #192	; 0xc0
 8007d2e:	0112      	lsls	r2, r2, #4
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d027      	beq.n	8007d84 <UART_SetConfig+0x198>
 8007d34:	22c0      	movs	r2, #192	; 0xc0
 8007d36:	0112      	lsls	r2, r2, #4
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d82a      	bhi.n	8007d92 <UART_SetConfig+0x1a6>
 8007d3c:	2280      	movs	r2, #128	; 0x80
 8007d3e:	0112      	lsls	r2, r2, #4
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d011      	beq.n	8007d68 <UART_SetConfig+0x17c>
 8007d44:	2280      	movs	r2, #128	; 0x80
 8007d46:	0112      	lsls	r2, r2, #4
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d822      	bhi.n	8007d92 <UART_SetConfig+0x1a6>
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d004      	beq.n	8007d5a <UART_SetConfig+0x16e>
 8007d50:	2280      	movs	r2, #128	; 0x80
 8007d52:	00d2      	lsls	r2, r2, #3
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d00e      	beq.n	8007d76 <UART_SetConfig+0x18a>
 8007d58:	e01b      	b.n	8007d92 <UART_SetConfig+0x1a6>
 8007d5a:	231b      	movs	r3, #27
 8007d5c:	2220      	movs	r2, #32
 8007d5e:	189b      	adds	r3, r3, r2
 8007d60:	19db      	adds	r3, r3, r7
 8007d62:	2200      	movs	r2, #0
 8007d64:	701a      	strb	r2, [r3, #0]
 8007d66:	e021      	b.n	8007dac <UART_SetConfig+0x1c0>
 8007d68:	231b      	movs	r3, #27
 8007d6a:	2220      	movs	r2, #32
 8007d6c:	189b      	adds	r3, r3, r2
 8007d6e:	19db      	adds	r3, r3, r7
 8007d70:	2202      	movs	r2, #2
 8007d72:	701a      	strb	r2, [r3, #0]
 8007d74:	e01a      	b.n	8007dac <UART_SetConfig+0x1c0>
 8007d76:	231b      	movs	r3, #27
 8007d78:	2220      	movs	r2, #32
 8007d7a:	189b      	adds	r3, r3, r2
 8007d7c:	19db      	adds	r3, r3, r7
 8007d7e:	2204      	movs	r2, #4
 8007d80:	701a      	strb	r2, [r3, #0]
 8007d82:	e013      	b.n	8007dac <UART_SetConfig+0x1c0>
 8007d84:	231b      	movs	r3, #27
 8007d86:	2220      	movs	r2, #32
 8007d88:	189b      	adds	r3, r3, r2
 8007d8a:	19db      	adds	r3, r3, r7
 8007d8c:	2208      	movs	r2, #8
 8007d8e:	701a      	strb	r2, [r3, #0]
 8007d90:	e00c      	b.n	8007dac <UART_SetConfig+0x1c0>
 8007d92:	231b      	movs	r3, #27
 8007d94:	2220      	movs	r2, #32
 8007d96:	189b      	adds	r3, r3, r2
 8007d98:	19db      	adds	r3, r3, r7
 8007d9a:	2210      	movs	r2, #16
 8007d9c:	701a      	strb	r2, [r3, #0]
 8007d9e:	e005      	b.n	8007dac <UART_SetConfig+0x1c0>
 8007da0:	231b      	movs	r3, #27
 8007da2:	2220      	movs	r2, #32
 8007da4:	189b      	adds	r3, r3, r2
 8007da6:	19db      	adds	r3, r3, r7
 8007da8:	2210      	movs	r2, #16
 8007daa:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a61      	ldr	r2, [pc, #388]	; (8007f38 <UART_SetConfig+0x34c>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d000      	beq.n	8007db8 <UART_SetConfig+0x1cc>
 8007db6:	e092      	b.n	8007ede <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007db8:	231b      	movs	r3, #27
 8007dba:	2220      	movs	r2, #32
 8007dbc:	189b      	adds	r3, r3, r2
 8007dbe:	19db      	adds	r3, r3, r7
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	2b08      	cmp	r3, #8
 8007dc4:	d015      	beq.n	8007df2 <UART_SetConfig+0x206>
 8007dc6:	dc18      	bgt.n	8007dfa <UART_SetConfig+0x20e>
 8007dc8:	2b04      	cmp	r3, #4
 8007dca:	d00d      	beq.n	8007de8 <UART_SetConfig+0x1fc>
 8007dcc:	dc15      	bgt.n	8007dfa <UART_SetConfig+0x20e>
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d002      	beq.n	8007dd8 <UART_SetConfig+0x1ec>
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d005      	beq.n	8007de2 <UART_SetConfig+0x1f6>
 8007dd6:	e010      	b.n	8007dfa <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dd8:	f7fd ffcc 	bl	8005d74 <HAL_RCC_GetPCLK1Freq>
 8007ddc:	0003      	movs	r3, r0
 8007dde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007de0:	e014      	b.n	8007e0c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007de2:	4b5a      	ldr	r3, [pc, #360]	; (8007f4c <UART_SetConfig+0x360>)
 8007de4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007de6:	e011      	b.n	8007e0c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007de8:	f7fd ff38 	bl	8005c5c <HAL_RCC_GetSysClockFreq>
 8007dec:	0003      	movs	r3, r0
 8007dee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007df0:	e00c      	b.n	8007e0c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007df2:	2380      	movs	r3, #128	; 0x80
 8007df4:	021b      	lsls	r3, r3, #8
 8007df6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007df8:	e008      	b.n	8007e0c <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007dfe:	231a      	movs	r3, #26
 8007e00:	2220      	movs	r2, #32
 8007e02:	189b      	adds	r3, r3, r2
 8007e04:	19db      	adds	r3, r3, r7
 8007e06:	2201      	movs	r2, #1
 8007e08:	701a      	strb	r2, [r3, #0]
        break;
 8007e0a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d100      	bne.n	8007e14 <UART_SetConfig+0x228>
 8007e12:	e147      	b.n	80080a4 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e18:	4b4d      	ldr	r3, [pc, #308]	; (8007f50 <UART_SetConfig+0x364>)
 8007e1a:	0052      	lsls	r2, r2, #1
 8007e1c:	5ad3      	ldrh	r3, [r2, r3]
 8007e1e:	0019      	movs	r1, r3
 8007e20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007e22:	f7f8 f98b 	bl	800013c <__udivsi3>
 8007e26:	0003      	movs	r3, r0
 8007e28:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2c:	685a      	ldr	r2, [r3, #4]
 8007e2e:	0013      	movs	r3, r2
 8007e30:	005b      	lsls	r3, r3, #1
 8007e32:	189b      	adds	r3, r3, r2
 8007e34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d305      	bcc.n	8007e46 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d906      	bls.n	8007e54 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8007e46:	231a      	movs	r3, #26
 8007e48:	2220      	movs	r2, #32
 8007e4a:	189b      	adds	r3, r3, r2
 8007e4c:	19db      	adds	r3, r3, r7
 8007e4e:	2201      	movs	r2, #1
 8007e50:	701a      	strb	r2, [r3, #0]
 8007e52:	e127      	b.n	80080a4 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e56:	61bb      	str	r3, [r7, #24]
 8007e58:	2300      	movs	r3, #0
 8007e5a:	61fb      	str	r3, [r7, #28]
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e60:	4b3b      	ldr	r3, [pc, #236]	; (8007f50 <UART_SetConfig+0x364>)
 8007e62:	0052      	lsls	r2, r2, #1
 8007e64:	5ad3      	ldrh	r3, [r2, r3]
 8007e66:	613b      	str	r3, [r7, #16]
 8007e68:	2300      	movs	r3, #0
 8007e6a:	617b      	str	r3, [r7, #20]
 8007e6c:	693a      	ldr	r2, [r7, #16]
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	69b8      	ldr	r0, [r7, #24]
 8007e72:	69f9      	ldr	r1, [r7, #28]
 8007e74:	f7f8 fb16 	bl	80004a4 <__aeabi_uldivmod>
 8007e78:	0002      	movs	r2, r0
 8007e7a:	000b      	movs	r3, r1
 8007e7c:	0e11      	lsrs	r1, r2, #24
 8007e7e:	021d      	lsls	r5, r3, #8
 8007e80:	430d      	orrs	r5, r1
 8007e82:	0214      	lsls	r4, r2, #8
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	085b      	lsrs	r3, r3, #1
 8007e8a:	60bb      	str	r3, [r7, #8]
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	60fb      	str	r3, [r7, #12]
 8007e90:	68b8      	ldr	r0, [r7, #8]
 8007e92:	68f9      	ldr	r1, [r7, #12]
 8007e94:	1900      	adds	r0, r0, r4
 8007e96:	4169      	adcs	r1, r5
 8007e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	603b      	str	r3, [r7, #0]
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	607b      	str	r3, [r7, #4]
 8007ea2:	683a      	ldr	r2, [r7, #0]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f7f8 fafd 	bl	80004a4 <__aeabi_uldivmod>
 8007eaa:	0002      	movs	r2, r0
 8007eac:	000b      	movs	r3, r1
 8007eae:	0013      	movs	r3, r2
 8007eb0:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eb4:	23c0      	movs	r3, #192	; 0xc0
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d309      	bcc.n	8007ed0 <UART_SetConfig+0x2e4>
 8007ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ebe:	2380      	movs	r3, #128	; 0x80
 8007ec0:	035b      	lsls	r3, r3, #13
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d204      	bcs.n	8007ed0 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8007ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ecc:	60da      	str	r2, [r3, #12]
 8007ece:	e0e9      	b.n	80080a4 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8007ed0:	231a      	movs	r3, #26
 8007ed2:	2220      	movs	r2, #32
 8007ed4:	189b      	adds	r3, r3, r2
 8007ed6:	19db      	adds	r3, r3, r7
 8007ed8:	2201      	movs	r2, #1
 8007eda:	701a      	strb	r2, [r3, #0]
 8007edc:	e0e2      	b.n	80080a4 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee0:	69da      	ldr	r2, [r3, #28]
 8007ee2:	2380      	movs	r3, #128	; 0x80
 8007ee4:	021b      	lsls	r3, r3, #8
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d000      	beq.n	8007eec <UART_SetConfig+0x300>
 8007eea:	e083      	b.n	8007ff4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8007eec:	231b      	movs	r3, #27
 8007eee:	2220      	movs	r2, #32
 8007ef0:	189b      	adds	r3, r3, r2
 8007ef2:	19db      	adds	r3, r3, r7
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	2b08      	cmp	r3, #8
 8007ef8:	d015      	beq.n	8007f26 <UART_SetConfig+0x33a>
 8007efa:	dc2b      	bgt.n	8007f54 <UART_SetConfig+0x368>
 8007efc:	2b04      	cmp	r3, #4
 8007efe:	d00d      	beq.n	8007f1c <UART_SetConfig+0x330>
 8007f00:	dc28      	bgt.n	8007f54 <UART_SetConfig+0x368>
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d002      	beq.n	8007f0c <UART_SetConfig+0x320>
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d005      	beq.n	8007f16 <UART_SetConfig+0x32a>
 8007f0a:	e023      	b.n	8007f54 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f0c:	f7fd ff32 	bl	8005d74 <HAL_RCC_GetPCLK1Freq>
 8007f10:	0003      	movs	r3, r0
 8007f12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f14:	e027      	b.n	8007f66 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f16:	4b0d      	ldr	r3, [pc, #52]	; (8007f4c <UART_SetConfig+0x360>)
 8007f18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f1a:	e024      	b.n	8007f66 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f1c:	f7fd fe9e 	bl	8005c5c <HAL_RCC_GetSysClockFreq>
 8007f20:	0003      	movs	r3, r0
 8007f22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f24:	e01f      	b.n	8007f66 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f26:	2380      	movs	r3, #128	; 0x80
 8007f28:	021b      	lsls	r3, r3, #8
 8007f2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f2c:	e01b      	b.n	8007f66 <UART_SetConfig+0x37a>
 8007f2e:	46c0      	nop			; (mov r8, r8)
 8007f30:	cfff69f3 	.word	0xcfff69f3
 8007f34:	ffffcfff 	.word	0xffffcfff
 8007f38:	40008000 	.word	0x40008000
 8007f3c:	11fff4ff 	.word	0x11fff4ff
 8007f40:	40013800 	.word	0x40013800
 8007f44:	40021000 	.word	0x40021000
 8007f48:	40004400 	.word	0x40004400
 8007f4c:	00f42400 	.word	0x00f42400
 8007f50:	0800c36c 	.word	0x0800c36c
      default:
        pclk = 0U;
 8007f54:	2300      	movs	r3, #0
 8007f56:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007f58:	231a      	movs	r3, #26
 8007f5a:	2220      	movs	r2, #32
 8007f5c:	189b      	adds	r3, r3, r2
 8007f5e:	19db      	adds	r3, r3, r7
 8007f60:	2201      	movs	r2, #1
 8007f62:	701a      	strb	r2, [r3, #0]
        break;
 8007f64:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d100      	bne.n	8007f6e <UART_SetConfig+0x382>
 8007f6c:	e09a      	b.n	80080a4 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f72:	4b58      	ldr	r3, [pc, #352]	; (80080d4 <UART_SetConfig+0x4e8>)
 8007f74:	0052      	lsls	r2, r2, #1
 8007f76:	5ad3      	ldrh	r3, [r2, r3]
 8007f78:	0019      	movs	r1, r3
 8007f7a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007f7c:	f7f8 f8de 	bl	800013c <__udivsi3>
 8007f80:	0003      	movs	r3, r0
 8007f82:	005a      	lsls	r2, r3, #1
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	085b      	lsrs	r3, r3, #1
 8007f8a:	18d2      	adds	r2, r2, r3
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	0019      	movs	r1, r3
 8007f92:	0010      	movs	r0, r2
 8007f94:	f7f8 f8d2 	bl	800013c <__udivsi3>
 8007f98:	0003      	movs	r3, r0
 8007f9a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9e:	2b0f      	cmp	r3, #15
 8007fa0:	d921      	bls.n	8007fe6 <UART_SetConfig+0x3fa>
 8007fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fa4:	2380      	movs	r3, #128	; 0x80
 8007fa6:	025b      	lsls	r3, r3, #9
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d21c      	bcs.n	8007fe6 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	200e      	movs	r0, #14
 8007fb2:	2420      	movs	r4, #32
 8007fb4:	1903      	adds	r3, r0, r4
 8007fb6:	19db      	adds	r3, r3, r7
 8007fb8:	210f      	movs	r1, #15
 8007fba:	438a      	bics	r2, r1
 8007fbc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc0:	085b      	lsrs	r3, r3, #1
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	2207      	movs	r2, #7
 8007fc6:	4013      	ands	r3, r2
 8007fc8:	b299      	uxth	r1, r3
 8007fca:	1903      	adds	r3, r0, r4
 8007fcc:	19db      	adds	r3, r3, r7
 8007fce:	1902      	adds	r2, r0, r4
 8007fd0:	19d2      	adds	r2, r2, r7
 8007fd2:	8812      	ldrh	r2, [r2, #0]
 8007fd4:	430a      	orrs	r2, r1
 8007fd6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	1902      	adds	r2, r0, r4
 8007fde:	19d2      	adds	r2, r2, r7
 8007fe0:	8812      	ldrh	r2, [r2, #0]
 8007fe2:	60da      	str	r2, [r3, #12]
 8007fe4:	e05e      	b.n	80080a4 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8007fe6:	231a      	movs	r3, #26
 8007fe8:	2220      	movs	r2, #32
 8007fea:	189b      	adds	r3, r3, r2
 8007fec:	19db      	adds	r3, r3, r7
 8007fee:	2201      	movs	r2, #1
 8007ff0:	701a      	strb	r2, [r3, #0]
 8007ff2:	e057      	b.n	80080a4 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ff4:	231b      	movs	r3, #27
 8007ff6:	2220      	movs	r2, #32
 8007ff8:	189b      	adds	r3, r3, r2
 8007ffa:	19db      	adds	r3, r3, r7
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	2b08      	cmp	r3, #8
 8008000:	d015      	beq.n	800802e <UART_SetConfig+0x442>
 8008002:	dc18      	bgt.n	8008036 <UART_SetConfig+0x44a>
 8008004:	2b04      	cmp	r3, #4
 8008006:	d00d      	beq.n	8008024 <UART_SetConfig+0x438>
 8008008:	dc15      	bgt.n	8008036 <UART_SetConfig+0x44a>
 800800a:	2b00      	cmp	r3, #0
 800800c:	d002      	beq.n	8008014 <UART_SetConfig+0x428>
 800800e:	2b02      	cmp	r3, #2
 8008010:	d005      	beq.n	800801e <UART_SetConfig+0x432>
 8008012:	e010      	b.n	8008036 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008014:	f7fd feae 	bl	8005d74 <HAL_RCC_GetPCLK1Freq>
 8008018:	0003      	movs	r3, r0
 800801a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800801c:	e014      	b.n	8008048 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800801e:	4b2e      	ldr	r3, [pc, #184]	; (80080d8 <UART_SetConfig+0x4ec>)
 8008020:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008022:	e011      	b.n	8008048 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008024:	f7fd fe1a 	bl	8005c5c <HAL_RCC_GetSysClockFreq>
 8008028:	0003      	movs	r3, r0
 800802a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800802c:	e00c      	b.n	8008048 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800802e:	2380      	movs	r3, #128	; 0x80
 8008030:	021b      	lsls	r3, r3, #8
 8008032:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008034:	e008      	b.n	8008048 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8008036:	2300      	movs	r3, #0
 8008038:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800803a:	231a      	movs	r3, #26
 800803c:	2220      	movs	r2, #32
 800803e:	189b      	adds	r3, r3, r2
 8008040:	19db      	adds	r3, r3, r7
 8008042:	2201      	movs	r2, #1
 8008044:	701a      	strb	r2, [r3, #0]
        break;
 8008046:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800804a:	2b00      	cmp	r3, #0
 800804c:	d02a      	beq.n	80080a4 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800804e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008052:	4b20      	ldr	r3, [pc, #128]	; (80080d4 <UART_SetConfig+0x4e8>)
 8008054:	0052      	lsls	r2, r2, #1
 8008056:	5ad3      	ldrh	r3, [r2, r3]
 8008058:	0019      	movs	r1, r3
 800805a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800805c:	f7f8 f86e 	bl	800013c <__udivsi3>
 8008060:	0003      	movs	r3, r0
 8008062:	001a      	movs	r2, r3
 8008064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	085b      	lsrs	r3, r3, #1
 800806a:	18d2      	adds	r2, r2, r3
 800806c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	0019      	movs	r1, r3
 8008072:	0010      	movs	r0, r2
 8008074:	f7f8 f862 	bl	800013c <__udivsi3>
 8008078:	0003      	movs	r3, r0
 800807a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800807c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807e:	2b0f      	cmp	r3, #15
 8008080:	d90a      	bls.n	8008098 <UART_SetConfig+0x4ac>
 8008082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008084:	2380      	movs	r3, #128	; 0x80
 8008086:	025b      	lsls	r3, r3, #9
 8008088:	429a      	cmp	r2, r3
 800808a:	d205      	bcs.n	8008098 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800808c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808e:	b29a      	uxth	r2, r3
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	60da      	str	r2, [r3, #12]
 8008096:	e005      	b.n	80080a4 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8008098:	231a      	movs	r3, #26
 800809a:	2220      	movs	r2, #32
 800809c:	189b      	adds	r3, r3, r2
 800809e:	19db      	adds	r3, r3, r7
 80080a0:	2201      	movs	r2, #1
 80080a2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80080a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a6:	226a      	movs	r2, #106	; 0x6a
 80080a8:	2101      	movs	r1, #1
 80080aa:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ae:	2268      	movs	r2, #104	; 0x68
 80080b0:	2101      	movs	r1, #1
 80080b2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b6:	2200      	movs	r2, #0
 80080b8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80080ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080bc:	2200      	movs	r2, #0
 80080be:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80080c0:	231a      	movs	r3, #26
 80080c2:	2220      	movs	r2, #32
 80080c4:	189b      	adds	r3, r3, r2
 80080c6:	19db      	adds	r3, r3, r7
 80080c8:	781b      	ldrb	r3, [r3, #0]
}
 80080ca:	0018      	movs	r0, r3
 80080cc:	46bd      	mov	sp, r7
 80080ce:	b010      	add	sp, #64	; 0x40
 80080d0:	bdb0      	pop	{r4, r5, r7, pc}
 80080d2:	46c0      	nop			; (mov r8, r8)
 80080d4:	0800c36c 	.word	0x0800c36c
 80080d8:	00f42400 	.word	0x00f42400

080080dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e8:	2201      	movs	r2, #1
 80080ea:	4013      	ands	r3, r2
 80080ec:	d00b      	beq.n	8008106 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	4a4a      	ldr	r2, [pc, #296]	; (8008220 <UART_AdvFeatureConfig+0x144>)
 80080f6:	4013      	ands	r3, r2
 80080f8:	0019      	movs	r1, r3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	430a      	orrs	r2, r1
 8008104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800810a:	2202      	movs	r2, #2
 800810c:	4013      	ands	r3, r2
 800810e:	d00b      	beq.n	8008128 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	4a43      	ldr	r2, [pc, #268]	; (8008224 <UART_AdvFeatureConfig+0x148>)
 8008118:	4013      	ands	r3, r2
 800811a:	0019      	movs	r1, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	430a      	orrs	r2, r1
 8008126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800812c:	2204      	movs	r2, #4
 800812e:	4013      	ands	r3, r2
 8008130:	d00b      	beq.n	800814a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	4a3b      	ldr	r2, [pc, #236]	; (8008228 <UART_AdvFeatureConfig+0x14c>)
 800813a:	4013      	ands	r3, r2
 800813c:	0019      	movs	r1, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	430a      	orrs	r2, r1
 8008148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800814e:	2208      	movs	r2, #8
 8008150:	4013      	ands	r3, r2
 8008152:	d00b      	beq.n	800816c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	4a34      	ldr	r2, [pc, #208]	; (800822c <UART_AdvFeatureConfig+0x150>)
 800815c:	4013      	ands	r3, r2
 800815e:	0019      	movs	r1, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	430a      	orrs	r2, r1
 800816a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008170:	2210      	movs	r2, #16
 8008172:	4013      	ands	r3, r2
 8008174:	d00b      	beq.n	800818e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	4a2c      	ldr	r2, [pc, #176]	; (8008230 <UART_AdvFeatureConfig+0x154>)
 800817e:	4013      	ands	r3, r2
 8008180:	0019      	movs	r1, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	430a      	orrs	r2, r1
 800818c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008192:	2220      	movs	r2, #32
 8008194:	4013      	ands	r3, r2
 8008196:	d00b      	beq.n	80081b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	4a25      	ldr	r2, [pc, #148]	; (8008234 <UART_AdvFeatureConfig+0x158>)
 80081a0:	4013      	ands	r3, r2
 80081a2:	0019      	movs	r1, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	430a      	orrs	r2, r1
 80081ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b4:	2240      	movs	r2, #64	; 0x40
 80081b6:	4013      	ands	r3, r2
 80081b8:	d01d      	beq.n	80081f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	4a1d      	ldr	r2, [pc, #116]	; (8008238 <UART_AdvFeatureConfig+0x15c>)
 80081c2:	4013      	ands	r3, r2
 80081c4:	0019      	movs	r1, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	430a      	orrs	r2, r1
 80081d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081d6:	2380      	movs	r3, #128	; 0x80
 80081d8:	035b      	lsls	r3, r3, #13
 80081da:	429a      	cmp	r2, r3
 80081dc:	d10b      	bne.n	80081f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	4a15      	ldr	r2, [pc, #84]	; (800823c <UART_AdvFeatureConfig+0x160>)
 80081e6:	4013      	ands	r3, r2
 80081e8:	0019      	movs	r1, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	430a      	orrs	r2, r1
 80081f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081fa:	2280      	movs	r2, #128	; 0x80
 80081fc:	4013      	ands	r3, r2
 80081fe:	d00b      	beq.n	8008218 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	4a0e      	ldr	r2, [pc, #56]	; (8008240 <UART_AdvFeatureConfig+0x164>)
 8008208:	4013      	ands	r3, r2
 800820a:	0019      	movs	r1, r3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	430a      	orrs	r2, r1
 8008216:	605a      	str	r2, [r3, #4]
  }
}
 8008218:	46c0      	nop			; (mov r8, r8)
 800821a:	46bd      	mov	sp, r7
 800821c:	b002      	add	sp, #8
 800821e:	bd80      	pop	{r7, pc}
 8008220:	fffdffff 	.word	0xfffdffff
 8008224:	fffeffff 	.word	0xfffeffff
 8008228:	fffbffff 	.word	0xfffbffff
 800822c:	ffff7fff 	.word	0xffff7fff
 8008230:	ffffefff 	.word	0xffffefff
 8008234:	ffffdfff 	.word	0xffffdfff
 8008238:	ffefffff 	.word	0xffefffff
 800823c:	ff9fffff 	.word	0xff9fffff
 8008240:	fff7ffff 	.word	0xfff7ffff

08008244 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b086      	sub	sp, #24
 8008248:	af02      	add	r7, sp, #8
 800824a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2290      	movs	r2, #144	; 0x90
 8008250:	2100      	movs	r1, #0
 8008252:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008254:	f7fc fc78 	bl	8004b48 <HAL_GetTick>
 8008258:	0003      	movs	r3, r0
 800825a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2208      	movs	r2, #8
 8008264:	4013      	ands	r3, r2
 8008266:	2b08      	cmp	r3, #8
 8008268:	d10c      	bne.n	8008284 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2280      	movs	r2, #128	; 0x80
 800826e:	0391      	lsls	r1, r2, #14
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	4a1a      	ldr	r2, [pc, #104]	; (80082dc <UART_CheckIdleState+0x98>)
 8008274:	9200      	str	r2, [sp, #0]
 8008276:	2200      	movs	r2, #0
 8008278:	f000 f832 	bl	80082e0 <UART_WaitOnFlagUntilTimeout>
 800827c:	1e03      	subs	r3, r0, #0
 800827e:	d001      	beq.n	8008284 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	e026      	b.n	80082d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2204      	movs	r2, #4
 800828c:	4013      	ands	r3, r2
 800828e:	2b04      	cmp	r3, #4
 8008290:	d10c      	bne.n	80082ac <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2280      	movs	r2, #128	; 0x80
 8008296:	03d1      	lsls	r1, r2, #15
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	4a10      	ldr	r2, [pc, #64]	; (80082dc <UART_CheckIdleState+0x98>)
 800829c:	9200      	str	r2, [sp, #0]
 800829e:	2200      	movs	r2, #0
 80082a0:	f000 f81e 	bl	80082e0 <UART_WaitOnFlagUntilTimeout>
 80082a4:	1e03      	subs	r3, r0, #0
 80082a6:	d001      	beq.n	80082ac <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082a8:	2303      	movs	r3, #3
 80082aa:	e012      	b.n	80082d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2288      	movs	r2, #136	; 0x88
 80082b0:	2120      	movs	r1, #32
 80082b2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	228c      	movs	r2, #140	; 0x8c
 80082b8:	2120      	movs	r1, #32
 80082ba:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2284      	movs	r2, #132	; 0x84
 80082cc:	2100      	movs	r1, #0
 80082ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	0018      	movs	r0, r3
 80082d4:	46bd      	mov	sp, r7
 80082d6:	b004      	add	sp, #16
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	46c0      	nop			; (mov r8, r8)
 80082dc:	01ffffff 	.word	0x01ffffff

080082e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b094      	sub	sp, #80	; 0x50
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	603b      	str	r3, [r7, #0]
 80082ec:	1dfb      	adds	r3, r7, #7
 80082ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082f0:	e0a7      	b.n	8008442 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082f4:	3301      	adds	r3, #1
 80082f6:	d100      	bne.n	80082fa <UART_WaitOnFlagUntilTimeout+0x1a>
 80082f8:	e0a3      	b.n	8008442 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082fa:	f7fc fc25 	bl	8004b48 <HAL_GetTick>
 80082fe:	0002      	movs	r2, r0
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008306:	429a      	cmp	r2, r3
 8008308:	d302      	bcc.n	8008310 <UART_WaitOnFlagUntilTimeout+0x30>
 800830a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800830c:	2b00      	cmp	r3, #0
 800830e:	d13f      	bne.n	8008390 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008310:	f3ef 8310 	mrs	r3, PRIMASK
 8008314:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008316:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008318:	647b      	str	r3, [r7, #68]	; 0x44
 800831a:	2301      	movs	r3, #1
 800831c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800831e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008320:	f383 8810 	msr	PRIMASK, r3
}
 8008324:	46c0      	nop			; (mov r8, r8)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	494e      	ldr	r1, [pc, #312]	; (800846c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8008332:	400a      	ands	r2, r1
 8008334:	601a      	str	r2, [r3, #0]
 8008336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008338:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800833a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833c:	f383 8810 	msr	PRIMASK, r3
}
 8008340:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008342:	f3ef 8310 	mrs	r3, PRIMASK
 8008346:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800834a:	643b      	str	r3, [r7, #64]	; 0x40
 800834c:	2301      	movs	r3, #1
 800834e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008352:	f383 8810 	msr	PRIMASK, r3
}
 8008356:	46c0      	nop			; (mov r8, r8)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	689a      	ldr	r2, [r3, #8]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2101      	movs	r1, #1
 8008364:	438a      	bics	r2, r1
 8008366:	609a      	str	r2, [r3, #8]
 8008368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800836a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800836c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800836e:	f383 8810 	msr	PRIMASK, r3
}
 8008372:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2288      	movs	r2, #136	; 0x88
 8008378:	2120      	movs	r1, #32
 800837a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	228c      	movs	r2, #140	; 0x8c
 8008380:	2120      	movs	r1, #32
 8008382:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2284      	movs	r2, #132	; 0x84
 8008388:	2100      	movs	r1, #0
 800838a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	e069      	b.n	8008464 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2204      	movs	r2, #4
 8008398:	4013      	ands	r3, r2
 800839a:	d052      	beq.n	8008442 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	69da      	ldr	r2, [r3, #28]
 80083a2:	2380      	movs	r3, #128	; 0x80
 80083a4:	011b      	lsls	r3, r3, #4
 80083a6:	401a      	ands	r2, r3
 80083a8:	2380      	movs	r3, #128	; 0x80
 80083aa:	011b      	lsls	r3, r3, #4
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d148      	bne.n	8008442 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2280      	movs	r2, #128	; 0x80
 80083b6:	0112      	lsls	r2, r2, #4
 80083b8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083ba:	f3ef 8310 	mrs	r3, PRIMASK
 80083be:	613b      	str	r3, [r7, #16]
  return(result);
 80083c0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80083c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083c4:	2301      	movs	r3, #1
 80083c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	f383 8810 	msr	PRIMASK, r3
}
 80083ce:	46c0      	nop			; (mov r8, r8)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4924      	ldr	r1, [pc, #144]	; (800846c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80083dc:	400a      	ands	r2, r1
 80083de:	601a      	str	r2, [r3, #0]
 80083e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	f383 8810 	msr	PRIMASK, r3
}
 80083ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083ec:	f3ef 8310 	mrs	r3, PRIMASK
 80083f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80083f2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80083f6:	2301      	movs	r3, #1
 80083f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083fa:	6a3b      	ldr	r3, [r7, #32]
 80083fc:	f383 8810 	msr	PRIMASK, r3
}
 8008400:	46c0      	nop			; (mov r8, r8)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	689a      	ldr	r2, [r3, #8]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2101      	movs	r1, #1
 800840e:	438a      	bics	r2, r1
 8008410:	609a      	str	r2, [r3, #8]
 8008412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008414:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008418:	f383 8810 	msr	PRIMASK, r3
}
 800841c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2288      	movs	r2, #136	; 0x88
 8008422:	2120      	movs	r1, #32
 8008424:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	228c      	movs	r2, #140	; 0x8c
 800842a:	2120      	movs	r1, #32
 800842c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2290      	movs	r2, #144	; 0x90
 8008432:	2120      	movs	r1, #32
 8008434:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2284      	movs	r2, #132	; 0x84
 800843a:	2100      	movs	r1, #0
 800843c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800843e:	2303      	movs	r3, #3
 8008440:	e010      	b.n	8008464 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	69db      	ldr	r3, [r3, #28]
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	4013      	ands	r3, r2
 800844c:	68ba      	ldr	r2, [r7, #8]
 800844e:	1ad3      	subs	r3, r2, r3
 8008450:	425a      	negs	r2, r3
 8008452:	4153      	adcs	r3, r2
 8008454:	b2db      	uxtb	r3, r3
 8008456:	001a      	movs	r2, r3
 8008458:	1dfb      	adds	r3, r7, #7
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	429a      	cmp	r2, r3
 800845e:	d100      	bne.n	8008462 <UART_WaitOnFlagUntilTimeout+0x182>
 8008460:	e747      	b.n	80082f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	0018      	movs	r0, r3
 8008466:	46bd      	mov	sp, r7
 8008468:	b014      	add	sp, #80	; 0x50
 800846a:	bd80      	pop	{r7, pc}
 800846c:	fffffe5f 	.word	0xfffffe5f

08008470 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b098      	sub	sp, #96	; 0x60
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	1dbb      	adds	r3, r7, #6
 800847c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	1dba      	adds	r2, r7, #6
 8008488:	215c      	movs	r1, #92	; 0x5c
 800848a:	8812      	ldrh	r2, [r2, #0]
 800848c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	1dba      	adds	r2, r7, #6
 8008492:	215e      	movs	r1, #94	; 0x5e
 8008494:	8812      	ldrh	r2, [r2, #0]
 8008496:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2200      	movs	r2, #0
 800849c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	689a      	ldr	r2, [r3, #8]
 80084a2:	2380      	movs	r3, #128	; 0x80
 80084a4:	015b      	lsls	r3, r3, #5
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d10d      	bne.n	80084c6 <UART_Start_Receive_IT+0x56>
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d104      	bne.n	80084bc <UART_Start_Receive_IT+0x4c>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2260      	movs	r2, #96	; 0x60
 80084b6:	497b      	ldr	r1, [pc, #492]	; (80086a4 <UART_Start_Receive_IT+0x234>)
 80084b8:	5299      	strh	r1, [r3, r2]
 80084ba:	e02e      	b.n	800851a <UART_Start_Receive_IT+0xaa>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2260      	movs	r2, #96	; 0x60
 80084c0:	21ff      	movs	r1, #255	; 0xff
 80084c2:	5299      	strh	r1, [r3, r2]
 80084c4:	e029      	b.n	800851a <UART_Start_Receive_IT+0xaa>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10d      	bne.n	80084ea <UART_Start_Receive_IT+0x7a>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d104      	bne.n	80084e0 <UART_Start_Receive_IT+0x70>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2260      	movs	r2, #96	; 0x60
 80084da:	21ff      	movs	r1, #255	; 0xff
 80084dc:	5299      	strh	r1, [r3, r2]
 80084de:	e01c      	b.n	800851a <UART_Start_Receive_IT+0xaa>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2260      	movs	r2, #96	; 0x60
 80084e4:	217f      	movs	r1, #127	; 0x7f
 80084e6:	5299      	strh	r1, [r3, r2]
 80084e8:	e017      	b.n	800851a <UART_Start_Receive_IT+0xaa>
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	689a      	ldr	r2, [r3, #8]
 80084ee:	2380      	movs	r3, #128	; 0x80
 80084f0:	055b      	lsls	r3, r3, #21
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d10d      	bne.n	8008512 <UART_Start_Receive_IT+0xa2>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d104      	bne.n	8008508 <UART_Start_Receive_IT+0x98>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2260      	movs	r2, #96	; 0x60
 8008502:	217f      	movs	r1, #127	; 0x7f
 8008504:	5299      	strh	r1, [r3, r2]
 8008506:	e008      	b.n	800851a <UART_Start_Receive_IT+0xaa>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2260      	movs	r2, #96	; 0x60
 800850c:	213f      	movs	r1, #63	; 0x3f
 800850e:	5299      	strh	r1, [r3, r2]
 8008510:	e003      	b.n	800851a <UART_Start_Receive_IT+0xaa>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2260      	movs	r2, #96	; 0x60
 8008516:	2100      	movs	r1, #0
 8008518:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2290      	movs	r2, #144	; 0x90
 800851e:	2100      	movs	r1, #0
 8008520:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	228c      	movs	r2, #140	; 0x8c
 8008526:	2122      	movs	r1, #34	; 0x22
 8008528:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800852a:	f3ef 8310 	mrs	r3, PRIMASK
 800852e:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8008530:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008532:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008534:	2301      	movs	r3, #1
 8008536:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800853a:	f383 8810 	msr	PRIMASK, r3
}
 800853e:	46c0      	nop			; (mov r8, r8)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	689a      	ldr	r2, [r3, #8]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2101      	movs	r1, #1
 800854c:	430a      	orrs	r2, r1
 800854e:	609a      	str	r2, [r3, #8]
 8008550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008552:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008556:	f383 8810 	msr	PRIMASK, r3
}
 800855a:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008560:	2380      	movs	r3, #128	; 0x80
 8008562:	059b      	lsls	r3, r3, #22
 8008564:	429a      	cmp	r2, r3
 8008566:	d150      	bne.n	800860a <UART_Start_Receive_IT+0x19a>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2268      	movs	r2, #104	; 0x68
 800856c:	5a9b      	ldrh	r3, [r3, r2]
 800856e:	1dba      	adds	r2, r7, #6
 8008570:	8812      	ldrh	r2, [r2, #0]
 8008572:	429a      	cmp	r2, r3
 8008574:	d349      	bcc.n	800860a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	689a      	ldr	r2, [r3, #8]
 800857a:	2380      	movs	r3, #128	; 0x80
 800857c:	015b      	lsls	r3, r3, #5
 800857e:	429a      	cmp	r2, r3
 8008580:	d107      	bne.n	8008592 <UART_Start_Receive_IT+0x122>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d103      	bne.n	8008592 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	4a46      	ldr	r2, [pc, #280]	; (80086a8 <UART_Start_Receive_IT+0x238>)
 800858e:	675a      	str	r2, [r3, #116]	; 0x74
 8008590:	e002      	b.n	8008598 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	4a45      	ldr	r2, [pc, #276]	; (80086ac <UART_Start_Receive_IT+0x23c>)
 8008596:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d019      	beq.n	80085d4 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085a0:	f3ef 8310 	mrs	r3, PRIMASK
 80085a4:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80085a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80085aa:	2301      	movs	r3, #1
 80085ac:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b0:	f383 8810 	msr	PRIMASK, r3
}
 80085b4:	46c0      	nop			; (mov r8, r8)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2180      	movs	r1, #128	; 0x80
 80085c2:	0049      	lsls	r1, r1, #1
 80085c4:	430a      	orrs	r2, r1
 80085c6:	601a      	str	r2, [r3, #0]
 80085c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ce:	f383 8810 	msr	PRIMASK, r3
}
 80085d2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085d4:	f3ef 8310 	mrs	r3, PRIMASK
 80085d8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80085da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80085dc:	657b      	str	r3, [r7, #84]	; 0x54
 80085de:	2301      	movs	r3, #1
 80085e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e4:	f383 8810 	msr	PRIMASK, r3
}
 80085e8:	46c0      	nop			; (mov r8, r8)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	689a      	ldr	r2, [r3, #8]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2180      	movs	r1, #128	; 0x80
 80085f6:	0549      	lsls	r1, r1, #21
 80085f8:	430a      	orrs	r2, r1
 80085fa:	609a      	str	r2, [r3, #8]
 80085fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085fe:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008602:	f383 8810 	msr	PRIMASK, r3
}
 8008606:	46c0      	nop			; (mov r8, r8)
 8008608:	e047      	b.n	800869a <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	689a      	ldr	r2, [r3, #8]
 800860e:	2380      	movs	r3, #128	; 0x80
 8008610:	015b      	lsls	r3, r3, #5
 8008612:	429a      	cmp	r2, r3
 8008614:	d107      	bne.n	8008626 <UART_Start_Receive_IT+0x1b6>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d103      	bne.n	8008626 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	4a23      	ldr	r2, [pc, #140]	; (80086b0 <UART_Start_Receive_IT+0x240>)
 8008622:	675a      	str	r2, [r3, #116]	; 0x74
 8008624:	e002      	b.n	800862c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	4a22      	ldr	r2, [pc, #136]	; (80086b4 <UART_Start_Receive_IT+0x244>)
 800862a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d019      	beq.n	8008668 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008634:	f3ef 8310 	mrs	r3, PRIMASK
 8008638:	61fb      	str	r3, [r7, #28]
  return(result);
 800863a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800863c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800863e:	2301      	movs	r3, #1
 8008640:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008642:	6a3b      	ldr	r3, [r7, #32]
 8008644:	f383 8810 	msr	PRIMASK, r3
}
 8008648:	46c0      	nop			; (mov r8, r8)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2190      	movs	r1, #144	; 0x90
 8008656:	0049      	lsls	r1, r1, #1
 8008658:	430a      	orrs	r2, r1
 800865a:	601a      	str	r2, [r3, #0]
 800865c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800865e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008662:	f383 8810 	msr	PRIMASK, r3
}
 8008666:	e018      	b.n	800869a <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008668:	f3ef 8310 	mrs	r3, PRIMASK
 800866c:	613b      	str	r3, [r7, #16]
  return(result);
 800866e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008670:	653b      	str	r3, [r7, #80]	; 0x50
 8008672:	2301      	movs	r3, #1
 8008674:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	f383 8810 	msr	PRIMASK, r3
}
 800867c:	46c0      	nop			; (mov r8, r8)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2120      	movs	r1, #32
 800868a:	430a      	orrs	r2, r1
 800868c:	601a      	str	r2, [r3, #0]
 800868e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008690:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	f383 8810 	msr	PRIMASK, r3
}
 8008698:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	0018      	movs	r0, r3
 800869e:	46bd      	mov	sp, r7
 80086a0:	b018      	add	sp, #96	; 0x60
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	000001ff 	.word	0x000001ff
 80086a8:	08008de1 	.word	0x08008de1
 80086ac:	08008af5 	.word	0x08008af5
 80086b0:	08008981 	.word	0x08008981
 80086b4:	0800880d 	.word	0x0800880d

080086b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b08e      	sub	sp, #56	; 0x38
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086c0:	f3ef 8310 	mrs	r3, PRIMASK
 80086c4:	617b      	str	r3, [r7, #20]
  return(result);
 80086c6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086c8:	637b      	str	r3, [r7, #52]	; 0x34
 80086ca:	2301      	movs	r3, #1
 80086cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	f383 8810 	msr	PRIMASK, r3
}
 80086d4:	46c0      	nop			; (mov r8, r8)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4926      	ldr	r1, [pc, #152]	; (800877c <UART_EndRxTransfer+0xc4>)
 80086e2:	400a      	ands	r2, r1
 80086e4:	601a      	str	r2, [r3, #0]
 80086e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	f383 8810 	msr	PRIMASK, r3
}
 80086f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086f2:	f3ef 8310 	mrs	r3, PRIMASK
 80086f6:	623b      	str	r3, [r7, #32]
  return(result);
 80086f8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086fa:	633b      	str	r3, [r7, #48]	; 0x30
 80086fc:	2301      	movs	r3, #1
 80086fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008702:	f383 8810 	msr	PRIMASK, r3
}
 8008706:	46c0      	nop			; (mov r8, r8)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	689a      	ldr	r2, [r3, #8]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	491b      	ldr	r1, [pc, #108]	; (8008780 <UART_EndRxTransfer+0xc8>)
 8008714:	400a      	ands	r2, r1
 8008716:	609a      	str	r2, [r3, #8]
 8008718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800871c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871e:	f383 8810 	msr	PRIMASK, r3
}
 8008722:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008728:	2b01      	cmp	r3, #1
 800872a:	d118      	bne.n	800875e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800872c:	f3ef 8310 	mrs	r3, PRIMASK
 8008730:	60bb      	str	r3, [r7, #8]
  return(result);
 8008732:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008734:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008736:	2301      	movs	r3, #1
 8008738:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f383 8810 	msr	PRIMASK, r3
}
 8008740:	46c0      	nop			; (mov r8, r8)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2110      	movs	r1, #16
 800874e:	438a      	bics	r2, r1
 8008750:	601a      	str	r2, [r3, #0]
 8008752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008754:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	f383 8810 	msr	PRIMASK, r3
}
 800875c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	228c      	movs	r2, #140	; 0x8c
 8008762:	2120      	movs	r1, #32
 8008764:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008772:	46c0      	nop			; (mov r8, r8)
 8008774:	46bd      	mov	sp, r7
 8008776:	b00e      	add	sp, #56	; 0x38
 8008778:	bd80      	pop	{r7, pc}
 800877a:	46c0      	nop			; (mov r8, r8)
 800877c:	fffffedf 	.word	0xfffffedf
 8008780:	effffffe 	.word	0xeffffffe

08008784 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008790:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	225e      	movs	r2, #94	; 0x5e
 8008796:	2100      	movs	r1, #0
 8008798:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2256      	movs	r2, #86	; 0x56
 800879e:	2100      	movs	r1, #0
 80087a0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	0018      	movs	r0, r3
 80087a6:	f7ff fa19 	bl	8007bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087aa:	46c0      	nop			; (mov r8, r8)
 80087ac:	46bd      	mov	sp, r7
 80087ae:	b004      	add	sp, #16
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b086      	sub	sp, #24
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087ba:	f3ef 8310 	mrs	r3, PRIMASK
 80087be:	60bb      	str	r3, [r7, #8]
  return(result);
 80087c0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087c2:	617b      	str	r3, [r7, #20]
 80087c4:	2301      	movs	r3, #1
 80087c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f383 8810 	msr	PRIMASK, r3
}
 80087ce:	46c0      	nop			; (mov r8, r8)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2140      	movs	r1, #64	; 0x40
 80087dc:	438a      	bics	r2, r1
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	f383 8810 	msr	PRIMASK, r3
}
 80087ea:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2288      	movs	r2, #136	; 0x88
 80087f0:	2120      	movs	r1, #32
 80087f2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	0018      	movs	r0, r3
 80087fe:	f7ff f9dd 	bl	8007bbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008802:	46c0      	nop			; (mov r8, r8)
 8008804:	46bd      	mov	sp, r7
 8008806:	b006      	add	sp, #24
 8008808:	bd80      	pop	{r7, pc}
	...

0800880c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b090      	sub	sp, #64	; 0x40
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008814:	203e      	movs	r0, #62	; 0x3e
 8008816:	183b      	adds	r3, r7, r0
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	2160      	movs	r1, #96	; 0x60
 800881c:	5a52      	ldrh	r2, [r2, r1]
 800881e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	228c      	movs	r2, #140	; 0x8c
 8008824:	589b      	ldr	r3, [r3, r2]
 8008826:	2b22      	cmp	r3, #34	; 0x22
 8008828:	d000      	beq.n	800882c <UART_RxISR_8BIT+0x20>
 800882a:	e09a      	b.n	8008962 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008832:	213c      	movs	r1, #60	; 0x3c
 8008834:	187b      	adds	r3, r7, r1
 8008836:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008838:	187b      	adds	r3, r7, r1
 800883a:	881b      	ldrh	r3, [r3, #0]
 800883c:	b2da      	uxtb	r2, r3
 800883e:	183b      	adds	r3, r7, r0
 8008840:	881b      	ldrh	r3, [r3, #0]
 8008842:	b2d9      	uxtb	r1, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008848:	400a      	ands	r2, r1
 800884a:	b2d2      	uxtb	r2, r2
 800884c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008852:	1c5a      	adds	r2, r3, #1
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	225e      	movs	r2, #94	; 0x5e
 800885c:	5a9b      	ldrh	r3, [r3, r2]
 800885e:	b29b      	uxth	r3, r3
 8008860:	3b01      	subs	r3, #1
 8008862:	b299      	uxth	r1, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	225e      	movs	r2, #94	; 0x5e
 8008868:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	225e      	movs	r2, #94	; 0x5e
 800886e:	5a9b      	ldrh	r3, [r3, r2]
 8008870:	b29b      	uxth	r3, r3
 8008872:	2b00      	cmp	r3, #0
 8008874:	d000      	beq.n	8008878 <UART_RxISR_8BIT+0x6c>
 8008876:	e07c      	b.n	8008972 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008878:	f3ef 8310 	mrs	r3, PRIMASK
 800887c:	61bb      	str	r3, [r7, #24]
  return(result);
 800887e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008880:	63bb      	str	r3, [r7, #56]	; 0x38
 8008882:	2301      	movs	r3, #1
 8008884:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	f383 8810 	msr	PRIMASK, r3
}
 800888c:	46c0      	nop			; (mov r8, r8)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4938      	ldr	r1, [pc, #224]	; (800897c <UART_RxISR_8BIT+0x170>)
 800889a:	400a      	ands	r2, r1
 800889c:	601a      	str	r2, [r3, #0]
 800889e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088a2:	6a3b      	ldr	r3, [r7, #32]
 80088a4:	f383 8810 	msr	PRIMASK, r3
}
 80088a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088aa:	f3ef 8310 	mrs	r3, PRIMASK
 80088ae:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80088b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088b2:	637b      	str	r3, [r7, #52]	; 0x34
 80088b4:	2301      	movs	r3, #1
 80088b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ba:	f383 8810 	msr	PRIMASK, r3
}
 80088be:	46c0      	nop			; (mov r8, r8)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	689a      	ldr	r2, [r3, #8]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2101      	movs	r1, #1
 80088cc:	438a      	bics	r2, r1
 80088ce:	609a      	str	r2, [r3, #8]
 80088d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d6:	f383 8810 	msr	PRIMASK, r3
}
 80088da:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	228c      	movs	r2, #140	; 0x8c
 80088e0:	2120      	movs	r1, #32
 80088e2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d12f      	bne.n	8008958 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088fe:	f3ef 8310 	mrs	r3, PRIMASK
 8008902:	60fb      	str	r3, [r7, #12]
  return(result);
 8008904:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008906:	633b      	str	r3, [r7, #48]	; 0x30
 8008908:	2301      	movs	r3, #1
 800890a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	f383 8810 	msr	PRIMASK, r3
}
 8008912:	46c0      	nop			; (mov r8, r8)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2110      	movs	r1, #16
 8008920:	438a      	bics	r2, r1
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008926:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	f383 8810 	msr	PRIMASK, r3
}
 800892e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	69db      	ldr	r3, [r3, #28]
 8008936:	2210      	movs	r2, #16
 8008938:	4013      	ands	r3, r2
 800893a:	2b10      	cmp	r3, #16
 800893c:	d103      	bne.n	8008946 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2210      	movs	r2, #16
 8008944:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	225c      	movs	r2, #92	; 0x5c
 800894a:	5a9a      	ldrh	r2, [r3, r2]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	0011      	movs	r1, r2
 8008950:	0018      	movs	r0, r3
 8008952:	f7fa fc15 	bl	8003180 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008956:	e00c      	b.n	8008972 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	0018      	movs	r0, r3
 800895c:	f7ff f936 	bl	8007bcc <HAL_UART_RxCpltCallback>
}
 8008960:	e007      	b.n	8008972 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	699a      	ldr	r2, [r3, #24]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2108      	movs	r1, #8
 800896e:	430a      	orrs	r2, r1
 8008970:	619a      	str	r2, [r3, #24]
}
 8008972:	46c0      	nop			; (mov r8, r8)
 8008974:	46bd      	mov	sp, r7
 8008976:	b010      	add	sp, #64	; 0x40
 8008978:	bd80      	pop	{r7, pc}
 800897a:	46c0      	nop			; (mov r8, r8)
 800897c:	fffffedf 	.word	0xfffffedf

08008980 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b090      	sub	sp, #64	; 0x40
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008988:	203e      	movs	r0, #62	; 0x3e
 800898a:	183b      	adds	r3, r7, r0
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	2160      	movs	r1, #96	; 0x60
 8008990:	5a52      	ldrh	r2, [r2, r1]
 8008992:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	228c      	movs	r2, #140	; 0x8c
 8008998:	589b      	ldr	r3, [r3, r2]
 800899a:	2b22      	cmp	r3, #34	; 0x22
 800899c:	d000      	beq.n	80089a0 <UART_RxISR_16BIT+0x20>
 800899e:	e09a      	b.n	8008ad6 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089a6:	213c      	movs	r1, #60	; 0x3c
 80089a8:	187b      	adds	r3, r7, r1
 80089aa:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089b0:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80089b2:	187b      	adds	r3, r7, r1
 80089b4:	183a      	adds	r2, r7, r0
 80089b6:	881b      	ldrh	r3, [r3, #0]
 80089b8:	8812      	ldrh	r2, [r2, #0]
 80089ba:	4013      	ands	r3, r2
 80089bc:	b29a      	uxth	r2, r3
 80089be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089c6:	1c9a      	adds	r2, r3, #2
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	225e      	movs	r2, #94	; 0x5e
 80089d0:	5a9b      	ldrh	r3, [r3, r2]
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	3b01      	subs	r3, #1
 80089d6:	b299      	uxth	r1, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	225e      	movs	r2, #94	; 0x5e
 80089dc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	225e      	movs	r2, #94	; 0x5e
 80089e2:	5a9b      	ldrh	r3, [r3, r2]
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d000      	beq.n	80089ec <UART_RxISR_16BIT+0x6c>
 80089ea:	e07c      	b.n	8008ae6 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089ec:	f3ef 8310 	mrs	r3, PRIMASK
 80089f0:	617b      	str	r3, [r7, #20]
  return(result);
 80089f2:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089f4:	637b      	str	r3, [r7, #52]	; 0x34
 80089f6:	2301      	movs	r3, #1
 80089f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	f383 8810 	msr	PRIMASK, r3
}
 8008a00:	46c0      	nop			; (mov r8, r8)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4938      	ldr	r1, [pc, #224]	; (8008af0 <UART_RxISR_16BIT+0x170>)
 8008a0e:	400a      	ands	r2, r1
 8008a10:	601a      	str	r2, [r3, #0]
 8008a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	f383 8810 	msr	PRIMASK, r3
}
 8008a1c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a1e:	f3ef 8310 	mrs	r3, PRIMASK
 8008a22:	623b      	str	r3, [r7, #32]
  return(result);
 8008a24:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a26:	633b      	str	r3, [r7, #48]	; 0x30
 8008a28:	2301      	movs	r3, #1
 8008a2a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2e:	f383 8810 	msr	PRIMASK, r3
}
 8008a32:	46c0      	nop			; (mov r8, r8)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	689a      	ldr	r2, [r3, #8]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2101      	movs	r1, #1
 8008a40:	438a      	bics	r2, r1
 8008a42:	609a      	str	r2, [r3, #8]
 8008a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a46:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4a:	f383 8810 	msr	PRIMASK, r3
}
 8008a4e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	228c      	movs	r2, #140	; 0x8c
 8008a54:	2120      	movs	r1, #32
 8008a56:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d12f      	bne.n	8008acc <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a72:	f3ef 8310 	mrs	r3, PRIMASK
 8008a76:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a78:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f383 8810 	msr	PRIMASK, r3
}
 8008a86:	46c0      	nop			; (mov r8, r8)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2110      	movs	r1, #16
 8008a94:	438a      	bics	r2, r1
 8008a96:	601a      	str	r2, [r3, #0]
 8008a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	f383 8810 	msr	PRIMASK, r3
}
 8008aa2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	69db      	ldr	r3, [r3, #28]
 8008aaa:	2210      	movs	r2, #16
 8008aac:	4013      	ands	r3, r2
 8008aae:	2b10      	cmp	r3, #16
 8008ab0:	d103      	bne.n	8008aba <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2210      	movs	r2, #16
 8008ab8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	225c      	movs	r2, #92	; 0x5c
 8008abe:	5a9a      	ldrh	r2, [r3, r2]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	0011      	movs	r1, r2
 8008ac4:	0018      	movs	r0, r3
 8008ac6:	f7fa fb5b 	bl	8003180 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008aca:	e00c      	b.n	8008ae6 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	0018      	movs	r0, r3
 8008ad0:	f7ff f87c 	bl	8007bcc <HAL_UART_RxCpltCallback>
}
 8008ad4:	e007      	b.n	8008ae6 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	699a      	ldr	r2, [r3, #24]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2108      	movs	r1, #8
 8008ae2:	430a      	orrs	r2, r1
 8008ae4:	619a      	str	r2, [r3, #24]
}
 8008ae6:	46c0      	nop			; (mov r8, r8)
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	b010      	add	sp, #64	; 0x40
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	46c0      	nop			; (mov r8, r8)
 8008af0:	fffffedf 	.word	0xfffffedf

08008af4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b09c      	sub	sp, #112	; 0x70
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008afc:	236a      	movs	r3, #106	; 0x6a
 8008afe:	18fb      	adds	r3, r7, r3
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	2160      	movs	r1, #96	; 0x60
 8008b04:	5a52      	ldrh	r2, [r2, r1]
 8008b06:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	69db      	ldr	r3, [r3, #28]
 8008b0e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	228c      	movs	r2, #140	; 0x8c
 8008b24:	589b      	ldr	r3, [r3, r2]
 8008b26:	2b22      	cmp	r3, #34	; 0x22
 8008b28:	d000      	beq.n	8008b2c <UART_RxISR_8BIT_FIFOEN+0x38>
 8008b2a:	e144      	b.n	8008db6 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008b2c:	235e      	movs	r3, #94	; 0x5e
 8008b2e:	18fb      	adds	r3, r7, r3
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	2168      	movs	r1, #104	; 0x68
 8008b34:	5a52      	ldrh	r2, [r2, r1]
 8008b36:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b38:	e0eb      	b.n	8008d12 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b40:	215c      	movs	r1, #92	; 0x5c
 8008b42:	187b      	adds	r3, r7, r1
 8008b44:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008b46:	187b      	adds	r3, r7, r1
 8008b48:	881b      	ldrh	r3, [r3, #0]
 8008b4a:	b2da      	uxtb	r2, r3
 8008b4c:	236a      	movs	r3, #106	; 0x6a
 8008b4e:	18fb      	adds	r3, r7, r3
 8008b50:	881b      	ldrh	r3, [r3, #0]
 8008b52:	b2d9      	uxtb	r1, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b58:	400a      	ands	r2, r1
 8008b5a:	b2d2      	uxtb	r2, r2
 8008b5c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b62:	1c5a      	adds	r2, r3, #1
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	225e      	movs	r2, #94	; 0x5e
 8008b6c:	5a9b      	ldrh	r3, [r3, r2]
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	3b01      	subs	r3, #1
 8008b72:	b299      	uxth	r1, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	225e      	movs	r2, #94	; 0x5e
 8008b78:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	69db      	ldr	r3, [r3, #28]
 8008b80:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b84:	2207      	movs	r2, #7
 8008b86:	4013      	ands	r3, r2
 8008b88:	d049      	beq.n	8008c1e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	4013      	ands	r3, r2
 8008b90:	d010      	beq.n	8008bb4 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8008b92:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008b94:	2380      	movs	r3, #128	; 0x80
 8008b96:	005b      	lsls	r3, r3, #1
 8008b98:	4013      	ands	r3, r2
 8008b9a:	d00b      	beq.n	8008bb4 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2290      	movs	r2, #144	; 0x90
 8008ba8:	589b      	ldr	r3, [r3, r2]
 8008baa:	2201      	movs	r2, #1
 8008bac:	431a      	orrs	r2, r3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2190      	movs	r1, #144	; 0x90
 8008bb2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bb6:	2202      	movs	r2, #2
 8008bb8:	4013      	ands	r3, r2
 8008bba:	d00f      	beq.n	8008bdc <UART_RxISR_8BIT_FIFOEN+0xe8>
 8008bbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	d00b      	beq.n	8008bdc <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2202      	movs	r2, #2
 8008bca:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2290      	movs	r2, #144	; 0x90
 8008bd0:	589b      	ldr	r3, [r3, r2]
 8008bd2:	2204      	movs	r2, #4
 8008bd4:	431a      	orrs	r2, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2190      	movs	r1, #144	; 0x90
 8008bda:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bde:	2204      	movs	r2, #4
 8008be0:	4013      	ands	r3, r2
 8008be2:	d00f      	beq.n	8008c04 <UART_RxISR_8BIT_FIFOEN+0x110>
 8008be4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008be6:	2201      	movs	r2, #1
 8008be8:	4013      	ands	r3, r2
 8008bea:	d00b      	beq.n	8008c04 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2204      	movs	r2, #4
 8008bf2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2290      	movs	r2, #144	; 0x90
 8008bf8:	589b      	ldr	r3, [r3, r2]
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	431a      	orrs	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2190      	movs	r1, #144	; 0x90
 8008c02:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2290      	movs	r2, #144	; 0x90
 8008c08:	589b      	ldr	r3, [r3, r2]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d007      	beq.n	8008c1e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	0018      	movs	r0, r3
 8008c12:	f7fe ffe3 	bl	8007bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2290      	movs	r2, #144	; 0x90
 8008c1a:	2100      	movs	r1, #0
 8008c1c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	225e      	movs	r2, #94	; 0x5e
 8008c22:	5a9b      	ldrh	r3, [r3, r2]
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d173      	bne.n	8008d12 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c2a:	f3ef 8310 	mrs	r3, PRIMASK
 8008c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8008c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c32:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c34:	2301      	movs	r3, #1
 8008c36:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3a:	f383 8810 	msr	PRIMASK, r3
}
 8008c3e:	46c0      	nop			; (mov r8, r8)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4961      	ldr	r1, [pc, #388]	; (8008dd0 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8008c4c:	400a      	ands	r2, r1
 8008c4e:	601a      	str	r2, [r3, #0]
 8008c50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c52:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c56:	f383 8810 	msr	PRIMASK, r3
}
 8008c5a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8008c60:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8008c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c64:	657b      	str	r3, [r7, #84]	; 0x54
 8008c66:	2301      	movs	r3, #1
 8008c68:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c6c:	f383 8810 	msr	PRIMASK, r3
}
 8008c70:	46c0      	nop			; (mov r8, r8)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	689a      	ldr	r2, [r3, #8]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4955      	ldr	r1, [pc, #340]	; (8008dd4 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8008c7e:	400a      	ands	r2, r1
 8008c80:	609a      	str	r2, [r3, #8]
 8008c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c84:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c88:	f383 8810 	msr	PRIMASK, r3
}
 8008c8c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	228c      	movs	r2, #140	; 0x8c
 8008c92:	2120      	movs	r1, #32
 8008c94:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d12f      	bne.n	8008d0a <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cb0:	f3ef 8310 	mrs	r3, PRIMASK
 8008cb4:	623b      	str	r3, [r7, #32]
  return(result);
 8008cb6:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cb8:	653b      	str	r3, [r7, #80]	; 0x50
 8008cba:	2301      	movs	r3, #1
 8008cbc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc0:	f383 8810 	msr	PRIMASK, r3
}
 8008cc4:	46c0      	nop			; (mov r8, r8)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2110      	movs	r1, #16
 8008cd2:	438a      	bics	r2, r1
 8008cd4:	601a      	str	r2, [r3, #0]
 8008cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cdc:	f383 8810 	msr	PRIMASK, r3
}
 8008ce0:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	69db      	ldr	r3, [r3, #28]
 8008ce8:	2210      	movs	r2, #16
 8008cea:	4013      	ands	r3, r2
 8008cec:	2b10      	cmp	r3, #16
 8008cee:	d103      	bne.n	8008cf8 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2210      	movs	r2, #16
 8008cf6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	225c      	movs	r2, #92	; 0x5c
 8008cfc:	5a9a      	ldrh	r2, [r3, r2]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	0011      	movs	r1, r2
 8008d02:	0018      	movs	r0, r3
 8008d04:	f7fa fa3c 	bl	8003180 <HAL_UARTEx_RxEventCallback>
 8008d08:	e003      	b.n	8008d12 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	0018      	movs	r0, r3
 8008d0e:	f7fe ff5d 	bl	8007bcc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008d12:	235e      	movs	r3, #94	; 0x5e
 8008d14:	18fb      	adds	r3, r7, r3
 8008d16:	881b      	ldrh	r3, [r3, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d004      	beq.n	8008d26 <UART_RxISR_8BIT_FIFOEN+0x232>
 8008d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d1e:	2220      	movs	r2, #32
 8008d20:	4013      	ands	r3, r2
 8008d22:	d000      	beq.n	8008d26 <UART_RxISR_8BIT_FIFOEN+0x232>
 8008d24:	e709      	b.n	8008b3a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008d26:	204e      	movs	r0, #78	; 0x4e
 8008d28:	183b      	adds	r3, r7, r0
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	215e      	movs	r1, #94	; 0x5e
 8008d2e:	5a52      	ldrh	r2, [r2, r1]
 8008d30:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008d32:	0001      	movs	r1, r0
 8008d34:	187b      	adds	r3, r7, r1
 8008d36:	881b      	ldrh	r3, [r3, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d044      	beq.n	8008dc6 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2268      	movs	r2, #104	; 0x68
 8008d40:	5a9b      	ldrh	r3, [r3, r2]
 8008d42:	187a      	adds	r2, r7, r1
 8008d44:	8812      	ldrh	r2, [r2, #0]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d23d      	bcs.n	8008dc6 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8008d4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d50:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008d52:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d54:	2301      	movs	r3, #1
 8008d56:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f383 8810 	msr	PRIMASK, r3
}
 8008d5e:	46c0      	nop			; (mov r8, r8)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	689a      	ldr	r2, [r3, #8]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	491b      	ldr	r1, [pc, #108]	; (8008dd8 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8008d6c:	400a      	ands	r2, r1
 8008d6e:	609a      	str	r2, [r3, #8]
 8008d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	f383 8810 	msr	PRIMASK, r3
}
 8008d7a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4a17      	ldr	r2, [pc, #92]	; (8008ddc <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8008d80:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d82:	f3ef 8310 	mrs	r3, PRIMASK
 8008d86:	617b      	str	r3, [r7, #20]
  return(result);
 8008d88:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d8a:	647b      	str	r3, [r7, #68]	; 0x44
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	f383 8810 	msr	PRIMASK, r3
}
 8008d96:	46c0      	nop			; (mov r8, r8)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2120      	movs	r1, #32
 8008da4:	430a      	orrs	r2, r1
 8008da6:	601a      	str	r2, [r3, #0]
 8008da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008daa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	f383 8810 	msr	PRIMASK, r3
}
 8008db2:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008db4:	e007      	b.n	8008dc6 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	699a      	ldr	r2, [r3, #24]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	2108      	movs	r1, #8
 8008dc2:	430a      	orrs	r2, r1
 8008dc4:	619a      	str	r2, [r3, #24]
}
 8008dc6:	46c0      	nop			; (mov r8, r8)
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	b01c      	add	sp, #112	; 0x70
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	46c0      	nop			; (mov r8, r8)
 8008dd0:	fffffeff 	.word	0xfffffeff
 8008dd4:	effffffe 	.word	0xeffffffe
 8008dd8:	efffffff 	.word	0xefffffff
 8008ddc:	0800880d 	.word	0x0800880d

08008de0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b09e      	sub	sp, #120	; 0x78
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008de8:	2372      	movs	r3, #114	; 0x72
 8008dea:	18fb      	adds	r3, r7, r3
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	2160      	movs	r1, #96	; 0x60
 8008df0:	5a52      	ldrh	r2, [r2, r1]
 8008df2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	69db      	ldr	r3, [r3, #28]
 8008dfa:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	228c      	movs	r2, #140	; 0x8c
 8008e10:	589b      	ldr	r3, [r3, r2]
 8008e12:	2b22      	cmp	r3, #34	; 0x22
 8008e14:	d000      	beq.n	8008e18 <UART_RxISR_16BIT_FIFOEN+0x38>
 8008e16:	e144      	b.n	80090a2 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008e18:	2366      	movs	r3, #102	; 0x66
 8008e1a:	18fb      	adds	r3, r7, r3
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	2168      	movs	r1, #104	; 0x68
 8008e20:	5a52      	ldrh	r2, [r2, r1]
 8008e22:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e24:	e0eb      	b.n	8008ffe <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e2c:	2164      	movs	r1, #100	; 0x64
 8008e2e:	187b      	adds	r3, r7, r1
 8008e30:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e36:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8008e38:	187b      	adds	r3, r7, r1
 8008e3a:	2272      	movs	r2, #114	; 0x72
 8008e3c:	18ba      	adds	r2, r7, r2
 8008e3e:	881b      	ldrh	r3, [r3, #0]
 8008e40:	8812      	ldrh	r2, [r2, #0]
 8008e42:	4013      	ands	r3, r2
 8008e44:	b29a      	uxth	r2, r3
 8008e46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e4e:	1c9a      	adds	r2, r3, #2
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	225e      	movs	r2, #94	; 0x5e
 8008e58:	5a9b      	ldrh	r3, [r3, r2]
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	b299      	uxth	r1, r3
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	225e      	movs	r2, #94	; 0x5e
 8008e64:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	69db      	ldr	r3, [r3, #28]
 8008e6c:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e70:	2207      	movs	r2, #7
 8008e72:	4013      	ands	r3, r2
 8008e74:	d049      	beq.n	8008f0a <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e78:	2201      	movs	r2, #1
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	d010      	beq.n	8008ea0 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8008e7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008e80:	2380      	movs	r3, #128	; 0x80
 8008e82:	005b      	lsls	r3, r3, #1
 8008e84:	4013      	ands	r3, r2
 8008e86:	d00b      	beq.n	8008ea0 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2290      	movs	r2, #144	; 0x90
 8008e94:	589b      	ldr	r3, [r3, r2]
 8008e96:	2201      	movs	r2, #1
 8008e98:	431a      	orrs	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2190      	movs	r1, #144	; 0x90
 8008e9e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ea0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ea2:	2202      	movs	r2, #2
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	d00f      	beq.n	8008ec8 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8008ea8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008eaa:	2201      	movs	r2, #1
 8008eac:	4013      	ands	r3, r2
 8008eae:	d00b      	beq.n	8008ec8 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2202      	movs	r2, #2
 8008eb6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2290      	movs	r2, #144	; 0x90
 8008ebc:	589b      	ldr	r3, [r3, r2]
 8008ebe:	2204      	movs	r2, #4
 8008ec0:	431a      	orrs	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2190      	movs	r1, #144	; 0x90
 8008ec6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ec8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008eca:	2204      	movs	r2, #4
 8008ecc:	4013      	ands	r3, r2
 8008ece:	d00f      	beq.n	8008ef0 <UART_RxISR_16BIT_FIFOEN+0x110>
 8008ed0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	d00b      	beq.n	8008ef0 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2204      	movs	r2, #4
 8008ede:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2290      	movs	r2, #144	; 0x90
 8008ee4:	589b      	ldr	r3, [r3, r2]
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	431a      	orrs	r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2190      	movs	r1, #144	; 0x90
 8008eee:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2290      	movs	r2, #144	; 0x90
 8008ef4:	589b      	ldr	r3, [r3, r2]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d007      	beq.n	8008f0a <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	0018      	movs	r0, r3
 8008efe:	f7fe fe6d 	bl	8007bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2290      	movs	r2, #144	; 0x90
 8008f06:	2100      	movs	r1, #0
 8008f08:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	225e      	movs	r2, #94	; 0x5e
 8008f0e:	5a9b      	ldrh	r3, [r3, r2]
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d173      	bne.n	8008ffe <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f16:	f3ef 8310 	mrs	r3, PRIMASK
 8008f1a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f20:	2301      	movs	r3, #1
 8008f22:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f26:	f383 8810 	msr	PRIMASK, r3
}
 8008f2a:	46c0      	nop			; (mov r8, r8)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4961      	ldr	r1, [pc, #388]	; (80090bc <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8008f38:	400a      	ands	r2, r1
 8008f3a:	601a      	str	r2, [r3, #0]
 8008f3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f42:	f383 8810 	msr	PRIMASK, r3
}
 8008f46:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f48:	f3ef 8310 	mrs	r3, PRIMASK
 8008f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8008f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f50:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f52:	2301      	movs	r3, #1
 8008f54:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f58:	f383 8810 	msr	PRIMASK, r3
}
 8008f5c:	46c0      	nop			; (mov r8, r8)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	689a      	ldr	r2, [r3, #8]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4955      	ldr	r1, [pc, #340]	; (80090c0 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8008f6a:	400a      	ands	r2, r1
 8008f6c:	609a      	str	r2, [r3, #8]
 8008f6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f70:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f74:	f383 8810 	msr	PRIMASK, r3
}
 8008f78:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	228c      	movs	r2, #140	; 0x8c
 8008f7e:	2120      	movs	r1, #32
 8008f80:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d12f      	bne.n	8008ff6 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8008fa0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fa4:	657b      	str	r3, [r7, #84]	; 0x54
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fac:	f383 8810 	msr	PRIMASK, r3
}
 8008fb0:	46c0      	nop			; (mov r8, r8)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2110      	movs	r1, #16
 8008fbe:	438a      	bics	r2, r1
 8008fc0:	601a      	str	r2, [r3, #0]
 8008fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc8:	f383 8810 	msr	PRIMASK, r3
}
 8008fcc:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	69db      	ldr	r3, [r3, #28]
 8008fd4:	2210      	movs	r2, #16
 8008fd6:	4013      	ands	r3, r2
 8008fd8:	2b10      	cmp	r3, #16
 8008fda:	d103      	bne.n	8008fe4 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2210      	movs	r2, #16
 8008fe2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	225c      	movs	r2, #92	; 0x5c
 8008fe8:	5a9a      	ldrh	r2, [r3, r2]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	0011      	movs	r1, r2
 8008fee:	0018      	movs	r0, r3
 8008ff0:	f7fa f8c6 	bl	8003180 <HAL_UARTEx_RxEventCallback>
 8008ff4:	e003      	b.n	8008ffe <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	0018      	movs	r0, r3
 8008ffa:	f7fe fde7 	bl	8007bcc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008ffe:	2366      	movs	r3, #102	; 0x66
 8009000:	18fb      	adds	r3, r7, r3
 8009002:	881b      	ldrh	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d004      	beq.n	8009012 <UART_RxISR_16BIT_FIFOEN+0x232>
 8009008:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800900a:	2220      	movs	r2, #32
 800900c:	4013      	ands	r3, r2
 800900e:	d000      	beq.n	8009012 <UART_RxISR_16BIT_FIFOEN+0x232>
 8009010:	e709      	b.n	8008e26 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009012:	2052      	movs	r0, #82	; 0x52
 8009014:	183b      	adds	r3, r7, r0
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	215e      	movs	r1, #94	; 0x5e
 800901a:	5a52      	ldrh	r2, [r2, r1]
 800901c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800901e:	0001      	movs	r1, r0
 8009020:	187b      	adds	r3, r7, r1
 8009022:	881b      	ldrh	r3, [r3, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d044      	beq.n	80090b2 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2268      	movs	r2, #104	; 0x68
 800902c:	5a9b      	ldrh	r3, [r3, r2]
 800902e:	187a      	adds	r2, r7, r1
 8009030:	8812      	ldrh	r2, [r2, #0]
 8009032:	429a      	cmp	r2, r3
 8009034:	d23d      	bcs.n	80090b2 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009036:	f3ef 8310 	mrs	r3, PRIMASK
 800903a:	60fb      	str	r3, [r7, #12]
  return(result);
 800903c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800903e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009040:	2301      	movs	r3, #1
 8009042:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	f383 8810 	msr	PRIMASK, r3
}
 800904a:	46c0      	nop			; (mov r8, r8)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	689a      	ldr	r2, [r3, #8]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	491b      	ldr	r1, [pc, #108]	; (80090c4 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8009058:	400a      	ands	r2, r1
 800905a:	609a      	str	r2, [r3, #8]
 800905c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800905e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	f383 8810 	msr	PRIMASK, r3
}
 8009066:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4a17      	ldr	r2, [pc, #92]	; (80090c8 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 800906c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800906e:	f3ef 8310 	mrs	r3, PRIMASK
 8009072:	61bb      	str	r3, [r7, #24]
  return(result);
 8009074:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009076:	64bb      	str	r3, [r7, #72]	; 0x48
 8009078:	2301      	movs	r3, #1
 800907a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	f383 8810 	msr	PRIMASK, r3
}
 8009082:	46c0      	nop			; (mov r8, r8)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2120      	movs	r1, #32
 8009090:	430a      	orrs	r2, r1
 8009092:	601a      	str	r2, [r3, #0]
 8009094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009096:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009098:	6a3b      	ldr	r3, [r7, #32]
 800909a:	f383 8810 	msr	PRIMASK, r3
}
 800909e:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090a0:	e007      	b.n	80090b2 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	699a      	ldr	r2, [r3, #24]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2108      	movs	r1, #8
 80090ae:	430a      	orrs	r2, r1
 80090b0:	619a      	str	r2, [r3, #24]
}
 80090b2:	46c0      	nop			; (mov r8, r8)
 80090b4:	46bd      	mov	sp, r7
 80090b6:	b01e      	add	sp, #120	; 0x78
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	46c0      	nop			; (mov r8, r8)
 80090bc:	fffffeff 	.word	0xfffffeff
 80090c0:	effffffe 	.word	0xeffffffe
 80090c4:	efffffff 	.word	0xefffffff
 80090c8:	08008981 	.word	0x08008981

080090cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80090d4:	46c0      	nop			; (mov r8, r8)
 80090d6:	46bd      	mov	sp, r7
 80090d8:	b002      	add	sp, #8
 80090da:	bd80      	pop	{r7, pc}

080090dc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80090e4:	46c0      	nop			; (mov r8, r8)
 80090e6:	46bd      	mov	sp, r7
 80090e8:	b002      	add	sp, #8
 80090ea:	bd80      	pop	{r7, pc}

080090ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80090f4:	46c0      	nop			; (mov r8, r8)
 80090f6:	46bd      	mov	sp, r7
 80090f8:	b002      	add	sp, #8
 80090fa:	bd80      	pop	{r7, pc}

080090fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2284      	movs	r2, #132	; 0x84
 8009108:	5c9b      	ldrb	r3, [r3, r2]
 800910a:	2b01      	cmp	r3, #1
 800910c:	d101      	bne.n	8009112 <HAL_UARTEx_DisableFifoMode+0x16>
 800910e:	2302      	movs	r3, #2
 8009110:	e027      	b.n	8009162 <HAL_UARTEx_DisableFifoMode+0x66>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2284      	movs	r2, #132	; 0x84
 8009116:	2101      	movs	r1, #1
 8009118:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2288      	movs	r2, #136	; 0x88
 800911e:	2124      	movs	r1, #36	; 0x24
 8009120:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2101      	movs	r1, #1
 8009136:	438a      	bics	r2, r1
 8009138:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	4a0b      	ldr	r2, [pc, #44]	; (800916c <HAL_UARTEx_DisableFifoMode+0x70>)
 800913e:	4013      	ands	r3, r2
 8009140:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2288      	movs	r2, #136	; 0x88
 8009154:	2120      	movs	r1, #32
 8009156:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2284      	movs	r2, #132	; 0x84
 800915c:	2100      	movs	r1, #0
 800915e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	0018      	movs	r0, r3
 8009164:	46bd      	mov	sp, r7
 8009166:	b004      	add	sp, #16
 8009168:	bd80      	pop	{r7, pc}
 800916a:	46c0      	nop			; (mov r8, r8)
 800916c:	dfffffff 	.word	0xdfffffff

08009170 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2284      	movs	r2, #132	; 0x84
 800917e:	5c9b      	ldrb	r3, [r3, r2]
 8009180:	2b01      	cmp	r3, #1
 8009182:	d101      	bne.n	8009188 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009184:	2302      	movs	r3, #2
 8009186:	e02e      	b.n	80091e6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2284      	movs	r2, #132	; 0x84
 800918c:	2101      	movs	r1, #1
 800918e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2288      	movs	r2, #136	; 0x88
 8009194:	2124      	movs	r1, #36	; 0x24
 8009196:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2101      	movs	r1, #1
 80091ac:	438a      	bics	r2, r1
 80091ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	00db      	lsls	r3, r3, #3
 80091b8:	08d9      	lsrs	r1, r3, #3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	683a      	ldr	r2, [r7, #0]
 80091c0:	430a      	orrs	r2, r1
 80091c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	0018      	movs	r0, r3
 80091c8:	f000 f8bc 	bl	8009344 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2288      	movs	r2, #136	; 0x88
 80091d8:	2120      	movs	r1, #32
 80091da:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2284      	movs	r2, #132	; 0x84
 80091e0:	2100      	movs	r1, #0
 80091e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	0018      	movs	r0, r3
 80091e8:	46bd      	mov	sp, r7
 80091ea:	b004      	add	sp, #16
 80091ec:	bd80      	pop	{r7, pc}
	...

080091f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2284      	movs	r2, #132	; 0x84
 80091fe:	5c9b      	ldrb	r3, [r3, r2]
 8009200:	2b01      	cmp	r3, #1
 8009202:	d101      	bne.n	8009208 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009204:	2302      	movs	r3, #2
 8009206:	e02f      	b.n	8009268 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2284      	movs	r2, #132	; 0x84
 800920c:	2101      	movs	r1, #1
 800920e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2288      	movs	r2, #136	; 0x88
 8009214:	2124      	movs	r1, #36	; 0x24
 8009216:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2101      	movs	r1, #1
 800922c:	438a      	bics	r2, r1
 800922e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	4a0e      	ldr	r2, [pc, #56]	; (8009270 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009238:	4013      	ands	r3, r2
 800923a:	0019      	movs	r1, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	683a      	ldr	r2, [r7, #0]
 8009242:	430a      	orrs	r2, r1
 8009244:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	0018      	movs	r0, r3
 800924a:	f000 f87b 	bl	8009344 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2288      	movs	r2, #136	; 0x88
 800925a:	2120      	movs	r1, #32
 800925c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2284      	movs	r2, #132	; 0x84
 8009262:	2100      	movs	r1, #0
 8009264:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	0018      	movs	r0, r3
 800926a:	46bd      	mov	sp, r7
 800926c:	b004      	add	sp, #16
 800926e:	bd80      	pop	{r7, pc}
 8009270:	f1ffffff 	.word	0xf1ffffff

08009274 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009274:	b5b0      	push	{r4, r5, r7, lr}
 8009276:	b08a      	sub	sp, #40	; 0x28
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	1dbb      	adds	r3, r7, #6
 8009280:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	228c      	movs	r2, #140	; 0x8c
 8009286:	589b      	ldr	r3, [r3, r2]
 8009288:	2b20      	cmp	r3, #32
 800928a:	d156      	bne.n	800933a <HAL_UARTEx_ReceiveToIdle_IT+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d003      	beq.n	800929a <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8009292:	1dbb      	adds	r3, r7, #6
 8009294:	881b      	ldrh	r3, [r3, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d101      	bne.n	800929e <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	e04e      	b.n	800933c <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	689a      	ldr	r2, [r3, #8]
 80092a2:	2380      	movs	r3, #128	; 0x80
 80092a4:	015b      	lsls	r3, r3, #5
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d109      	bne.n	80092be <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d105      	bne.n	80092be <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	2201      	movs	r2, #1
 80092b6:	4013      	ands	r3, r2
 80092b8:	d001      	beq.n	80092be <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
      {
        return  HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	e03e      	b.n	800933c <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2201      	movs	r2, #1
 80092c2:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2200      	movs	r2, #0
 80092c8:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80092ca:	2527      	movs	r5, #39	; 0x27
 80092cc:	197c      	adds	r4, r7, r5
 80092ce:	1dbb      	adds	r3, r7, #6
 80092d0:	881a      	ldrh	r2, [r3, #0]
 80092d2:	68b9      	ldr	r1, [r7, #8]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	0018      	movs	r0, r3
 80092d8:	f7ff f8ca 	bl	8008470 <UART_Start_Receive_IT>
 80092dc:	0003      	movs	r3, r0
 80092de:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80092e0:	197b      	adds	r3, r7, r5
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d124      	bne.n	8009332 <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d11c      	bne.n	800932a <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2210      	movs	r2, #16
 80092f6:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092f8:	f3ef 8310 	mrs	r3, PRIMASK
 80092fc:	617b      	str	r3, [r7, #20]
  return(result);
 80092fe:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009300:	623b      	str	r3, [r7, #32]
 8009302:	2301      	movs	r3, #1
 8009304:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009306:	69bb      	ldr	r3, [r7, #24]
 8009308:	f383 8810 	msr	PRIMASK, r3
}
 800930c:	46c0      	nop			; (mov r8, r8)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2110      	movs	r1, #16
 800931a:	430a      	orrs	r2, r1
 800931c:	601a      	str	r2, [r3, #0]
 800931e:	6a3b      	ldr	r3, [r7, #32]
 8009320:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	f383 8810 	msr	PRIMASK, r3
}
 8009328:	e003      	b.n	8009332 <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800932a:	2327      	movs	r3, #39	; 0x27
 800932c:	18fb      	adds	r3, r7, r3
 800932e:	2201      	movs	r2, #1
 8009330:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8009332:	2327      	movs	r3, #39	; 0x27
 8009334:	18fb      	adds	r3, r7, r3
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	e000      	b.n	800933c <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800933a:	2302      	movs	r3, #2
  }
}
 800933c:	0018      	movs	r0, r3
 800933e:	46bd      	mov	sp, r7
 8009340:	b00a      	add	sp, #40	; 0x28
 8009342:	bdb0      	pop	{r4, r5, r7, pc}

08009344 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009350:	2b00      	cmp	r3, #0
 8009352:	d108      	bne.n	8009366 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	226a      	movs	r2, #106	; 0x6a
 8009358:	2101      	movs	r1, #1
 800935a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2268      	movs	r2, #104	; 0x68
 8009360:	2101      	movs	r1, #1
 8009362:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009364:	e043      	b.n	80093ee <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009366:	260f      	movs	r6, #15
 8009368:	19bb      	adds	r3, r7, r6
 800936a:	2208      	movs	r2, #8
 800936c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800936e:	200e      	movs	r0, #14
 8009370:	183b      	adds	r3, r7, r0
 8009372:	2208      	movs	r2, #8
 8009374:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	0e5b      	lsrs	r3, r3, #25
 800937e:	b2da      	uxtb	r2, r3
 8009380:	240d      	movs	r4, #13
 8009382:	193b      	adds	r3, r7, r4
 8009384:	2107      	movs	r1, #7
 8009386:	400a      	ands	r2, r1
 8009388:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	0f5b      	lsrs	r3, r3, #29
 8009392:	b2da      	uxtb	r2, r3
 8009394:	250c      	movs	r5, #12
 8009396:	197b      	adds	r3, r7, r5
 8009398:	2107      	movs	r1, #7
 800939a:	400a      	ands	r2, r1
 800939c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800939e:	183b      	adds	r3, r7, r0
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	197a      	adds	r2, r7, r5
 80093a4:	7812      	ldrb	r2, [r2, #0]
 80093a6:	4914      	ldr	r1, [pc, #80]	; (80093f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80093a8:	5c8a      	ldrb	r2, [r1, r2]
 80093aa:	435a      	muls	r2, r3
 80093ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80093ae:	197b      	adds	r3, r7, r5
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	4a12      	ldr	r2, [pc, #72]	; (80093fc <UARTEx_SetNbDataToProcess+0xb8>)
 80093b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093b6:	0019      	movs	r1, r3
 80093b8:	f7f6 ff4a 	bl	8000250 <__divsi3>
 80093bc:	0003      	movs	r3, r0
 80093be:	b299      	uxth	r1, r3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	226a      	movs	r2, #106	; 0x6a
 80093c4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093c6:	19bb      	adds	r3, r7, r6
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	193a      	adds	r2, r7, r4
 80093cc:	7812      	ldrb	r2, [r2, #0]
 80093ce:	490a      	ldr	r1, [pc, #40]	; (80093f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80093d0:	5c8a      	ldrb	r2, [r1, r2]
 80093d2:	435a      	muls	r2, r3
 80093d4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80093d6:	193b      	adds	r3, r7, r4
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	4a08      	ldr	r2, [pc, #32]	; (80093fc <UARTEx_SetNbDataToProcess+0xb8>)
 80093dc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093de:	0019      	movs	r1, r3
 80093e0:	f7f6 ff36 	bl	8000250 <__divsi3>
 80093e4:	0003      	movs	r3, r0
 80093e6:	b299      	uxth	r1, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2268      	movs	r2, #104	; 0x68
 80093ec:	5299      	strh	r1, [r3, r2]
}
 80093ee:	46c0      	nop			; (mov r8, r8)
 80093f0:	46bd      	mov	sp, r7
 80093f2:	b005      	add	sp, #20
 80093f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093f6:	46c0      	nop			; (mov r8, r8)
 80093f8:	0800c384 	.word	0x0800c384
 80093fc:	0800c38c 	.word	0x0800c38c

08009400 <__errno>:
 8009400:	4b01      	ldr	r3, [pc, #4]	; (8009408 <__errno+0x8>)
 8009402:	6818      	ldr	r0, [r3, #0]
 8009404:	4770      	bx	lr
 8009406:	46c0      	nop			; (mov r8, r8)
 8009408:	2000003c 	.word	0x2000003c

0800940c <__libc_init_array>:
 800940c:	b570      	push	{r4, r5, r6, lr}
 800940e:	2600      	movs	r6, #0
 8009410:	4d0c      	ldr	r5, [pc, #48]	; (8009444 <__libc_init_array+0x38>)
 8009412:	4c0d      	ldr	r4, [pc, #52]	; (8009448 <__libc_init_array+0x3c>)
 8009414:	1b64      	subs	r4, r4, r5
 8009416:	10a4      	asrs	r4, r4, #2
 8009418:	42a6      	cmp	r6, r4
 800941a:	d109      	bne.n	8009430 <__libc_init_array+0x24>
 800941c:	2600      	movs	r6, #0
 800941e:	f002 fdef 	bl	800c000 <_init>
 8009422:	4d0a      	ldr	r5, [pc, #40]	; (800944c <__libc_init_array+0x40>)
 8009424:	4c0a      	ldr	r4, [pc, #40]	; (8009450 <__libc_init_array+0x44>)
 8009426:	1b64      	subs	r4, r4, r5
 8009428:	10a4      	asrs	r4, r4, #2
 800942a:	42a6      	cmp	r6, r4
 800942c:	d105      	bne.n	800943a <__libc_init_array+0x2e>
 800942e:	bd70      	pop	{r4, r5, r6, pc}
 8009430:	00b3      	lsls	r3, r6, #2
 8009432:	58eb      	ldr	r3, [r5, r3]
 8009434:	4798      	blx	r3
 8009436:	3601      	adds	r6, #1
 8009438:	e7ee      	b.n	8009418 <__libc_init_array+0xc>
 800943a:	00b3      	lsls	r3, r6, #2
 800943c:	58eb      	ldr	r3, [r5, r3]
 800943e:	4798      	blx	r3
 8009440:	3601      	adds	r6, #1
 8009442:	e7f2      	b.n	800942a <__libc_init_array+0x1e>
 8009444:	0800c774 	.word	0x0800c774
 8009448:	0800c774 	.word	0x0800c774
 800944c:	0800c774 	.word	0x0800c774
 8009450:	0800c778 	.word	0x0800c778

08009454 <memset>:
 8009454:	0003      	movs	r3, r0
 8009456:	1882      	adds	r2, r0, r2
 8009458:	4293      	cmp	r3, r2
 800945a:	d100      	bne.n	800945e <memset+0xa>
 800945c:	4770      	bx	lr
 800945e:	7019      	strb	r1, [r3, #0]
 8009460:	3301      	adds	r3, #1
 8009462:	e7f9      	b.n	8009458 <memset+0x4>

08009464 <__cvt>:
 8009464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009466:	001e      	movs	r6, r3
 8009468:	2300      	movs	r3, #0
 800946a:	0014      	movs	r4, r2
 800946c:	b08b      	sub	sp, #44	; 0x2c
 800946e:	429e      	cmp	r6, r3
 8009470:	da04      	bge.n	800947c <__cvt+0x18>
 8009472:	2180      	movs	r1, #128	; 0x80
 8009474:	0609      	lsls	r1, r1, #24
 8009476:	1873      	adds	r3, r6, r1
 8009478:	001e      	movs	r6, r3
 800947a:	232d      	movs	r3, #45	; 0x2d
 800947c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800947e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009480:	7013      	strb	r3, [r2, #0]
 8009482:	2320      	movs	r3, #32
 8009484:	2203      	movs	r2, #3
 8009486:	439f      	bics	r7, r3
 8009488:	2f46      	cmp	r7, #70	; 0x46
 800948a:	d007      	beq.n	800949c <__cvt+0x38>
 800948c:	003b      	movs	r3, r7
 800948e:	3b45      	subs	r3, #69	; 0x45
 8009490:	4259      	negs	r1, r3
 8009492:	414b      	adcs	r3, r1
 8009494:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009496:	3a01      	subs	r2, #1
 8009498:	18cb      	adds	r3, r1, r3
 800949a:	9310      	str	r3, [sp, #64]	; 0x40
 800949c:	ab09      	add	r3, sp, #36	; 0x24
 800949e:	9304      	str	r3, [sp, #16]
 80094a0:	ab08      	add	r3, sp, #32
 80094a2:	9303      	str	r3, [sp, #12]
 80094a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094a6:	9200      	str	r2, [sp, #0]
 80094a8:	9302      	str	r3, [sp, #8]
 80094aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80094ac:	0022      	movs	r2, r4
 80094ae:	9301      	str	r3, [sp, #4]
 80094b0:	0033      	movs	r3, r6
 80094b2:	f000 fcd1 	bl	8009e58 <_dtoa_r>
 80094b6:	0005      	movs	r5, r0
 80094b8:	2f47      	cmp	r7, #71	; 0x47
 80094ba:	d102      	bne.n	80094c2 <__cvt+0x5e>
 80094bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094be:	07db      	lsls	r3, r3, #31
 80094c0:	d528      	bpl.n	8009514 <__cvt+0xb0>
 80094c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80094c4:	18eb      	adds	r3, r5, r3
 80094c6:	9307      	str	r3, [sp, #28]
 80094c8:	2f46      	cmp	r7, #70	; 0x46
 80094ca:	d114      	bne.n	80094f6 <__cvt+0x92>
 80094cc:	782b      	ldrb	r3, [r5, #0]
 80094ce:	2b30      	cmp	r3, #48	; 0x30
 80094d0:	d10c      	bne.n	80094ec <__cvt+0x88>
 80094d2:	2200      	movs	r2, #0
 80094d4:	2300      	movs	r3, #0
 80094d6:	0020      	movs	r0, r4
 80094d8:	0031      	movs	r1, r6
 80094da:	f7f6 ffb5 	bl	8000448 <__aeabi_dcmpeq>
 80094de:	2800      	cmp	r0, #0
 80094e0:	d104      	bne.n	80094ec <__cvt+0x88>
 80094e2:	2301      	movs	r3, #1
 80094e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80094e6:	1a9b      	subs	r3, r3, r2
 80094e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80094ea:	6013      	str	r3, [r2, #0]
 80094ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094ee:	9a07      	ldr	r2, [sp, #28]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	18d3      	adds	r3, r2, r3
 80094f4:	9307      	str	r3, [sp, #28]
 80094f6:	2200      	movs	r2, #0
 80094f8:	2300      	movs	r3, #0
 80094fa:	0020      	movs	r0, r4
 80094fc:	0031      	movs	r1, r6
 80094fe:	f7f6 ffa3 	bl	8000448 <__aeabi_dcmpeq>
 8009502:	2800      	cmp	r0, #0
 8009504:	d001      	beq.n	800950a <__cvt+0xa6>
 8009506:	9b07      	ldr	r3, [sp, #28]
 8009508:	9309      	str	r3, [sp, #36]	; 0x24
 800950a:	2230      	movs	r2, #48	; 0x30
 800950c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800950e:	9907      	ldr	r1, [sp, #28]
 8009510:	428b      	cmp	r3, r1
 8009512:	d306      	bcc.n	8009522 <__cvt+0xbe>
 8009514:	0028      	movs	r0, r5
 8009516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009518:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800951a:	1b5b      	subs	r3, r3, r5
 800951c:	6013      	str	r3, [r2, #0]
 800951e:	b00b      	add	sp, #44	; 0x2c
 8009520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009522:	1c59      	adds	r1, r3, #1
 8009524:	9109      	str	r1, [sp, #36]	; 0x24
 8009526:	701a      	strb	r2, [r3, #0]
 8009528:	e7f0      	b.n	800950c <__cvt+0xa8>

0800952a <__exponent>:
 800952a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800952c:	1c83      	adds	r3, r0, #2
 800952e:	b087      	sub	sp, #28
 8009530:	9303      	str	r3, [sp, #12]
 8009532:	0005      	movs	r5, r0
 8009534:	000c      	movs	r4, r1
 8009536:	232b      	movs	r3, #43	; 0x2b
 8009538:	7002      	strb	r2, [r0, #0]
 800953a:	2900      	cmp	r1, #0
 800953c:	da01      	bge.n	8009542 <__exponent+0x18>
 800953e:	424c      	negs	r4, r1
 8009540:	3302      	adds	r3, #2
 8009542:	706b      	strb	r3, [r5, #1]
 8009544:	2c09      	cmp	r4, #9
 8009546:	dd31      	ble.n	80095ac <__exponent+0x82>
 8009548:	270a      	movs	r7, #10
 800954a:	ab04      	add	r3, sp, #16
 800954c:	1dde      	adds	r6, r3, #7
 800954e:	0020      	movs	r0, r4
 8009550:	0039      	movs	r1, r7
 8009552:	9601      	str	r6, [sp, #4]
 8009554:	f7f6 ff62 	bl	800041c <__aeabi_idivmod>
 8009558:	3e01      	subs	r6, #1
 800955a:	3130      	adds	r1, #48	; 0x30
 800955c:	0020      	movs	r0, r4
 800955e:	7031      	strb	r1, [r6, #0]
 8009560:	0039      	movs	r1, r7
 8009562:	9402      	str	r4, [sp, #8]
 8009564:	f7f6 fe74 	bl	8000250 <__divsi3>
 8009568:	9b02      	ldr	r3, [sp, #8]
 800956a:	0004      	movs	r4, r0
 800956c:	2b63      	cmp	r3, #99	; 0x63
 800956e:	dcee      	bgt.n	800954e <__exponent+0x24>
 8009570:	9b01      	ldr	r3, [sp, #4]
 8009572:	3430      	adds	r4, #48	; 0x30
 8009574:	1e9a      	subs	r2, r3, #2
 8009576:	0013      	movs	r3, r2
 8009578:	9903      	ldr	r1, [sp, #12]
 800957a:	7014      	strb	r4, [r2, #0]
 800957c:	a804      	add	r0, sp, #16
 800957e:	3007      	adds	r0, #7
 8009580:	4298      	cmp	r0, r3
 8009582:	d80e      	bhi.n	80095a2 <__exponent+0x78>
 8009584:	ab04      	add	r3, sp, #16
 8009586:	3307      	adds	r3, #7
 8009588:	2000      	movs	r0, #0
 800958a:	429a      	cmp	r2, r3
 800958c:	d804      	bhi.n	8009598 <__exponent+0x6e>
 800958e:	ab04      	add	r3, sp, #16
 8009590:	3009      	adds	r0, #9
 8009592:	18c0      	adds	r0, r0, r3
 8009594:	9b01      	ldr	r3, [sp, #4]
 8009596:	1ac0      	subs	r0, r0, r3
 8009598:	9b03      	ldr	r3, [sp, #12]
 800959a:	1818      	adds	r0, r3, r0
 800959c:	1b40      	subs	r0, r0, r5
 800959e:	b007      	add	sp, #28
 80095a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095a2:	7818      	ldrb	r0, [r3, #0]
 80095a4:	3301      	adds	r3, #1
 80095a6:	7008      	strb	r0, [r1, #0]
 80095a8:	3101      	adds	r1, #1
 80095aa:	e7e7      	b.n	800957c <__exponent+0x52>
 80095ac:	2330      	movs	r3, #48	; 0x30
 80095ae:	18e4      	adds	r4, r4, r3
 80095b0:	70ab      	strb	r3, [r5, #2]
 80095b2:	1d28      	adds	r0, r5, #4
 80095b4:	70ec      	strb	r4, [r5, #3]
 80095b6:	e7f1      	b.n	800959c <__exponent+0x72>

080095b8 <_printf_float>:
 80095b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095ba:	b095      	sub	sp, #84	; 0x54
 80095bc:	000c      	movs	r4, r1
 80095be:	9209      	str	r2, [sp, #36]	; 0x24
 80095c0:	001e      	movs	r6, r3
 80095c2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80095c4:	0007      	movs	r7, r0
 80095c6:	f001 fa61 	bl	800aa8c <_localeconv_r>
 80095ca:	6803      	ldr	r3, [r0, #0]
 80095cc:	0018      	movs	r0, r3
 80095ce:	930c      	str	r3, [sp, #48]	; 0x30
 80095d0:	f7f6 fd98 	bl	8000104 <strlen>
 80095d4:	2300      	movs	r3, #0
 80095d6:	9312      	str	r3, [sp, #72]	; 0x48
 80095d8:	7e23      	ldrb	r3, [r4, #24]
 80095da:	2207      	movs	r2, #7
 80095dc:	930a      	str	r3, [sp, #40]	; 0x28
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	900e      	str	r0, [sp, #56]	; 0x38
 80095e2:	930d      	str	r3, [sp, #52]	; 0x34
 80095e4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80095e6:	682b      	ldr	r3, [r5, #0]
 80095e8:	05c9      	lsls	r1, r1, #23
 80095ea:	d547      	bpl.n	800967c <_printf_float+0xc4>
 80095ec:	189b      	adds	r3, r3, r2
 80095ee:	4393      	bics	r3, r2
 80095f0:	001a      	movs	r2, r3
 80095f2:	3208      	adds	r2, #8
 80095f4:	602a      	str	r2, [r5, #0]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	64a2      	str	r2, [r4, #72]	; 0x48
 80095fc:	64e3      	str	r3, [r4, #76]	; 0x4c
 80095fe:	2201      	movs	r2, #1
 8009600:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009602:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8009604:	930b      	str	r3, [sp, #44]	; 0x2c
 8009606:	006b      	lsls	r3, r5, #1
 8009608:	085b      	lsrs	r3, r3, #1
 800960a:	930f      	str	r3, [sp, #60]	; 0x3c
 800960c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800960e:	4ba7      	ldr	r3, [pc, #668]	; (80098ac <_printf_float+0x2f4>)
 8009610:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009612:	4252      	negs	r2, r2
 8009614:	f7f8 fd6e 	bl	80020f4 <__aeabi_dcmpun>
 8009618:	2800      	cmp	r0, #0
 800961a:	d131      	bne.n	8009680 <_printf_float+0xc8>
 800961c:	2201      	movs	r2, #1
 800961e:	4ba3      	ldr	r3, [pc, #652]	; (80098ac <_printf_float+0x2f4>)
 8009620:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009622:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009624:	4252      	negs	r2, r2
 8009626:	f7f6 ff1f 	bl	8000468 <__aeabi_dcmple>
 800962a:	2800      	cmp	r0, #0
 800962c:	d128      	bne.n	8009680 <_printf_float+0xc8>
 800962e:	2200      	movs	r2, #0
 8009630:	2300      	movs	r3, #0
 8009632:	0029      	movs	r1, r5
 8009634:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009636:	f7f6 ff0d 	bl	8000454 <__aeabi_dcmplt>
 800963a:	2800      	cmp	r0, #0
 800963c:	d003      	beq.n	8009646 <_printf_float+0x8e>
 800963e:	0023      	movs	r3, r4
 8009640:	222d      	movs	r2, #45	; 0x2d
 8009642:	3343      	adds	r3, #67	; 0x43
 8009644:	701a      	strb	r2, [r3, #0]
 8009646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009648:	4d99      	ldr	r5, [pc, #612]	; (80098b0 <_printf_float+0x2f8>)
 800964a:	2b47      	cmp	r3, #71	; 0x47
 800964c:	d900      	bls.n	8009650 <_printf_float+0x98>
 800964e:	4d99      	ldr	r5, [pc, #612]	; (80098b4 <_printf_float+0x2fc>)
 8009650:	2303      	movs	r3, #3
 8009652:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009654:	6123      	str	r3, [r4, #16]
 8009656:	3301      	adds	r3, #1
 8009658:	439a      	bics	r2, r3
 800965a:	2300      	movs	r3, #0
 800965c:	6022      	str	r2, [r4, #0]
 800965e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009662:	0021      	movs	r1, r4
 8009664:	0038      	movs	r0, r7
 8009666:	9600      	str	r6, [sp, #0]
 8009668:	aa13      	add	r2, sp, #76	; 0x4c
 800966a:	f000 f9e7 	bl	8009a3c <_printf_common>
 800966e:	1c43      	adds	r3, r0, #1
 8009670:	d000      	beq.n	8009674 <_printf_float+0xbc>
 8009672:	e0a2      	b.n	80097ba <_printf_float+0x202>
 8009674:	2001      	movs	r0, #1
 8009676:	4240      	negs	r0, r0
 8009678:	b015      	add	sp, #84	; 0x54
 800967a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800967c:	3307      	adds	r3, #7
 800967e:	e7b6      	b.n	80095ee <_printf_float+0x36>
 8009680:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009682:	002b      	movs	r3, r5
 8009684:	0010      	movs	r0, r2
 8009686:	0029      	movs	r1, r5
 8009688:	f7f8 fd34 	bl	80020f4 <__aeabi_dcmpun>
 800968c:	2800      	cmp	r0, #0
 800968e:	d00b      	beq.n	80096a8 <_printf_float+0xf0>
 8009690:	2d00      	cmp	r5, #0
 8009692:	da03      	bge.n	800969c <_printf_float+0xe4>
 8009694:	0023      	movs	r3, r4
 8009696:	222d      	movs	r2, #45	; 0x2d
 8009698:	3343      	adds	r3, #67	; 0x43
 800969a:	701a      	strb	r2, [r3, #0]
 800969c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800969e:	4d86      	ldr	r5, [pc, #536]	; (80098b8 <_printf_float+0x300>)
 80096a0:	2b47      	cmp	r3, #71	; 0x47
 80096a2:	d9d5      	bls.n	8009650 <_printf_float+0x98>
 80096a4:	4d85      	ldr	r5, [pc, #532]	; (80098bc <_printf_float+0x304>)
 80096a6:	e7d3      	b.n	8009650 <_printf_float+0x98>
 80096a8:	2220      	movs	r2, #32
 80096aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80096ac:	6863      	ldr	r3, [r4, #4]
 80096ae:	4391      	bics	r1, r2
 80096b0:	910f      	str	r1, [sp, #60]	; 0x3c
 80096b2:	1c5a      	adds	r2, r3, #1
 80096b4:	d149      	bne.n	800974a <_printf_float+0x192>
 80096b6:	3307      	adds	r3, #7
 80096b8:	6063      	str	r3, [r4, #4]
 80096ba:	2380      	movs	r3, #128	; 0x80
 80096bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096be:	00db      	lsls	r3, r3, #3
 80096c0:	4313      	orrs	r3, r2
 80096c2:	2200      	movs	r2, #0
 80096c4:	9206      	str	r2, [sp, #24]
 80096c6:	aa12      	add	r2, sp, #72	; 0x48
 80096c8:	9205      	str	r2, [sp, #20]
 80096ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096cc:	a908      	add	r1, sp, #32
 80096ce:	9204      	str	r2, [sp, #16]
 80096d0:	aa11      	add	r2, sp, #68	; 0x44
 80096d2:	9203      	str	r2, [sp, #12]
 80096d4:	2223      	movs	r2, #35	; 0x23
 80096d6:	6023      	str	r3, [r4, #0]
 80096d8:	9301      	str	r3, [sp, #4]
 80096da:	6863      	ldr	r3, [r4, #4]
 80096dc:	1852      	adds	r2, r2, r1
 80096de:	9202      	str	r2, [sp, #8]
 80096e0:	9300      	str	r3, [sp, #0]
 80096e2:	0038      	movs	r0, r7
 80096e4:	002b      	movs	r3, r5
 80096e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096e8:	f7ff febc 	bl	8009464 <__cvt>
 80096ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096ee:	0005      	movs	r5, r0
 80096f0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80096f2:	2b47      	cmp	r3, #71	; 0x47
 80096f4:	d108      	bne.n	8009708 <_printf_float+0x150>
 80096f6:	1ccb      	adds	r3, r1, #3
 80096f8:	db02      	blt.n	8009700 <_printf_float+0x148>
 80096fa:	6863      	ldr	r3, [r4, #4]
 80096fc:	4299      	cmp	r1, r3
 80096fe:	dd48      	ble.n	8009792 <_printf_float+0x1da>
 8009700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009702:	3b02      	subs	r3, #2
 8009704:	b2db      	uxtb	r3, r3
 8009706:	930a      	str	r3, [sp, #40]	; 0x28
 8009708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800970a:	2b65      	cmp	r3, #101	; 0x65
 800970c:	d824      	bhi.n	8009758 <_printf_float+0x1a0>
 800970e:	0020      	movs	r0, r4
 8009710:	001a      	movs	r2, r3
 8009712:	3901      	subs	r1, #1
 8009714:	3050      	adds	r0, #80	; 0x50
 8009716:	9111      	str	r1, [sp, #68]	; 0x44
 8009718:	f7ff ff07 	bl	800952a <__exponent>
 800971c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800971e:	900b      	str	r0, [sp, #44]	; 0x2c
 8009720:	1813      	adds	r3, r2, r0
 8009722:	6123      	str	r3, [r4, #16]
 8009724:	2a01      	cmp	r2, #1
 8009726:	dc02      	bgt.n	800972e <_printf_float+0x176>
 8009728:	6822      	ldr	r2, [r4, #0]
 800972a:	07d2      	lsls	r2, r2, #31
 800972c:	d501      	bpl.n	8009732 <_printf_float+0x17a>
 800972e:	3301      	adds	r3, #1
 8009730:	6123      	str	r3, [r4, #16]
 8009732:	2323      	movs	r3, #35	; 0x23
 8009734:	aa08      	add	r2, sp, #32
 8009736:	189b      	adds	r3, r3, r2
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d100      	bne.n	8009740 <_printf_float+0x188>
 800973e:	e78f      	b.n	8009660 <_printf_float+0xa8>
 8009740:	0023      	movs	r3, r4
 8009742:	222d      	movs	r2, #45	; 0x2d
 8009744:	3343      	adds	r3, #67	; 0x43
 8009746:	701a      	strb	r2, [r3, #0]
 8009748:	e78a      	b.n	8009660 <_printf_float+0xa8>
 800974a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800974c:	2a47      	cmp	r2, #71	; 0x47
 800974e:	d1b4      	bne.n	80096ba <_printf_float+0x102>
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1b2      	bne.n	80096ba <_printf_float+0x102>
 8009754:	3301      	adds	r3, #1
 8009756:	e7af      	b.n	80096b8 <_printf_float+0x100>
 8009758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800975a:	2b66      	cmp	r3, #102	; 0x66
 800975c:	d11b      	bne.n	8009796 <_printf_float+0x1de>
 800975e:	6863      	ldr	r3, [r4, #4]
 8009760:	2900      	cmp	r1, #0
 8009762:	dd0d      	ble.n	8009780 <_printf_float+0x1c8>
 8009764:	6121      	str	r1, [r4, #16]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d102      	bne.n	8009770 <_printf_float+0x1b8>
 800976a:	6822      	ldr	r2, [r4, #0]
 800976c:	07d2      	lsls	r2, r2, #31
 800976e:	d502      	bpl.n	8009776 <_printf_float+0x1be>
 8009770:	3301      	adds	r3, #1
 8009772:	1859      	adds	r1, r3, r1
 8009774:	6121      	str	r1, [r4, #16]
 8009776:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009778:	65a3      	str	r3, [r4, #88]	; 0x58
 800977a:	2300      	movs	r3, #0
 800977c:	930b      	str	r3, [sp, #44]	; 0x2c
 800977e:	e7d8      	b.n	8009732 <_printf_float+0x17a>
 8009780:	2b00      	cmp	r3, #0
 8009782:	d103      	bne.n	800978c <_printf_float+0x1d4>
 8009784:	2201      	movs	r2, #1
 8009786:	6821      	ldr	r1, [r4, #0]
 8009788:	4211      	tst	r1, r2
 800978a:	d000      	beq.n	800978e <_printf_float+0x1d6>
 800978c:	1c9a      	adds	r2, r3, #2
 800978e:	6122      	str	r2, [r4, #16]
 8009790:	e7f1      	b.n	8009776 <_printf_float+0x1be>
 8009792:	2367      	movs	r3, #103	; 0x67
 8009794:	930a      	str	r3, [sp, #40]	; 0x28
 8009796:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009798:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800979a:	4293      	cmp	r3, r2
 800979c:	db06      	blt.n	80097ac <_printf_float+0x1f4>
 800979e:	6822      	ldr	r2, [r4, #0]
 80097a0:	6123      	str	r3, [r4, #16]
 80097a2:	07d2      	lsls	r2, r2, #31
 80097a4:	d5e7      	bpl.n	8009776 <_printf_float+0x1be>
 80097a6:	3301      	adds	r3, #1
 80097a8:	6123      	str	r3, [r4, #16]
 80097aa:	e7e4      	b.n	8009776 <_printf_float+0x1be>
 80097ac:	2101      	movs	r1, #1
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	dc01      	bgt.n	80097b6 <_printf_float+0x1fe>
 80097b2:	1849      	adds	r1, r1, r1
 80097b4:	1ac9      	subs	r1, r1, r3
 80097b6:	1852      	adds	r2, r2, r1
 80097b8:	e7e9      	b.n	800978e <_printf_float+0x1d6>
 80097ba:	6822      	ldr	r2, [r4, #0]
 80097bc:	0553      	lsls	r3, r2, #21
 80097be:	d407      	bmi.n	80097d0 <_printf_float+0x218>
 80097c0:	6923      	ldr	r3, [r4, #16]
 80097c2:	002a      	movs	r2, r5
 80097c4:	0038      	movs	r0, r7
 80097c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097c8:	47b0      	blx	r6
 80097ca:	1c43      	adds	r3, r0, #1
 80097cc:	d128      	bne.n	8009820 <_printf_float+0x268>
 80097ce:	e751      	b.n	8009674 <_printf_float+0xbc>
 80097d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097d2:	2b65      	cmp	r3, #101	; 0x65
 80097d4:	d800      	bhi.n	80097d8 <_printf_float+0x220>
 80097d6:	e0e1      	b.n	800999c <_printf_float+0x3e4>
 80097d8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80097da:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80097dc:	2200      	movs	r2, #0
 80097de:	2300      	movs	r3, #0
 80097e0:	f7f6 fe32 	bl	8000448 <__aeabi_dcmpeq>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	d031      	beq.n	800984c <_printf_float+0x294>
 80097e8:	2301      	movs	r3, #1
 80097ea:	0038      	movs	r0, r7
 80097ec:	4a34      	ldr	r2, [pc, #208]	; (80098c0 <_printf_float+0x308>)
 80097ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097f0:	47b0      	blx	r6
 80097f2:	1c43      	adds	r3, r0, #1
 80097f4:	d100      	bne.n	80097f8 <_printf_float+0x240>
 80097f6:	e73d      	b.n	8009674 <_printf_float+0xbc>
 80097f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80097fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80097fc:	4293      	cmp	r3, r2
 80097fe:	db02      	blt.n	8009806 <_printf_float+0x24e>
 8009800:	6823      	ldr	r3, [r4, #0]
 8009802:	07db      	lsls	r3, r3, #31
 8009804:	d50c      	bpl.n	8009820 <_printf_float+0x268>
 8009806:	0038      	movs	r0, r7
 8009808:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800980a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800980c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800980e:	47b0      	blx	r6
 8009810:	2500      	movs	r5, #0
 8009812:	1c43      	adds	r3, r0, #1
 8009814:	d100      	bne.n	8009818 <_printf_float+0x260>
 8009816:	e72d      	b.n	8009674 <_printf_float+0xbc>
 8009818:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800981a:	3b01      	subs	r3, #1
 800981c:	42ab      	cmp	r3, r5
 800981e:	dc0a      	bgt.n	8009836 <_printf_float+0x27e>
 8009820:	6823      	ldr	r3, [r4, #0]
 8009822:	079b      	lsls	r3, r3, #30
 8009824:	d500      	bpl.n	8009828 <_printf_float+0x270>
 8009826:	e106      	b.n	8009a36 <_printf_float+0x47e>
 8009828:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800982a:	68e0      	ldr	r0, [r4, #12]
 800982c:	4298      	cmp	r0, r3
 800982e:	db00      	blt.n	8009832 <_printf_float+0x27a>
 8009830:	e722      	b.n	8009678 <_printf_float+0xc0>
 8009832:	0018      	movs	r0, r3
 8009834:	e720      	b.n	8009678 <_printf_float+0xc0>
 8009836:	0022      	movs	r2, r4
 8009838:	2301      	movs	r3, #1
 800983a:	0038      	movs	r0, r7
 800983c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800983e:	321a      	adds	r2, #26
 8009840:	47b0      	blx	r6
 8009842:	1c43      	adds	r3, r0, #1
 8009844:	d100      	bne.n	8009848 <_printf_float+0x290>
 8009846:	e715      	b.n	8009674 <_printf_float+0xbc>
 8009848:	3501      	adds	r5, #1
 800984a:	e7e5      	b.n	8009818 <_printf_float+0x260>
 800984c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800984e:	2b00      	cmp	r3, #0
 8009850:	dc38      	bgt.n	80098c4 <_printf_float+0x30c>
 8009852:	2301      	movs	r3, #1
 8009854:	0038      	movs	r0, r7
 8009856:	4a1a      	ldr	r2, [pc, #104]	; (80098c0 <_printf_float+0x308>)
 8009858:	9909      	ldr	r1, [sp, #36]	; 0x24
 800985a:	47b0      	blx	r6
 800985c:	1c43      	adds	r3, r0, #1
 800985e:	d100      	bne.n	8009862 <_printf_float+0x2aa>
 8009860:	e708      	b.n	8009674 <_printf_float+0xbc>
 8009862:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009864:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009866:	4313      	orrs	r3, r2
 8009868:	d102      	bne.n	8009870 <_printf_float+0x2b8>
 800986a:	6823      	ldr	r3, [r4, #0]
 800986c:	07db      	lsls	r3, r3, #31
 800986e:	d5d7      	bpl.n	8009820 <_printf_float+0x268>
 8009870:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009872:	0038      	movs	r0, r7
 8009874:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009876:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009878:	47b0      	blx	r6
 800987a:	1c43      	adds	r3, r0, #1
 800987c:	d100      	bne.n	8009880 <_printf_float+0x2c8>
 800987e:	e6f9      	b.n	8009674 <_printf_float+0xbc>
 8009880:	2300      	movs	r3, #0
 8009882:	930a      	str	r3, [sp, #40]	; 0x28
 8009884:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009886:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009888:	425b      	negs	r3, r3
 800988a:	4293      	cmp	r3, r2
 800988c:	dc01      	bgt.n	8009892 <_printf_float+0x2da>
 800988e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009890:	e797      	b.n	80097c2 <_printf_float+0x20a>
 8009892:	0022      	movs	r2, r4
 8009894:	2301      	movs	r3, #1
 8009896:	0038      	movs	r0, r7
 8009898:	9909      	ldr	r1, [sp, #36]	; 0x24
 800989a:	321a      	adds	r2, #26
 800989c:	47b0      	blx	r6
 800989e:	1c43      	adds	r3, r0, #1
 80098a0:	d100      	bne.n	80098a4 <_printf_float+0x2ec>
 80098a2:	e6e7      	b.n	8009674 <_printf_float+0xbc>
 80098a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098a6:	3301      	adds	r3, #1
 80098a8:	e7eb      	b.n	8009882 <_printf_float+0x2ca>
 80098aa:	46c0      	nop			; (mov r8, r8)
 80098ac:	7fefffff 	.word	0x7fefffff
 80098b0:	0800c398 	.word	0x0800c398
 80098b4:	0800c39c 	.word	0x0800c39c
 80098b8:	0800c3a0 	.word	0x0800c3a0
 80098bc:	0800c3a4 	.word	0x0800c3a4
 80098c0:	0800c3a8 	.word	0x0800c3a8
 80098c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80098c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80098c8:	920a      	str	r2, [sp, #40]	; 0x28
 80098ca:	429a      	cmp	r2, r3
 80098cc:	dd00      	ble.n	80098d0 <_printf_float+0x318>
 80098ce:	930a      	str	r3, [sp, #40]	; 0x28
 80098d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	dc3c      	bgt.n	8009950 <_printf_float+0x398>
 80098d6:	2300      	movs	r3, #0
 80098d8:	930d      	str	r3, [sp, #52]	; 0x34
 80098da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098dc:	43db      	mvns	r3, r3
 80098de:	17db      	asrs	r3, r3, #31
 80098e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80098e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80098e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80098e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80098e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098ea:	4013      	ands	r3, r2
 80098ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80098ee:	1ad3      	subs	r3, r2, r3
 80098f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098f2:	4293      	cmp	r3, r2
 80098f4:	dc34      	bgt.n	8009960 <_printf_float+0x3a8>
 80098f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80098fa:	4293      	cmp	r3, r2
 80098fc:	db3d      	blt.n	800997a <_printf_float+0x3c2>
 80098fe:	6823      	ldr	r3, [r4, #0]
 8009900:	07db      	lsls	r3, r3, #31
 8009902:	d43a      	bmi.n	800997a <_printf_float+0x3c2>
 8009904:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009908:	9911      	ldr	r1, [sp, #68]	; 0x44
 800990a:	1ad3      	subs	r3, r2, r3
 800990c:	1a52      	subs	r2, r2, r1
 800990e:	920a      	str	r2, [sp, #40]	; 0x28
 8009910:	429a      	cmp	r2, r3
 8009912:	dd00      	ble.n	8009916 <_printf_float+0x35e>
 8009914:	930a      	str	r3, [sp, #40]	; 0x28
 8009916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009918:	2b00      	cmp	r3, #0
 800991a:	dc36      	bgt.n	800998a <_printf_float+0x3d2>
 800991c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800991e:	2500      	movs	r5, #0
 8009920:	43db      	mvns	r3, r3
 8009922:	17db      	asrs	r3, r3, #31
 8009924:	930b      	str	r3, [sp, #44]	; 0x2c
 8009926:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009928:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800992a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800992c:	1a9b      	subs	r3, r3, r2
 800992e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009930:	400a      	ands	r2, r1
 8009932:	1a9b      	subs	r3, r3, r2
 8009934:	42ab      	cmp	r3, r5
 8009936:	dc00      	bgt.n	800993a <_printf_float+0x382>
 8009938:	e772      	b.n	8009820 <_printf_float+0x268>
 800993a:	0022      	movs	r2, r4
 800993c:	2301      	movs	r3, #1
 800993e:	0038      	movs	r0, r7
 8009940:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009942:	321a      	adds	r2, #26
 8009944:	47b0      	blx	r6
 8009946:	1c43      	adds	r3, r0, #1
 8009948:	d100      	bne.n	800994c <_printf_float+0x394>
 800994a:	e693      	b.n	8009674 <_printf_float+0xbc>
 800994c:	3501      	adds	r5, #1
 800994e:	e7ea      	b.n	8009926 <_printf_float+0x36e>
 8009950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009952:	002a      	movs	r2, r5
 8009954:	0038      	movs	r0, r7
 8009956:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009958:	47b0      	blx	r6
 800995a:	1c43      	adds	r3, r0, #1
 800995c:	d1bb      	bne.n	80098d6 <_printf_float+0x31e>
 800995e:	e689      	b.n	8009674 <_printf_float+0xbc>
 8009960:	0022      	movs	r2, r4
 8009962:	2301      	movs	r3, #1
 8009964:	0038      	movs	r0, r7
 8009966:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009968:	321a      	adds	r2, #26
 800996a:	47b0      	blx	r6
 800996c:	1c43      	adds	r3, r0, #1
 800996e:	d100      	bne.n	8009972 <_printf_float+0x3ba>
 8009970:	e680      	b.n	8009674 <_printf_float+0xbc>
 8009972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009974:	3301      	adds	r3, #1
 8009976:	930d      	str	r3, [sp, #52]	; 0x34
 8009978:	e7b3      	b.n	80098e2 <_printf_float+0x32a>
 800997a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800997c:	0038      	movs	r0, r7
 800997e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009980:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009982:	47b0      	blx	r6
 8009984:	1c43      	adds	r3, r0, #1
 8009986:	d1bd      	bne.n	8009904 <_printf_float+0x34c>
 8009988:	e674      	b.n	8009674 <_printf_float+0xbc>
 800998a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800998c:	0038      	movs	r0, r7
 800998e:	18ea      	adds	r2, r5, r3
 8009990:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009994:	47b0      	blx	r6
 8009996:	1c43      	adds	r3, r0, #1
 8009998:	d1c0      	bne.n	800991c <_printf_float+0x364>
 800999a:	e66b      	b.n	8009674 <_printf_float+0xbc>
 800999c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800999e:	2b01      	cmp	r3, #1
 80099a0:	dc02      	bgt.n	80099a8 <_printf_float+0x3f0>
 80099a2:	2301      	movs	r3, #1
 80099a4:	421a      	tst	r2, r3
 80099a6:	d034      	beq.n	8009a12 <_printf_float+0x45a>
 80099a8:	2301      	movs	r3, #1
 80099aa:	002a      	movs	r2, r5
 80099ac:	0038      	movs	r0, r7
 80099ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099b0:	47b0      	blx	r6
 80099b2:	1c43      	adds	r3, r0, #1
 80099b4:	d100      	bne.n	80099b8 <_printf_float+0x400>
 80099b6:	e65d      	b.n	8009674 <_printf_float+0xbc>
 80099b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099ba:	0038      	movs	r0, r7
 80099bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099c0:	47b0      	blx	r6
 80099c2:	1c43      	adds	r3, r0, #1
 80099c4:	d100      	bne.n	80099c8 <_printf_float+0x410>
 80099c6:	e655      	b.n	8009674 <_printf_float+0xbc>
 80099c8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80099ca:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80099cc:	2200      	movs	r2, #0
 80099ce:	2300      	movs	r3, #0
 80099d0:	f7f6 fd3a 	bl	8000448 <__aeabi_dcmpeq>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	d11a      	bne.n	8009a0e <_printf_float+0x456>
 80099d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099da:	1c6a      	adds	r2, r5, #1
 80099dc:	3b01      	subs	r3, #1
 80099de:	0038      	movs	r0, r7
 80099e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099e2:	47b0      	blx	r6
 80099e4:	1c43      	adds	r3, r0, #1
 80099e6:	d10e      	bne.n	8009a06 <_printf_float+0x44e>
 80099e8:	e644      	b.n	8009674 <_printf_float+0xbc>
 80099ea:	0022      	movs	r2, r4
 80099ec:	2301      	movs	r3, #1
 80099ee:	0038      	movs	r0, r7
 80099f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099f2:	321a      	adds	r2, #26
 80099f4:	47b0      	blx	r6
 80099f6:	1c43      	adds	r3, r0, #1
 80099f8:	d100      	bne.n	80099fc <_printf_float+0x444>
 80099fa:	e63b      	b.n	8009674 <_printf_float+0xbc>
 80099fc:	3501      	adds	r5, #1
 80099fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a00:	3b01      	subs	r3, #1
 8009a02:	42ab      	cmp	r3, r5
 8009a04:	dcf1      	bgt.n	80099ea <_printf_float+0x432>
 8009a06:	0022      	movs	r2, r4
 8009a08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a0a:	3250      	adds	r2, #80	; 0x50
 8009a0c:	e6da      	b.n	80097c4 <_printf_float+0x20c>
 8009a0e:	2500      	movs	r5, #0
 8009a10:	e7f5      	b.n	80099fe <_printf_float+0x446>
 8009a12:	002a      	movs	r2, r5
 8009a14:	e7e3      	b.n	80099de <_printf_float+0x426>
 8009a16:	0022      	movs	r2, r4
 8009a18:	2301      	movs	r3, #1
 8009a1a:	0038      	movs	r0, r7
 8009a1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a1e:	3219      	adds	r2, #25
 8009a20:	47b0      	blx	r6
 8009a22:	1c43      	adds	r3, r0, #1
 8009a24:	d100      	bne.n	8009a28 <_printf_float+0x470>
 8009a26:	e625      	b.n	8009674 <_printf_float+0xbc>
 8009a28:	3501      	adds	r5, #1
 8009a2a:	68e3      	ldr	r3, [r4, #12]
 8009a2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009a2e:	1a9b      	subs	r3, r3, r2
 8009a30:	42ab      	cmp	r3, r5
 8009a32:	dcf0      	bgt.n	8009a16 <_printf_float+0x45e>
 8009a34:	e6f8      	b.n	8009828 <_printf_float+0x270>
 8009a36:	2500      	movs	r5, #0
 8009a38:	e7f7      	b.n	8009a2a <_printf_float+0x472>
 8009a3a:	46c0      	nop			; (mov r8, r8)

08009a3c <_printf_common>:
 8009a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a3e:	0015      	movs	r5, r2
 8009a40:	9301      	str	r3, [sp, #4]
 8009a42:	688a      	ldr	r2, [r1, #8]
 8009a44:	690b      	ldr	r3, [r1, #16]
 8009a46:	000c      	movs	r4, r1
 8009a48:	9000      	str	r0, [sp, #0]
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	da00      	bge.n	8009a50 <_printf_common+0x14>
 8009a4e:	0013      	movs	r3, r2
 8009a50:	0022      	movs	r2, r4
 8009a52:	602b      	str	r3, [r5, #0]
 8009a54:	3243      	adds	r2, #67	; 0x43
 8009a56:	7812      	ldrb	r2, [r2, #0]
 8009a58:	2a00      	cmp	r2, #0
 8009a5a:	d001      	beq.n	8009a60 <_printf_common+0x24>
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	602b      	str	r3, [r5, #0]
 8009a60:	6823      	ldr	r3, [r4, #0]
 8009a62:	069b      	lsls	r3, r3, #26
 8009a64:	d502      	bpl.n	8009a6c <_printf_common+0x30>
 8009a66:	682b      	ldr	r3, [r5, #0]
 8009a68:	3302      	adds	r3, #2
 8009a6a:	602b      	str	r3, [r5, #0]
 8009a6c:	6822      	ldr	r2, [r4, #0]
 8009a6e:	2306      	movs	r3, #6
 8009a70:	0017      	movs	r7, r2
 8009a72:	401f      	ands	r7, r3
 8009a74:	421a      	tst	r2, r3
 8009a76:	d027      	beq.n	8009ac8 <_printf_common+0x8c>
 8009a78:	0023      	movs	r3, r4
 8009a7a:	3343      	adds	r3, #67	; 0x43
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	1e5a      	subs	r2, r3, #1
 8009a80:	4193      	sbcs	r3, r2
 8009a82:	6822      	ldr	r2, [r4, #0]
 8009a84:	0692      	lsls	r2, r2, #26
 8009a86:	d430      	bmi.n	8009aea <_printf_common+0xae>
 8009a88:	0022      	movs	r2, r4
 8009a8a:	9901      	ldr	r1, [sp, #4]
 8009a8c:	9800      	ldr	r0, [sp, #0]
 8009a8e:	9e08      	ldr	r6, [sp, #32]
 8009a90:	3243      	adds	r2, #67	; 0x43
 8009a92:	47b0      	blx	r6
 8009a94:	1c43      	adds	r3, r0, #1
 8009a96:	d025      	beq.n	8009ae4 <_printf_common+0xa8>
 8009a98:	2306      	movs	r3, #6
 8009a9a:	6820      	ldr	r0, [r4, #0]
 8009a9c:	682a      	ldr	r2, [r5, #0]
 8009a9e:	68e1      	ldr	r1, [r4, #12]
 8009aa0:	2500      	movs	r5, #0
 8009aa2:	4003      	ands	r3, r0
 8009aa4:	2b04      	cmp	r3, #4
 8009aa6:	d103      	bne.n	8009ab0 <_printf_common+0x74>
 8009aa8:	1a8d      	subs	r5, r1, r2
 8009aaa:	43eb      	mvns	r3, r5
 8009aac:	17db      	asrs	r3, r3, #31
 8009aae:	401d      	ands	r5, r3
 8009ab0:	68a3      	ldr	r3, [r4, #8]
 8009ab2:	6922      	ldr	r2, [r4, #16]
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	dd01      	ble.n	8009abc <_printf_common+0x80>
 8009ab8:	1a9b      	subs	r3, r3, r2
 8009aba:	18ed      	adds	r5, r5, r3
 8009abc:	2700      	movs	r7, #0
 8009abe:	42bd      	cmp	r5, r7
 8009ac0:	d120      	bne.n	8009b04 <_printf_common+0xc8>
 8009ac2:	2000      	movs	r0, #0
 8009ac4:	e010      	b.n	8009ae8 <_printf_common+0xac>
 8009ac6:	3701      	adds	r7, #1
 8009ac8:	68e3      	ldr	r3, [r4, #12]
 8009aca:	682a      	ldr	r2, [r5, #0]
 8009acc:	1a9b      	subs	r3, r3, r2
 8009ace:	42bb      	cmp	r3, r7
 8009ad0:	ddd2      	ble.n	8009a78 <_printf_common+0x3c>
 8009ad2:	0022      	movs	r2, r4
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	9901      	ldr	r1, [sp, #4]
 8009ad8:	9800      	ldr	r0, [sp, #0]
 8009ada:	9e08      	ldr	r6, [sp, #32]
 8009adc:	3219      	adds	r2, #25
 8009ade:	47b0      	blx	r6
 8009ae0:	1c43      	adds	r3, r0, #1
 8009ae2:	d1f0      	bne.n	8009ac6 <_printf_common+0x8a>
 8009ae4:	2001      	movs	r0, #1
 8009ae6:	4240      	negs	r0, r0
 8009ae8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009aea:	2030      	movs	r0, #48	; 0x30
 8009aec:	18e1      	adds	r1, r4, r3
 8009aee:	3143      	adds	r1, #67	; 0x43
 8009af0:	7008      	strb	r0, [r1, #0]
 8009af2:	0021      	movs	r1, r4
 8009af4:	1c5a      	adds	r2, r3, #1
 8009af6:	3145      	adds	r1, #69	; 0x45
 8009af8:	7809      	ldrb	r1, [r1, #0]
 8009afa:	18a2      	adds	r2, r4, r2
 8009afc:	3243      	adds	r2, #67	; 0x43
 8009afe:	3302      	adds	r3, #2
 8009b00:	7011      	strb	r1, [r2, #0]
 8009b02:	e7c1      	b.n	8009a88 <_printf_common+0x4c>
 8009b04:	0022      	movs	r2, r4
 8009b06:	2301      	movs	r3, #1
 8009b08:	9901      	ldr	r1, [sp, #4]
 8009b0a:	9800      	ldr	r0, [sp, #0]
 8009b0c:	9e08      	ldr	r6, [sp, #32]
 8009b0e:	321a      	adds	r2, #26
 8009b10:	47b0      	blx	r6
 8009b12:	1c43      	adds	r3, r0, #1
 8009b14:	d0e6      	beq.n	8009ae4 <_printf_common+0xa8>
 8009b16:	3701      	adds	r7, #1
 8009b18:	e7d1      	b.n	8009abe <_printf_common+0x82>
	...

08009b1c <_printf_i>:
 8009b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b1e:	b08b      	sub	sp, #44	; 0x2c
 8009b20:	9206      	str	r2, [sp, #24]
 8009b22:	000a      	movs	r2, r1
 8009b24:	3243      	adds	r2, #67	; 0x43
 8009b26:	9307      	str	r3, [sp, #28]
 8009b28:	9005      	str	r0, [sp, #20]
 8009b2a:	9204      	str	r2, [sp, #16]
 8009b2c:	7e0a      	ldrb	r2, [r1, #24]
 8009b2e:	000c      	movs	r4, r1
 8009b30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b32:	2a78      	cmp	r2, #120	; 0x78
 8009b34:	d807      	bhi.n	8009b46 <_printf_i+0x2a>
 8009b36:	2a62      	cmp	r2, #98	; 0x62
 8009b38:	d809      	bhi.n	8009b4e <_printf_i+0x32>
 8009b3a:	2a00      	cmp	r2, #0
 8009b3c:	d100      	bne.n	8009b40 <_printf_i+0x24>
 8009b3e:	e0c1      	b.n	8009cc4 <_printf_i+0x1a8>
 8009b40:	2a58      	cmp	r2, #88	; 0x58
 8009b42:	d100      	bne.n	8009b46 <_printf_i+0x2a>
 8009b44:	e08c      	b.n	8009c60 <_printf_i+0x144>
 8009b46:	0026      	movs	r6, r4
 8009b48:	3642      	adds	r6, #66	; 0x42
 8009b4a:	7032      	strb	r2, [r6, #0]
 8009b4c:	e022      	b.n	8009b94 <_printf_i+0x78>
 8009b4e:	0010      	movs	r0, r2
 8009b50:	3863      	subs	r0, #99	; 0x63
 8009b52:	2815      	cmp	r0, #21
 8009b54:	d8f7      	bhi.n	8009b46 <_printf_i+0x2a>
 8009b56:	f7f6 fae7 	bl	8000128 <__gnu_thumb1_case_shi>
 8009b5a:	0016      	.short	0x0016
 8009b5c:	fff6001f 	.word	0xfff6001f
 8009b60:	fff6fff6 	.word	0xfff6fff6
 8009b64:	001ffff6 	.word	0x001ffff6
 8009b68:	fff6fff6 	.word	0xfff6fff6
 8009b6c:	fff6fff6 	.word	0xfff6fff6
 8009b70:	003600a8 	.word	0x003600a8
 8009b74:	fff6009a 	.word	0xfff6009a
 8009b78:	00b9fff6 	.word	0x00b9fff6
 8009b7c:	0036fff6 	.word	0x0036fff6
 8009b80:	fff6fff6 	.word	0xfff6fff6
 8009b84:	009e      	.short	0x009e
 8009b86:	0026      	movs	r6, r4
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	3642      	adds	r6, #66	; 0x42
 8009b8c:	1d11      	adds	r1, r2, #4
 8009b8e:	6019      	str	r1, [r3, #0]
 8009b90:	6813      	ldr	r3, [r2, #0]
 8009b92:	7033      	strb	r3, [r6, #0]
 8009b94:	2301      	movs	r3, #1
 8009b96:	e0a7      	b.n	8009ce8 <_printf_i+0x1cc>
 8009b98:	6808      	ldr	r0, [r1, #0]
 8009b9a:	6819      	ldr	r1, [r3, #0]
 8009b9c:	1d0a      	adds	r2, r1, #4
 8009b9e:	0605      	lsls	r5, r0, #24
 8009ba0:	d50b      	bpl.n	8009bba <_printf_i+0x9e>
 8009ba2:	680d      	ldr	r5, [r1, #0]
 8009ba4:	601a      	str	r2, [r3, #0]
 8009ba6:	2d00      	cmp	r5, #0
 8009ba8:	da03      	bge.n	8009bb2 <_printf_i+0x96>
 8009baa:	232d      	movs	r3, #45	; 0x2d
 8009bac:	9a04      	ldr	r2, [sp, #16]
 8009bae:	426d      	negs	r5, r5
 8009bb0:	7013      	strb	r3, [r2, #0]
 8009bb2:	4b61      	ldr	r3, [pc, #388]	; (8009d38 <_printf_i+0x21c>)
 8009bb4:	270a      	movs	r7, #10
 8009bb6:	9303      	str	r3, [sp, #12]
 8009bb8:	e01b      	b.n	8009bf2 <_printf_i+0xd6>
 8009bba:	680d      	ldr	r5, [r1, #0]
 8009bbc:	601a      	str	r2, [r3, #0]
 8009bbe:	0641      	lsls	r1, r0, #25
 8009bc0:	d5f1      	bpl.n	8009ba6 <_printf_i+0x8a>
 8009bc2:	b22d      	sxth	r5, r5
 8009bc4:	e7ef      	b.n	8009ba6 <_printf_i+0x8a>
 8009bc6:	680d      	ldr	r5, [r1, #0]
 8009bc8:	6819      	ldr	r1, [r3, #0]
 8009bca:	1d08      	adds	r0, r1, #4
 8009bcc:	6018      	str	r0, [r3, #0]
 8009bce:	062e      	lsls	r6, r5, #24
 8009bd0:	d501      	bpl.n	8009bd6 <_printf_i+0xba>
 8009bd2:	680d      	ldr	r5, [r1, #0]
 8009bd4:	e003      	b.n	8009bde <_printf_i+0xc2>
 8009bd6:	066d      	lsls	r5, r5, #25
 8009bd8:	d5fb      	bpl.n	8009bd2 <_printf_i+0xb6>
 8009bda:	680d      	ldr	r5, [r1, #0]
 8009bdc:	b2ad      	uxth	r5, r5
 8009bde:	4b56      	ldr	r3, [pc, #344]	; (8009d38 <_printf_i+0x21c>)
 8009be0:	2708      	movs	r7, #8
 8009be2:	9303      	str	r3, [sp, #12]
 8009be4:	2a6f      	cmp	r2, #111	; 0x6f
 8009be6:	d000      	beq.n	8009bea <_printf_i+0xce>
 8009be8:	3702      	adds	r7, #2
 8009bea:	0023      	movs	r3, r4
 8009bec:	2200      	movs	r2, #0
 8009bee:	3343      	adds	r3, #67	; 0x43
 8009bf0:	701a      	strb	r2, [r3, #0]
 8009bf2:	6863      	ldr	r3, [r4, #4]
 8009bf4:	60a3      	str	r3, [r4, #8]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	db03      	blt.n	8009c02 <_printf_i+0xe6>
 8009bfa:	2204      	movs	r2, #4
 8009bfc:	6821      	ldr	r1, [r4, #0]
 8009bfe:	4391      	bics	r1, r2
 8009c00:	6021      	str	r1, [r4, #0]
 8009c02:	2d00      	cmp	r5, #0
 8009c04:	d102      	bne.n	8009c0c <_printf_i+0xf0>
 8009c06:	9e04      	ldr	r6, [sp, #16]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d00c      	beq.n	8009c26 <_printf_i+0x10a>
 8009c0c:	9e04      	ldr	r6, [sp, #16]
 8009c0e:	0028      	movs	r0, r5
 8009c10:	0039      	movs	r1, r7
 8009c12:	f7f6 fb19 	bl	8000248 <__aeabi_uidivmod>
 8009c16:	9b03      	ldr	r3, [sp, #12]
 8009c18:	3e01      	subs	r6, #1
 8009c1a:	5c5b      	ldrb	r3, [r3, r1]
 8009c1c:	7033      	strb	r3, [r6, #0]
 8009c1e:	002b      	movs	r3, r5
 8009c20:	0005      	movs	r5, r0
 8009c22:	429f      	cmp	r7, r3
 8009c24:	d9f3      	bls.n	8009c0e <_printf_i+0xf2>
 8009c26:	2f08      	cmp	r7, #8
 8009c28:	d109      	bne.n	8009c3e <_printf_i+0x122>
 8009c2a:	6823      	ldr	r3, [r4, #0]
 8009c2c:	07db      	lsls	r3, r3, #31
 8009c2e:	d506      	bpl.n	8009c3e <_printf_i+0x122>
 8009c30:	6863      	ldr	r3, [r4, #4]
 8009c32:	6922      	ldr	r2, [r4, #16]
 8009c34:	4293      	cmp	r3, r2
 8009c36:	dc02      	bgt.n	8009c3e <_printf_i+0x122>
 8009c38:	2330      	movs	r3, #48	; 0x30
 8009c3a:	3e01      	subs	r6, #1
 8009c3c:	7033      	strb	r3, [r6, #0]
 8009c3e:	9b04      	ldr	r3, [sp, #16]
 8009c40:	1b9b      	subs	r3, r3, r6
 8009c42:	6123      	str	r3, [r4, #16]
 8009c44:	9b07      	ldr	r3, [sp, #28]
 8009c46:	0021      	movs	r1, r4
 8009c48:	9300      	str	r3, [sp, #0]
 8009c4a:	9805      	ldr	r0, [sp, #20]
 8009c4c:	9b06      	ldr	r3, [sp, #24]
 8009c4e:	aa09      	add	r2, sp, #36	; 0x24
 8009c50:	f7ff fef4 	bl	8009a3c <_printf_common>
 8009c54:	1c43      	adds	r3, r0, #1
 8009c56:	d14c      	bne.n	8009cf2 <_printf_i+0x1d6>
 8009c58:	2001      	movs	r0, #1
 8009c5a:	4240      	negs	r0, r0
 8009c5c:	b00b      	add	sp, #44	; 0x2c
 8009c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c60:	3145      	adds	r1, #69	; 0x45
 8009c62:	700a      	strb	r2, [r1, #0]
 8009c64:	4a34      	ldr	r2, [pc, #208]	; (8009d38 <_printf_i+0x21c>)
 8009c66:	9203      	str	r2, [sp, #12]
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	6821      	ldr	r1, [r4, #0]
 8009c6c:	ca20      	ldmia	r2!, {r5}
 8009c6e:	601a      	str	r2, [r3, #0]
 8009c70:	0608      	lsls	r0, r1, #24
 8009c72:	d516      	bpl.n	8009ca2 <_printf_i+0x186>
 8009c74:	07cb      	lsls	r3, r1, #31
 8009c76:	d502      	bpl.n	8009c7e <_printf_i+0x162>
 8009c78:	2320      	movs	r3, #32
 8009c7a:	4319      	orrs	r1, r3
 8009c7c:	6021      	str	r1, [r4, #0]
 8009c7e:	2710      	movs	r7, #16
 8009c80:	2d00      	cmp	r5, #0
 8009c82:	d1b2      	bne.n	8009bea <_printf_i+0xce>
 8009c84:	2320      	movs	r3, #32
 8009c86:	6822      	ldr	r2, [r4, #0]
 8009c88:	439a      	bics	r2, r3
 8009c8a:	6022      	str	r2, [r4, #0]
 8009c8c:	e7ad      	b.n	8009bea <_printf_i+0xce>
 8009c8e:	2220      	movs	r2, #32
 8009c90:	6809      	ldr	r1, [r1, #0]
 8009c92:	430a      	orrs	r2, r1
 8009c94:	6022      	str	r2, [r4, #0]
 8009c96:	0022      	movs	r2, r4
 8009c98:	2178      	movs	r1, #120	; 0x78
 8009c9a:	3245      	adds	r2, #69	; 0x45
 8009c9c:	7011      	strb	r1, [r2, #0]
 8009c9e:	4a27      	ldr	r2, [pc, #156]	; (8009d3c <_printf_i+0x220>)
 8009ca0:	e7e1      	b.n	8009c66 <_printf_i+0x14a>
 8009ca2:	0648      	lsls	r0, r1, #25
 8009ca4:	d5e6      	bpl.n	8009c74 <_printf_i+0x158>
 8009ca6:	b2ad      	uxth	r5, r5
 8009ca8:	e7e4      	b.n	8009c74 <_printf_i+0x158>
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	680d      	ldr	r5, [r1, #0]
 8009cae:	1d10      	adds	r0, r2, #4
 8009cb0:	6949      	ldr	r1, [r1, #20]
 8009cb2:	6018      	str	r0, [r3, #0]
 8009cb4:	6813      	ldr	r3, [r2, #0]
 8009cb6:	062e      	lsls	r6, r5, #24
 8009cb8:	d501      	bpl.n	8009cbe <_printf_i+0x1a2>
 8009cba:	6019      	str	r1, [r3, #0]
 8009cbc:	e002      	b.n	8009cc4 <_printf_i+0x1a8>
 8009cbe:	066d      	lsls	r5, r5, #25
 8009cc0:	d5fb      	bpl.n	8009cba <_printf_i+0x19e>
 8009cc2:	8019      	strh	r1, [r3, #0]
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	9e04      	ldr	r6, [sp, #16]
 8009cc8:	6123      	str	r3, [r4, #16]
 8009cca:	e7bb      	b.n	8009c44 <_printf_i+0x128>
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	1d11      	adds	r1, r2, #4
 8009cd0:	6019      	str	r1, [r3, #0]
 8009cd2:	6816      	ldr	r6, [r2, #0]
 8009cd4:	2100      	movs	r1, #0
 8009cd6:	0030      	movs	r0, r6
 8009cd8:	6862      	ldr	r2, [r4, #4]
 8009cda:	f000 fee5 	bl	800aaa8 <memchr>
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d001      	beq.n	8009ce6 <_printf_i+0x1ca>
 8009ce2:	1b80      	subs	r0, r0, r6
 8009ce4:	6060      	str	r0, [r4, #4]
 8009ce6:	6863      	ldr	r3, [r4, #4]
 8009ce8:	6123      	str	r3, [r4, #16]
 8009cea:	2300      	movs	r3, #0
 8009cec:	9a04      	ldr	r2, [sp, #16]
 8009cee:	7013      	strb	r3, [r2, #0]
 8009cf0:	e7a8      	b.n	8009c44 <_printf_i+0x128>
 8009cf2:	6923      	ldr	r3, [r4, #16]
 8009cf4:	0032      	movs	r2, r6
 8009cf6:	9906      	ldr	r1, [sp, #24]
 8009cf8:	9805      	ldr	r0, [sp, #20]
 8009cfa:	9d07      	ldr	r5, [sp, #28]
 8009cfc:	47a8      	blx	r5
 8009cfe:	1c43      	adds	r3, r0, #1
 8009d00:	d0aa      	beq.n	8009c58 <_printf_i+0x13c>
 8009d02:	6823      	ldr	r3, [r4, #0]
 8009d04:	079b      	lsls	r3, r3, #30
 8009d06:	d415      	bmi.n	8009d34 <_printf_i+0x218>
 8009d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d0a:	68e0      	ldr	r0, [r4, #12]
 8009d0c:	4298      	cmp	r0, r3
 8009d0e:	daa5      	bge.n	8009c5c <_printf_i+0x140>
 8009d10:	0018      	movs	r0, r3
 8009d12:	e7a3      	b.n	8009c5c <_printf_i+0x140>
 8009d14:	0022      	movs	r2, r4
 8009d16:	2301      	movs	r3, #1
 8009d18:	9906      	ldr	r1, [sp, #24]
 8009d1a:	9805      	ldr	r0, [sp, #20]
 8009d1c:	9e07      	ldr	r6, [sp, #28]
 8009d1e:	3219      	adds	r2, #25
 8009d20:	47b0      	blx	r6
 8009d22:	1c43      	adds	r3, r0, #1
 8009d24:	d098      	beq.n	8009c58 <_printf_i+0x13c>
 8009d26:	3501      	adds	r5, #1
 8009d28:	68e3      	ldr	r3, [r4, #12]
 8009d2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d2c:	1a9b      	subs	r3, r3, r2
 8009d2e:	42ab      	cmp	r3, r5
 8009d30:	dcf0      	bgt.n	8009d14 <_printf_i+0x1f8>
 8009d32:	e7e9      	b.n	8009d08 <_printf_i+0x1ec>
 8009d34:	2500      	movs	r5, #0
 8009d36:	e7f7      	b.n	8009d28 <_printf_i+0x20c>
 8009d38:	0800c3aa 	.word	0x0800c3aa
 8009d3c:	0800c3bb 	.word	0x0800c3bb

08009d40 <quorem>:
 8009d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d42:	0006      	movs	r6, r0
 8009d44:	690b      	ldr	r3, [r1, #16]
 8009d46:	6932      	ldr	r2, [r6, #16]
 8009d48:	b087      	sub	sp, #28
 8009d4a:	2000      	movs	r0, #0
 8009d4c:	9103      	str	r1, [sp, #12]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	db65      	blt.n	8009e1e <quorem+0xde>
 8009d52:	3b01      	subs	r3, #1
 8009d54:	009c      	lsls	r4, r3, #2
 8009d56:	9300      	str	r3, [sp, #0]
 8009d58:	000b      	movs	r3, r1
 8009d5a:	3314      	adds	r3, #20
 8009d5c:	9305      	str	r3, [sp, #20]
 8009d5e:	191b      	adds	r3, r3, r4
 8009d60:	9304      	str	r3, [sp, #16]
 8009d62:	0033      	movs	r3, r6
 8009d64:	3314      	adds	r3, #20
 8009d66:	9302      	str	r3, [sp, #8]
 8009d68:	191c      	adds	r4, r3, r4
 8009d6a:	9b04      	ldr	r3, [sp, #16]
 8009d6c:	6827      	ldr	r7, [r4, #0]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	0038      	movs	r0, r7
 8009d72:	1c5d      	adds	r5, r3, #1
 8009d74:	0029      	movs	r1, r5
 8009d76:	9301      	str	r3, [sp, #4]
 8009d78:	f7f6 f9e0 	bl	800013c <__udivsi3>
 8009d7c:	9001      	str	r0, [sp, #4]
 8009d7e:	42af      	cmp	r7, r5
 8009d80:	d324      	bcc.n	8009dcc <quorem+0x8c>
 8009d82:	2500      	movs	r5, #0
 8009d84:	46ac      	mov	ip, r5
 8009d86:	9802      	ldr	r0, [sp, #8]
 8009d88:	9f05      	ldr	r7, [sp, #20]
 8009d8a:	cf08      	ldmia	r7!, {r3}
 8009d8c:	9a01      	ldr	r2, [sp, #4]
 8009d8e:	b299      	uxth	r1, r3
 8009d90:	4351      	muls	r1, r2
 8009d92:	0c1b      	lsrs	r3, r3, #16
 8009d94:	4353      	muls	r3, r2
 8009d96:	1949      	adds	r1, r1, r5
 8009d98:	0c0a      	lsrs	r2, r1, #16
 8009d9a:	189b      	adds	r3, r3, r2
 8009d9c:	6802      	ldr	r2, [r0, #0]
 8009d9e:	b289      	uxth	r1, r1
 8009da0:	b292      	uxth	r2, r2
 8009da2:	4462      	add	r2, ip
 8009da4:	1a52      	subs	r2, r2, r1
 8009da6:	6801      	ldr	r1, [r0, #0]
 8009da8:	0c1d      	lsrs	r5, r3, #16
 8009daa:	0c09      	lsrs	r1, r1, #16
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	1acb      	subs	r3, r1, r3
 8009db0:	1411      	asrs	r1, r2, #16
 8009db2:	185b      	adds	r3, r3, r1
 8009db4:	1419      	asrs	r1, r3, #16
 8009db6:	b292      	uxth	r2, r2
 8009db8:	041b      	lsls	r3, r3, #16
 8009dba:	431a      	orrs	r2, r3
 8009dbc:	9b04      	ldr	r3, [sp, #16]
 8009dbe:	468c      	mov	ip, r1
 8009dc0:	c004      	stmia	r0!, {r2}
 8009dc2:	42bb      	cmp	r3, r7
 8009dc4:	d2e1      	bcs.n	8009d8a <quorem+0x4a>
 8009dc6:	6823      	ldr	r3, [r4, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d030      	beq.n	8009e2e <quorem+0xee>
 8009dcc:	0030      	movs	r0, r6
 8009dce:	9903      	ldr	r1, [sp, #12]
 8009dd0:	f001 f902 	bl	800afd8 <__mcmp>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	db21      	blt.n	8009e1c <quorem+0xdc>
 8009dd8:	0030      	movs	r0, r6
 8009dda:	2400      	movs	r4, #0
 8009ddc:	9b01      	ldr	r3, [sp, #4]
 8009dde:	9903      	ldr	r1, [sp, #12]
 8009de0:	3301      	adds	r3, #1
 8009de2:	9301      	str	r3, [sp, #4]
 8009de4:	3014      	adds	r0, #20
 8009de6:	3114      	adds	r1, #20
 8009de8:	6803      	ldr	r3, [r0, #0]
 8009dea:	c920      	ldmia	r1!, {r5}
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	1914      	adds	r4, r2, r4
 8009df0:	b2aa      	uxth	r2, r5
 8009df2:	1aa2      	subs	r2, r4, r2
 8009df4:	0c1b      	lsrs	r3, r3, #16
 8009df6:	0c2d      	lsrs	r5, r5, #16
 8009df8:	1414      	asrs	r4, r2, #16
 8009dfa:	1b5b      	subs	r3, r3, r5
 8009dfc:	191b      	adds	r3, r3, r4
 8009dfe:	141c      	asrs	r4, r3, #16
 8009e00:	b292      	uxth	r2, r2
 8009e02:	041b      	lsls	r3, r3, #16
 8009e04:	4313      	orrs	r3, r2
 8009e06:	c008      	stmia	r0!, {r3}
 8009e08:	9b04      	ldr	r3, [sp, #16]
 8009e0a:	428b      	cmp	r3, r1
 8009e0c:	d2ec      	bcs.n	8009de8 <quorem+0xa8>
 8009e0e:	9b00      	ldr	r3, [sp, #0]
 8009e10:	9a02      	ldr	r2, [sp, #8]
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	18d3      	adds	r3, r2, r3
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	2a00      	cmp	r2, #0
 8009e1a:	d015      	beq.n	8009e48 <quorem+0x108>
 8009e1c:	9801      	ldr	r0, [sp, #4]
 8009e1e:	b007      	add	sp, #28
 8009e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e22:	6823      	ldr	r3, [r4, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d106      	bne.n	8009e36 <quorem+0xf6>
 8009e28:	9b00      	ldr	r3, [sp, #0]
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	9300      	str	r3, [sp, #0]
 8009e2e:	9b02      	ldr	r3, [sp, #8]
 8009e30:	3c04      	subs	r4, #4
 8009e32:	42a3      	cmp	r3, r4
 8009e34:	d3f5      	bcc.n	8009e22 <quorem+0xe2>
 8009e36:	9b00      	ldr	r3, [sp, #0]
 8009e38:	6133      	str	r3, [r6, #16]
 8009e3a:	e7c7      	b.n	8009dcc <quorem+0x8c>
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	2a00      	cmp	r2, #0
 8009e40:	d106      	bne.n	8009e50 <quorem+0x110>
 8009e42:	9a00      	ldr	r2, [sp, #0]
 8009e44:	3a01      	subs	r2, #1
 8009e46:	9200      	str	r2, [sp, #0]
 8009e48:	9a02      	ldr	r2, [sp, #8]
 8009e4a:	3b04      	subs	r3, #4
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d3f5      	bcc.n	8009e3c <quorem+0xfc>
 8009e50:	9b00      	ldr	r3, [sp, #0]
 8009e52:	6133      	str	r3, [r6, #16]
 8009e54:	e7e2      	b.n	8009e1c <quorem+0xdc>
	...

08009e58 <_dtoa_r>:
 8009e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e5a:	b09d      	sub	sp, #116	; 0x74
 8009e5c:	9202      	str	r2, [sp, #8]
 8009e5e:	9303      	str	r3, [sp, #12]
 8009e60:	9b02      	ldr	r3, [sp, #8]
 8009e62:	9c03      	ldr	r4, [sp, #12]
 8009e64:	9308      	str	r3, [sp, #32]
 8009e66:	9409      	str	r4, [sp, #36]	; 0x24
 8009e68:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009e6a:	0007      	movs	r7, r0
 8009e6c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8009e6e:	2c00      	cmp	r4, #0
 8009e70:	d10e      	bne.n	8009e90 <_dtoa_r+0x38>
 8009e72:	2010      	movs	r0, #16
 8009e74:	f000 fe0e 	bl	800aa94 <malloc>
 8009e78:	1e02      	subs	r2, r0, #0
 8009e7a:	6278      	str	r0, [r7, #36]	; 0x24
 8009e7c:	d104      	bne.n	8009e88 <_dtoa_r+0x30>
 8009e7e:	21ea      	movs	r1, #234	; 0xea
 8009e80:	4bc7      	ldr	r3, [pc, #796]	; (800a1a0 <_dtoa_r+0x348>)
 8009e82:	48c8      	ldr	r0, [pc, #800]	; (800a1a4 <_dtoa_r+0x34c>)
 8009e84:	f001 fae0 	bl	800b448 <__assert_func>
 8009e88:	6044      	str	r4, [r0, #4]
 8009e8a:	6084      	str	r4, [r0, #8]
 8009e8c:	6004      	str	r4, [r0, #0]
 8009e8e:	60c4      	str	r4, [r0, #12]
 8009e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e92:	6819      	ldr	r1, [r3, #0]
 8009e94:	2900      	cmp	r1, #0
 8009e96:	d00a      	beq.n	8009eae <_dtoa_r+0x56>
 8009e98:	685a      	ldr	r2, [r3, #4]
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	4093      	lsls	r3, r2
 8009e9e:	604a      	str	r2, [r1, #4]
 8009ea0:	608b      	str	r3, [r1, #8]
 8009ea2:	0038      	movs	r0, r7
 8009ea4:	f000 fe58 	bl	800ab58 <_Bfree>
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eac:	601a      	str	r2, [r3, #0]
 8009eae:	9b03      	ldr	r3, [sp, #12]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	da20      	bge.n	8009ef6 <_dtoa_r+0x9e>
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	602b      	str	r3, [r5, #0]
 8009eb8:	9b03      	ldr	r3, [sp, #12]
 8009eba:	005b      	lsls	r3, r3, #1
 8009ebc:	085b      	lsrs	r3, r3, #1
 8009ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8009ec0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009ec2:	4bb9      	ldr	r3, [pc, #740]	; (800a1a8 <_dtoa_r+0x350>)
 8009ec4:	4ab8      	ldr	r2, [pc, #736]	; (800a1a8 <_dtoa_r+0x350>)
 8009ec6:	402b      	ands	r3, r5
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d117      	bne.n	8009efc <_dtoa_r+0xa4>
 8009ecc:	4bb7      	ldr	r3, [pc, #732]	; (800a1ac <_dtoa_r+0x354>)
 8009ece:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009ed0:	0328      	lsls	r0, r5, #12
 8009ed2:	6013      	str	r3, [r2, #0]
 8009ed4:	9b02      	ldr	r3, [sp, #8]
 8009ed6:	0b00      	lsrs	r0, r0, #12
 8009ed8:	4318      	orrs	r0, r3
 8009eda:	d101      	bne.n	8009ee0 <_dtoa_r+0x88>
 8009edc:	f000 fdbf 	bl	800aa5e <_dtoa_r+0xc06>
 8009ee0:	48b3      	ldr	r0, [pc, #716]	; (800a1b0 <_dtoa_r+0x358>)
 8009ee2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009ee4:	9006      	str	r0, [sp, #24]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d002      	beq.n	8009ef0 <_dtoa_r+0x98>
 8009eea:	4bb2      	ldr	r3, [pc, #712]	; (800a1b4 <_dtoa_r+0x35c>)
 8009eec:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009eee:	6013      	str	r3, [r2, #0]
 8009ef0:	9806      	ldr	r0, [sp, #24]
 8009ef2:	b01d      	add	sp, #116	; 0x74
 8009ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	602b      	str	r3, [r5, #0]
 8009efa:	e7e1      	b.n	8009ec0 <_dtoa_r+0x68>
 8009efc:	9b08      	ldr	r3, [sp, #32]
 8009efe:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009f00:	9312      	str	r3, [sp, #72]	; 0x48
 8009f02:	9413      	str	r4, [sp, #76]	; 0x4c
 8009f04:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009f06:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009f08:	2200      	movs	r2, #0
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	f7f6 fa9c 	bl	8000448 <__aeabi_dcmpeq>
 8009f10:	1e04      	subs	r4, r0, #0
 8009f12:	d009      	beq.n	8009f28 <_dtoa_r+0xd0>
 8009f14:	2301      	movs	r3, #1
 8009f16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009f18:	6013      	str	r3, [r2, #0]
 8009f1a:	4ba7      	ldr	r3, [pc, #668]	; (800a1b8 <_dtoa_r+0x360>)
 8009f1c:	9306      	str	r3, [sp, #24]
 8009f1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d0e5      	beq.n	8009ef0 <_dtoa_r+0x98>
 8009f24:	4ba5      	ldr	r3, [pc, #660]	; (800a1bc <_dtoa_r+0x364>)
 8009f26:	e7e1      	b.n	8009eec <_dtoa_r+0x94>
 8009f28:	ab1a      	add	r3, sp, #104	; 0x68
 8009f2a:	9301      	str	r3, [sp, #4]
 8009f2c:	ab1b      	add	r3, sp, #108	; 0x6c
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	0038      	movs	r0, r7
 8009f32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009f34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f36:	f001 f903 	bl	800b140 <__d2b>
 8009f3a:	006e      	lsls	r6, r5, #1
 8009f3c:	9005      	str	r0, [sp, #20]
 8009f3e:	0d76      	lsrs	r6, r6, #21
 8009f40:	d100      	bne.n	8009f44 <_dtoa_r+0xec>
 8009f42:	e07c      	b.n	800a03e <_dtoa_r+0x1e6>
 8009f44:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009f46:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009f48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f4a:	4a9d      	ldr	r2, [pc, #628]	; (800a1c0 <_dtoa_r+0x368>)
 8009f4c:	031b      	lsls	r3, r3, #12
 8009f4e:	0b1b      	lsrs	r3, r3, #12
 8009f50:	431a      	orrs	r2, r3
 8009f52:	0011      	movs	r1, r2
 8009f54:	4b9b      	ldr	r3, [pc, #620]	; (800a1c4 <_dtoa_r+0x36c>)
 8009f56:	9418      	str	r4, [sp, #96]	; 0x60
 8009f58:	18f6      	adds	r6, r6, r3
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	4b9a      	ldr	r3, [pc, #616]	; (800a1c8 <_dtoa_r+0x370>)
 8009f5e:	f7f7 fd37 	bl	80019d0 <__aeabi_dsub>
 8009f62:	4a9a      	ldr	r2, [pc, #616]	; (800a1cc <_dtoa_r+0x374>)
 8009f64:	4b9a      	ldr	r3, [pc, #616]	; (800a1d0 <_dtoa_r+0x378>)
 8009f66:	f7f7 fac7 	bl	80014f8 <__aeabi_dmul>
 8009f6a:	4a9a      	ldr	r2, [pc, #616]	; (800a1d4 <_dtoa_r+0x37c>)
 8009f6c:	4b9a      	ldr	r3, [pc, #616]	; (800a1d8 <_dtoa_r+0x380>)
 8009f6e:	f7f6 fb85 	bl	800067c <__aeabi_dadd>
 8009f72:	0004      	movs	r4, r0
 8009f74:	0030      	movs	r0, r6
 8009f76:	000d      	movs	r5, r1
 8009f78:	f7f8 f910 	bl	800219c <__aeabi_i2d>
 8009f7c:	4a97      	ldr	r2, [pc, #604]	; (800a1dc <_dtoa_r+0x384>)
 8009f7e:	4b98      	ldr	r3, [pc, #608]	; (800a1e0 <_dtoa_r+0x388>)
 8009f80:	f7f7 faba 	bl	80014f8 <__aeabi_dmul>
 8009f84:	0002      	movs	r2, r0
 8009f86:	000b      	movs	r3, r1
 8009f88:	0020      	movs	r0, r4
 8009f8a:	0029      	movs	r1, r5
 8009f8c:	f7f6 fb76 	bl	800067c <__aeabi_dadd>
 8009f90:	0004      	movs	r4, r0
 8009f92:	000d      	movs	r5, r1
 8009f94:	f7f8 f8cc 	bl	8002130 <__aeabi_d2iz>
 8009f98:	2200      	movs	r2, #0
 8009f9a:	9002      	str	r0, [sp, #8]
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	0020      	movs	r0, r4
 8009fa0:	0029      	movs	r1, r5
 8009fa2:	f7f6 fa57 	bl	8000454 <__aeabi_dcmplt>
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d00b      	beq.n	8009fc2 <_dtoa_r+0x16a>
 8009faa:	9802      	ldr	r0, [sp, #8]
 8009fac:	f7f8 f8f6 	bl	800219c <__aeabi_i2d>
 8009fb0:	002b      	movs	r3, r5
 8009fb2:	0022      	movs	r2, r4
 8009fb4:	f7f6 fa48 	bl	8000448 <__aeabi_dcmpeq>
 8009fb8:	4243      	negs	r3, r0
 8009fba:	4158      	adcs	r0, r3
 8009fbc:	9b02      	ldr	r3, [sp, #8]
 8009fbe:	1a1b      	subs	r3, r3, r0
 8009fc0:	9302      	str	r3, [sp, #8]
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	9316      	str	r3, [sp, #88]	; 0x58
 8009fc6:	9b02      	ldr	r3, [sp, #8]
 8009fc8:	2b16      	cmp	r3, #22
 8009fca:	d80f      	bhi.n	8009fec <_dtoa_r+0x194>
 8009fcc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009fce:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009fd0:	00da      	lsls	r2, r3, #3
 8009fd2:	4b84      	ldr	r3, [pc, #528]	; (800a1e4 <_dtoa_r+0x38c>)
 8009fd4:	189b      	adds	r3, r3, r2
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	f7f6 fa3b 	bl	8000454 <__aeabi_dcmplt>
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	d049      	beq.n	800a076 <_dtoa_r+0x21e>
 8009fe2:	9b02      	ldr	r3, [sp, #8]
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	9302      	str	r3, [sp, #8]
 8009fe8:	2300      	movs	r3, #0
 8009fea:	9316      	str	r3, [sp, #88]	; 0x58
 8009fec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009fee:	1b9e      	subs	r6, r3, r6
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	930a      	str	r3, [sp, #40]	; 0x28
 8009ff4:	0033      	movs	r3, r6
 8009ff6:	3b01      	subs	r3, #1
 8009ff8:	930d      	str	r3, [sp, #52]	; 0x34
 8009ffa:	d504      	bpl.n	800a006 <_dtoa_r+0x1ae>
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	1b9b      	subs	r3, r3, r6
 800a000:	930a      	str	r3, [sp, #40]	; 0x28
 800a002:	2300      	movs	r3, #0
 800a004:	930d      	str	r3, [sp, #52]	; 0x34
 800a006:	9b02      	ldr	r3, [sp, #8]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	db36      	blt.n	800a07a <_dtoa_r+0x222>
 800a00c:	9a02      	ldr	r2, [sp, #8]
 800a00e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a010:	4694      	mov	ip, r2
 800a012:	4463      	add	r3, ip
 800a014:	930d      	str	r3, [sp, #52]	; 0x34
 800a016:	2300      	movs	r3, #0
 800a018:	9215      	str	r2, [sp, #84]	; 0x54
 800a01a:	930e      	str	r3, [sp, #56]	; 0x38
 800a01c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a01e:	2401      	movs	r4, #1
 800a020:	2b09      	cmp	r3, #9
 800a022:	d864      	bhi.n	800a0ee <_dtoa_r+0x296>
 800a024:	2b05      	cmp	r3, #5
 800a026:	dd02      	ble.n	800a02e <_dtoa_r+0x1d6>
 800a028:	2400      	movs	r4, #0
 800a02a:	3b04      	subs	r3, #4
 800a02c:	9322      	str	r3, [sp, #136]	; 0x88
 800a02e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a030:	1e98      	subs	r0, r3, #2
 800a032:	2803      	cmp	r0, #3
 800a034:	d864      	bhi.n	800a100 <_dtoa_r+0x2a8>
 800a036:	f7f6 f86d 	bl	8000114 <__gnu_thumb1_case_uqi>
 800a03a:	3829      	.short	0x3829
 800a03c:	5836      	.short	0x5836
 800a03e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a040:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a042:	189e      	adds	r6, r3, r2
 800a044:	4b68      	ldr	r3, [pc, #416]	; (800a1e8 <_dtoa_r+0x390>)
 800a046:	18f2      	adds	r2, r6, r3
 800a048:	2a20      	cmp	r2, #32
 800a04a:	dd0f      	ble.n	800a06c <_dtoa_r+0x214>
 800a04c:	2340      	movs	r3, #64	; 0x40
 800a04e:	1a9b      	subs	r3, r3, r2
 800a050:	409d      	lsls	r5, r3
 800a052:	4b66      	ldr	r3, [pc, #408]	; (800a1ec <_dtoa_r+0x394>)
 800a054:	9802      	ldr	r0, [sp, #8]
 800a056:	18f3      	adds	r3, r6, r3
 800a058:	40d8      	lsrs	r0, r3
 800a05a:	4328      	orrs	r0, r5
 800a05c:	f7f8 f8ce 	bl	80021fc <__aeabi_ui2d>
 800a060:	2301      	movs	r3, #1
 800a062:	4c63      	ldr	r4, [pc, #396]	; (800a1f0 <_dtoa_r+0x398>)
 800a064:	3e01      	subs	r6, #1
 800a066:	1909      	adds	r1, r1, r4
 800a068:	9318      	str	r3, [sp, #96]	; 0x60
 800a06a:	e776      	b.n	8009f5a <_dtoa_r+0x102>
 800a06c:	2320      	movs	r3, #32
 800a06e:	9802      	ldr	r0, [sp, #8]
 800a070:	1a9b      	subs	r3, r3, r2
 800a072:	4098      	lsls	r0, r3
 800a074:	e7f2      	b.n	800a05c <_dtoa_r+0x204>
 800a076:	9016      	str	r0, [sp, #88]	; 0x58
 800a078:	e7b8      	b.n	8009fec <_dtoa_r+0x194>
 800a07a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a07c:	9a02      	ldr	r2, [sp, #8]
 800a07e:	1a9b      	subs	r3, r3, r2
 800a080:	930a      	str	r3, [sp, #40]	; 0x28
 800a082:	4253      	negs	r3, r2
 800a084:	930e      	str	r3, [sp, #56]	; 0x38
 800a086:	2300      	movs	r3, #0
 800a088:	9315      	str	r3, [sp, #84]	; 0x54
 800a08a:	e7c7      	b.n	800a01c <_dtoa_r+0x1c4>
 800a08c:	2300      	movs	r3, #0
 800a08e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a090:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a092:	930c      	str	r3, [sp, #48]	; 0x30
 800a094:	9307      	str	r3, [sp, #28]
 800a096:	2b00      	cmp	r3, #0
 800a098:	dc13      	bgt.n	800a0c2 <_dtoa_r+0x26a>
 800a09a:	2301      	movs	r3, #1
 800a09c:	001a      	movs	r2, r3
 800a09e:	930c      	str	r3, [sp, #48]	; 0x30
 800a0a0:	9307      	str	r3, [sp, #28]
 800a0a2:	9223      	str	r2, [sp, #140]	; 0x8c
 800a0a4:	e00d      	b.n	800a0c2 <_dtoa_r+0x26a>
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	e7f1      	b.n	800a08e <_dtoa_r+0x236>
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a0ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0b0:	4694      	mov	ip, r2
 800a0b2:	9b02      	ldr	r3, [sp, #8]
 800a0b4:	4463      	add	r3, ip
 800a0b6:	930c      	str	r3, [sp, #48]	; 0x30
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	9307      	str	r3, [sp, #28]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	dc00      	bgt.n	800a0c2 <_dtoa_r+0x26a>
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0c6:	6042      	str	r2, [r0, #4]
 800a0c8:	3204      	adds	r2, #4
 800a0ca:	0015      	movs	r5, r2
 800a0cc:	3514      	adds	r5, #20
 800a0ce:	6841      	ldr	r1, [r0, #4]
 800a0d0:	429d      	cmp	r5, r3
 800a0d2:	d919      	bls.n	800a108 <_dtoa_r+0x2b0>
 800a0d4:	0038      	movs	r0, r7
 800a0d6:	f000 fcfb 	bl	800aad0 <_Balloc>
 800a0da:	9006      	str	r0, [sp, #24]
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	d117      	bne.n	800a110 <_dtoa_r+0x2b8>
 800a0e0:	21d5      	movs	r1, #213	; 0xd5
 800a0e2:	0002      	movs	r2, r0
 800a0e4:	4b43      	ldr	r3, [pc, #268]	; (800a1f4 <_dtoa_r+0x39c>)
 800a0e6:	0049      	lsls	r1, r1, #1
 800a0e8:	e6cb      	b.n	8009e82 <_dtoa_r+0x2a>
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	e7de      	b.n	800a0ac <_dtoa_r+0x254>
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	940f      	str	r4, [sp, #60]	; 0x3c
 800a0f2:	9322      	str	r3, [sp, #136]	; 0x88
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	930c      	str	r3, [sp, #48]	; 0x30
 800a0f8:	9307      	str	r3, [sp, #28]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	3313      	adds	r3, #19
 800a0fe:	e7d0      	b.n	800a0a2 <_dtoa_r+0x24a>
 800a100:	2301      	movs	r3, #1
 800a102:	930f      	str	r3, [sp, #60]	; 0x3c
 800a104:	3b02      	subs	r3, #2
 800a106:	e7f6      	b.n	800a0f6 <_dtoa_r+0x29e>
 800a108:	3101      	adds	r1, #1
 800a10a:	6041      	str	r1, [r0, #4]
 800a10c:	0052      	lsls	r2, r2, #1
 800a10e:	e7dc      	b.n	800a0ca <_dtoa_r+0x272>
 800a110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a112:	9a06      	ldr	r2, [sp, #24]
 800a114:	601a      	str	r2, [r3, #0]
 800a116:	9b07      	ldr	r3, [sp, #28]
 800a118:	2b0e      	cmp	r3, #14
 800a11a:	d900      	bls.n	800a11e <_dtoa_r+0x2c6>
 800a11c:	e0eb      	b.n	800a2f6 <_dtoa_r+0x49e>
 800a11e:	2c00      	cmp	r4, #0
 800a120:	d100      	bne.n	800a124 <_dtoa_r+0x2cc>
 800a122:	e0e8      	b.n	800a2f6 <_dtoa_r+0x49e>
 800a124:	9b02      	ldr	r3, [sp, #8]
 800a126:	2b00      	cmp	r3, #0
 800a128:	dd68      	ble.n	800a1fc <_dtoa_r+0x3a4>
 800a12a:	001a      	movs	r2, r3
 800a12c:	210f      	movs	r1, #15
 800a12e:	4b2d      	ldr	r3, [pc, #180]	; (800a1e4 <_dtoa_r+0x38c>)
 800a130:	400a      	ands	r2, r1
 800a132:	00d2      	lsls	r2, r2, #3
 800a134:	189b      	adds	r3, r3, r2
 800a136:	681d      	ldr	r5, [r3, #0]
 800a138:	685e      	ldr	r6, [r3, #4]
 800a13a:	9b02      	ldr	r3, [sp, #8]
 800a13c:	111c      	asrs	r4, r3, #4
 800a13e:	2302      	movs	r3, #2
 800a140:	9310      	str	r3, [sp, #64]	; 0x40
 800a142:	9b02      	ldr	r3, [sp, #8]
 800a144:	05db      	lsls	r3, r3, #23
 800a146:	d50b      	bpl.n	800a160 <_dtoa_r+0x308>
 800a148:	4b2b      	ldr	r3, [pc, #172]	; (800a1f8 <_dtoa_r+0x3a0>)
 800a14a:	400c      	ands	r4, r1
 800a14c:	6a1a      	ldr	r2, [r3, #32]
 800a14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a150:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a152:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a154:	f7f6 fdce 	bl	8000cf4 <__aeabi_ddiv>
 800a158:	2303      	movs	r3, #3
 800a15a:	9008      	str	r0, [sp, #32]
 800a15c:	9109      	str	r1, [sp, #36]	; 0x24
 800a15e:	9310      	str	r3, [sp, #64]	; 0x40
 800a160:	4b25      	ldr	r3, [pc, #148]	; (800a1f8 <_dtoa_r+0x3a0>)
 800a162:	9314      	str	r3, [sp, #80]	; 0x50
 800a164:	2c00      	cmp	r4, #0
 800a166:	d108      	bne.n	800a17a <_dtoa_r+0x322>
 800a168:	9808      	ldr	r0, [sp, #32]
 800a16a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a16c:	002a      	movs	r2, r5
 800a16e:	0033      	movs	r3, r6
 800a170:	f7f6 fdc0 	bl	8000cf4 <__aeabi_ddiv>
 800a174:	9008      	str	r0, [sp, #32]
 800a176:	9109      	str	r1, [sp, #36]	; 0x24
 800a178:	e05c      	b.n	800a234 <_dtoa_r+0x3dc>
 800a17a:	2301      	movs	r3, #1
 800a17c:	421c      	tst	r4, r3
 800a17e:	d00b      	beq.n	800a198 <_dtoa_r+0x340>
 800a180:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a182:	0028      	movs	r0, r5
 800a184:	3301      	adds	r3, #1
 800a186:	9310      	str	r3, [sp, #64]	; 0x40
 800a188:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a18a:	0031      	movs	r1, r6
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	f7f7 f9b2 	bl	80014f8 <__aeabi_dmul>
 800a194:	0005      	movs	r5, r0
 800a196:	000e      	movs	r6, r1
 800a198:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a19a:	1064      	asrs	r4, r4, #1
 800a19c:	3308      	adds	r3, #8
 800a19e:	e7e0      	b.n	800a162 <_dtoa_r+0x30a>
 800a1a0:	0800c3d9 	.word	0x0800c3d9
 800a1a4:	0800c3f0 	.word	0x0800c3f0
 800a1a8:	7ff00000 	.word	0x7ff00000
 800a1ac:	0000270f 	.word	0x0000270f
 800a1b0:	0800c3d5 	.word	0x0800c3d5
 800a1b4:	0800c3d8 	.word	0x0800c3d8
 800a1b8:	0800c3a8 	.word	0x0800c3a8
 800a1bc:	0800c3a9 	.word	0x0800c3a9
 800a1c0:	3ff00000 	.word	0x3ff00000
 800a1c4:	fffffc01 	.word	0xfffffc01
 800a1c8:	3ff80000 	.word	0x3ff80000
 800a1cc:	636f4361 	.word	0x636f4361
 800a1d0:	3fd287a7 	.word	0x3fd287a7
 800a1d4:	8b60c8b3 	.word	0x8b60c8b3
 800a1d8:	3fc68a28 	.word	0x3fc68a28
 800a1dc:	509f79fb 	.word	0x509f79fb
 800a1e0:	3fd34413 	.word	0x3fd34413
 800a1e4:	0800c4e0 	.word	0x0800c4e0
 800a1e8:	00000432 	.word	0x00000432
 800a1ec:	00000412 	.word	0x00000412
 800a1f0:	fe100000 	.word	0xfe100000
 800a1f4:	0800c44b 	.word	0x0800c44b
 800a1f8:	0800c4b8 	.word	0x0800c4b8
 800a1fc:	2302      	movs	r3, #2
 800a1fe:	9310      	str	r3, [sp, #64]	; 0x40
 800a200:	9b02      	ldr	r3, [sp, #8]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d016      	beq.n	800a234 <_dtoa_r+0x3dc>
 800a206:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a208:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a20a:	425c      	negs	r4, r3
 800a20c:	230f      	movs	r3, #15
 800a20e:	4ab6      	ldr	r2, [pc, #728]	; (800a4e8 <_dtoa_r+0x690>)
 800a210:	4023      	ands	r3, r4
 800a212:	00db      	lsls	r3, r3, #3
 800a214:	18d3      	adds	r3, r2, r3
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	f7f7 f96d 	bl	80014f8 <__aeabi_dmul>
 800a21e:	2601      	movs	r6, #1
 800a220:	2300      	movs	r3, #0
 800a222:	9008      	str	r0, [sp, #32]
 800a224:	9109      	str	r1, [sp, #36]	; 0x24
 800a226:	4db1      	ldr	r5, [pc, #708]	; (800a4ec <_dtoa_r+0x694>)
 800a228:	1124      	asrs	r4, r4, #4
 800a22a:	2c00      	cmp	r4, #0
 800a22c:	d000      	beq.n	800a230 <_dtoa_r+0x3d8>
 800a22e:	e094      	b.n	800a35a <_dtoa_r+0x502>
 800a230:	2b00      	cmp	r3, #0
 800a232:	d19f      	bne.n	800a174 <_dtoa_r+0x31c>
 800a234:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a236:	2b00      	cmp	r3, #0
 800a238:	d100      	bne.n	800a23c <_dtoa_r+0x3e4>
 800a23a:	e09b      	b.n	800a374 <_dtoa_r+0x51c>
 800a23c:	9c08      	ldr	r4, [sp, #32]
 800a23e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a240:	2200      	movs	r2, #0
 800a242:	0020      	movs	r0, r4
 800a244:	0029      	movs	r1, r5
 800a246:	4baa      	ldr	r3, [pc, #680]	; (800a4f0 <_dtoa_r+0x698>)
 800a248:	f7f6 f904 	bl	8000454 <__aeabi_dcmplt>
 800a24c:	2800      	cmp	r0, #0
 800a24e:	d100      	bne.n	800a252 <_dtoa_r+0x3fa>
 800a250:	e090      	b.n	800a374 <_dtoa_r+0x51c>
 800a252:	9b07      	ldr	r3, [sp, #28]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d100      	bne.n	800a25a <_dtoa_r+0x402>
 800a258:	e08c      	b.n	800a374 <_dtoa_r+0x51c>
 800a25a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	dd46      	ble.n	800a2ee <_dtoa_r+0x496>
 800a260:	9b02      	ldr	r3, [sp, #8]
 800a262:	2200      	movs	r2, #0
 800a264:	0020      	movs	r0, r4
 800a266:	0029      	movs	r1, r5
 800a268:	1e5e      	subs	r6, r3, #1
 800a26a:	4ba2      	ldr	r3, [pc, #648]	; (800a4f4 <_dtoa_r+0x69c>)
 800a26c:	f7f7 f944 	bl	80014f8 <__aeabi_dmul>
 800a270:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a272:	9008      	str	r0, [sp, #32]
 800a274:	9109      	str	r1, [sp, #36]	; 0x24
 800a276:	3301      	adds	r3, #1
 800a278:	9310      	str	r3, [sp, #64]	; 0x40
 800a27a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a27c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a27e:	9c08      	ldr	r4, [sp, #32]
 800a280:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a282:	9314      	str	r3, [sp, #80]	; 0x50
 800a284:	f7f7 ff8a 	bl	800219c <__aeabi_i2d>
 800a288:	0022      	movs	r2, r4
 800a28a:	002b      	movs	r3, r5
 800a28c:	f7f7 f934 	bl	80014f8 <__aeabi_dmul>
 800a290:	2200      	movs	r2, #0
 800a292:	4b99      	ldr	r3, [pc, #612]	; (800a4f8 <_dtoa_r+0x6a0>)
 800a294:	f7f6 f9f2 	bl	800067c <__aeabi_dadd>
 800a298:	9010      	str	r0, [sp, #64]	; 0x40
 800a29a:	9111      	str	r1, [sp, #68]	; 0x44
 800a29c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a29e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2a0:	9208      	str	r2, [sp, #32]
 800a2a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a2a4:	4a95      	ldr	r2, [pc, #596]	; (800a4fc <_dtoa_r+0x6a4>)
 800a2a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2a8:	4694      	mov	ip, r2
 800a2aa:	4463      	add	r3, ip
 800a2ac:	9317      	str	r3, [sp, #92]	; 0x5c
 800a2ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a2b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d161      	bne.n	800a37a <_dtoa_r+0x522>
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	0020      	movs	r0, r4
 800a2ba:	0029      	movs	r1, r5
 800a2bc:	4b90      	ldr	r3, [pc, #576]	; (800a500 <_dtoa_r+0x6a8>)
 800a2be:	f7f7 fb87 	bl	80019d0 <__aeabi_dsub>
 800a2c2:	9a08      	ldr	r2, [sp, #32]
 800a2c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a2c6:	0004      	movs	r4, r0
 800a2c8:	000d      	movs	r5, r1
 800a2ca:	f7f6 f8d7 	bl	800047c <__aeabi_dcmpgt>
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	d000      	beq.n	800a2d4 <_dtoa_r+0x47c>
 800a2d2:	e2af      	b.n	800a834 <_dtoa_r+0x9dc>
 800a2d4:	488b      	ldr	r0, [pc, #556]	; (800a504 <_dtoa_r+0x6ac>)
 800a2d6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a2d8:	4684      	mov	ip, r0
 800a2da:	4461      	add	r1, ip
 800a2dc:	000b      	movs	r3, r1
 800a2de:	0020      	movs	r0, r4
 800a2e0:	0029      	movs	r1, r5
 800a2e2:	9a08      	ldr	r2, [sp, #32]
 800a2e4:	f7f6 f8b6 	bl	8000454 <__aeabi_dcmplt>
 800a2e8:	2800      	cmp	r0, #0
 800a2ea:	d000      	beq.n	800a2ee <_dtoa_r+0x496>
 800a2ec:	e29f      	b.n	800a82e <_dtoa_r+0x9d6>
 800a2ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a2f0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800a2f2:	9308      	str	r3, [sp, #32]
 800a2f4:	9409      	str	r4, [sp, #36]	; 0x24
 800a2f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	da00      	bge.n	800a2fe <_dtoa_r+0x4a6>
 800a2fc:	e172      	b.n	800a5e4 <_dtoa_r+0x78c>
 800a2fe:	9a02      	ldr	r2, [sp, #8]
 800a300:	2a0e      	cmp	r2, #14
 800a302:	dd00      	ble.n	800a306 <_dtoa_r+0x4ae>
 800a304:	e16e      	b.n	800a5e4 <_dtoa_r+0x78c>
 800a306:	4b78      	ldr	r3, [pc, #480]	; (800a4e8 <_dtoa_r+0x690>)
 800a308:	00d2      	lsls	r2, r2, #3
 800a30a:	189b      	adds	r3, r3, r2
 800a30c:	685c      	ldr	r4, [r3, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	930a      	str	r3, [sp, #40]	; 0x28
 800a312:	940b      	str	r4, [sp, #44]	; 0x2c
 800a314:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a316:	2b00      	cmp	r3, #0
 800a318:	db00      	blt.n	800a31c <_dtoa_r+0x4c4>
 800a31a:	e0f7      	b.n	800a50c <_dtoa_r+0x6b4>
 800a31c:	9b07      	ldr	r3, [sp, #28]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	dd00      	ble.n	800a324 <_dtoa_r+0x4cc>
 800a322:	e0f3      	b.n	800a50c <_dtoa_r+0x6b4>
 800a324:	d000      	beq.n	800a328 <_dtoa_r+0x4d0>
 800a326:	e282      	b.n	800a82e <_dtoa_r+0x9d6>
 800a328:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a32a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a32c:	2200      	movs	r2, #0
 800a32e:	4b74      	ldr	r3, [pc, #464]	; (800a500 <_dtoa_r+0x6a8>)
 800a330:	f7f7 f8e2 	bl	80014f8 <__aeabi_dmul>
 800a334:	9a08      	ldr	r2, [sp, #32]
 800a336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a338:	f7f6 f8aa 	bl	8000490 <__aeabi_dcmpge>
 800a33c:	9e07      	ldr	r6, [sp, #28]
 800a33e:	0035      	movs	r5, r6
 800a340:	2800      	cmp	r0, #0
 800a342:	d000      	beq.n	800a346 <_dtoa_r+0x4ee>
 800a344:	e259      	b.n	800a7fa <_dtoa_r+0x9a2>
 800a346:	9b06      	ldr	r3, [sp, #24]
 800a348:	9a06      	ldr	r2, [sp, #24]
 800a34a:	3301      	adds	r3, #1
 800a34c:	9308      	str	r3, [sp, #32]
 800a34e:	2331      	movs	r3, #49	; 0x31
 800a350:	7013      	strb	r3, [r2, #0]
 800a352:	9b02      	ldr	r3, [sp, #8]
 800a354:	3301      	adds	r3, #1
 800a356:	9302      	str	r3, [sp, #8]
 800a358:	e254      	b.n	800a804 <_dtoa_r+0x9ac>
 800a35a:	4234      	tst	r4, r6
 800a35c:	d007      	beq.n	800a36e <_dtoa_r+0x516>
 800a35e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a360:	3301      	adds	r3, #1
 800a362:	9310      	str	r3, [sp, #64]	; 0x40
 800a364:	682a      	ldr	r2, [r5, #0]
 800a366:	686b      	ldr	r3, [r5, #4]
 800a368:	f7f7 f8c6 	bl	80014f8 <__aeabi_dmul>
 800a36c:	0033      	movs	r3, r6
 800a36e:	1064      	asrs	r4, r4, #1
 800a370:	3508      	adds	r5, #8
 800a372:	e75a      	b.n	800a22a <_dtoa_r+0x3d2>
 800a374:	9e02      	ldr	r6, [sp, #8]
 800a376:	9b07      	ldr	r3, [sp, #28]
 800a378:	e780      	b.n	800a27c <_dtoa_r+0x424>
 800a37a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a37c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a37e:	1e5a      	subs	r2, r3, #1
 800a380:	4b59      	ldr	r3, [pc, #356]	; (800a4e8 <_dtoa_r+0x690>)
 800a382:	00d2      	lsls	r2, r2, #3
 800a384:	189b      	adds	r3, r3, r2
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	2900      	cmp	r1, #0
 800a38c:	d051      	beq.n	800a432 <_dtoa_r+0x5da>
 800a38e:	2000      	movs	r0, #0
 800a390:	495d      	ldr	r1, [pc, #372]	; (800a508 <_dtoa_r+0x6b0>)
 800a392:	f7f6 fcaf 	bl	8000cf4 <__aeabi_ddiv>
 800a396:	9a08      	ldr	r2, [sp, #32]
 800a398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a39a:	f7f7 fb19 	bl	80019d0 <__aeabi_dsub>
 800a39e:	9a06      	ldr	r2, [sp, #24]
 800a3a0:	9b06      	ldr	r3, [sp, #24]
 800a3a2:	4694      	mov	ip, r2
 800a3a4:	9317      	str	r3, [sp, #92]	; 0x5c
 800a3a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a3a8:	9010      	str	r0, [sp, #64]	; 0x40
 800a3aa:	9111      	str	r1, [sp, #68]	; 0x44
 800a3ac:	4463      	add	r3, ip
 800a3ae:	9319      	str	r3, [sp, #100]	; 0x64
 800a3b0:	0029      	movs	r1, r5
 800a3b2:	0020      	movs	r0, r4
 800a3b4:	f7f7 febc 	bl	8002130 <__aeabi_d2iz>
 800a3b8:	9014      	str	r0, [sp, #80]	; 0x50
 800a3ba:	f7f7 feef 	bl	800219c <__aeabi_i2d>
 800a3be:	0002      	movs	r2, r0
 800a3c0:	000b      	movs	r3, r1
 800a3c2:	0020      	movs	r0, r4
 800a3c4:	0029      	movs	r1, r5
 800a3c6:	f7f7 fb03 	bl	80019d0 <__aeabi_dsub>
 800a3ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	9308      	str	r3, [sp, #32]
 800a3d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a3d4:	0004      	movs	r4, r0
 800a3d6:	3330      	adds	r3, #48	; 0x30
 800a3d8:	7013      	strb	r3, [r2, #0]
 800a3da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a3dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a3de:	000d      	movs	r5, r1
 800a3e0:	f7f6 f838 	bl	8000454 <__aeabi_dcmplt>
 800a3e4:	2800      	cmp	r0, #0
 800a3e6:	d175      	bne.n	800a4d4 <_dtoa_r+0x67c>
 800a3e8:	0022      	movs	r2, r4
 800a3ea:	002b      	movs	r3, r5
 800a3ec:	2000      	movs	r0, #0
 800a3ee:	4940      	ldr	r1, [pc, #256]	; (800a4f0 <_dtoa_r+0x698>)
 800a3f0:	f7f7 faee 	bl	80019d0 <__aeabi_dsub>
 800a3f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a3f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a3f8:	f7f6 f82c 	bl	8000454 <__aeabi_dcmplt>
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	d000      	beq.n	800a402 <_dtoa_r+0x5aa>
 800a400:	e0d2      	b.n	800a5a8 <_dtoa_r+0x750>
 800a402:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a404:	9a08      	ldr	r2, [sp, #32]
 800a406:	4293      	cmp	r3, r2
 800a408:	d100      	bne.n	800a40c <_dtoa_r+0x5b4>
 800a40a:	e770      	b.n	800a2ee <_dtoa_r+0x496>
 800a40c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a40e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a410:	2200      	movs	r2, #0
 800a412:	4b38      	ldr	r3, [pc, #224]	; (800a4f4 <_dtoa_r+0x69c>)
 800a414:	f7f7 f870 	bl	80014f8 <__aeabi_dmul>
 800a418:	4b36      	ldr	r3, [pc, #216]	; (800a4f4 <_dtoa_r+0x69c>)
 800a41a:	9010      	str	r0, [sp, #64]	; 0x40
 800a41c:	9111      	str	r1, [sp, #68]	; 0x44
 800a41e:	2200      	movs	r2, #0
 800a420:	0020      	movs	r0, r4
 800a422:	0029      	movs	r1, r5
 800a424:	f7f7 f868 	bl	80014f8 <__aeabi_dmul>
 800a428:	9b08      	ldr	r3, [sp, #32]
 800a42a:	0004      	movs	r4, r0
 800a42c:	000d      	movs	r5, r1
 800a42e:	9317      	str	r3, [sp, #92]	; 0x5c
 800a430:	e7be      	b.n	800a3b0 <_dtoa_r+0x558>
 800a432:	9808      	ldr	r0, [sp, #32]
 800a434:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a436:	f7f7 f85f 	bl	80014f8 <__aeabi_dmul>
 800a43a:	9a06      	ldr	r2, [sp, #24]
 800a43c:	9b06      	ldr	r3, [sp, #24]
 800a43e:	4694      	mov	ip, r2
 800a440:	9308      	str	r3, [sp, #32]
 800a442:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a444:	9010      	str	r0, [sp, #64]	; 0x40
 800a446:	9111      	str	r1, [sp, #68]	; 0x44
 800a448:	4463      	add	r3, ip
 800a44a:	9319      	str	r3, [sp, #100]	; 0x64
 800a44c:	0029      	movs	r1, r5
 800a44e:	0020      	movs	r0, r4
 800a450:	f7f7 fe6e 	bl	8002130 <__aeabi_d2iz>
 800a454:	9017      	str	r0, [sp, #92]	; 0x5c
 800a456:	f7f7 fea1 	bl	800219c <__aeabi_i2d>
 800a45a:	0002      	movs	r2, r0
 800a45c:	000b      	movs	r3, r1
 800a45e:	0020      	movs	r0, r4
 800a460:	0029      	movs	r1, r5
 800a462:	f7f7 fab5 	bl	80019d0 <__aeabi_dsub>
 800a466:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a468:	9a08      	ldr	r2, [sp, #32]
 800a46a:	3330      	adds	r3, #48	; 0x30
 800a46c:	7013      	strb	r3, [r2, #0]
 800a46e:	0013      	movs	r3, r2
 800a470:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a472:	3301      	adds	r3, #1
 800a474:	0004      	movs	r4, r0
 800a476:	000d      	movs	r5, r1
 800a478:	9308      	str	r3, [sp, #32]
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d12c      	bne.n	800a4d8 <_dtoa_r+0x680>
 800a47e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a480:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a482:	9a06      	ldr	r2, [sp, #24]
 800a484:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a486:	4694      	mov	ip, r2
 800a488:	4463      	add	r3, ip
 800a48a:	2200      	movs	r2, #0
 800a48c:	9308      	str	r3, [sp, #32]
 800a48e:	4b1e      	ldr	r3, [pc, #120]	; (800a508 <_dtoa_r+0x6b0>)
 800a490:	f7f6 f8f4 	bl	800067c <__aeabi_dadd>
 800a494:	0002      	movs	r2, r0
 800a496:	000b      	movs	r3, r1
 800a498:	0020      	movs	r0, r4
 800a49a:	0029      	movs	r1, r5
 800a49c:	f7f5 ffee 	bl	800047c <__aeabi_dcmpgt>
 800a4a0:	2800      	cmp	r0, #0
 800a4a2:	d000      	beq.n	800a4a6 <_dtoa_r+0x64e>
 800a4a4:	e080      	b.n	800a5a8 <_dtoa_r+0x750>
 800a4a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a4a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4aa:	2000      	movs	r0, #0
 800a4ac:	4916      	ldr	r1, [pc, #88]	; (800a508 <_dtoa_r+0x6b0>)
 800a4ae:	f7f7 fa8f 	bl	80019d0 <__aeabi_dsub>
 800a4b2:	0002      	movs	r2, r0
 800a4b4:	000b      	movs	r3, r1
 800a4b6:	0020      	movs	r0, r4
 800a4b8:	0029      	movs	r1, r5
 800a4ba:	f7f5 ffcb 	bl	8000454 <__aeabi_dcmplt>
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	d100      	bne.n	800a4c4 <_dtoa_r+0x66c>
 800a4c2:	e714      	b.n	800a2ee <_dtoa_r+0x496>
 800a4c4:	9b08      	ldr	r3, [sp, #32]
 800a4c6:	001a      	movs	r2, r3
 800a4c8:	3a01      	subs	r2, #1
 800a4ca:	9208      	str	r2, [sp, #32]
 800a4cc:	7812      	ldrb	r2, [r2, #0]
 800a4ce:	2a30      	cmp	r2, #48	; 0x30
 800a4d0:	d0f8      	beq.n	800a4c4 <_dtoa_r+0x66c>
 800a4d2:	9308      	str	r3, [sp, #32]
 800a4d4:	9602      	str	r6, [sp, #8]
 800a4d6:	e055      	b.n	800a584 <_dtoa_r+0x72c>
 800a4d8:	2200      	movs	r2, #0
 800a4da:	4b06      	ldr	r3, [pc, #24]	; (800a4f4 <_dtoa_r+0x69c>)
 800a4dc:	f7f7 f80c 	bl	80014f8 <__aeabi_dmul>
 800a4e0:	0004      	movs	r4, r0
 800a4e2:	000d      	movs	r5, r1
 800a4e4:	e7b2      	b.n	800a44c <_dtoa_r+0x5f4>
 800a4e6:	46c0      	nop			; (mov r8, r8)
 800a4e8:	0800c4e0 	.word	0x0800c4e0
 800a4ec:	0800c4b8 	.word	0x0800c4b8
 800a4f0:	3ff00000 	.word	0x3ff00000
 800a4f4:	40240000 	.word	0x40240000
 800a4f8:	401c0000 	.word	0x401c0000
 800a4fc:	fcc00000 	.word	0xfcc00000
 800a500:	40140000 	.word	0x40140000
 800a504:	7cc00000 	.word	0x7cc00000
 800a508:	3fe00000 	.word	0x3fe00000
 800a50c:	9b07      	ldr	r3, [sp, #28]
 800a50e:	9e06      	ldr	r6, [sp, #24]
 800a510:	3b01      	subs	r3, #1
 800a512:	199b      	adds	r3, r3, r6
 800a514:	930c      	str	r3, [sp, #48]	; 0x30
 800a516:	9c08      	ldr	r4, [sp, #32]
 800a518:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a51a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a51c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a51e:	0020      	movs	r0, r4
 800a520:	0029      	movs	r1, r5
 800a522:	f7f6 fbe7 	bl	8000cf4 <__aeabi_ddiv>
 800a526:	f7f7 fe03 	bl	8002130 <__aeabi_d2iz>
 800a52a:	9007      	str	r0, [sp, #28]
 800a52c:	f7f7 fe36 	bl	800219c <__aeabi_i2d>
 800a530:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a534:	f7f6 ffe0 	bl	80014f8 <__aeabi_dmul>
 800a538:	0002      	movs	r2, r0
 800a53a:	000b      	movs	r3, r1
 800a53c:	0020      	movs	r0, r4
 800a53e:	0029      	movs	r1, r5
 800a540:	f7f7 fa46 	bl	80019d0 <__aeabi_dsub>
 800a544:	0033      	movs	r3, r6
 800a546:	9a07      	ldr	r2, [sp, #28]
 800a548:	3601      	adds	r6, #1
 800a54a:	3230      	adds	r2, #48	; 0x30
 800a54c:	701a      	strb	r2, [r3, #0]
 800a54e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a550:	9608      	str	r6, [sp, #32]
 800a552:	429a      	cmp	r2, r3
 800a554:	d139      	bne.n	800a5ca <_dtoa_r+0x772>
 800a556:	0002      	movs	r2, r0
 800a558:	000b      	movs	r3, r1
 800a55a:	f7f6 f88f 	bl	800067c <__aeabi_dadd>
 800a55e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a562:	0004      	movs	r4, r0
 800a564:	000d      	movs	r5, r1
 800a566:	f7f5 ff89 	bl	800047c <__aeabi_dcmpgt>
 800a56a:	2800      	cmp	r0, #0
 800a56c:	d11b      	bne.n	800a5a6 <_dtoa_r+0x74e>
 800a56e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a572:	0020      	movs	r0, r4
 800a574:	0029      	movs	r1, r5
 800a576:	f7f5 ff67 	bl	8000448 <__aeabi_dcmpeq>
 800a57a:	2800      	cmp	r0, #0
 800a57c:	d002      	beq.n	800a584 <_dtoa_r+0x72c>
 800a57e:	9b07      	ldr	r3, [sp, #28]
 800a580:	07db      	lsls	r3, r3, #31
 800a582:	d410      	bmi.n	800a5a6 <_dtoa_r+0x74e>
 800a584:	0038      	movs	r0, r7
 800a586:	9905      	ldr	r1, [sp, #20]
 800a588:	f000 fae6 	bl	800ab58 <_Bfree>
 800a58c:	2300      	movs	r3, #0
 800a58e:	9a08      	ldr	r2, [sp, #32]
 800a590:	9802      	ldr	r0, [sp, #8]
 800a592:	7013      	strb	r3, [r2, #0]
 800a594:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a596:	3001      	adds	r0, #1
 800a598:	6018      	str	r0, [r3, #0]
 800a59a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d100      	bne.n	800a5a2 <_dtoa_r+0x74a>
 800a5a0:	e4a6      	b.n	8009ef0 <_dtoa_r+0x98>
 800a5a2:	601a      	str	r2, [r3, #0]
 800a5a4:	e4a4      	b.n	8009ef0 <_dtoa_r+0x98>
 800a5a6:	9e02      	ldr	r6, [sp, #8]
 800a5a8:	9b08      	ldr	r3, [sp, #32]
 800a5aa:	9308      	str	r3, [sp, #32]
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	781a      	ldrb	r2, [r3, #0]
 800a5b0:	2a39      	cmp	r2, #57	; 0x39
 800a5b2:	d106      	bne.n	800a5c2 <_dtoa_r+0x76a>
 800a5b4:	9a06      	ldr	r2, [sp, #24]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d1f7      	bne.n	800a5aa <_dtoa_r+0x752>
 800a5ba:	2230      	movs	r2, #48	; 0x30
 800a5bc:	9906      	ldr	r1, [sp, #24]
 800a5be:	3601      	adds	r6, #1
 800a5c0:	700a      	strb	r2, [r1, #0]
 800a5c2:	781a      	ldrb	r2, [r3, #0]
 800a5c4:	3201      	adds	r2, #1
 800a5c6:	701a      	strb	r2, [r3, #0]
 800a5c8:	e784      	b.n	800a4d4 <_dtoa_r+0x67c>
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	4baa      	ldr	r3, [pc, #680]	; (800a878 <_dtoa_r+0xa20>)
 800a5ce:	f7f6 ff93 	bl	80014f8 <__aeabi_dmul>
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	0004      	movs	r4, r0
 800a5d8:	000d      	movs	r5, r1
 800a5da:	f7f5 ff35 	bl	8000448 <__aeabi_dcmpeq>
 800a5de:	2800      	cmp	r0, #0
 800a5e0:	d09b      	beq.n	800a51a <_dtoa_r+0x6c2>
 800a5e2:	e7cf      	b.n	800a584 <_dtoa_r+0x72c>
 800a5e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a5e6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a5e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a5ea:	2d00      	cmp	r5, #0
 800a5ec:	d012      	beq.n	800a614 <_dtoa_r+0x7bc>
 800a5ee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a5f0:	2a01      	cmp	r2, #1
 800a5f2:	dc66      	bgt.n	800a6c2 <_dtoa_r+0x86a>
 800a5f4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a5f6:	2a00      	cmp	r2, #0
 800a5f8:	d05d      	beq.n	800a6b6 <_dtoa_r+0x85e>
 800a5fa:	4aa0      	ldr	r2, [pc, #640]	; (800a87c <_dtoa_r+0xa24>)
 800a5fc:	189b      	adds	r3, r3, r2
 800a5fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a600:	2101      	movs	r1, #1
 800a602:	18d2      	adds	r2, r2, r3
 800a604:	920a      	str	r2, [sp, #40]	; 0x28
 800a606:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a608:	0038      	movs	r0, r7
 800a60a:	18d3      	adds	r3, r2, r3
 800a60c:	930d      	str	r3, [sp, #52]	; 0x34
 800a60e:	f000 fb53 	bl	800acb8 <__i2b>
 800a612:	0005      	movs	r5, r0
 800a614:	2c00      	cmp	r4, #0
 800a616:	dd0e      	ble.n	800a636 <_dtoa_r+0x7de>
 800a618:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	dd0b      	ble.n	800a636 <_dtoa_r+0x7de>
 800a61e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a620:	0023      	movs	r3, r4
 800a622:	4294      	cmp	r4, r2
 800a624:	dd00      	ble.n	800a628 <_dtoa_r+0x7d0>
 800a626:	0013      	movs	r3, r2
 800a628:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a62a:	1ae4      	subs	r4, r4, r3
 800a62c:	1ad2      	subs	r2, r2, r3
 800a62e:	920a      	str	r2, [sp, #40]	; 0x28
 800a630:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a632:	1ad3      	subs	r3, r2, r3
 800a634:	930d      	str	r3, [sp, #52]	; 0x34
 800a636:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d01f      	beq.n	800a67c <_dtoa_r+0x824>
 800a63c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d054      	beq.n	800a6ec <_dtoa_r+0x894>
 800a642:	2e00      	cmp	r6, #0
 800a644:	dd11      	ble.n	800a66a <_dtoa_r+0x812>
 800a646:	0029      	movs	r1, r5
 800a648:	0032      	movs	r2, r6
 800a64a:	0038      	movs	r0, r7
 800a64c:	f000 fbfa 	bl	800ae44 <__pow5mult>
 800a650:	9a05      	ldr	r2, [sp, #20]
 800a652:	0001      	movs	r1, r0
 800a654:	0005      	movs	r5, r0
 800a656:	0038      	movs	r0, r7
 800a658:	f000 fb44 	bl	800ace4 <__multiply>
 800a65c:	9905      	ldr	r1, [sp, #20]
 800a65e:	9014      	str	r0, [sp, #80]	; 0x50
 800a660:	0038      	movs	r0, r7
 800a662:	f000 fa79 	bl	800ab58 <_Bfree>
 800a666:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a668:	9305      	str	r3, [sp, #20]
 800a66a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a66c:	1b9a      	subs	r2, r3, r6
 800a66e:	42b3      	cmp	r3, r6
 800a670:	d004      	beq.n	800a67c <_dtoa_r+0x824>
 800a672:	0038      	movs	r0, r7
 800a674:	9905      	ldr	r1, [sp, #20]
 800a676:	f000 fbe5 	bl	800ae44 <__pow5mult>
 800a67a:	9005      	str	r0, [sp, #20]
 800a67c:	2101      	movs	r1, #1
 800a67e:	0038      	movs	r0, r7
 800a680:	f000 fb1a 	bl	800acb8 <__i2b>
 800a684:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a686:	0006      	movs	r6, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	dd31      	ble.n	800a6f0 <_dtoa_r+0x898>
 800a68c:	001a      	movs	r2, r3
 800a68e:	0001      	movs	r1, r0
 800a690:	0038      	movs	r0, r7
 800a692:	f000 fbd7 	bl	800ae44 <__pow5mult>
 800a696:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a698:	0006      	movs	r6, r0
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	dd2d      	ble.n	800a6fa <_dtoa_r+0x8a2>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	930e      	str	r3, [sp, #56]	; 0x38
 800a6a2:	6933      	ldr	r3, [r6, #16]
 800a6a4:	3303      	adds	r3, #3
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	18f3      	adds	r3, r6, r3
 800a6aa:	6858      	ldr	r0, [r3, #4]
 800a6ac:	f000 fabc 	bl	800ac28 <__hi0bits>
 800a6b0:	2320      	movs	r3, #32
 800a6b2:	1a18      	subs	r0, r3, r0
 800a6b4:	e039      	b.n	800a72a <_dtoa_r+0x8d2>
 800a6b6:	2336      	movs	r3, #54	; 0x36
 800a6b8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a6ba:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a6bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a6be:	1a9b      	subs	r3, r3, r2
 800a6c0:	e79d      	b.n	800a5fe <_dtoa_r+0x7a6>
 800a6c2:	9b07      	ldr	r3, [sp, #28]
 800a6c4:	1e5e      	subs	r6, r3, #1
 800a6c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6c8:	42b3      	cmp	r3, r6
 800a6ca:	db07      	blt.n	800a6dc <_dtoa_r+0x884>
 800a6cc:	1b9e      	subs	r6, r3, r6
 800a6ce:	9b07      	ldr	r3, [sp, #28]
 800a6d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	da93      	bge.n	800a5fe <_dtoa_r+0x7a6>
 800a6d6:	1ae4      	subs	r4, r4, r3
 800a6d8:	2300      	movs	r3, #0
 800a6da:	e790      	b.n	800a5fe <_dtoa_r+0x7a6>
 800a6dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6de:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a6e0:	1af3      	subs	r3, r6, r3
 800a6e2:	18d3      	adds	r3, r2, r3
 800a6e4:	960e      	str	r6, [sp, #56]	; 0x38
 800a6e6:	9315      	str	r3, [sp, #84]	; 0x54
 800a6e8:	2600      	movs	r6, #0
 800a6ea:	e7f0      	b.n	800a6ce <_dtoa_r+0x876>
 800a6ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6ee:	e7c0      	b.n	800a672 <_dtoa_r+0x81a>
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	930e      	str	r3, [sp, #56]	; 0x38
 800a6f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	dc13      	bgt.n	800a722 <_dtoa_r+0x8ca>
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	930e      	str	r3, [sp, #56]	; 0x38
 800a6fe:	9b08      	ldr	r3, [sp, #32]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d10e      	bne.n	800a722 <_dtoa_r+0x8ca>
 800a704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a706:	031b      	lsls	r3, r3, #12
 800a708:	d10b      	bne.n	800a722 <_dtoa_r+0x8ca>
 800a70a:	4b5d      	ldr	r3, [pc, #372]	; (800a880 <_dtoa_r+0xa28>)
 800a70c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a70e:	4213      	tst	r3, r2
 800a710:	d007      	beq.n	800a722 <_dtoa_r+0x8ca>
 800a712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a714:	3301      	adds	r3, #1
 800a716:	930a      	str	r3, [sp, #40]	; 0x28
 800a718:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a71a:	3301      	adds	r3, #1
 800a71c:	930d      	str	r3, [sp, #52]	; 0x34
 800a71e:	2301      	movs	r3, #1
 800a720:	930e      	str	r3, [sp, #56]	; 0x38
 800a722:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a724:	2001      	movs	r0, #1
 800a726:	2b00      	cmp	r3, #0
 800a728:	d1bb      	bne.n	800a6a2 <_dtoa_r+0x84a>
 800a72a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a72c:	221f      	movs	r2, #31
 800a72e:	1818      	adds	r0, r3, r0
 800a730:	0003      	movs	r3, r0
 800a732:	4013      	ands	r3, r2
 800a734:	4210      	tst	r0, r2
 800a736:	d046      	beq.n	800a7c6 <_dtoa_r+0x96e>
 800a738:	3201      	adds	r2, #1
 800a73a:	1ad2      	subs	r2, r2, r3
 800a73c:	2a04      	cmp	r2, #4
 800a73e:	dd3f      	ble.n	800a7c0 <_dtoa_r+0x968>
 800a740:	221c      	movs	r2, #28
 800a742:	1ad3      	subs	r3, r2, r3
 800a744:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a746:	18e4      	adds	r4, r4, r3
 800a748:	18d2      	adds	r2, r2, r3
 800a74a:	920a      	str	r2, [sp, #40]	; 0x28
 800a74c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a74e:	18d3      	adds	r3, r2, r3
 800a750:	930d      	str	r3, [sp, #52]	; 0x34
 800a752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a754:	2b00      	cmp	r3, #0
 800a756:	dd05      	ble.n	800a764 <_dtoa_r+0x90c>
 800a758:	001a      	movs	r2, r3
 800a75a:	0038      	movs	r0, r7
 800a75c:	9905      	ldr	r1, [sp, #20]
 800a75e:	f000 fbcd 	bl	800aefc <__lshift>
 800a762:	9005      	str	r0, [sp, #20]
 800a764:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a766:	2b00      	cmp	r3, #0
 800a768:	dd05      	ble.n	800a776 <_dtoa_r+0x91e>
 800a76a:	0031      	movs	r1, r6
 800a76c:	001a      	movs	r2, r3
 800a76e:	0038      	movs	r0, r7
 800a770:	f000 fbc4 	bl	800aefc <__lshift>
 800a774:	0006      	movs	r6, r0
 800a776:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d026      	beq.n	800a7ca <_dtoa_r+0x972>
 800a77c:	0031      	movs	r1, r6
 800a77e:	9805      	ldr	r0, [sp, #20]
 800a780:	f000 fc2a 	bl	800afd8 <__mcmp>
 800a784:	2800      	cmp	r0, #0
 800a786:	da20      	bge.n	800a7ca <_dtoa_r+0x972>
 800a788:	9b02      	ldr	r3, [sp, #8]
 800a78a:	220a      	movs	r2, #10
 800a78c:	3b01      	subs	r3, #1
 800a78e:	9302      	str	r3, [sp, #8]
 800a790:	0038      	movs	r0, r7
 800a792:	2300      	movs	r3, #0
 800a794:	9905      	ldr	r1, [sp, #20]
 800a796:	f000 fa03 	bl	800aba0 <__multadd>
 800a79a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a79c:	9005      	str	r0, [sp, #20]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d100      	bne.n	800a7a4 <_dtoa_r+0x94c>
 800a7a2:	e166      	b.n	800aa72 <_dtoa_r+0xc1a>
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	0029      	movs	r1, r5
 800a7a8:	220a      	movs	r2, #10
 800a7aa:	0038      	movs	r0, r7
 800a7ac:	f000 f9f8 	bl	800aba0 <__multadd>
 800a7b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7b2:	0005      	movs	r5, r0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	dc47      	bgt.n	800a848 <_dtoa_r+0x9f0>
 800a7b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a7ba:	2b02      	cmp	r3, #2
 800a7bc:	dc0d      	bgt.n	800a7da <_dtoa_r+0x982>
 800a7be:	e043      	b.n	800a848 <_dtoa_r+0x9f0>
 800a7c0:	2a04      	cmp	r2, #4
 800a7c2:	d0c6      	beq.n	800a752 <_dtoa_r+0x8fa>
 800a7c4:	0013      	movs	r3, r2
 800a7c6:	331c      	adds	r3, #28
 800a7c8:	e7bc      	b.n	800a744 <_dtoa_r+0x8ec>
 800a7ca:	9b07      	ldr	r3, [sp, #28]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	dc35      	bgt.n	800a83c <_dtoa_r+0x9e4>
 800a7d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	dd32      	ble.n	800a83c <_dtoa_r+0x9e4>
 800a7d6:	9b07      	ldr	r3, [sp, #28]
 800a7d8:	930c      	str	r3, [sp, #48]	; 0x30
 800a7da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d10c      	bne.n	800a7fa <_dtoa_r+0x9a2>
 800a7e0:	0031      	movs	r1, r6
 800a7e2:	2205      	movs	r2, #5
 800a7e4:	0038      	movs	r0, r7
 800a7e6:	f000 f9db 	bl	800aba0 <__multadd>
 800a7ea:	0006      	movs	r6, r0
 800a7ec:	0001      	movs	r1, r0
 800a7ee:	9805      	ldr	r0, [sp, #20]
 800a7f0:	f000 fbf2 	bl	800afd8 <__mcmp>
 800a7f4:	2800      	cmp	r0, #0
 800a7f6:	dd00      	ble.n	800a7fa <_dtoa_r+0x9a2>
 800a7f8:	e5a5      	b.n	800a346 <_dtoa_r+0x4ee>
 800a7fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a7fc:	43db      	mvns	r3, r3
 800a7fe:	9302      	str	r3, [sp, #8]
 800a800:	9b06      	ldr	r3, [sp, #24]
 800a802:	9308      	str	r3, [sp, #32]
 800a804:	2400      	movs	r4, #0
 800a806:	0031      	movs	r1, r6
 800a808:	0038      	movs	r0, r7
 800a80a:	f000 f9a5 	bl	800ab58 <_Bfree>
 800a80e:	2d00      	cmp	r5, #0
 800a810:	d100      	bne.n	800a814 <_dtoa_r+0x9bc>
 800a812:	e6b7      	b.n	800a584 <_dtoa_r+0x72c>
 800a814:	2c00      	cmp	r4, #0
 800a816:	d005      	beq.n	800a824 <_dtoa_r+0x9cc>
 800a818:	42ac      	cmp	r4, r5
 800a81a:	d003      	beq.n	800a824 <_dtoa_r+0x9cc>
 800a81c:	0021      	movs	r1, r4
 800a81e:	0038      	movs	r0, r7
 800a820:	f000 f99a 	bl	800ab58 <_Bfree>
 800a824:	0029      	movs	r1, r5
 800a826:	0038      	movs	r0, r7
 800a828:	f000 f996 	bl	800ab58 <_Bfree>
 800a82c:	e6aa      	b.n	800a584 <_dtoa_r+0x72c>
 800a82e:	2600      	movs	r6, #0
 800a830:	0035      	movs	r5, r6
 800a832:	e7e2      	b.n	800a7fa <_dtoa_r+0x9a2>
 800a834:	9602      	str	r6, [sp, #8]
 800a836:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800a838:	0035      	movs	r5, r6
 800a83a:	e584      	b.n	800a346 <_dtoa_r+0x4ee>
 800a83c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d100      	bne.n	800a844 <_dtoa_r+0x9ec>
 800a842:	e0ce      	b.n	800a9e2 <_dtoa_r+0xb8a>
 800a844:	9b07      	ldr	r3, [sp, #28]
 800a846:	930c      	str	r3, [sp, #48]	; 0x30
 800a848:	2c00      	cmp	r4, #0
 800a84a:	dd05      	ble.n	800a858 <_dtoa_r+0xa00>
 800a84c:	0029      	movs	r1, r5
 800a84e:	0022      	movs	r2, r4
 800a850:	0038      	movs	r0, r7
 800a852:	f000 fb53 	bl	800aefc <__lshift>
 800a856:	0005      	movs	r5, r0
 800a858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a85a:	0028      	movs	r0, r5
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d022      	beq.n	800a8a6 <_dtoa_r+0xa4e>
 800a860:	0038      	movs	r0, r7
 800a862:	6869      	ldr	r1, [r5, #4]
 800a864:	f000 f934 	bl	800aad0 <_Balloc>
 800a868:	1e04      	subs	r4, r0, #0
 800a86a:	d10f      	bne.n	800a88c <_dtoa_r+0xa34>
 800a86c:	0002      	movs	r2, r0
 800a86e:	4b05      	ldr	r3, [pc, #20]	; (800a884 <_dtoa_r+0xa2c>)
 800a870:	4905      	ldr	r1, [pc, #20]	; (800a888 <_dtoa_r+0xa30>)
 800a872:	f7ff fb06 	bl	8009e82 <_dtoa_r+0x2a>
 800a876:	46c0      	nop			; (mov r8, r8)
 800a878:	40240000 	.word	0x40240000
 800a87c:	00000433 	.word	0x00000433
 800a880:	7ff00000 	.word	0x7ff00000
 800a884:	0800c44b 	.word	0x0800c44b
 800a888:	000002ea 	.word	0x000002ea
 800a88c:	0029      	movs	r1, r5
 800a88e:	692b      	ldr	r3, [r5, #16]
 800a890:	310c      	adds	r1, #12
 800a892:	1c9a      	adds	r2, r3, #2
 800a894:	0092      	lsls	r2, r2, #2
 800a896:	300c      	adds	r0, #12
 800a898:	f000 f911 	bl	800aabe <memcpy>
 800a89c:	2201      	movs	r2, #1
 800a89e:	0021      	movs	r1, r4
 800a8a0:	0038      	movs	r0, r7
 800a8a2:	f000 fb2b 	bl	800aefc <__lshift>
 800a8a6:	9b06      	ldr	r3, [sp, #24]
 800a8a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8aa:	930a      	str	r3, [sp, #40]	; 0x28
 800a8ac:	3b01      	subs	r3, #1
 800a8ae:	189b      	adds	r3, r3, r2
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	002c      	movs	r4, r5
 800a8b4:	0005      	movs	r5, r0
 800a8b6:	9314      	str	r3, [sp, #80]	; 0x50
 800a8b8:	9b08      	ldr	r3, [sp, #32]
 800a8ba:	4013      	ands	r3, r2
 800a8bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8be:	0031      	movs	r1, r6
 800a8c0:	9805      	ldr	r0, [sp, #20]
 800a8c2:	f7ff fa3d 	bl	8009d40 <quorem>
 800a8c6:	0003      	movs	r3, r0
 800a8c8:	0021      	movs	r1, r4
 800a8ca:	3330      	adds	r3, #48	; 0x30
 800a8cc:	900d      	str	r0, [sp, #52]	; 0x34
 800a8ce:	9805      	ldr	r0, [sp, #20]
 800a8d0:	9307      	str	r3, [sp, #28]
 800a8d2:	f000 fb81 	bl	800afd8 <__mcmp>
 800a8d6:	002a      	movs	r2, r5
 800a8d8:	900e      	str	r0, [sp, #56]	; 0x38
 800a8da:	0031      	movs	r1, r6
 800a8dc:	0038      	movs	r0, r7
 800a8de:	f000 fb97 	bl	800b010 <__mdiff>
 800a8e2:	68c3      	ldr	r3, [r0, #12]
 800a8e4:	9008      	str	r0, [sp, #32]
 800a8e6:	9310      	str	r3, [sp, #64]	; 0x40
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	930c      	str	r3, [sp, #48]	; 0x30
 800a8ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d104      	bne.n	800a8fc <_dtoa_r+0xaa4>
 800a8f2:	0001      	movs	r1, r0
 800a8f4:	9805      	ldr	r0, [sp, #20]
 800a8f6:	f000 fb6f 	bl	800afd8 <__mcmp>
 800a8fa:	900c      	str	r0, [sp, #48]	; 0x30
 800a8fc:	0038      	movs	r0, r7
 800a8fe:	9908      	ldr	r1, [sp, #32]
 800a900:	f000 f92a 	bl	800ab58 <_Bfree>
 800a904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a906:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a908:	3301      	adds	r3, #1
 800a90a:	9308      	str	r3, [sp, #32]
 800a90c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a90e:	4313      	orrs	r3, r2
 800a910:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a912:	4313      	orrs	r3, r2
 800a914:	d10c      	bne.n	800a930 <_dtoa_r+0xad8>
 800a916:	9b07      	ldr	r3, [sp, #28]
 800a918:	2b39      	cmp	r3, #57	; 0x39
 800a91a:	d026      	beq.n	800a96a <_dtoa_r+0xb12>
 800a91c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a91e:	2b00      	cmp	r3, #0
 800a920:	dd02      	ble.n	800a928 <_dtoa_r+0xad0>
 800a922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a924:	3331      	adds	r3, #49	; 0x31
 800a926:	9307      	str	r3, [sp, #28]
 800a928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a92a:	9a07      	ldr	r2, [sp, #28]
 800a92c:	701a      	strb	r2, [r3, #0]
 800a92e:	e76a      	b.n	800a806 <_dtoa_r+0x9ae>
 800a930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a932:	2b00      	cmp	r3, #0
 800a934:	db04      	blt.n	800a940 <_dtoa_r+0xae8>
 800a936:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a938:	4313      	orrs	r3, r2
 800a93a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a93c:	4313      	orrs	r3, r2
 800a93e:	d11f      	bne.n	800a980 <_dtoa_r+0xb28>
 800a940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a942:	2b00      	cmp	r3, #0
 800a944:	ddf0      	ble.n	800a928 <_dtoa_r+0xad0>
 800a946:	9905      	ldr	r1, [sp, #20]
 800a948:	2201      	movs	r2, #1
 800a94a:	0038      	movs	r0, r7
 800a94c:	f000 fad6 	bl	800aefc <__lshift>
 800a950:	0031      	movs	r1, r6
 800a952:	9005      	str	r0, [sp, #20]
 800a954:	f000 fb40 	bl	800afd8 <__mcmp>
 800a958:	2800      	cmp	r0, #0
 800a95a:	dc03      	bgt.n	800a964 <_dtoa_r+0xb0c>
 800a95c:	d1e4      	bne.n	800a928 <_dtoa_r+0xad0>
 800a95e:	9b07      	ldr	r3, [sp, #28]
 800a960:	07db      	lsls	r3, r3, #31
 800a962:	d5e1      	bpl.n	800a928 <_dtoa_r+0xad0>
 800a964:	9b07      	ldr	r3, [sp, #28]
 800a966:	2b39      	cmp	r3, #57	; 0x39
 800a968:	d1db      	bne.n	800a922 <_dtoa_r+0xaca>
 800a96a:	2339      	movs	r3, #57	; 0x39
 800a96c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a96e:	7013      	strb	r3, [r2, #0]
 800a970:	9b08      	ldr	r3, [sp, #32]
 800a972:	9308      	str	r3, [sp, #32]
 800a974:	3b01      	subs	r3, #1
 800a976:	781a      	ldrb	r2, [r3, #0]
 800a978:	2a39      	cmp	r2, #57	; 0x39
 800a97a:	d068      	beq.n	800aa4e <_dtoa_r+0xbf6>
 800a97c:	3201      	adds	r2, #1
 800a97e:	e7d5      	b.n	800a92c <_dtoa_r+0xad4>
 800a980:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a982:	2b00      	cmp	r3, #0
 800a984:	dd07      	ble.n	800a996 <_dtoa_r+0xb3e>
 800a986:	9b07      	ldr	r3, [sp, #28]
 800a988:	2b39      	cmp	r3, #57	; 0x39
 800a98a:	d0ee      	beq.n	800a96a <_dtoa_r+0xb12>
 800a98c:	9b07      	ldr	r3, [sp, #28]
 800a98e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a990:	3301      	adds	r3, #1
 800a992:	7013      	strb	r3, [r2, #0]
 800a994:	e737      	b.n	800a806 <_dtoa_r+0x9ae>
 800a996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a998:	9a07      	ldr	r2, [sp, #28]
 800a99a:	701a      	strb	r2, [r3, #0]
 800a99c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a99e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d03e      	beq.n	800aa22 <_dtoa_r+0xbca>
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	220a      	movs	r2, #10
 800a9a8:	9905      	ldr	r1, [sp, #20]
 800a9aa:	0038      	movs	r0, r7
 800a9ac:	f000 f8f8 	bl	800aba0 <__multadd>
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	9005      	str	r0, [sp, #20]
 800a9b4:	220a      	movs	r2, #10
 800a9b6:	0021      	movs	r1, r4
 800a9b8:	0038      	movs	r0, r7
 800a9ba:	42ac      	cmp	r4, r5
 800a9bc:	d106      	bne.n	800a9cc <_dtoa_r+0xb74>
 800a9be:	f000 f8ef 	bl	800aba0 <__multadd>
 800a9c2:	0004      	movs	r4, r0
 800a9c4:	0005      	movs	r5, r0
 800a9c6:	9b08      	ldr	r3, [sp, #32]
 800a9c8:	930a      	str	r3, [sp, #40]	; 0x28
 800a9ca:	e778      	b.n	800a8be <_dtoa_r+0xa66>
 800a9cc:	f000 f8e8 	bl	800aba0 <__multadd>
 800a9d0:	0029      	movs	r1, r5
 800a9d2:	0004      	movs	r4, r0
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	220a      	movs	r2, #10
 800a9d8:	0038      	movs	r0, r7
 800a9da:	f000 f8e1 	bl	800aba0 <__multadd>
 800a9de:	0005      	movs	r5, r0
 800a9e0:	e7f1      	b.n	800a9c6 <_dtoa_r+0xb6e>
 800a9e2:	9b07      	ldr	r3, [sp, #28]
 800a9e4:	930c      	str	r3, [sp, #48]	; 0x30
 800a9e6:	2400      	movs	r4, #0
 800a9e8:	0031      	movs	r1, r6
 800a9ea:	9805      	ldr	r0, [sp, #20]
 800a9ec:	f7ff f9a8 	bl	8009d40 <quorem>
 800a9f0:	9b06      	ldr	r3, [sp, #24]
 800a9f2:	3030      	adds	r0, #48	; 0x30
 800a9f4:	5518      	strb	r0, [r3, r4]
 800a9f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9f8:	3401      	adds	r4, #1
 800a9fa:	9007      	str	r0, [sp, #28]
 800a9fc:	42a3      	cmp	r3, r4
 800a9fe:	dd07      	ble.n	800aa10 <_dtoa_r+0xbb8>
 800aa00:	2300      	movs	r3, #0
 800aa02:	220a      	movs	r2, #10
 800aa04:	0038      	movs	r0, r7
 800aa06:	9905      	ldr	r1, [sp, #20]
 800aa08:	f000 f8ca 	bl	800aba0 <__multadd>
 800aa0c:	9005      	str	r0, [sp, #20]
 800aa0e:	e7eb      	b.n	800a9e8 <_dtoa_r+0xb90>
 800aa10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa12:	2001      	movs	r0, #1
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	dd00      	ble.n	800aa1a <_dtoa_r+0xbc2>
 800aa18:	0018      	movs	r0, r3
 800aa1a:	2400      	movs	r4, #0
 800aa1c:	9b06      	ldr	r3, [sp, #24]
 800aa1e:	181b      	adds	r3, r3, r0
 800aa20:	9308      	str	r3, [sp, #32]
 800aa22:	9905      	ldr	r1, [sp, #20]
 800aa24:	2201      	movs	r2, #1
 800aa26:	0038      	movs	r0, r7
 800aa28:	f000 fa68 	bl	800aefc <__lshift>
 800aa2c:	0031      	movs	r1, r6
 800aa2e:	9005      	str	r0, [sp, #20]
 800aa30:	f000 fad2 	bl	800afd8 <__mcmp>
 800aa34:	2800      	cmp	r0, #0
 800aa36:	dc9b      	bgt.n	800a970 <_dtoa_r+0xb18>
 800aa38:	d102      	bne.n	800aa40 <_dtoa_r+0xbe8>
 800aa3a:	9b07      	ldr	r3, [sp, #28]
 800aa3c:	07db      	lsls	r3, r3, #31
 800aa3e:	d497      	bmi.n	800a970 <_dtoa_r+0xb18>
 800aa40:	9b08      	ldr	r3, [sp, #32]
 800aa42:	9308      	str	r3, [sp, #32]
 800aa44:	3b01      	subs	r3, #1
 800aa46:	781a      	ldrb	r2, [r3, #0]
 800aa48:	2a30      	cmp	r2, #48	; 0x30
 800aa4a:	d0fa      	beq.n	800aa42 <_dtoa_r+0xbea>
 800aa4c:	e6db      	b.n	800a806 <_dtoa_r+0x9ae>
 800aa4e:	9a06      	ldr	r2, [sp, #24]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d18e      	bne.n	800a972 <_dtoa_r+0xb1a>
 800aa54:	9b02      	ldr	r3, [sp, #8]
 800aa56:	3301      	adds	r3, #1
 800aa58:	9302      	str	r3, [sp, #8]
 800aa5a:	2331      	movs	r3, #49	; 0x31
 800aa5c:	e799      	b.n	800a992 <_dtoa_r+0xb3a>
 800aa5e:	4b09      	ldr	r3, [pc, #36]	; (800aa84 <_dtoa_r+0xc2c>)
 800aa60:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800aa62:	9306      	str	r3, [sp, #24]
 800aa64:	4b08      	ldr	r3, [pc, #32]	; (800aa88 <_dtoa_r+0xc30>)
 800aa66:	2a00      	cmp	r2, #0
 800aa68:	d001      	beq.n	800aa6e <_dtoa_r+0xc16>
 800aa6a:	f7ff fa3f 	bl	8009eec <_dtoa_r+0x94>
 800aa6e:	f7ff fa3f 	bl	8009ef0 <_dtoa_r+0x98>
 800aa72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	dcb6      	bgt.n	800a9e6 <_dtoa_r+0xb8e>
 800aa78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa7a:	2b02      	cmp	r3, #2
 800aa7c:	dd00      	ble.n	800aa80 <_dtoa_r+0xc28>
 800aa7e:	e6ac      	b.n	800a7da <_dtoa_r+0x982>
 800aa80:	e7b1      	b.n	800a9e6 <_dtoa_r+0xb8e>
 800aa82:	46c0      	nop			; (mov r8, r8)
 800aa84:	0800c3cc 	.word	0x0800c3cc
 800aa88:	0800c3d4 	.word	0x0800c3d4

0800aa8c <_localeconv_r>:
 800aa8c:	4800      	ldr	r0, [pc, #0]	; (800aa90 <_localeconv_r+0x4>)
 800aa8e:	4770      	bx	lr
 800aa90:	20000190 	.word	0x20000190

0800aa94 <malloc>:
 800aa94:	b510      	push	{r4, lr}
 800aa96:	4b03      	ldr	r3, [pc, #12]	; (800aaa4 <malloc+0x10>)
 800aa98:	0001      	movs	r1, r0
 800aa9a:	6818      	ldr	r0, [r3, #0]
 800aa9c:	f000 fc4c 	bl	800b338 <_malloc_r>
 800aaa0:	bd10      	pop	{r4, pc}
 800aaa2:	46c0      	nop			; (mov r8, r8)
 800aaa4:	2000003c 	.word	0x2000003c

0800aaa8 <memchr>:
 800aaa8:	b2c9      	uxtb	r1, r1
 800aaaa:	1882      	adds	r2, r0, r2
 800aaac:	4290      	cmp	r0, r2
 800aaae:	d101      	bne.n	800aab4 <memchr+0xc>
 800aab0:	2000      	movs	r0, #0
 800aab2:	4770      	bx	lr
 800aab4:	7803      	ldrb	r3, [r0, #0]
 800aab6:	428b      	cmp	r3, r1
 800aab8:	d0fb      	beq.n	800aab2 <memchr+0xa>
 800aaba:	3001      	adds	r0, #1
 800aabc:	e7f6      	b.n	800aaac <memchr+0x4>

0800aabe <memcpy>:
 800aabe:	2300      	movs	r3, #0
 800aac0:	b510      	push	{r4, lr}
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d100      	bne.n	800aac8 <memcpy+0xa>
 800aac6:	bd10      	pop	{r4, pc}
 800aac8:	5ccc      	ldrb	r4, [r1, r3]
 800aaca:	54c4      	strb	r4, [r0, r3]
 800aacc:	3301      	adds	r3, #1
 800aace:	e7f8      	b.n	800aac2 <memcpy+0x4>

0800aad0 <_Balloc>:
 800aad0:	b570      	push	{r4, r5, r6, lr}
 800aad2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aad4:	0006      	movs	r6, r0
 800aad6:	000c      	movs	r4, r1
 800aad8:	2d00      	cmp	r5, #0
 800aada:	d10e      	bne.n	800aafa <_Balloc+0x2a>
 800aadc:	2010      	movs	r0, #16
 800aade:	f7ff ffd9 	bl	800aa94 <malloc>
 800aae2:	1e02      	subs	r2, r0, #0
 800aae4:	6270      	str	r0, [r6, #36]	; 0x24
 800aae6:	d104      	bne.n	800aaf2 <_Balloc+0x22>
 800aae8:	2166      	movs	r1, #102	; 0x66
 800aaea:	4b19      	ldr	r3, [pc, #100]	; (800ab50 <_Balloc+0x80>)
 800aaec:	4819      	ldr	r0, [pc, #100]	; (800ab54 <_Balloc+0x84>)
 800aaee:	f000 fcab 	bl	800b448 <__assert_func>
 800aaf2:	6045      	str	r5, [r0, #4]
 800aaf4:	6085      	str	r5, [r0, #8]
 800aaf6:	6005      	str	r5, [r0, #0]
 800aaf8:	60c5      	str	r5, [r0, #12]
 800aafa:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800aafc:	68eb      	ldr	r3, [r5, #12]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d013      	beq.n	800ab2a <_Balloc+0x5a>
 800ab02:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ab04:	00a2      	lsls	r2, r4, #2
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	189b      	adds	r3, r3, r2
 800ab0a:	6818      	ldr	r0, [r3, #0]
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	d118      	bne.n	800ab42 <_Balloc+0x72>
 800ab10:	2101      	movs	r1, #1
 800ab12:	000d      	movs	r5, r1
 800ab14:	40a5      	lsls	r5, r4
 800ab16:	1d6a      	adds	r2, r5, #5
 800ab18:	0030      	movs	r0, r6
 800ab1a:	0092      	lsls	r2, r2, #2
 800ab1c:	f000 fb74 	bl	800b208 <_calloc_r>
 800ab20:	2800      	cmp	r0, #0
 800ab22:	d00c      	beq.n	800ab3e <_Balloc+0x6e>
 800ab24:	6044      	str	r4, [r0, #4]
 800ab26:	6085      	str	r5, [r0, #8]
 800ab28:	e00d      	b.n	800ab46 <_Balloc+0x76>
 800ab2a:	2221      	movs	r2, #33	; 0x21
 800ab2c:	2104      	movs	r1, #4
 800ab2e:	0030      	movs	r0, r6
 800ab30:	f000 fb6a 	bl	800b208 <_calloc_r>
 800ab34:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ab36:	60e8      	str	r0, [r5, #12]
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d1e1      	bne.n	800ab02 <_Balloc+0x32>
 800ab3e:	2000      	movs	r0, #0
 800ab40:	bd70      	pop	{r4, r5, r6, pc}
 800ab42:	6802      	ldr	r2, [r0, #0]
 800ab44:	601a      	str	r2, [r3, #0]
 800ab46:	2300      	movs	r3, #0
 800ab48:	6103      	str	r3, [r0, #16]
 800ab4a:	60c3      	str	r3, [r0, #12]
 800ab4c:	e7f8      	b.n	800ab40 <_Balloc+0x70>
 800ab4e:	46c0      	nop			; (mov r8, r8)
 800ab50:	0800c3d9 	.word	0x0800c3d9
 800ab54:	0800c45c 	.word	0x0800c45c

0800ab58 <_Bfree>:
 800ab58:	b570      	push	{r4, r5, r6, lr}
 800ab5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab5c:	0005      	movs	r5, r0
 800ab5e:	000c      	movs	r4, r1
 800ab60:	2e00      	cmp	r6, #0
 800ab62:	d10e      	bne.n	800ab82 <_Bfree+0x2a>
 800ab64:	2010      	movs	r0, #16
 800ab66:	f7ff ff95 	bl	800aa94 <malloc>
 800ab6a:	1e02      	subs	r2, r0, #0
 800ab6c:	6268      	str	r0, [r5, #36]	; 0x24
 800ab6e:	d104      	bne.n	800ab7a <_Bfree+0x22>
 800ab70:	218a      	movs	r1, #138	; 0x8a
 800ab72:	4b09      	ldr	r3, [pc, #36]	; (800ab98 <_Bfree+0x40>)
 800ab74:	4809      	ldr	r0, [pc, #36]	; (800ab9c <_Bfree+0x44>)
 800ab76:	f000 fc67 	bl	800b448 <__assert_func>
 800ab7a:	6046      	str	r6, [r0, #4]
 800ab7c:	6086      	str	r6, [r0, #8]
 800ab7e:	6006      	str	r6, [r0, #0]
 800ab80:	60c6      	str	r6, [r0, #12]
 800ab82:	2c00      	cmp	r4, #0
 800ab84:	d007      	beq.n	800ab96 <_Bfree+0x3e>
 800ab86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ab88:	6862      	ldr	r2, [r4, #4]
 800ab8a:	68db      	ldr	r3, [r3, #12]
 800ab8c:	0092      	lsls	r2, r2, #2
 800ab8e:	189b      	adds	r3, r3, r2
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	6022      	str	r2, [r4, #0]
 800ab94:	601c      	str	r4, [r3, #0]
 800ab96:	bd70      	pop	{r4, r5, r6, pc}
 800ab98:	0800c3d9 	.word	0x0800c3d9
 800ab9c:	0800c45c 	.word	0x0800c45c

0800aba0 <__multadd>:
 800aba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aba2:	000e      	movs	r6, r1
 800aba4:	9001      	str	r0, [sp, #4]
 800aba6:	000c      	movs	r4, r1
 800aba8:	001d      	movs	r5, r3
 800abaa:	2000      	movs	r0, #0
 800abac:	690f      	ldr	r7, [r1, #16]
 800abae:	3614      	adds	r6, #20
 800abb0:	6833      	ldr	r3, [r6, #0]
 800abb2:	3001      	adds	r0, #1
 800abb4:	b299      	uxth	r1, r3
 800abb6:	4351      	muls	r1, r2
 800abb8:	0c1b      	lsrs	r3, r3, #16
 800abba:	4353      	muls	r3, r2
 800abbc:	1949      	adds	r1, r1, r5
 800abbe:	0c0d      	lsrs	r5, r1, #16
 800abc0:	195b      	adds	r3, r3, r5
 800abc2:	0c1d      	lsrs	r5, r3, #16
 800abc4:	b289      	uxth	r1, r1
 800abc6:	041b      	lsls	r3, r3, #16
 800abc8:	185b      	adds	r3, r3, r1
 800abca:	c608      	stmia	r6!, {r3}
 800abcc:	4287      	cmp	r7, r0
 800abce:	dcef      	bgt.n	800abb0 <__multadd+0x10>
 800abd0:	2d00      	cmp	r5, #0
 800abd2:	d022      	beq.n	800ac1a <__multadd+0x7a>
 800abd4:	68a3      	ldr	r3, [r4, #8]
 800abd6:	42bb      	cmp	r3, r7
 800abd8:	dc19      	bgt.n	800ac0e <__multadd+0x6e>
 800abda:	6863      	ldr	r3, [r4, #4]
 800abdc:	9801      	ldr	r0, [sp, #4]
 800abde:	1c59      	adds	r1, r3, #1
 800abe0:	f7ff ff76 	bl	800aad0 <_Balloc>
 800abe4:	1e06      	subs	r6, r0, #0
 800abe6:	d105      	bne.n	800abf4 <__multadd+0x54>
 800abe8:	0002      	movs	r2, r0
 800abea:	21b5      	movs	r1, #181	; 0xb5
 800abec:	4b0c      	ldr	r3, [pc, #48]	; (800ac20 <__multadd+0x80>)
 800abee:	480d      	ldr	r0, [pc, #52]	; (800ac24 <__multadd+0x84>)
 800abf0:	f000 fc2a 	bl	800b448 <__assert_func>
 800abf4:	0021      	movs	r1, r4
 800abf6:	6923      	ldr	r3, [r4, #16]
 800abf8:	310c      	adds	r1, #12
 800abfa:	1c9a      	adds	r2, r3, #2
 800abfc:	0092      	lsls	r2, r2, #2
 800abfe:	300c      	adds	r0, #12
 800ac00:	f7ff ff5d 	bl	800aabe <memcpy>
 800ac04:	0021      	movs	r1, r4
 800ac06:	9801      	ldr	r0, [sp, #4]
 800ac08:	f7ff ffa6 	bl	800ab58 <_Bfree>
 800ac0c:	0034      	movs	r4, r6
 800ac0e:	1d3b      	adds	r3, r7, #4
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	18e3      	adds	r3, r4, r3
 800ac14:	605d      	str	r5, [r3, #4]
 800ac16:	1c7b      	adds	r3, r7, #1
 800ac18:	6123      	str	r3, [r4, #16]
 800ac1a:	0020      	movs	r0, r4
 800ac1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ac1e:	46c0      	nop			; (mov r8, r8)
 800ac20:	0800c44b 	.word	0x0800c44b
 800ac24:	0800c45c 	.word	0x0800c45c

0800ac28 <__hi0bits>:
 800ac28:	0003      	movs	r3, r0
 800ac2a:	0c02      	lsrs	r2, r0, #16
 800ac2c:	2000      	movs	r0, #0
 800ac2e:	4282      	cmp	r2, r0
 800ac30:	d101      	bne.n	800ac36 <__hi0bits+0xe>
 800ac32:	041b      	lsls	r3, r3, #16
 800ac34:	3010      	adds	r0, #16
 800ac36:	0e1a      	lsrs	r2, r3, #24
 800ac38:	d101      	bne.n	800ac3e <__hi0bits+0x16>
 800ac3a:	3008      	adds	r0, #8
 800ac3c:	021b      	lsls	r3, r3, #8
 800ac3e:	0f1a      	lsrs	r2, r3, #28
 800ac40:	d101      	bne.n	800ac46 <__hi0bits+0x1e>
 800ac42:	3004      	adds	r0, #4
 800ac44:	011b      	lsls	r3, r3, #4
 800ac46:	0f9a      	lsrs	r2, r3, #30
 800ac48:	d101      	bne.n	800ac4e <__hi0bits+0x26>
 800ac4a:	3002      	adds	r0, #2
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	db03      	blt.n	800ac5a <__hi0bits+0x32>
 800ac52:	3001      	adds	r0, #1
 800ac54:	005b      	lsls	r3, r3, #1
 800ac56:	d400      	bmi.n	800ac5a <__hi0bits+0x32>
 800ac58:	2020      	movs	r0, #32
 800ac5a:	4770      	bx	lr

0800ac5c <__lo0bits>:
 800ac5c:	6803      	ldr	r3, [r0, #0]
 800ac5e:	0002      	movs	r2, r0
 800ac60:	2107      	movs	r1, #7
 800ac62:	0018      	movs	r0, r3
 800ac64:	4008      	ands	r0, r1
 800ac66:	420b      	tst	r3, r1
 800ac68:	d00d      	beq.n	800ac86 <__lo0bits+0x2a>
 800ac6a:	3906      	subs	r1, #6
 800ac6c:	2000      	movs	r0, #0
 800ac6e:	420b      	tst	r3, r1
 800ac70:	d105      	bne.n	800ac7e <__lo0bits+0x22>
 800ac72:	3002      	adds	r0, #2
 800ac74:	4203      	tst	r3, r0
 800ac76:	d003      	beq.n	800ac80 <__lo0bits+0x24>
 800ac78:	40cb      	lsrs	r3, r1
 800ac7a:	0008      	movs	r0, r1
 800ac7c:	6013      	str	r3, [r2, #0]
 800ac7e:	4770      	bx	lr
 800ac80:	089b      	lsrs	r3, r3, #2
 800ac82:	6013      	str	r3, [r2, #0]
 800ac84:	e7fb      	b.n	800ac7e <__lo0bits+0x22>
 800ac86:	b299      	uxth	r1, r3
 800ac88:	2900      	cmp	r1, #0
 800ac8a:	d101      	bne.n	800ac90 <__lo0bits+0x34>
 800ac8c:	2010      	movs	r0, #16
 800ac8e:	0c1b      	lsrs	r3, r3, #16
 800ac90:	b2d9      	uxtb	r1, r3
 800ac92:	2900      	cmp	r1, #0
 800ac94:	d101      	bne.n	800ac9a <__lo0bits+0x3e>
 800ac96:	3008      	adds	r0, #8
 800ac98:	0a1b      	lsrs	r3, r3, #8
 800ac9a:	0719      	lsls	r1, r3, #28
 800ac9c:	d101      	bne.n	800aca2 <__lo0bits+0x46>
 800ac9e:	3004      	adds	r0, #4
 800aca0:	091b      	lsrs	r3, r3, #4
 800aca2:	0799      	lsls	r1, r3, #30
 800aca4:	d101      	bne.n	800acaa <__lo0bits+0x4e>
 800aca6:	3002      	adds	r0, #2
 800aca8:	089b      	lsrs	r3, r3, #2
 800acaa:	07d9      	lsls	r1, r3, #31
 800acac:	d4e9      	bmi.n	800ac82 <__lo0bits+0x26>
 800acae:	3001      	adds	r0, #1
 800acb0:	085b      	lsrs	r3, r3, #1
 800acb2:	d1e6      	bne.n	800ac82 <__lo0bits+0x26>
 800acb4:	2020      	movs	r0, #32
 800acb6:	e7e2      	b.n	800ac7e <__lo0bits+0x22>

0800acb8 <__i2b>:
 800acb8:	b510      	push	{r4, lr}
 800acba:	000c      	movs	r4, r1
 800acbc:	2101      	movs	r1, #1
 800acbe:	f7ff ff07 	bl	800aad0 <_Balloc>
 800acc2:	2800      	cmp	r0, #0
 800acc4:	d106      	bne.n	800acd4 <__i2b+0x1c>
 800acc6:	21a0      	movs	r1, #160	; 0xa0
 800acc8:	0002      	movs	r2, r0
 800acca:	4b04      	ldr	r3, [pc, #16]	; (800acdc <__i2b+0x24>)
 800accc:	4804      	ldr	r0, [pc, #16]	; (800ace0 <__i2b+0x28>)
 800acce:	0049      	lsls	r1, r1, #1
 800acd0:	f000 fbba 	bl	800b448 <__assert_func>
 800acd4:	2301      	movs	r3, #1
 800acd6:	6144      	str	r4, [r0, #20]
 800acd8:	6103      	str	r3, [r0, #16]
 800acda:	bd10      	pop	{r4, pc}
 800acdc:	0800c44b 	.word	0x0800c44b
 800ace0:	0800c45c 	.word	0x0800c45c

0800ace4 <__multiply>:
 800ace4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ace6:	690b      	ldr	r3, [r1, #16]
 800ace8:	0014      	movs	r4, r2
 800acea:	6912      	ldr	r2, [r2, #16]
 800acec:	000d      	movs	r5, r1
 800acee:	b089      	sub	sp, #36	; 0x24
 800acf0:	4293      	cmp	r3, r2
 800acf2:	da01      	bge.n	800acf8 <__multiply+0x14>
 800acf4:	0025      	movs	r5, r4
 800acf6:	000c      	movs	r4, r1
 800acf8:	692f      	ldr	r7, [r5, #16]
 800acfa:	6926      	ldr	r6, [r4, #16]
 800acfc:	6869      	ldr	r1, [r5, #4]
 800acfe:	19bb      	adds	r3, r7, r6
 800ad00:	9302      	str	r3, [sp, #8]
 800ad02:	68ab      	ldr	r3, [r5, #8]
 800ad04:	19ba      	adds	r2, r7, r6
 800ad06:	4293      	cmp	r3, r2
 800ad08:	da00      	bge.n	800ad0c <__multiply+0x28>
 800ad0a:	3101      	adds	r1, #1
 800ad0c:	f7ff fee0 	bl	800aad0 <_Balloc>
 800ad10:	9001      	str	r0, [sp, #4]
 800ad12:	2800      	cmp	r0, #0
 800ad14:	d106      	bne.n	800ad24 <__multiply+0x40>
 800ad16:	215e      	movs	r1, #94	; 0x5e
 800ad18:	0002      	movs	r2, r0
 800ad1a:	4b48      	ldr	r3, [pc, #288]	; (800ae3c <__multiply+0x158>)
 800ad1c:	4848      	ldr	r0, [pc, #288]	; (800ae40 <__multiply+0x15c>)
 800ad1e:	31ff      	adds	r1, #255	; 0xff
 800ad20:	f000 fb92 	bl	800b448 <__assert_func>
 800ad24:	9b01      	ldr	r3, [sp, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	3314      	adds	r3, #20
 800ad2a:	469c      	mov	ip, r3
 800ad2c:	19bb      	adds	r3, r7, r6
 800ad2e:	009b      	lsls	r3, r3, #2
 800ad30:	4463      	add	r3, ip
 800ad32:	9303      	str	r3, [sp, #12]
 800ad34:	4663      	mov	r3, ip
 800ad36:	9903      	ldr	r1, [sp, #12]
 800ad38:	428b      	cmp	r3, r1
 800ad3a:	d32c      	bcc.n	800ad96 <__multiply+0xb2>
 800ad3c:	002b      	movs	r3, r5
 800ad3e:	0022      	movs	r2, r4
 800ad40:	3314      	adds	r3, #20
 800ad42:	00bf      	lsls	r7, r7, #2
 800ad44:	3214      	adds	r2, #20
 800ad46:	9306      	str	r3, [sp, #24]
 800ad48:	00b6      	lsls	r6, r6, #2
 800ad4a:	19db      	adds	r3, r3, r7
 800ad4c:	9304      	str	r3, [sp, #16]
 800ad4e:	1993      	adds	r3, r2, r6
 800ad50:	9307      	str	r3, [sp, #28]
 800ad52:	2304      	movs	r3, #4
 800ad54:	9305      	str	r3, [sp, #20]
 800ad56:	002b      	movs	r3, r5
 800ad58:	9904      	ldr	r1, [sp, #16]
 800ad5a:	3315      	adds	r3, #21
 800ad5c:	9200      	str	r2, [sp, #0]
 800ad5e:	4299      	cmp	r1, r3
 800ad60:	d305      	bcc.n	800ad6e <__multiply+0x8a>
 800ad62:	1b4b      	subs	r3, r1, r5
 800ad64:	3b15      	subs	r3, #21
 800ad66:	089b      	lsrs	r3, r3, #2
 800ad68:	3301      	adds	r3, #1
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	9305      	str	r3, [sp, #20]
 800ad6e:	9b07      	ldr	r3, [sp, #28]
 800ad70:	9a00      	ldr	r2, [sp, #0]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d311      	bcc.n	800ad9a <__multiply+0xb6>
 800ad76:	9b02      	ldr	r3, [sp, #8]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	dd06      	ble.n	800ad8a <__multiply+0xa6>
 800ad7c:	9b03      	ldr	r3, [sp, #12]
 800ad7e:	3b04      	subs	r3, #4
 800ad80:	9303      	str	r3, [sp, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	9300      	str	r3, [sp, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d053      	beq.n	800ae32 <__multiply+0x14e>
 800ad8a:	9b01      	ldr	r3, [sp, #4]
 800ad8c:	9a02      	ldr	r2, [sp, #8]
 800ad8e:	0018      	movs	r0, r3
 800ad90:	611a      	str	r2, [r3, #16]
 800ad92:	b009      	add	sp, #36	; 0x24
 800ad94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad96:	c304      	stmia	r3!, {r2}
 800ad98:	e7cd      	b.n	800ad36 <__multiply+0x52>
 800ad9a:	9b00      	ldr	r3, [sp, #0]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	b298      	uxth	r0, r3
 800ada0:	2800      	cmp	r0, #0
 800ada2:	d01b      	beq.n	800addc <__multiply+0xf8>
 800ada4:	4667      	mov	r7, ip
 800ada6:	2400      	movs	r4, #0
 800ada8:	9e06      	ldr	r6, [sp, #24]
 800adaa:	ce02      	ldmia	r6!, {r1}
 800adac:	683a      	ldr	r2, [r7, #0]
 800adae:	b28b      	uxth	r3, r1
 800adb0:	4343      	muls	r3, r0
 800adb2:	b292      	uxth	r2, r2
 800adb4:	189b      	adds	r3, r3, r2
 800adb6:	191b      	adds	r3, r3, r4
 800adb8:	0c0c      	lsrs	r4, r1, #16
 800adba:	4344      	muls	r4, r0
 800adbc:	683a      	ldr	r2, [r7, #0]
 800adbe:	0c11      	lsrs	r1, r2, #16
 800adc0:	1861      	adds	r1, r4, r1
 800adc2:	0c1c      	lsrs	r4, r3, #16
 800adc4:	1909      	adds	r1, r1, r4
 800adc6:	0c0c      	lsrs	r4, r1, #16
 800adc8:	b29b      	uxth	r3, r3
 800adca:	0409      	lsls	r1, r1, #16
 800adcc:	430b      	orrs	r3, r1
 800adce:	c708      	stmia	r7!, {r3}
 800add0:	9b04      	ldr	r3, [sp, #16]
 800add2:	42b3      	cmp	r3, r6
 800add4:	d8e9      	bhi.n	800adaa <__multiply+0xc6>
 800add6:	4663      	mov	r3, ip
 800add8:	9a05      	ldr	r2, [sp, #20]
 800adda:	509c      	str	r4, [r3, r2]
 800addc:	9b00      	ldr	r3, [sp, #0]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	0c1e      	lsrs	r6, r3, #16
 800ade2:	d020      	beq.n	800ae26 <__multiply+0x142>
 800ade4:	4663      	mov	r3, ip
 800ade6:	002c      	movs	r4, r5
 800ade8:	4660      	mov	r0, ip
 800adea:	2700      	movs	r7, #0
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	3414      	adds	r4, #20
 800adf0:	6822      	ldr	r2, [r4, #0]
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	b291      	uxth	r1, r2
 800adf6:	4371      	muls	r1, r6
 800adf8:	6802      	ldr	r2, [r0, #0]
 800adfa:	0c12      	lsrs	r2, r2, #16
 800adfc:	1889      	adds	r1, r1, r2
 800adfe:	19cf      	adds	r7, r1, r7
 800ae00:	0439      	lsls	r1, r7, #16
 800ae02:	430b      	orrs	r3, r1
 800ae04:	6003      	str	r3, [r0, #0]
 800ae06:	cc02      	ldmia	r4!, {r1}
 800ae08:	6843      	ldr	r3, [r0, #4]
 800ae0a:	0c09      	lsrs	r1, r1, #16
 800ae0c:	4371      	muls	r1, r6
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	0c3f      	lsrs	r7, r7, #16
 800ae12:	18cb      	adds	r3, r1, r3
 800ae14:	9a04      	ldr	r2, [sp, #16]
 800ae16:	19db      	adds	r3, r3, r7
 800ae18:	0c1f      	lsrs	r7, r3, #16
 800ae1a:	3004      	adds	r0, #4
 800ae1c:	42a2      	cmp	r2, r4
 800ae1e:	d8e7      	bhi.n	800adf0 <__multiply+0x10c>
 800ae20:	4662      	mov	r2, ip
 800ae22:	9905      	ldr	r1, [sp, #20]
 800ae24:	5053      	str	r3, [r2, r1]
 800ae26:	9b00      	ldr	r3, [sp, #0]
 800ae28:	3304      	adds	r3, #4
 800ae2a:	9300      	str	r3, [sp, #0]
 800ae2c:	2304      	movs	r3, #4
 800ae2e:	449c      	add	ip, r3
 800ae30:	e79d      	b.n	800ad6e <__multiply+0x8a>
 800ae32:	9b02      	ldr	r3, [sp, #8]
 800ae34:	3b01      	subs	r3, #1
 800ae36:	9302      	str	r3, [sp, #8]
 800ae38:	e79d      	b.n	800ad76 <__multiply+0x92>
 800ae3a:	46c0      	nop			; (mov r8, r8)
 800ae3c:	0800c44b 	.word	0x0800c44b
 800ae40:	0800c45c 	.word	0x0800c45c

0800ae44 <__pow5mult>:
 800ae44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae46:	2303      	movs	r3, #3
 800ae48:	0015      	movs	r5, r2
 800ae4a:	0007      	movs	r7, r0
 800ae4c:	000e      	movs	r6, r1
 800ae4e:	401a      	ands	r2, r3
 800ae50:	421d      	tst	r5, r3
 800ae52:	d008      	beq.n	800ae66 <__pow5mult+0x22>
 800ae54:	4925      	ldr	r1, [pc, #148]	; (800aeec <__pow5mult+0xa8>)
 800ae56:	3a01      	subs	r2, #1
 800ae58:	0092      	lsls	r2, r2, #2
 800ae5a:	5852      	ldr	r2, [r2, r1]
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	0031      	movs	r1, r6
 800ae60:	f7ff fe9e 	bl	800aba0 <__multadd>
 800ae64:	0006      	movs	r6, r0
 800ae66:	10ad      	asrs	r5, r5, #2
 800ae68:	d03d      	beq.n	800aee6 <__pow5mult+0xa2>
 800ae6a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800ae6c:	2c00      	cmp	r4, #0
 800ae6e:	d10f      	bne.n	800ae90 <__pow5mult+0x4c>
 800ae70:	2010      	movs	r0, #16
 800ae72:	f7ff fe0f 	bl	800aa94 <malloc>
 800ae76:	1e02      	subs	r2, r0, #0
 800ae78:	6278      	str	r0, [r7, #36]	; 0x24
 800ae7a:	d105      	bne.n	800ae88 <__pow5mult+0x44>
 800ae7c:	21d7      	movs	r1, #215	; 0xd7
 800ae7e:	4b1c      	ldr	r3, [pc, #112]	; (800aef0 <__pow5mult+0xac>)
 800ae80:	481c      	ldr	r0, [pc, #112]	; (800aef4 <__pow5mult+0xb0>)
 800ae82:	0049      	lsls	r1, r1, #1
 800ae84:	f000 fae0 	bl	800b448 <__assert_func>
 800ae88:	6044      	str	r4, [r0, #4]
 800ae8a:	6084      	str	r4, [r0, #8]
 800ae8c:	6004      	str	r4, [r0, #0]
 800ae8e:	60c4      	str	r4, [r0, #12]
 800ae90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae92:	689c      	ldr	r4, [r3, #8]
 800ae94:	9301      	str	r3, [sp, #4]
 800ae96:	2c00      	cmp	r4, #0
 800ae98:	d108      	bne.n	800aeac <__pow5mult+0x68>
 800ae9a:	0038      	movs	r0, r7
 800ae9c:	4916      	ldr	r1, [pc, #88]	; (800aef8 <__pow5mult+0xb4>)
 800ae9e:	f7ff ff0b 	bl	800acb8 <__i2b>
 800aea2:	9b01      	ldr	r3, [sp, #4]
 800aea4:	0004      	movs	r4, r0
 800aea6:	6098      	str	r0, [r3, #8]
 800aea8:	2300      	movs	r3, #0
 800aeaa:	6003      	str	r3, [r0, #0]
 800aeac:	2301      	movs	r3, #1
 800aeae:	421d      	tst	r5, r3
 800aeb0:	d00a      	beq.n	800aec8 <__pow5mult+0x84>
 800aeb2:	0031      	movs	r1, r6
 800aeb4:	0022      	movs	r2, r4
 800aeb6:	0038      	movs	r0, r7
 800aeb8:	f7ff ff14 	bl	800ace4 <__multiply>
 800aebc:	0031      	movs	r1, r6
 800aebe:	9001      	str	r0, [sp, #4]
 800aec0:	0038      	movs	r0, r7
 800aec2:	f7ff fe49 	bl	800ab58 <_Bfree>
 800aec6:	9e01      	ldr	r6, [sp, #4]
 800aec8:	106d      	asrs	r5, r5, #1
 800aeca:	d00c      	beq.n	800aee6 <__pow5mult+0xa2>
 800aecc:	6820      	ldr	r0, [r4, #0]
 800aece:	2800      	cmp	r0, #0
 800aed0:	d107      	bne.n	800aee2 <__pow5mult+0x9e>
 800aed2:	0022      	movs	r2, r4
 800aed4:	0021      	movs	r1, r4
 800aed6:	0038      	movs	r0, r7
 800aed8:	f7ff ff04 	bl	800ace4 <__multiply>
 800aedc:	2300      	movs	r3, #0
 800aede:	6020      	str	r0, [r4, #0]
 800aee0:	6003      	str	r3, [r0, #0]
 800aee2:	0004      	movs	r4, r0
 800aee4:	e7e2      	b.n	800aeac <__pow5mult+0x68>
 800aee6:	0030      	movs	r0, r6
 800aee8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aeea:	46c0      	nop			; (mov r8, r8)
 800aeec:	0800c5a8 	.word	0x0800c5a8
 800aef0:	0800c3d9 	.word	0x0800c3d9
 800aef4:	0800c45c 	.word	0x0800c45c
 800aef8:	00000271 	.word	0x00000271

0800aefc <__lshift>:
 800aefc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aefe:	000c      	movs	r4, r1
 800af00:	0017      	movs	r7, r2
 800af02:	6923      	ldr	r3, [r4, #16]
 800af04:	1155      	asrs	r5, r2, #5
 800af06:	b087      	sub	sp, #28
 800af08:	18eb      	adds	r3, r5, r3
 800af0a:	9302      	str	r3, [sp, #8]
 800af0c:	3301      	adds	r3, #1
 800af0e:	9301      	str	r3, [sp, #4]
 800af10:	6849      	ldr	r1, [r1, #4]
 800af12:	68a3      	ldr	r3, [r4, #8]
 800af14:	9004      	str	r0, [sp, #16]
 800af16:	9a01      	ldr	r2, [sp, #4]
 800af18:	4293      	cmp	r3, r2
 800af1a:	db10      	blt.n	800af3e <__lshift+0x42>
 800af1c:	9804      	ldr	r0, [sp, #16]
 800af1e:	f7ff fdd7 	bl	800aad0 <_Balloc>
 800af22:	2300      	movs	r3, #0
 800af24:	0002      	movs	r2, r0
 800af26:	0006      	movs	r6, r0
 800af28:	0019      	movs	r1, r3
 800af2a:	3214      	adds	r2, #20
 800af2c:	4298      	cmp	r0, r3
 800af2e:	d10c      	bne.n	800af4a <__lshift+0x4e>
 800af30:	21da      	movs	r1, #218	; 0xda
 800af32:	0002      	movs	r2, r0
 800af34:	4b26      	ldr	r3, [pc, #152]	; (800afd0 <__lshift+0xd4>)
 800af36:	4827      	ldr	r0, [pc, #156]	; (800afd4 <__lshift+0xd8>)
 800af38:	31ff      	adds	r1, #255	; 0xff
 800af3a:	f000 fa85 	bl	800b448 <__assert_func>
 800af3e:	3101      	adds	r1, #1
 800af40:	005b      	lsls	r3, r3, #1
 800af42:	e7e8      	b.n	800af16 <__lshift+0x1a>
 800af44:	0098      	lsls	r0, r3, #2
 800af46:	5011      	str	r1, [r2, r0]
 800af48:	3301      	adds	r3, #1
 800af4a:	42ab      	cmp	r3, r5
 800af4c:	dbfa      	blt.n	800af44 <__lshift+0x48>
 800af4e:	43eb      	mvns	r3, r5
 800af50:	17db      	asrs	r3, r3, #31
 800af52:	401d      	ands	r5, r3
 800af54:	211f      	movs	r1, #31
 800af56:	0023      	movs	r3, r4
 800af58:	0038      	movs	r0, r7
 800af5a:	00ad      	lsls	r5, r5, #2
 800af5c:	1955      	adds	r5, r2, r5
 800af5e:	6922      	ldr	r2, [r4, #16]
 800af60:	3314      	adds	r3, #20
 800af62:	0092      	lsls	r2, r2, #2
 800af64:	4008      	ands	r0, r1
 800af66:	4684      	mov	ip, r0
 800af68:	189a      	adds	r2, r3, r2
 800af6a:	420f      	tst	r7, r1
 800af6c:	d02a      	beq.n	800afc4 <__lshift+0xc8>
 800af6e:	3101      	adds	r1, #1
 800af70:	1a09      	subs	r1, r1, r0
 800af72:	9105      	str	r1, [sp, #20]
 800af74:	2100      	movs	r1, #0
 800af76:	9503      	str	r5, [sp, #12]
 800af78:	4667      	mov	r7, ip
 800af7a:	6818      	ldr	r0, [r3, #0]
 800af7c:	40b8      	lsls	r0, r7
 800af7e:	4301      	orrs	r1, r0
 800af80:	9803      	ldr	r0, [sp, #12]
 800af82:	c002      	stmia	r0!, {r1}
 800af84:	cb02      	ldmia	r3!, {r1}
 800af86:	9003      	str	r0, [sp, #12]
 800af88:	9805      	ldr	r0, [sp, #20]
 800af8a:	40c1      	lsrs	r1, r0
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d8f3      	bhi.n	800af78 <__lshift+0x7c>
 800af90:	0020      	movs	r0, r4
 800af92:	3015      	adds	r0, #21
 800af94:	2304      	movs	r3, #4
 800af96:	4282      	cmp	r2, r0
 800af98:	d304      	bcc.n	800afa4 <__lshift+0xa8>
 800af9a:	1b13      	subs	r3, r2, r4
 800af9c:	3b15      	subs	r3, #21
 800af9e:	089b      	lsrs	r3, r3, #2
 800afa0:	3301      	adds	r3, #1
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	50e9      	str	r1, [r5, r3]
 800afa6:	2900      	cmp	r1, #0
 800afa8:	d002      	beq.n	800afb0 <__lshift+0xb4>
 800afaa:	9b02      	ldr	r3, [sp, #8]
 800afac:	3302      	adds	r3, #2
 800afae:	9301      	str	r3, [sp, #4]
 800afb0:	9b01      	ldr	r3, [sp, #4]
 800afb2:	9804      	ldr	r0, [sp, #16]
 800afb4:	3b01      	subs	r3, #1
 800afb6:	0021      	movs	r1, r4
 800afb8:	6133      	str	r3, [r6, #16]
 800afba:	f7ff fdcd 	bl	800ab58 <_Bfree>
 800afbe:	0030      	movs	r0, r6
 800afc0:	b007      	add	sp, #28
 800afc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afc4:	cb02      	ldmia	r3!, {r1}
 800afc6:	c502      	stmia	r5!, {r1}
 800afc8:	429a      	cmp	r2, r3
 800afca:	d8fb      	bhi.n	800afc4 <__lshift+0xc8>
 800afcc:	e7f0      	b.n	800afb0 <__lshift+0xb4>
 800afce:	46c0      	nop			; (mov r8, r8)
 800afd0:	0800c44b 	.word	0x0800c44b
 800afd4:	0800c45c 	.word	0x0800c45c

0800afd8 <__mcmp>:
 800afd8:	6902      	ldr	r2, [r0, #16]
 800afda:	690b      	ldr	r3, [r1, #16]
 800afdc:	b530      	push	{r4, r5, lr}
 800afde:	0004      	movs	r4, r0
 800afe0:	1ad0      	subs	r0, r2, r3
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d10d      	bne.n	800b002 <__mcmp+0x2a>
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	3414      	adds	r4, #20
 800afea:	3114      	adds	r1, #20
 800afec:	18e2      	adds	r2, r4, r3
 800afee:	18c9      	adds	r1, r1, r3
 800aff0:	3a04      	subs	r2, #4
 800aff2:	3904      	subs	r1, #4
 800aff4:	6815      	ldr	r5, [r2, #0]
 800aff6:	680b      	ldr	r3, [r1, #0]
 800aff8:	429d      	cmp	r5, r3
 800affa:	d003      	beq.n	800b004 <__mcmp+0x2c>
 800affc:	2001      	movs	r0, #1
 800affe:	429d      	cmp	r5, r3
 800b000:	d303      	bcc.n	800b00a <__mcmp+0x32>
 800b002:	bd30      	pop	{r4, r5, pc}
 800b004:	4294      	cmp	r4, r2
 800b006:	d3f3      	bcc.n	800aff0 <__mcmp+0x18>
 800b008:	e7fb      	b.n	800b002 <__mcmp+0x2a>
 800b00a:	4240      	negs	r0, r0
 800b00c:	e7f9      	b.n	800b002 <__mcmp+0x2a>
	...

0800b010 <__mdiff>:
 800b010:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b012:	000e      	movs	r6, r1
 800b014:	0007      	movs	r7, r0
 800b016:	0011      	movs	r1, r2
 800b018:	0030      	movs	r0, r6
 800b01a:	b087      	sub	sp, #28
 800b01c:	0014      	movs	r4, r2
 800b01e:	f7ff ffdb 	bl	800afd8 <__mcmp>
 800b022:	1e05      	subs	r5, r0, #0
 800b024:	d110      	bne.n	800b048 <__mdiff+0x38>
 800b026:	0001      	movs	r1, r0
 800b028:	0038      	movs	r0, r7
 800b02a:	f7ff fd51 	bl	800aad0 <_Balloc>
 800b02e:	1e02      	subs	r2, r0, #0
 800b030:	d104      	bne.n	800b03c <__mdiff+0x2c>
 800b032:	4b40      	ldr	r3, [pc, #256]	; (800b134 <__mdiff+0x124>)
 800b034:	4940      	ldr	r1, [pc, #256]	; (800b138 <__mdiff+0x128>)
 800b036:	4841      	ldr	r0, [pc, #260]	; (800b13c <__mdiff+0x12c>)
 800b038:	f000 fa06 	bl	800b448 <__assert_func>
 800b03c:	2301      	movs	r3, #1
 800b03e:	6145      	str	r5, [r0, #20]
 800b040:	6103      	str	r3, [r0, #16]
 800b042:	0010      	movs	r0, r2
 800b044:	b007      	add	sp, #28
 800b046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b048:	2301      	movs	r3, #1
 800b04a:	9301      	str	r3, [sp, #4]
 800b04c:	2800      	cmp	r0, #0
 800b04e:	db04      	blt.n	800b05a <__mdiff+0x4a>
 800b050:	0023      	movs	r3, r4
 800b052:	0034      	movs	r4, r6
 800b054:	001e      	movs	r6, r3
 800b056:	2300      	movs	r3, #0
 800b058:	9301      	str	r3, [sp, #4]
 800b05a:	0038      	movs	r0, r7
 800b05c:	6861      	ldr	r1, [r4, #4]
 800b05e:	f7ff fd37 	bl	800aad0 <_Balloc>
 800b062:	1e02      	subs	r2, r0, #0
 800b064:	d103      	bne.n	800b06e <__mdiff+0x5e>
 800b066:	2190      	movs	r1, #144	; 0x90
 800b068:	4b32      	ldr	r3, [pc, #200]	; (800b134 <__mdiff+0x124>)
 800b06a:	0089      	lsls	r1, r1, #2
 800b06c:	e7e3      	b.n	800b036 <__mdiff+0x26>
 800b06e:	9b01      	ldr	r3, [sp, #4]
 800b070:	2700      	movs	r7, #0
 800b072:	60c3      	str	r3, [r0, #12]
 800b074:	6920      	ldr	r0, [r4, #16]
 800b076:	3414      	adds	r4, #20
 800b078:	9401      	str	r4, [sp, #4]
 800b07a:	9b01      	ldr	r3, [sp, #4]
 800b07c:	0084      	lsls	r4, r0, #2
 800b07e:	191b      	adds	r3, r3, r4
 800b080:	0034      	movs	r4, r6
 800b082:	9302      	str	r3, [sp, #8]
 800b084:	6933      	ldr	r3, [r6, #16]
 800b086:	3414      	adds	r4, #20
 800b088:	0099      	lsls	r1, r3, #2
 800b08a:	1863      	adds	r3, r4, r1
 800b08c:	9303      	str	r3, [sp, #12]
 800b08e:	0013      	movs	r3, r2
 800b090:	3314      	adds	r3, #20
 800b092:	469c      	mov	ip, r3
 800b094:	9305      	str	r3, [sp, #20]
 800b096:	9b01      	ldr	r3, [sp, #4]
 800b098:	9304      	str	r3, [sp, #16]
 800b09a:	9b04      	ldr	r3, [sp, #16]
 800b09c:	cc02      	ldmia	r4!, {r1}
 800b09e:	cb20      	ldmia	r3!, {r5}
 800b0a0:	9304      	str	r3, [sp, #16]
 800b0a2:	b2ab      	uxth	r3, r5
 800b0a4:	19df      	adds	r7, r3, r7
 800b0a6:	b28b      	uxth	r3, r1
 800b0a8:	1afb      	subs	r3, r7, r3
 800b0aa:	0c09      	lsrs	r1, r1, #16
 800b0ac:	0c2d      	lsrs	r5, r5, #16
 800b0ae:	1a6d      	subs	r5, r5, r1
 800b0b0:	1419      	asrs	r1, r3, #16
 800b0b2:	186d      	adds	r5, r5, r1
 800b0b4:	4661      	mov	r1, ip
 800b0b6:	142f      	asrs	r7, r5, #16
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	042d      	lsls	r5, r5, #16
 800b0bc:	432b      	orrs	r3, r5
 800b0be:	c108      	stmia	r1!, {r3}
 800b0c0:	9b03      	ldr	r3, [sp, #12]
 800b0c2:	468c      	mov	ip, r1
 800b0c4:	42a3      	cmp	r3, r4
 800b0c6:	d8e8      	bhi.n	800b09a <__mdiff+0x8a>
 800b0c8:	0031      	movs	r1, r6
 800b0ca:	9c03      	ldr	r4, [sp, #12]
 800b0cc:	3115      	adds	r1, #21
 800b0ce:	2304      	movs	r3, #4
 800b0d0:	428c      	cmp	r4, r1
 800b0d2:	d304      	bcc.n	800b0de <__mdiff+0xce>
 800b0d4:	1ba3      	subs	r3, r4, r6
 800b0d6:	3b15      	subs	r3, #21
 800b0d8:	089b      	lsrs	r3, r3, #2
 800b0da:	3301      	adds	r3, #1
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	9901      	ldr	r1, [sp, #4]
 800b0e0:	18cc      	adds	r4, r1, r3
 800b0e2:	9905      	ldr	r1, [sp, #20]
 800b0e4:	0026      	movs	r6, r4
 800b0e6:	18cb      	adds	r3, r1, r3
 800b0e8:	469c      	mov	ip, r3
 800b0ea:	9902      	ldr	r1, [sp, #8]
 800b0ec:	428e      	cmp	r6, r1
 800b0ee:	d310      	bcc.n	800b112 <__mdiff+0x102>
 800b0f0:	9e02      	ldr	r6, [sp, #8]
 800b0f2:	1ee1      	subs	r1, r4, #3
 800b0f4:	2500      	movs	r5, #0
 800b0f6:	428e      	cmp	r6, r1
 800b0f8:	d304      	bcc.n	800b104 <__mdiff+0xf4>
 800b0fa:	0031      	movs	r1, r6
 800b0fc:	3103      	adds	r1, #3
 800b0fe:	1b0c      	subs	r4, r1, r4
 800b100:	08a4      	lsrs	r4, r4, #2
 800b102:	00a5      	lsls	r5, r4, #2
 800b104:	195b      	adds	r3, r3, r5
 800b106:	3b04      	subs	r3, #4
 800b108:	6819      	ldr	r1, [r3, #0]
 800b10a:	2900      	cmp	r1, #0
 800b10c:	d00f      	beq.n	800b12e <__mdiff+0x11e>
 800b10e:	6110      	str	r0, [r2, #16]
 800b110:	e797      	b.n	800b042 <__mdiff+0x32>
 800b112:	ce02      	ldmia	r6!, {r1}
 800b114:	b28d      	uxth	r5, r1
 800b116:	19ed      	adds	r5, r5, r7
 800b118:	0c0f      	lsrs	r7, r1, #16
 800b11a:	1429      	asrs	r1, r5, #16
 800b11c:	1879      	adds	r1, r7, r1
 800b11e:	140f      	asrs	r7, r1, #16
 800b120:	b2ad      	uxth	r5, r5
 800b122:	0409      	lsls	r1, r1, #16
 800b124:	430d      	orrs	r5, r1
 800b126:	4661      	mov	r1, ip
 800b128:	c120      	stmia	r1!, {r5}
 800b12a:	468c      	mov	ip, r1
 800b12c:	e7dd      	b.n	800b0ea <__mdiff+0xda>
 800b12e:	3801      	subs	r0, #1
 800b130:	e7e9      	b.n	800b106 <__mdiff+0xf6>
 800b132:	46c0      	nop			; (mov r8, r8)
 800b134:	0800c44b 	.word	0x0800c44b
 800b138:	00000232 	.word	0x00000232
 800b13c:	0800c45c 	.word	0x0800c45c

0800b140 <__d2b>:
 800b140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b142:	2101      	movs	r1, #1
 800b144:	0014      	movs	r4, r2
 800b146:	001e      	movs	r6, r3
 800b148:	9f08      	ldr	r7, [sp, #32]
 800b14a:	f7ff fcc1 	bl	800aad0 <_Balloc>
 800b14e:	1e05      	subs	r5, r0, #0
 800b150:	d105      	bne.n	800b15e <__d2b+0x1e>
 800b152:	0002      	movs	r2, r0
 800b154:	4b26      	ldr	r3, [pc, #152]	; (800b1f0 <__d2b+0xb0>)
 800b156:	4927      	ldr	r1, [pc, #156]	; (800b1f4 <__d2b+0xb4>)
 800b158:	4827      	ldr	r0, [pc, #156]	; (800b1f8 <__d2b+0xb8>)
 800b15a:	f000 f975 	bl	800b448 <__assert_func>
 800b15e:	0333      	lsls	r3, r6, #12
 800b160:	0076      	lsls	r6, r6, #1
 800b162:	0b1b      	lsrs	r3, r3, #12
 800b164:	0d76      	lsrs	r6, r6, #21
 800b166:	d124      	bne.n	800b1b2 <__d2b+0x72>
 800b168:	9301      	str	r3, [sp, #4]
 800b16a:	2c00      	cmp	r4, #0
 800b16c:	d027      	beq.n	800b1be <__d2b+0x7e>
 800b16e:	4668      	mov	r0, sp
 800b170:	9400      	str	r4, [sp, #0]
 800b172:	f7ff fd73 	bl	800ac5c <__lo0bits>
 800b176:	9c00      	ldr	r4, [sp, #0]
 800b178:	2800      	cmp	r0, #0
 800b17a:	d01e      	beq.n	800b1ba <__d2b+0x7a>
 800b17c:	9b01      	ldr	r3, [sp, #4]
 800b17e:	2120      	movs	r1, #32
 800b180:	001a      	movs	r2, r3
 800b182:	1a09      	subs	r1, r1, r0
 800b184:	408a      	lsls	r2, r1
 800b186:	40c3      	lsrs	r3, r0
 800b188:	4322      	orrs	r2, r4
 800b18a:	616a      	str	r2, [r5, #20]
 800b18c:	9301      	str	r3, [sp, #4]
 800b18e:	9c01      	ldr	r4, [sp, #4]
 800b190:	61ac      	str	r4, [r5, #24]
 800b192:	1e63      	subs	r3, r4, #1
 800b194:	419c      	sbcs	r4, r3
 800b196:	3401      	adds	r4, #1
 800b198:	612c      	str	r4, [r5, #16]
 800b19a:	2e00      	cmp	r6, #0
 800b19c:	d018      	beq.n	800b1d0 <__d2b+0x90>
 800b19e:	4b17      	ldr	r3, [pc, #92]	; (800b1fc <__d2b+0xbc>)
 800b1a0:	18f6      	adds	r6, r6, r3
 800b1a2:	2335      	movs	r3, #53	; 0x35
 800b1a4:	1836      	adds	r6, r6, r0
 800b1a6:	1a18      	subs	r0, r3, r0
 800b1a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1aa:	603e      	str	r6, [r7, #0]
 800b1ac:	6018      	str	r0, [r3, #0]
 800b1ae:	0028      	movs	r0, r5
 800b1b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b1b2:	2280      	movs	r2, #128	; 0x80
 800b1b4:	0352      	lsls	r2, r2, #13
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	e7d6      	b.n	800b168 <__d2b+0x28>
 800b1ba:	616c      	str	r4, [r5, #20]
 800b1bc:	e7e7      	b.n	800b18e <__d2b+0x4e>
 800b1be:	a801      	add	r0, sp, #4
 800b1c0:	f7ff fd4c 	bl	800ac5c <__lo0bits>
 800b1c4:	2401      	movs	r4, #1
 800b1c6:	9b01      	ldr	r3, [sp, #4]
 800b1c8:	612c      	str	r4, [r5, #16]
 800b1ca:	616b      	str	r3, [r5, #20]
 800b1cc:	3020      	adds	r0, #32
 800b1ce:	e7e4      	b.n	800b19a <__d2b+0x5a>
 800b1d0:	4b0b      	ldr	r3, [pc, #44]	; (800b200 <__d2b+0xc0>)
 800b1d2:	18c0      	adds	r0, r0, r3
 800b1d4:	4b0b      	ldr	r3, [pc, #44]	; (800b204 <__d2b+0xc4>)
 800b1d6:	6038      	str	r0, [r7, #0]
 800b1d8:	18e3      	adds	r3, r4, r3
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	18eb      	adds	r3, r5, r3
 800b1de:	6958      	ldr	r0, [r3, #20]
 800b1e0:	f7ff fd22 	bl	800ac28 <__hi0bits>
 800b1e4:	0164      	lsls	r4, r4, #5
 800b1e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1e8:	1a24      	subs	r4, r4, r0
 800b1ea:	601c      	str	r4, [r3, #0]
 800b1ec:	e7df      	b.n	800b1ae <__d2b+0x6e>
 800b1ee:	46c0      	nop			; (mov r8, r8)
 800b1f0:	0800c44b 	.word	0x0800c44b
 800b1f4:	0000030a 	.word	0x0000030a
 800b1f8:	0800c45c 	.word	0x0800c45c
 800b1fc:	fffffbcd 	.word	0xfffffbcd
 800b200:	fffffbce 	.word	0xfffffbce
 800b204:	3fffffff 	.word	0x3fffffff

0800b208 <_calloc_r>:
 800b208:	b570      	push	{r4, r5, r6, lr}
 800b20a:	0c13      	lsrs	r3, r2, #16
 800b20c:	0c0d      	lsrs	r5, r1, #16
 800b20e:	d11e      	bne.n	800b24e <_calloc_r+0x46>
 800b210:	2b00      	cmp	r3, #0
 800b212:	d10c      	bne.n	800b22e <_calloc_r+0x26>
 800b214:	b289      	uxth	r1, r1
 800b216:	b294      	uxth	r4, r2
 800b218:	434c      	muls	r4, r1
 800b21a:	0021      	movs	r1, r4
 800b21c:	f000 f88c 	bl	800b338 <_malloc_r>
 800b220:	1e05      	subs	r5, r0, #0
 800b222:	d01b      	beq.n	800b25c <_calloc_r+0x54>
 800b224:	0022      	movs	r2, r4
 800b226:	2100      	movs	r1, #0
 800b228:	f7fe f914 	bl	8009454 <memset>
 800b22c:	e016      	b.n	800b25c <_calloc_r+0x54>
 800b22e:	1c1d      	adds	r5, r3, #0
 800b230:	1c0b      	adds	r3, r1, #0
 800b232:	b292      	uxth	r2, r2
 800b234:	b289      	uxth	r1, r1
 800b236:	b29c      	uxth	r4, r3
 800b238:	4351      	muls	r1, r2
 800b23a:	b2ab      	uxth	r3, r5
 800b23c:	4363      	muls	r3, r4
 800b23e:	0c0c      	lsrs	r4, r1, #16
 800b240:	191c      	adds	r4, r3, r4
 800b242:	0c22      	lsrs	r2, r4, #16
 800b244:	d107      	bne.n	800b256 <_calloc_r+0x4e>
 800b246:	0424      	lsls	r4, r4, #16
 800b248:	b289      	uxth	r1, r1
 800b24a:	430c      	orrs	r4, r1
 800b24c:	e7e5      	b.n	800b21a <_calloc_r+0x12>
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d101      	bne.n	800b256 <_calloc_r+0x4e>
 800b252:	1c13      	adds	r3, r2, #0
 800b254:	e7ed      	b.n	800b232 <_calloc_r+0x2a>
 800b256:	230c      	movs	r3, #12
 800b258:	2500      	movs	r5, #0
 800b25a:	6003      	str	r3, [r0, #0]
 800b25c:	0028      	movs	r0, r5
 800b25e:	bd70      	pop	{r4, r5, r6, pc}

0800b260 <_free_r>:
 800b260:	b570      	push	{r4, r5, r6, lr}
 800b262:	0005      	movs	r5, r0
 800b264:	2900      	cmp	r1, #0
 800b266:	d010      	beq.n	800b28a <_free_r+0x2a>
 800b268:	1f0c      	subs	r4, r1, #4
 800b26a:	6823      	ldr	r3, [r4, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	da00      	bge.n	800b272 <_free_r+0x12>
 800b270:	18e4      	adds	r4, r4, r3
 800b272:	0028      	movs	r0, r5
 800b274:	f000 f928 	bl	800b4c8 <__malloc_lock>
 800b278:	4a1d      	ldr	r2, [pc, #116]	; (800b2f0 <_free_r+0x90>)
 800b27a:	6813      	ldr	r3, [r2, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d105      	bne.n	800b28c <_free_r+0x2c>
 800b280:	6063      	str	r3, [r4, #4]
 800b282:	6014      	str	r4, [r2, #0]
 800b284:	0028      	movs	r0, r5
 800b286:	f000 f927 	bl	800b4d8 <__malloc_unlock>
 800b28a:	bd70      	pop	{r4, r5, r6, pc}
 800b28c:	42a3      	cmp	r3, r4
 800b28e:	d908      	bls.n	800b2a2 <_free_r+0x42>
 800b290:	6821      	ldr	r1, [r4, #0]
 800b292:	1860      	adds	r0, r4, r1
 800b294:	4283      	cmp	r3, r0
 800b296:	d1f3      	bne.n	800b280 <_free_r+0x20>
 800b298:	6818      	ldr	r0, [r3, #0]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	1841      	adds	r1, r0, r1
 800b29e:	6021      	str	r1, [r4, #0]
 800b2a0:	e7ee      	b.n	800b280 <_free_r+0x20>
 800b2a2:	001a      	movs	r2, r3
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d001      	beq.n	800b2ae <_free_r+0x4e>
 800b2aa:	42a3      	cmp	r3, r4
 800b2ac:	d9f9      	bls.n	800b2a2 <_free_r+0x42>
 800b2ae:	6811      	ldr	r1, [r2, #0]
 800b2b0:	1850      	adds	r0, r2, r1
 800b2b2:	42a0      	cmp	r0, r4
 800b2b4:	d10b      	bne.n	800b2ce <_free_r+0x6e>
 800b2b6:	6820      	ldr	r0, [r4, #0]
 800b2b8:	1809      	adds	r1, r1, r0
 800b2ba:	1850      	adds	r0, r2, r1
 800b2bc:	6011      	str	r1, [r2, #0]
 800b2be:	4283      	cmp	r3, r0
 800b2c0:	d1e0      	bne.n	800b284 <_free_r+0x24>
 800b2c2:	6818      	ldr	r0, [r3, #0]
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	1841      	adds	r1, r0, r1
 800b2c8:	6011      	str	r1, [r2, #0]
 800b2ca:	6053      	str	r3, [r2, #4]
 800b2cc:	e7da      	b.n	800b284 <_free_r+0x24>
 800b2ce:	42a0      	cmp	r0, r4
 800b2d0:	d902      	bls.n	800b2d8 <_free_r+0x78>
 800b2d2:	230c      	movs	r3, #12
 800b2d4:	602b      	str	r3, [r5, #0]
 800b2d6:	e7d5      	b.n	800b284 <_free_r+0x24>
 800b2d8:	6821      	ldr	r1, [r4, #0]
 800b2da:	1860      	adds	r0, r4, r1
 800b2dc:	4283      	cmp	r3, r0
 800b2de:	d103      	bne.n	800b2e8 <_free_r+0x88>
 800b2e0:	6818      	ldr	r0, [r3, #0]
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	1841      	adds	r1, r0, r1
 800b2e6:	6021      	str	r1, [r4, #0]
 800b2e8:	6063      	str	r3, [r4, #4]
 800b2ea:	6054      	str	r4, [r2, #4]
 800b2ec:	e7ca      	b.n	800b284 <_free_r+0x24>
 800b2ee:	46c0      	nop			; (mov r8, r8)
 800b2f0:	2000055c 	.word	0x2000055c

0800b2f4 <sbrk_aligned>:
 800b2f4:	b570      	push	{r4, r5, r6, lr}
 800b2f6:	4e0f      	ldr	r6, [pc, #60]	; (800b334 <sbrk_aligned+0x40>)
 800b2f8:	000d      	movs	r5, r1
 800b2fa:	6831      	ldr	r1, [r6, #0]
 800b2fc:	0004      	movs	r4, r0
 800b2fe:	2900      	cmp	r1, #0
 800b300:	d102      	bne.n	800b308 <sbrk_aligned+0x14>
 800b302:	f000 f88f 	bl	800b424 <_sbrk_r>
 800b306:	6030      	str	r0, [r6, #0]
 800b308:	0029      	movs	r1, r5
 800b30a:	0020      	movs	r0, r4
 800b30c:	f000 f88a 	bl	800b424 <_sbrk_r>
 800b310:	1c43      	adds	r3, r0, #1
 800b312:	d00a      	beq.n	800b32a <sbrk_aligned+0x36>
 800b314:	2303      	movs	r3, #3
 800b316:	1cc5      	adds	r5, r0, #3
 800b318:	439d      	bics	r5, r3
 800b31a:	42a8      	cmp	r0, r5
 800b31c:	d007      	beq.n	800b32e <sbrk_aligned+0x3a>
 800b31e:	1a29      	subs	r1, r5, r0
 800b320:	0020      	movs	r0, r4
 800b322:	f000 f87f 	bl	800b424 <_sbrk_r>
 800b326:	1c43      	adds	r3, r0, #1
 800b328:	d101      	bne.n	800b32e <sbrk_aligned+0x3a>
 800b32a:	2501      	movs	r5, #1
 800b32c:	426d      	negs	r5, r5
 800b32e:	0028      	movs	r0, r5
 800b330:	bd70      	pop	{r4, r5, r6, pc}
 800b332:	46c0      	nop			; (mov r8, r8)
 800b334:	20000560 	.word	0x20000560

0800b338 <_malloc_r>:
 800b338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b33a:	2203      	movs	r2, #3
 800b33c:	1ccb      	adds	r3, r1, #3
 800b33e:	4393      	bics	r3, r2
 800b340:	3308      	adds	r3, #8
 800b342:	0006      	movs	r6, r0
 800b344:	001f      	movs	r7, r3
 800b346:	2b0c      	cmp	r3, #12
 800b348:	d232      	bcs.n	800b3b0 <_malloc_r+0x78>
 800b34a:	270c      	movs	r7, #12
 800b34c:	42b9      	cmp	r1, r7
 800b34e:	d831      	bhi.n	800b3b4 <_malloc_r+0x7c>
 800b350:	0030      	movs	r0, r6
 800b352:	f000 f8b9 	bl	800b4c8 <__malloc_lock>
 800b356:	4d32      	ldr	r5, [pc, #200]	; (800b420 <_malloc_r+0xe8>)
 800b358:	682b      	ldr	r3, [r5, #0]
 800b35a:	001c      	movs	r4, r3
 800b35c:	2c00      	cmp	r4, #0
 800b35e:	d12e      	bne.n	800b3be <_malloc_r+0x86>
 800b360:	0039      	movs	r1, r7
 800b362:	0030      	movs	r0, r6
 800b364:	f7ff ffc6 	bl	800b2f4 <sbrk_aligned>
 800b368:	0004      	movs	r4, r0
 800b36a:	1c43      	adds	r3, r0, #1
 800b36c:	d11e      	bne.n	800b3ac <_malloc_r+0x74>
 800b36e:	682c      	ldr	r4, [r5, #0]
 800b370:	0025      	movs	r5, r4
 800b372:	2d00      	cmp	r5, #0
 800b374:	d14a      	bne.n	800b40c <_malloc_r+0xd4>
 800b376:	6823      	ldr	r3, [r4, #0]
 800b378:	0029      	movs	r1, r5
 800b37a:	18e3      	adds	r3, r4, r3
 800b37c:	0030      	movs	r0, r6
 800b37e:	9301      	str	r3, [sp, #4]
 800b380:	f000 f850 	bl	800b424 <_sbrk_r>
 800b384:	9b01      	ldr	r3, [sp, #4]
 800b386:	4283      	cmp	r3, r0
 800b388:	d143      	bne.n	800b412 <_malloc_r+0xda>
 800b38a:	6823      	ldr	r3, [r4, #0]
 800b38c:	3703      	adds	r7, #3
 800b38e:	1aff      	subs	r7, r7, r3
 800b390:	2303      	movs	r3, #3
 800b392:	439f      	bics	r7, r3
 800b394:	3708      	adds	r7, #8
 800b396:	2f0c      	cmp	r7, #12
 800b398:	d200      	bcs.n	800b39c <_malloc_r+0x64>
 800b39a:	270c      	movs	r7, #12
 800b39c:	0039      	movs	r1, r7
 800b39e:	0030      	movs	r0, r6
 800b3a0:	f7ff ffa8 	bl	800b2f4 <sbrk_aligned>
 800b3a4:	1c43      	adds	r3, r0, #1
 800b3a6:	d034      	beq.n	800b412 <_malloc_r+0xda>
 800b3a8:	6823      	ldr	r3, [r4, #0]
 800b3aa:	19df      	adds	r7, r3, r7
 800b3ac:	6027      	str	r7, [r4, #0]
 800b3ae:	e013      	b.n	800b3d8 <_malloc_r+0xa0>
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	dacb      	bge.n	800b34c <_malloc_r+0x14>
 800b3b4:	230c      	movs	r3, #12
 800b3b6:	2500      	movs	r5, #0
 800b3b8:	6033      	str	r3, [r6, #0]
 800b3ba:	0028      	movs	r0, r5
 800b3bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b3be:	6822      	ldr	r2, [r4, #0]
 800b3c0:	1bd1      	subs	r1, r2, r7
 800b3c2:	d420      	bmi.n	800b406 <_malloc_r+0xce>
 800b3c4:	290b      	cmp	r1, #11
 800b3c6:	d917      	bls.n	800b3f8 <_malloc_r+0xc0>
 800b3c8:	19e2      	adds	r2, r4, r7
 800b3ca:	6027      	str	r7, [r4, #0]
 800b3cc:	42a3      	cmp	r3, r4
 800b3ce:	d111      	bne.n	800b3f4 <_malloc_r+0xbc>
 800b3d0:	602a      	str	r2, [r5, #0]
 800b3d2:	6863      	ldr	r3, [r4, #4]
 800b3d4:	6011      	str	r1, [r2, #0]
 800b3d6:	6053      	str	r3, [r2, #4]
 800b3d8:	0030      	movs	r0, r6
 800b3da:	0025      	movs	r5, r4
 800b3dc:	f000 f87c 	bl	800b4d8 <__malloc_unlock>
 800b3e0:	2207      	movs	r2, #7
 800b3e2:	350b      	adds	r5, #11
 800b3e4:	1d23      	adds	r3, r4, #4
 800b3e6:	4395      	bics	r5, r2
 800b3e8:	1aea      	subs	r2, r5, r3
 800b3ea:	429d      	cmp	r5, r3
 800b3ec:	d0e5      	beq.n	800b3ba <_malloc_r+0x82>
 800b3ee:	1b5b      	subs	r3, r3, r5
 800b3f0:	50a3      	str	r3, [r4, r2]
 800b3f2:	e7e2      	b.n	800b3ba <_malloc_r+0x82>
 800b3f4:	605a      	str	r2, [r3, #4]
 800b3f6:	e7ec      	b.n	800b3d2 <_malloc_r+0x9a>
 800b3f8:	6862      	ldr	r2, [r4, #4]
 800b3fa:	42a3      	cmp	r3, r4
 800b3fc:	d101      	bne.n	800b402 <_malloc_r+0xca>
 800b3fe:	602a      	str	r2, [r5, #0]
 800b400:	e7ea      	b.n	800b3d8 <_malloc_r+0xa0>
 800b402:	605a      	str	r2, [r3, #4]
 800b404:	e7e8      	b.n	800b3d8 <_malloc_r+0xa0>
 800b406:	0023      	movs	r3, r4
 800b408:	6864      	ldr	r4, [r4, #4]
 800b40a:	e7a7      	b.n	800b35c <_malloc_r+0x24>
 800b40c:	002c      	movs	r4, r5
 800b40e:	686d      	ldr	r5, [r5, #4]
 800b410:	e7af      	b.n	800b372 <_malloc_r+0x3a>
 800b412:	230c      	movs	r3, #12
 800b414:	0030      	movs	r0, r6
 800b416:	6033      	str	r3, [r6, #0]
 800b418:	f000 f85e 	bl	800b4d8 <__malloc_unlock>
 800b41c:	e7cd      	b.n	800b3ba <_malloc_r+0x82>
 800b41e:	46c0      	nop			; (mov r8, r8)
 800b420:	2000055c 	.word	0x2000055c

0800b424 <_sbrk_r>:
 800b424:	2300      	movs	r3, #0
 800b426:	b570      	push	{r4, r5, r6, lr}
 800b428:	4d06      	ldr	r5, [pc, #24]	; (800b444 <_sbrk_r+0x20>)
 800b42a:	0004      	movs	r4, r0
 800b42c:	0008      	movs	r0, r1
 800b42e:	602b      	str	r3, [r5, #0]
 800b430:	f7f9 faa8 	bl	8004984 <_sbrk>
 800b434:	1c43      	adds	r3, r0, #1
 800b436:	d103      	bne.n	800b440 <_sbrk_r+0x1c>
 800b438:	682b      	ldr	r3, [r5, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d000      	beq.n	800b440 <_sbrk_r+0x1c>
 800b43e:	6023      	str	r3, [r4, #0]
 800b440:	bd70      	pop	{r4, r5, r6, pc}
 800b442:	46c0      	nop			; (mov r8, r8)
 800b444:	20000564 	.word	0x20000564

0800b448 <__assert_func>:
 800b448:	b530      	push	{r4, r5, lr}
 800b44a:	0014      	movs	r4, r2
 800b44c:	001a      	movs	r2, r3
 800b44e:	4b09      	ldr	r3, [pc, #36]	; (800b474 <__assert_func+0x2c>)
 800b450:	0005      	movs	r5, r0
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	b085      	sub	sp, #20
 800b456:	68d8      	ldr	r0, [r3, #12]
 800b458:	4b07      	ldr	r3, [pc, #28]	; (800b478 <__assert_func+0x30>)
 800b45a:	2c00      	cmp	r4, #0
 800b45c:	d101      	bne.n	800b462 <__assert_func+0x1a>
 800b45e:	4b07      	ldr	r3, [pc, #28]	; (800b47c <__assert_func+0x34>)
 800b460:	001c      	movs	r4, r3
 800b462:	9301      	str	r3, [sp, #4]
 800b464:	9100      	str	r1, [sp, #0]
 800b466:	002b      	movs	r3, r5
 800b468:	4905      	ldr	r1, [pc, #20]	; (800b480 <__assert_func+0x38>)
 800b46a:	9402      	str	r4, [sp, #8]
 800b46c:	f000 f80a 	bl	800b484 <fiprintf>
 800b470:	f000 fa78 	bl	800b964 <abort>
 800b474:	2000003c 	.word	0x2000003c
 800b478:	0800c5b4 	.word	0x0800c5b4
 800b47c:	0800c5ef 	.word	0x0800c5ef
 800b480:	0800c5c1 	.word	0x0800c5c1

0800b484 <fiprintf>:
 800b484:	b40e      	push	{r1, r2, r3}
 800b486:	b503      	push	{r0, r1, lr}
 800b488:	0001      	movs	r1, r0
 800b48a:	ab03      	add	r3, sp, #12
 800b48c:	4804      	ldr	r0, [pc, #16]	; (800b4a0 <fiprintf+0x1c>)
 800b48e:	cb04      	ldmia	r3!, {r2}
 800b490:	6800      	ldr	r0, [r0, #0]
 800b492:	9301      	str	r3, [sp, #4]
 800b494:	f000 f850 	bl	800b538 <_vfiprintf_r>
 800b498:	b002      	add	sp, #8
 800b49a:	bc08      	pop	{r3}
 800b49c:	b003      	add	sp, #12
 800b49e:	4718      	bx	r3
 800b4a0:	2000003c 	.word	0x2000003c

0800b4a4 <__ascii_mbtowc>:
 800b4a4:	b082      	sub	sp, #8
 800b4a6:	2900      	cmp	r1, #0
 800b4a8:	d100      	bne.n	800b4ac <__ascii_mbtowc+0x8>
 800b4aa:	a901      	add	r1, sp, #4
 800b4ac:	1e10      	subs	r0, r2, #0
 800b4ae:	d006      	beq.n	800b4be <__ascii_mbtowc+0x1a>
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d006      	beq.n	800b4c2 <__ascii_mbtowc+0x1e>
 800b4b4:	7813      	ldrb	r3, [r2, #0]
 800b4b6:	600b      	str	r3, [r1, #0]
 800b4b8:	7810      	ldrb	r0, [r2, #0]
 800b4ba:	1e43      	subs	r3, r0, #1
 800b4bc:	4198      	sbcs	r0, r3
 800b4be:	b002      	add	sp, #8
 800b4c0:	4770      	bx	lr
 800b4c2:	2002      	movs	r0, #2
 800b4c4:	4240      	negs	r0, r0
 800b4c6:	e7fa      	b.n	800b4be <__ascii_mbtowc+0x1a>

0800b4c8 <__malloc_lock>:
 800b4c8:	b510      	push	{r4, lr}
 800b4ca:	4802      	ldr	r0, [pc, #8]	; (800b4d4 <__malloc_lock+0xc>)
 800b4cc:	f000 fc21 	bl	800bd12 <__retarget_lock_acquire_recursive>
 800b4d0:	bd10      	pop	{r4, pc}
 800b4d2:	46c0      	nop			; (mov r8, r8)
 800b4d4:	20000568 	.word	0x20000568

0800b4d8 <__malloc_unlock>:
 800b4d8:	b510      	push	{r4, lr}
 800b4da:	4802      	ldr	r0, [pc, #8]	; (800b4e4 <__malloc_unlock+0xc>)
 800b4dc:	f000 fc1a 	bl	800bd14 <__retarget_lock_release_recursive>
 800b4e0:	bd10      	pop	{r4, pc}
 800b4e2:	46c0      	nop			; (mov r8, r8)
 800b4e4:	20000568 	.word	0x20000568

0800b4e8 <__sfputc_r>:
 800b4e8:	6893      	ldr	r3, [r2, #8]
 800b4ea:	b510      	push	{r4, lr}
 800b4ec:	3b01      	subs	r3, #1
 800b4ee:	6093      	str	r3, [r2, #8]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	da04      	bge.n	800b4fe <__sfputc_r+0x16>
 800b4f4:	6994      	ldr	r4, [r2, #24]
 800b4f6:	42a3      	cmp	r3, r4
 800b4f8:	db07      	blt.n	800b50a <__sfputc_r+0x22>
 800b4fa:	290a      	cmp	r1, #10
 800b4fc:	d005      	beq.n	800b50a <__sfputc_r+0x22>
 800b4fe:	6813      	ldr	r3, [r2, #0]
 800b500:	1c58      	adds	r0, r3, #1
 800b502:	6010      	str	r0, [r2, #0]
 800b504:	7019      	strb	r1, [r3, #0]
 800b506:	0008      	movs	r0, r1
 800b508:	bd10      	pop	{r4, pc}
 800b50a:	f000 f94f 	bl	800b7ac <__swbuf_r>
 800b50e:	0001      	movs	r1, r0
 800b510:	e7f9      	b.n	800b506 <__sfputc_r+0x1e>

0800b512 <__sfputs_r>:
 800b512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b514:	0006      	movs	r6, r0
 800b516:	000f      	movs	r7, r1
 800b518:	0014      	movs	r4, r2
 800b51a:	18d5      	adds	r5, r2, r3
 800b51c:	42ac      	cmp	r4, r5
 800b51e:	d101      	bne.n	800b524 <__sfputs_r+0x12>
 800b520:	2000      	movs	r0, #0
 800b522:	e007      	b.n	800b534 <__sfputs_r+0x22>
 800b524:	7821      	ldrb	r1, [r4, #0]
 800b526:	003a      	movs	r2, r7
 800b528:	0030      	movs	r0, r6
 800b52a:	f7ff ffdd 	bl	800b4e8 <__sfputc_r>
 800b52e:	3401      	adds	r4, #1
 800b530:	1c43      	adds	r3, r0, #1
 800b532:	d1f3      	bne.n	800b51c <__sfputs_r+0xa>
 800b534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b538 <_vfiprintf_r>:
 800b538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b53a:	b0a1      	sub	sp, #132	; 0x84
 800b53c:	0006      	movs	r6, r0
 800b53e:	000c      	movs	r4, r1
 800b540:	001f      	movs	r7, r3
 800b542:	9203      	str	r2, [sp, #12]
 800b544:	2800      	cmp	r0, #0
 800b546:	d004      	beq.n	800b552 <_vfiprintf_r+0x1a>
 800b548:	6983      	ldr	r3, [r0, #24]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d101      	bne.n	800b552 <_vfiprintf_r+0x1a>
 800b54e:	f000 fb3f 	bl	800bbd0 <__sinit>
 800b552:	4b8e      	ldr	r3, [pc, #568]	; (800b78c <_vfiprintf_r+0x254>)
 800b554:	429c      	cmp	r4, r3
 800b556:	d11c      	bne.n	800b592 <_vfiprintf_r+0x5a>
 800b558:	6874      	ldr	r4, [r6, #4]
 800b55a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b55c:	07db      	lsls	r3, r3, #31
 800b55e:	d405      	bmi.n	800b56c <_vfiprintf_r+0x34>
 800b560:	89a3      	ldrh	r3, [r4, #12]
 800b562:	059b      	lsls	r3, r3, #22
 800b564:	d402      	bmi.n	800b56c <_vfiprintf_r+0x34>
 800b566:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b568:	f000 fbd3 	bl	800bd12 <__retarget_lock_acquire_recursive>
 800b56c:	89a3      	ldrh	r3, [r4, #12]
 800b56e:	071b      	lsls	r3, r3, #28
 800b570:	d502      	bpl.n	800b578 <_vfiprintf_r+0x40>
 800b572:	6923      	ldr	r3, [r4, #16]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d11d      	bne.n	800b5b4 <_vfiprintf_r+0x7c>
 800b578:	0021      	movs	r1, r4
 800b57a:	0030      	movs	r0, r6
 800b57c:	f000 f97a 	bl	800b874 <__swsetup_r>
 800b580:	2800      	cmp	r0, #0
 800b582:	d017      	beq.n	800b5b4 <_vfiprintf_r+0x7c>
 800b584:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b586:	07db      	lsls	r3, r3, #31
 800b588:	d50d      	bpl.n	800b5a6 <_vfiprintf_r+0x6e>
 800b58a:	2001      	movs	r0, #1
 800b58c:	4240      	negs	r0, r0
 800b58e:	b021      	add	sp, #132	; 0x84
 800b590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b592:	4b7f      	ldr	r3, [pc, #508]	; (800b790 <_vfiprintf_r+0x258>)
 800b594:	429c      	cmp	r4, r3
 800b596:	d101      	bne.n	800b59c <_vfiprintf_r+0x64>
 800b598:	68b4      	ldr	r4, [r6, #8]
 800b59a:	e7de      	b.n	800b55a <_vfiprintf_r+0x22>
 800b59c:	4b7d      	ldr	r3, [pc, #500]	; (800b794 <_vfiprintf_r+0x25c>)
 800b59e:	429c      	cmp	r4, r3
 800b5a0:	d1db      	bne.n	800b55a <_vfiprintf_r+0x22>
 800b5a2:	68f4      	ldr	r4, [r6, #12]
 800b5a4:	e7d9      	b.n	800b55a <_vfiprintf_r+0x22>
 800b5a6:	89a3      	ldrh	r3, [r4, #12]
 800b5a8:	059b      	lsls	r3, r3, #22
 800b5aa:	d4ee      	bmi.n	800b58a <_vfiprintf_r+0x52>
 800b5ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5ae:	f000 fbb1 	bl	800bd14 <__retarget_lock_release_recursive>
 800b5b2:	e7ea      	b.n	800b58a <_vfiprintf_r+0x52>
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	ad08      	add	r5, sp, #32
 800b5b8:	616b      	str	r3, [r5, #20]
 800b5ba:	3320      	adds	r3, #32
 800b5bc:	766b      	strb	r3, [r5, #25]
 800b5be:	3310      	adds	r3, #16
 800b5c0:	76ab      	strb	r3, [r5, #26]
 800b5c2:	9707      	str	r7, [sp, #28]
 800b5c4:	9f03      	ldr	r7, [sp, #12]
 800b5c6:	783b      	ldrb	r3, [r7, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d001      	beq.n	800b5d0 <_vfiprintf_r+0x98>
 800b5cc:	2b25      	cmp	r3, #37	; 0x25
 800b5ce:	d14e      	bne.n	800b66e <_vfiprintf_r+0x136>
 800b5d0:	9b03      	ldr	r3, [sp, #12]
 800b5d2:	1afb      	subs	r3, r7, r3
 800b5d4:	9305      	str	r3, [sp, #20]
 800b5d6:	9b03      	ldr	r3, [sp, #12]
 800b5d8:	429f      	cmp	r7, r3
 800b5da:	d00d      	beq.n	800b5f8 <_vfiprintf_r+0xc0>
 800b5dc:	9b05      	ldr	r3, [sp, #20]
 800b5de:	0021      	movs	r1, r4
 800b5e0:	0030      	movs	r0, r6
 800b5e2:	9a03      	ldr	r2, [sp, #12]
 800b5e4:	f7ff ff95 	bl	800b512 <__sfputs_r>
 800b5e8:	1c43      	adds	r3, r0, #1
 800b5ea:	d100      	bne.n	800b5ee <_vfiprintf_r+0xb6>
 800b5ec:	e0b5      	b.n	800b75a <_vfiprintf_r+0x222>
 800b5ee:	696a      	ldr	r2, [r5, #20]
 800b5f0:	9b05      	ldr	r3, [sp, #20]
 800b5f2:	4694      	mov	ip, r2
 800b5f4:	4463      	add	r3, ip
 800b5f6:	616b      	str	r3, [r5, #20]
 800b5f8:	783b      	ldrb	r3, [r7, #0]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d100      	bne.n	800b600 <_vfiprintf_r+0xc8>
 800b5fe:	e0ac      	b.n	800b75a <_vfiprintf_r+0x222>
 800b600:	2201      	movs	r2, #1
 800b602:	1c7b      	adds	r3, r7, #1
 800b604:	9303      	str	r3, [sp, #12]
 800b606:	2300      	movs	r3, #0
 800b608:	4252      	negs	r2, r2
 800b60a:	606a      	str	r2, [r5, #4]
 800b60c:	a904      	add	r1, sp, #16
 800b60e:	3254      	adds	r2, #84	; 0x54
 800b610:	1852      	adds	r2, r2, r1
 800b612:	602b      	str	r3, [r5, #0]
 800b614:	60eb      	str	r3, [r5, #12]
 800b616:	60ab      	str	r3, [r5, #8]
 800b618:	7013      	strb	r3, [r2, #0]
 800b61a:	65ab      	str	r3, [r5, #88]	; 0x58
 800b61c:	9b03      	ldr	r3, [sp, #12]
 800b61e:	2205      	movs	r2, #5
 800b620:	7819      	ldrb	r1, [r3, #0]
 800b622:	485d      	ldr	r0, [pc, #372]	; (800b798 <_vfiprintf_r+0x260>)
 800b624:	f7ff fa40 	bl	800aaa8 <memchr>
 800b628:	9b03      	ldr	r3, [sp, #12]
 800b62a:	1c5f      	adds	r7, r3, #1
 800b62c:	2800      	cmp	r0, #0
 800b62e:	d120      	bne.n	800b672 <_vfiprintf_r+0x13a>
 800b630:	682a      	ldr	r2, [r5, #0]
 800b632:	06d3      	lsls	r3, r2, #27
 800b634:	d504      	bpl.n	800b640 <_vfiprintf_r+0x108>
 800b636:	2353      	movs	r3, #83	; 0x53
 800b638:	a904      	add	r1, sp, #16
 800b63a:	185b      	adds	r3, r3, r1
 800b63c:	2120      	movs	r1, #32
 800b63e:	7019      	strb	r1, [r3, #0]
 800b640:	0713      	lsls	r3, r2, #28
 800b642:	d504      	bpl.n	800b64e <_vfiprintf_r+0x116>
 800b644:	2353      	movs	r3, #83	; 0x53
 800b646:	a904      	add	r1, sp, #16
 800b648:	185b      	adds	r3, r3, r1
 800b64a:	212b      	movs	r1, #43	; 0x2b
 800b64c:	7019      	strb	r1, [r3, #0]
 800b64e:	9b03      	ldr	r3, [sp, #12]
 800b650:	781b      	ldrb	r3, [r3, #0]
 800b652:	2b2a      	cmp	r3, #42	; 0x2a
 800b654:	d016      	beq.n	800b684 <_vfiprintf_r+0x14c>
 800b656:	2100      	movs	r1, #0
 800b658:	68eb      	ldr	r3, [r5, #12]
 800b65a:	9f03      	ldr	r7, [sp, #12]
 800b65c:	783a      	ldrb	r2, [r7, #0]
 800b65e:	1c78      	adds	r0, r7, #1
 800b660:	3a30      	subs	r2, #48	; 0x30
 800b662:	4684      	mov	ip, r0
 800b664:	2a09      	cmp	r2, #9
 800b666:	d94f      	bls.n	800b708 <_vfiprintf_r+0x1d0>
 800b668:	2900      	cmp	r1, #0
 800b66a:	d111      	bne.n	800b690 <_vfiprintf_r+0x158>
 800b66c:	e017      	b.n	800b69e <_vfiprintf_r+0x166>
 800b66e:	3701      	adds	r7, #1
 800b670:	e7a9      	b.n	800b5c6 <_vfiprintf_r+0x8e>
 800b672:	4b49      	ldr	r3, [pc, #292]	; (800b798 <_vfiprintf_r+0x260>)
 800b674:	682a      	ldr	r2, [r5, #0]
 800b676:	1ac0      	subs	r0, r0, r3
 800b678:	2301      	movs	r3, #1
 800b67a:	4083      	lsls	r3, r0
 800b67c:	4313      	orrs	r3, r2
 800b67e:	602b      	str	r3, [r5, #0]
 800b680:	9703      	str	r7, [sp, #12]
 800b682:	e7cb      	b.n	800b61c <_vfiprintf_r+0xe4>
 800b684:	9b07      	ldr	r3, [sp, #28]
 800b686:	1d19      	adds	r1, r3, #4
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	9107      	str	r1, [sp, #28]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	db01      	blt.n	800b694 <_vfiprintf_r+0x15c>
 800b690:	930b      	str	r3, [sp, #44]	; 0x2c
 800b692:	e004      	b.n	800b69e <_vfiprintf_r+0x166>
 800b694:	425b      	negs	r3, r3
 800b696:	60eb      	str	r3, [r5, #12]
 800b698:	2302      	movs	r3, #2
 800b69a:	4313      	orrs	r3, r2
 800b69c:	602b      	str	r3, [r5, #0]
 800b69e:	783b      	ldrb	r3, [r7, #0]
 800b6a0:	2b2e      	cmp	r3, #46	; 0x2e
 800b6a2:	d10a      	bne.n	800b6ba <_vfiprintf_r+0x182>
 800b6a4:	787b      	ldrb	r3, [r7, #1]
 800b6a6:	2b2a      	cmp	r3, #42	; 0x2a
 800b6a8:	d137      	bne.n	800b71a <_vfiprintf_r+0x1e2>
 800b6aa:	9b07      	ldr	r3, [sp, #28]
 800b6ac:	3702      	adds	r7, #2
 800b6ae:	1d1a      	adds	r2, r3, #4
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	9207      	str	r2, [sp, #28]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	db2d      	blt.n	800b714 <_vfiprintf_r+0x1dc>
 800b6b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b6ba:	2203      	movs	r2, #3
 800b6bc:	7839      	ldrb	r1, [r7, #0]
 800b6be:	4837      	ldr	r0, [pc, #220]	; (800b79c <_vfiprintf_r+0x264>)
 800b6c0:	f7ff f9f2 	bl	800aaa8 <memchr>
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	d007      	beq.n	800b6d8 <_vfiprintf_r+0x1a0>
 800b6c8:	4b34      	ldr	r3, [pc, #208]	; (800b79c <_vfiprintf_r+0x264>)
 800b6ca:	682a      	ldr	r2, [r5, #0]
 800b6cc:	1ac0      	subs	r0, r0, r3
 800b6ce:	2340      	movs	r3, #64	; 0x40
 800b6d0:	4083      	lsls	r3, r0
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	3701      	adds	r7, #1
 800b6d6:	602b      	str	r3, [r5, #0]
 800b6d8:	7839      	ldrb	r1, [r7, #0]
 800b6da:	1c7b      	adds	r3, r7, #1
 800b6dc:	2206      	movs	r2, #6
 800b6de:	4830      	ldr	r0, [pc, #192]	; (800b7a0 <_vfiprintf_r+0x268>)
 800b6e0:	9303      	str	r3, [sp, #12]
 800b6e2:	7629      	strb	r1, [r5, #24]
 800b6e4:	f7ff f9e0 	bl	800aaa8 <memchr>
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	d045      	beq.n	800b778 <_vfiprintf_r+0x240>
 800b6ec:	4b2d      	ldr	r3, [pc, #180]	; (800b7a4 <_vfiprintf_r+0x26c>)
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d127      	bne.n	800b742 <_vfiprintf_r+0x20a>
 800b6f2:	2207      	movs	r2, #7
 800b6f4:	9b07      	ldr	r3, [sp, #28]
 800b6f6:	3307      	adds	r3, #7
 800b6f8:	4393      	bics	r3, r2
 800b6fa:	3308      	adds	r3, #8
 800b6fc:	9307      	str	r3, [sp, #28]
 800b6fe:	696b      	ldr	r3, [r5, #20]
 800b700:	9a04      	ldr	r2, [sp, #16]
 800b702:	189b      	adds	r3, r3, r2
 800b704:	616b      	str	r3, [r5, #20]
 800b706:	e75d      	b.n	800b5c4 <_vfiprintf_r+0x8c>
 800b708:	210a      	movs	r1, #10
 800b70a:	434b      	muls	r3, r1
 800b70c:	4667      	mov	r7, ip
 800b70e:	189b      	adds	r3, r3, r2
 800b710:	3909      	subs	r1, #9
 800b712:	e7a3      	b.n	800b65c <_vfiprintf_r+0x124>
 800b714:	2301      	movs	r3, #1
 800b716:	425b      	negs	r3, r3
 800b718:	e7ce      	b.n	800b6b8 <_vfiprintf_r+0x180>
 800b71a:	2300      	movs	r3, #0
 800b71c:	001a      	movs	r2, r3
 800b71e:	3701      	adds	r7, #1
 800b720:	606b      	str	r3, [r5, #4]
 800b722:	7839      	ldrb	r1, [r7, #0]
 800b724:	1c78      	adds	r0, r7, #1
 800b726:	3930      	subs	r1, #48	; 0x30
 800b728:	4684      	mov	ip, r0
 800b72a:	2909      	cmp	r1, #9
 800b72c:	d903      	bls.n	800b736 <_vfiprintf_r+0x1fe>
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d0c3      	beq.n	800b6ba <_vfiprintf_r+0x182>
 800b732:	9209      	str	r2, [sp, #36]	; 0x24
 800b734:	e7c1      	b.n	800b6ba <_vfiprintf_r+0x182>
 800b736:	230a      	movs	r3, #10
 800b738:	435a      	muls	r2, r3
 800b73a:	4667      	mov	r7, ip
 800b73c:	1852      	adds	r2, r2, r1
 800b73e:	3b09      	subs	r3, #9
 800b740:	e7ef      	b.n	800b722 <_vfiprintf_r+0x1ea>
 800b742:	ab07      	add	r3, sp, #28
 800b744:	9300      	str	r3, [sp, #0]
 800b746:	0022      	movs	r2, r4
 800b748:	0029      	movs	r1, r5
 800b74a:	0030      	movs	r0, r6
 800b74c:	4b16      	ldr	r3, [pc, #88]	; (800b7a8 <_vfiprintf_r+0x270>)
 800b74e:	f7fd ff33 	bl	80095b8 <_printf_float>
 800b752:	9004      	str	r0, [sp, #16]
 800b754:	9b04      	ldr	r3, [sp, #16]
 800b756:	3301      	adds	r3, #1
 800b758:	d1d1      	bne.n	800b6fe <_vfiprintf_r+0x1c6>
 800b75a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b75c:	07db      	lsls	r3, r3, #31
 800b75e:	d405      	bmi.n	800b76c <_vfiprintf_r+0x234>
 800b760:	89a3      	ldrh	r3, [r4, #12]
 800b762:	059b      	lsls	r3, r3, #22
 800b764:	d402      	bmi.n	800b76c <_vfiprintf_r+0x234>
 800b766:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b768:	f000 fad4 	bl	800bd14 <__retarget_lock_release_recursive>
 800b76c:	89a3      	ldrh	r3, [r4, #12]
 800b76e:	065b      	lsls	r3, r3, #25
 800b770:	d500      	bpl.n	800b774 <_vfiprintf_r+0x23c>
 800b772:	e70a      	b.n	800b58a <_vfiprintf_r+0x52>
 800b774:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b776:	e70a      	b.n	800b58e <_vfiprintf_r+0x56>
 800b778:	ab07      	add	r3, sp, #28
 800b77a:	9300      	str	r3, [sp, #0]
 800b77c:	0022      	movs	r2, r4
 800b77e:	0029      	movs	r1, r5
 800b780:	0030      	movs	r0, r6
 800b782:	4b09      	ldr	r3, [pc, #36]	; (800b7a8 <_vfiprintf_r+0x270>)
 800b784:	f7fe f9ca 	bl	8009b1c <_printf_i>
 800b788:	e7e3      	b.n	800b752 <_vfiprintf_r+0x21a>
 800b78a:	46c0      	nop			; (mov r8, r8)
 800b78c:	0800c72c 	.word	0x0800c72c
 800b790:	0800c74c 	.word	0x0800c74c
 800b794:	0800c70c 	.word	0x0800c70c
 800b798:	0800c5fa 	.word	0x0800c5fa
 800b79c:	0800c600 	.word	0x0800c600
 800b7a0:	0800c604 	.word	0x0800c604
 800b7a4:	080095b9 	.word	0x080095b9
 800b7a8:	0800b513 	.word	0x0800b513

0800b7ac <__swbuf_r>:
 800b7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ae:	0005      	movs	r5, r0
 800b7b0:	000e      	movs	r6, r1
 800b7b2:	0014      	movs	r4, r2
 800b7b4:	2800      	cmp	r0, #0
 800b7b6:	d004      	beq.n	800b7c2 <__swbuf_r+0x16>
 800b7b8:	6983      	ldr	r3, [r0, #24]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d101      	bne.n	800b7c2 <__swbuf_r+0x16>
 800b7be:	f000 fa07 	bl	800bbd0 <__sinit>
 800b7c2:	4b22      	ldr	r3, [pc, #136]	; (800b84c <__swbuf_r+0xa0>)
 800b7c4:	429c      	cmp	r4, r3
 800b7c6:	d12e      	bne.n	800b826 <__swbuf_r+0x7a>
 800b7c8:	686c      	ldr	r4, [r5, #4]
 800b7ca:	69a3      	ldr	r3, [r4, #24]
 800b7cc:	60a3      	str	r3, [r4, #8]
 800b7ce:	89a3      	ldrh	r3, [r4, #12]
 800b7d0:	071b      	lsls	r3, r3, #28
 800b7d2:	d532      	bpl.n	800b83a <__swbuf_r+0x8e>
 800b7d4:	6923      	ldr	r3, [r4, #16]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d02f      	beq.n	800b83a <__swbuf_r+0x8e>
 800b7da:	6823      	ldr	r3, [r4, #0]
 800b7dc:	6922      	ldr	r2, [r4, #16]
 800b7de:	b2f7      	uxtb	r7, r6
 800b7e0:	1a98      	subs	r0, r3, r2
 800b7e2:	6963      	ldr	r3, [r4, #20]
 800b7e4:	b2f6      	uxtb	r6, r6
 800b7e6:	4283      	cmp	r3, r0
 800b7e8:	dc05      	bgt.n	800b7f6 <__swbuf_r+0x4a>
 800b7ea:	0021      	movs	r1, r4
 800b7ec:	0028      	movs	r0, r5
 800b7ee:	f000 f94d 	bl	800ba8c <_fflush_r>
 800b7f2:	2800      	cmp	r0, #0
 800b7f4:	d127      	bne.n	800b846 <__swbuf_r+0x9a>
 800b7f6:	68a3      	ldr	r3, [r4, #8]
 800b7f8:	3001      	adds	r0, #1
 800b7fa:	3b01      	subs	r3, #1
 800b7fc:	60a3      	str	r3, [r4, #8]
 800b7fe:	6823      	ldr	r3, [r4, #0]
 800b800:	1c5a      	adds	r2, r3, #1
 800b802:	6022      	str	r2, [r4, #0]
 800b804:	701f      	strb	r7, [r3, #0]
 800b806:	6963      	ldr	r3, [r4, #20]
 800b808:	4283      	cmp	r3, r0
 800b80a:	d004      	beq.n	800b816 <__swbuf_r+0x6a>
 800b80c:	89a3      	ldrh	r3, [r4, #12]
 800b80e:	07db      	lsls	r3, r3, #31
 800b810:	d507      	bpl.n	800b822 <__swbuf_r+0x76>
 800b812:	2e0a      	cmp	r6, #10
 800b814:	d105      	bne.n	800b822 <__swbuf_r+0x76>
 800b816:	0021      	movs	r1, r4
 800b818:	0028      	movs	r0, r5
 800b81a:	f000 f937 	bl	800ba8c <_fflush_r>
 800b81e:	2800      	cmp	r0, #0
 800b820:	d111      	bne.n	800b846 <__swbuf_r+0x9a>
 800b822:	0030      	movs	r0, r6
 800b824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b826:	4b0a      	ldr	r3, [pc, #40]	; (800b850 <__swbuf_r+0xa4>)
 800b828:	429c      	cmp	r4, r3
 800b82a:	d101      	bne.n	800b830 <__swbuf_r+0x84>
 800b82c:	68ac      	ldr	r4, [r5, #8]
 800b82e:	e7cc      	b.n	800b7ca <__swbuf_r+0x1e>
 800b830:	4b08      	ldr	r3, [pc, #32]	; (800b854 <__swbuf_r+0xa8>)
 800b832:	429c      	cmp	r4, r3
 800b834:	d1c9      	bne.n	800b7ca <__swbuf_r+0x1e>
 800b836:	68ec      	ldr	r4, [r5, #12]
 800b838:	e7c7      	b.n	800b7ca <__swbuf_r+0x1e>
 800b83a:	0021      	movs	r1, r4
 800b83c:	0028      	movs	r0, r5
 800b83e:	f000 f819 	bl	800b874 <__swsetup_r>
 800b842:	2800      	cmp	r0, #0
 800b844:	d0c9      	beq.n	800b7da <__swbuf_r+0x2e>
 800b846:	2601      	movs	r6, #1
 800b848:	4276      	negs	r6, r6
 800b84a:	e7ea      	b.n	800b822 <__swbuf_r+0x76>
 800b84c:	0800c72c 	.word	0x0800c72c
 800b850:	0800c74c 	.word	0x0800c74c
 800b854:	0800c70c 	.word	0x0800c70c

0800b858 <__ascii_wctomb>:
 800b858:	0003      	movs	r3, r0
 800b85a:	1e08      	subs	r0, r1, #0
 800b85c:	d005      	beq.n	800b86a <__ascii_wctomb+0x12>
 800b85e:	2aff      	cmp	r2, #255	; 0xff
 800b860:	d904      	bls.n	800b86c <__ascii_wctomb+0x14>
 800b862:	228a      	movs	r2, #138	; 0x8a
 800b864:	2001      	movs	r0, #1
 800b866:	601a      	str	r2, [r3, #0]
 800b868:	4240      	negs	r0, r0
 800b86a:	4770      	bx	lr
 800b86c:	2001      	movs	r0, #1
 800b86e:	700a      	strb	r2, [r1, #0]
 800b870:	e7fb      	b.n	800b86a <__ascii_wctomb+0x12>
	...

0800b874 <__swsetup_r>:
 800b874:	4b37      	ldr	r3, [pc, #220]	; (800b954 <__swsetup_r+0xe0>)
 800b876:	b570      	push	{r4, r5, r6, lr}
 800b878:	681d      	ldr	r5, [r3, #0]
 800b87a:	0006      	movs	r6, r0
 800b87c:	000c      	movs	r4, r1
 800b87e:	2d00      	cmp	r5, #0
 800b880:	d005      	beq.n	800b88e <__swsetup_r+0x1a>
 800b882:	69ab      	ldr	r3, [r5, #24]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d102      	bne.n	800b88e <__swsetup_r+0x1a>
 800b888:	0028      	movs	r0, r5
 800b88a:	f000 f9a1 	bl	800bbd0 <__sinit>
 800b88e:	4b32      	ldr	r3, [pc, #200]	; (800b958 <__swsetup_r+0xe4>)
 800b890:	429c      	cmp	r4, r3
 800b892:	d10f      	bne.n	800b8b4 <__swsetup_r+0x40>
 800b894:	686c      	ldr	r4, [r5, #4]
 800b896:	230c      	movs	r3, #12
 800b898:	5ee2      	ldrsh	r2, [r4, r3]
 800b89a:	b293      	uxth	r3, r2
 800b89c:	0711      	lsls	r1, r2, #28
 800b89e:	d42d      	bmi.n	800b8fc <__swsetup_r+0x88>
 800b8a0:	06d9      	lsls	r1, r3, #27
 800b8a2:	d411      	bmi.n	800b8c8 <__swsetup_r+0x54>
 800b8a4:	2309      	movs	r3, #9
 800b8a6:	2001      	movs	r0, #1
 800b8a8:	6033      	str	r3, [r6, #0]
 800b8aa:	3337      	adds	r3, #55	; 0x37
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	81a3      	strh	r3, [r4, #12]
 800b8b0:	4240      	negs	r0, r0
 800b8b2:	bd70      	pop	{r4, r5, r6, pc}
 800b8b4:	4b29      	ldr	r3, [pc, #164]	; (800b95c <__swsetup_r+0xe8>)
 800b8b6:	429c      	cmp	r4, r3
 800b8b8:	d101      	bne.n	800b8be <__swsetup_r+0x4a>
 800b8ba:	68ac      	ldr	r4, [r5, #8]
 800b8bc:	e7eb      	b.n	800b896 <__swsetup_r+0x22>
 800b8be:	4b28      	ldr	r3, [pc, #160]	; (800b960 <__swsetup_r+0xec>)
 800b8c0:	429c      	cmp	r4, r3
 800b8c2:	d1e8      	bne.n	800b896 <__swsetup_r+0x22>
 800b8c4:	68ec      	ldr	r4, [r5, #12]
 800b8c6:	e7e6      	b.n	800b896 <__swsetup_r+0x22>
 800b8c8:	075b      	lsls	r3, r3, #29
 800b8ca:	d513      	bpl.n	800b8f4 <__swsetup_r+0x80>
 800b8cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8ce:	2900      	cmp	r1, #0
 800b8d0:	d008      	beq.n	800b8e4 <__swsetup_r+0x70>
 800b8d2:	0023      	movs	r3, r4
 800b8d4:	3344      	adds	r3, #68	; 0x44
 800b8d6:	4299      	cmp	r1, r3
 800b8d8:	d002      	beq.n	800b8e0 <__swsetup_r+0x6c>
 800b8da:	0030      	movs	r0, r6
 800b8dc:	f7ff fcc0 	bl	800b260 <_free_r>
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	6363      	str	r3, [r4, #52]	; 0x34
 800b8e4:	2224      	movs	r2, #36	; 0x24
 800b8e6:	89a3      	ldrh	r3, [r4, #12]
 800b8e8:	4393      	bics	r3, r2
 800b8ea:	81a3      	strh	r3, [r4, #12]
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	6063      	str	r3, [r4, #4]
 800b8f0:	6923      	ldr	r3, [r4, #16]
 800b8f2:	6023      	str	r3, [r4, #0]
 800b8f4:	2308      	movs	r3, #8
 800b8f6:	89a2      	ldrh	r2, [r4, #12]
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	81a3      	strh	r3, [r4, #12]
 800b8fc:	6923      	ldr	r3, [r4, #16]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d10b      	bne.n	800b91a <__swsetup_r+0xa6>
 800b902:	21a0      	movs	r1, #160	; 0xa0
 800b904:	2280      	movs	r2, #128	; 0x80
 800b906:	89a3      	ldrh	r3, [r4, #12]
 800b908:	0089      	lsls	r1, r1, #2
 800b90a:	0092      	lsls	r2, r2, #2
 800b90c:	400b      	ands	r3, r1
 800b90e:	4293      	cmp	r3, r2
 800b910:	d003      	beq.n	800b91a <__swsetup_r+0xa6>
 800b912:	0021      	movs	r1, r4
 800b914:	0030      	movs	r0, r6
 800b916:	f000 fa27 	bl	800bd68 <__smakebuf_r>
 800b91a:	220c      	movs	r2, #12
 800b91c:	5ea3      	ldrsh	r3, [r4, r2]
 800b91e:	2001      	movs	r0, #1
 800b920:	001a      	movs	r2, r3
 800b922:	b299      	uxth	r1, r3
 800b924:	4002      	ands	r2, r0
 800b926:	4203      	tst	r3, r0
 800b928:	d00f      	beq.n	800b94a <__swsetup_r+0xd6>
 800b92a:	2200      	movs	r2, #0
 800b92c:	60a2      	str	r2, [r4, #8]
 800b92e:	6962      	ldr	r2, [r4, #20]
 800b930:	4252      	negs	r2, r2
 800b932:	61a2      	str	r2, [r4, #24]
 800b934:	2000      	movs	r0, #0
 800b936:	6922      	ldr	r2, [r4, #16]
 800b938:	4282      	cmp	r2, r0
 800b93a:	d1ba      	bne.n	800b8b2 <__swsetup_r+0x3e>
 800b93c:	060a      	lsls	r2, r1, #24
 800b93e:	d5b8      	bpl.n	800b8b2 <__swsetup_r+0x3e>
 800b940:	2240      	movs	r2, #64	; 0x40
 800b942:	4313      	orrs	r3, r2
 800b944:	81a3      	strh	r3, [r4, #12]
 800b946:	3801      	subs	r0, #1
 800b948:	e7b3      	b.n	800b8b2 <__swsetup_r+0x3e>
 800b94a:	0788      	lsls	r0, r1, #30
 800b94c:	d400      	bmi.n	800b950 <__swsetup_r+0xdc>
 800b94e:	6962      	ldr	r2, [r4, #20]
 800b950:	60a2      	str	r2, [r4, #8]
 800b952:	e7ef      	b.n	800b934 <__swsetup_r+0xc0>
 800b954:	2000003c 	.word	0x2000003c
 800b958:	0800c72c 	.word	0x0800c72c
 800b95c:	0800c74c 	.word	0x0800c74c
 800b960:	0800c70c 	.word	0x0800c70c

0800b964 <abort>:
 800b964:	2006      	movs	r0, #6
 800b966:	b510      	push	{r4, lr}
 800b968:	f000 fa6c 	bl	800be44 <raise>
 800b96c:	2001      	movs	r0, #1
 800b96e:	f7f8 ff97 	bl	80048a0 <_exit>
	...

0800b974 <__sflush_r>:
 800b974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b976:	898b      	ldrh	r3, [r1, #12]
 800b978:	0005      	movs	r5, r0
 800b97a:	000c      	movs	r4, r1
 800b97c:	071a      	lsls	r2, r3, #28
 800b97e:	d45f      	bmi.n	800ba40 <__sflush_r+0xcc>
 800b980:	684a      	ldr	r2, [r1, #4]
 800b982:	2a00      	cmp	r2, #0
 800b984:	dc04      	bgt.n	800b990 <__sflush_r+0x1c>
 800b986:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800b988:	2a00      	cmp	r2, #0
 800b98a:	dc01      	bgt.n	800b990 <__sflush_r+0x1c>
 800b98c:	2000      	movs	r0, #0
 800b98e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b990:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b992:	2f00      	cmp	r7, #0
 800b994:	d0fa      	beq.n	800b98c <__sflush_r+0x18>
 800b996:	2200      	movs	r2, #0
 800b998:	2180      	movs	r1, #128	; 0x80
 800b99a:	682e      	ldr	r6, [r5, #0]
 800b99c:	602a      	str	r2, [r5, #0]
 800b99e:	001a      	movs	r2, r3
 800b9a0:	0149      	lsls	r1, r1, #5
 800b9a2:	400a      	ands	r2, r1
 800b9a4:	420b      	tst	r3, r1
 800b9a6:	d034      	beq.n	800ba12 <__sflush_r+0x9e>
 800b9a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b9aa:	89a3      	ldrh	r3, [r4, #12]
 800b9ac:	075b      	lsls	r3, r3, #29
 800b9ae:	d506      	bpl.n	800b9be <__sflush_r+0x4a>
 800b9b0:	6863      	ldr	r3, [r4, #4]
 800b9b2:	1ac0      	subs	r0, r0, r3
 800b9b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d001      	beq.n	800b9be <__sflush_r+0x4a>
 800b9ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b9bc:	1ac0      	subs	r0, r0, r3
 800b9be:	0002      	movs	r2, r0
 800b9c0:	6a21      	ldr	r1, [r4, #32]
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	0028      	movs	r0, r5
 800b9c6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b9c8:	47b8      	blx	r7
 800b9ca:	89a1      	ldrh	r1, [r4, #12]
 800b9cc:	1c43      	adds	r3, r0, #1
 800b9ce:	d106      	bne.n	800b9de <__sflush_r+0x6a>
 800b9d0:	682b      	ldr	r3, [r5, #0]
 800b9d2:	2b1d      	cmp	r3, #29
 800b9d4:	d831      	bhi.n	800ba3a <__sflush_r+0xc6>
 800b9d6:	4a2c      	ldr	r2, [pc, #176]	; (800ba88 <__sflush_r+0x114>)
 800b9d8:	40da      	lsrs	r2, r3
 800b9da:	07d3      	lsls	r3, r2, #31
 800b9dc:	d52d      	bpl.n	800ba3a <__sflush_r+0xc6>
 800b9de:	2300      	movs	r3, #0
 800b9e0:	6063      	str	r3, [r4, #4]
 800b9e2:	6923      	ldr	r3, [r4, #16]
 800b9e4:	6023      	str	r3, [r4, #0]
 800b9e6:	04cb      	lsls	r3, r1, #19
 800b9e8:	d505      	bpl.n	800b9f6 <__sflush_r+0x82>
 800b9ea:	1c43      	adds	r3, r0, #1
 800b9ec:	d102      	bne.n	800b9f4 <__sflush_r+0x80>
 800b9ee:	682b      	ldr	r3, [r5, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d100      	bne.n	800b9f6 <__sflush_r+0x82>
 800b9f4:	6560      	str	r0, [r4, #84]	; 0x54
 800b9f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9f8:	602e      	str	r6, [r5, #0]
 800b9fa:	2900      	cmp	r1, #0
 800b9fc:	d0c6      	beq.n	800b98c <__sflush_r+0x18>
 800b9fe:	0023      	movs	r3, r4
 800ba00:	3344      	adds	r3, #68	; 0x44
 800ba02:	4299      	cmp	r1, r3
 800ba04:	d002      	beq.n	800ba0c <__sflush_r+0x98>
 800ba06:	0028      	movs	r0, r5
 800ba08:	f7ff fc2a 	bl	800b260 <_free_r>
 800ba0c:	2000      	movs	r0, #0
 800ba0e:	6360      	str	r0, [r4, #52]	; 0x34
 800ba10:	e7bd      	b.n	800b98e <__sflush_r+0x1a>
 800ba12:	2301      	movs	r3, #1
 800ba14:	0028      	movs	r0, r5
 800ba16:	6a21      	ldr	r1, [r4, #32]
 800ba18:	47b8      	blx	r7
 800ba1a:	1c43      	adds	r3, r0, #1
 800ba1c:	d1c5      	bne.n	800b9aa <__sflush_r+0x36>
 800ba1e:	682b      	ldr	r3, [r5, #0]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d0c2      	beq.n	800b9aa <__sflush_r+0x36>
 800ba24:	2b1d      	cmp	r3, #29
 800ba26:	d001      	beq.n	800ba2c <__sflush_r+0xb8>
 800ba28:	2b16      	cmp	r3, #22
 800ba2a:	d101      	bne.n	800ba30 <__sflush_r+0xbc>
 800ba2c:	602e      	str	r6, [r5, #0]
 800ba2e:	e7ad      	b.n	800b98c <__sflush_r+0x18>
 800ba30:	2340      	movs	r3, #64	; 0x40
 800ba32:	89a2      	ldrh	r2, [r4, #12]
 800ba34:	4313      	orrs	r3, r2
 800ba36:	81a3      	strh	r3, [r4, #12]
 800ba38:	e7a9      	b.n	800b98e <__sflush_r+0x1a>
 800ba3a:	2340      	movs	r3, #64	; 0x40
 800ba3c:	430b      	orrs	r3, r1
 800ba3e:	e7fa      	b.n	800ba36 <__sflush_r+0xc2>
 800ba40:	690f      	ldr	r7, [r1, #16]
 800ba42:	2f00      	cmp	r7, #0
 800ba44:	d0a2      	beq.n	800b98c <__sflush_r+0x18>
 800ba46:	680a      	ldr	r2, [r1, #0]
 800ba48:	600f      	str	r7, [r1, #0]
 800ba4a:	1bd2      	subs	r2, r2, r7
 800ba4c:	9201      	str	r2, [sp, #4]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	079b      	lsls	r3, r3, #30
 800ba52:	d100      	bne.n	800ba56 <__sflush_r+0xe2>
 800ba54:	694a      	ldr	r2, [r1, #20]
 800ba56:	60a2      	str	r2, [r4, #8]
 800ba58:	9b01      	ldr	r3, [sp, #4]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	dc00      	bgt.n	800ba60 <__sflush_r+0xec>
 800ba5e:	e795      	b.n	800b98c <__sflush_r+0x18>
 800ba60:	003a      	movs	r2, r7
 800ba62:	0028      	movs	r0, r5
 800ba64:	9b01      	ldr	r3, [sp, #4]
 800ba66:	6a21      	ldr	r1, [r4, #32]
 800ba68:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ba6a:	47b0      	blx	r6
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	dc06      	bgt.n	800ba7e <__sflush_r+0x10a>
 800ba70:	2340      	movs	r3, #64	; 0x40
 800ba72:	2001      	movs	r0, #1
 800ba74:	89a2      	ldrh	r2, [r4, #12]
 800ba76:	4240      	negs	r0, r0
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	81a3      	strh	r3, [r4, #12]
 800ba7c:	e787      	b.n	800b98e <__sflush_r+0x1a>
 800ba7e:	9b01      	ldr	r3, [sp, #4]
 800ba80:	183f      	adds	r7, r7, r0
 800ba82:	1a1b      	subs	r3, r3, r0
 800ba84:	9301      	str	r3, [sp, #4]
 800ba86:	e7e7      	b.n	800ba58 <__sflush_r+0xe4>
 800ba88:	20400001 	.word	0x20400001

0800ba8c <_fflush_r>:
 800ba8c:	690b      	ldr	r3, [r1, #16]
 800ba8e:	b570      	push	{r4, r5, r6, lr}
 800ba90:	0005      	movs	r5, r0
 800ba92:	000c      	movs	r4, r1
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d102      	bne.n	800ba9e <_fflush_r+0x12>
 800ba98:	2500      	movs	r5, #0
 800ba9a:	0028      	movs	r0, r5
 800ba9c:	bd70      	pop	{r4, r5, r6, pc}
 800ba9e:	2800      	cmp	r0, #0
 800baa0:	d004      	beq.n	800baac <_fflush_r+0x20>
 800baa2:	6983      	ldr	r3, [r0, #24]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d101      	bne.n	800baac <_fflush_r+0x20>
 800baa8:	f000 f892 	bl	800bbd0 <__sinit>
 800baac:	4b14      	ldr	r3, [pc, #80]	; (800bb00 <_fflush_r+0x74>)
 800baae:	429c      	cmp	r4, r3
 800bab0:	d11b      	bne.n	800baea <_fflush_r+0x5e>
 800bab2:	686c      	ldr	r4, [r5, #4]
 800bab4:	220c      	movs	r2, #12
 800bab6:	5ea3      	ldrsh	r3, [r4, r2]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d0ed      	beq.n	800ba98 <_fflush_r+0xc>
 800babc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800babe:	07d2      	lsls	r2, r2, #31
 800bac0:	d404      	bmi.n	800bacc <_fflush_r+0x40>
 800bac2:	059b      	lsls	r3, r3, #22
 800bac4:	d402      	bmi.n	800bacc <_fflush_r+0x40>
 800bac6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bac8:	f000 f923 	bl	800bd12 <__retarget_lock_acquire_recursive>
 800bacc:	0028      	movs	r0, r5
 800bace:	0021      	movs	r1, r4
 800bad0:	f7ff ff50 	bl	800b974 <__sflush_r>
 800bad4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bad6:	0005      	movs	r5, r0
 800bad8:	07db      	lsls	r3, r3, #31
 800bada:	d4de      	bmi.n	800ba9a <_fflush_r+0xe>
 800badc:	89a3      	ldrh	r3, [r4, #12]
 800bade:	059b      	lsls	r3, r3, #22
 800bae0:	d4db      	bmi.n	800ba9a <_fflush_r+0xe>
 800bae2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bae4:	f000 f916 	bl	800bd14 <__retarget_lock_release_recursive>
 800bae8:	e7d7      	b.n	800ba9a <_fflush_r+0xe>
 800baea:	4b06      	ldr	r3, [pc, #24]	; (800bb04 <_fflush_r+0x78>)
 800baec:	429c      	cmp	r4, r3
 800baee:	d101      	bne.n	800baf4 <_fflush_r+0x68>
 800baf0:	68ac      	ldr	r4, [r5, #8]
 800baf2:	e7df      	b.n	800bab4 <_fflush_r+0x28>
 800baf4:	4b04      	ldr	r3, [pc, #16]	; (800bb08 <_fflush_r+0x7c>)
 800baf6:	429c      	cmp	r4, r3
 800baf8:	d1dc      	bne.n	800bab4 <_fflush_r+0x28>
 800bafa:	68ec      	ldr	r4, [r5, #12]
 800bafc:	e7da      	b.n	800bab4 <_fflush_r+0x28>
 800bafe:	46c0      	nop			; (mov r8, r8)
 800bb00:	0800c72c 	.word	0x0800c72c
 800bb04:	0800c74c 	.word	0x0800c74c
 800bb08:	0800c70c 	.word	0x0800c70c

0800bb0c <std>:
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	b510      	push	{r4, lr}
 800bb10:	0004      	movs	r4, r0
 800bb12:	6003      	str	r3, [r0, #0]
 800bb14:	6043      	str	r3, [r0, #4]
 800bb16:	6083      	str	r3, [r0, #8]
 800bb18:	8181      	strh	r1, [r0, #12]
 800bb1a:	6643      	str	r3, [r0, #100]	; 0x64
 800bb1c:	0019      	movs	r1, r3
 800bb1e:	81c2      	strh	r2, [r0, #14]
 800bb20:	6103      	str	r3, [r0, #16]
 800bb22:	6143      	str	r3, [r0, #20]
 800bb24:	6183      	str	r3, [r0, #24]
 800bb26:	2208      	movs	r2, #8
 800bb28:	305c      	adds	r0, #92	; 0x5c
 800bb2a:	f7fd fc93 	bl	8009454 <memset>
 800bb2e:	4b05      	ldr	r3, [pc, #20]	; (800bb44 <std+0x38>)
 800bb30:	6224      	str	r4, [r4, #32]
 800bb32:	6263      	str	r3, [r4, #36]	; 0x24
 800bb34:	4b04      	ldr	r3, [pc, #16]	; (800bb48 <std+0x3c>)
 800bb36:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb38:	4b04      	ldr	r3, [pc, #16]	; (800bb4c <std+0x40>)
 800bb3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb3c:	4b04      	ldr	r3, [pc, #16]	; (800bb50 <std+0x44>)
 800bb3e:	6323      	str	r3, [r4, #48]	; 0x30
 800bb40:	bd10      	pop	{r4, pc}
 800bb42:	46c0      	nop			; (mov r8, r8)
 800bb44:	0800be85 	.word	0x0800be85
 800bb48:	0800bead 	.word	0x0800bead
 800bb4c:	0800bee5 	.word	0x0800bee5
 800bb50:	0800bf11 	.word	0x0800bf11

0800bb54 <_cleanup_r>:
 800bb54:	b510      	push	{r4, lr}
 800bb56:	4902      	ldr	r1, [pc, #8]	; (800bb60 <_cleanup_r+0xc>)
 800bb58:	f000 f8ba 	bl	800bcd0 <_fwalk_reent>
 800bb5c:	bd10      	pop	{r4, pc}
 800bb5e:	46c0      	nop			; (mov r8, r8)
 800bb60:	0800ba8d 	.word	0x0800ba8d

0800bb64 <__sfmoreglue>:
 800bb64:	b570      	push	{r4, r5, r6, lr}
 800bb66:	2568      	movs	r5, #104	; 0x68
 800bb68:	1e4a      	subs	r2, r1, #1
 800bb6a:	4355      	muls	r5, r2
 800bb6c:	000e      	movs	r6, r1
 800bb6e:	0029      	movs	r1, r5
 800bb70:	3174      	adds	r1, #116	; 0x74
 800bb72:	f7ff fbe1 	bl	800b338 <_malloc_r>
 800bb76:	1e04      	subs	r4, r0, #0
 800bb78:	d008      	beq.n	800bb8c <__sfmoreglue+0x28>
 800bb7a:	2100      	movs	r1, #0
 800bb7c:	002a      	movs	r2, r5
 800bb7e:	6001      	str	r1, [r0, #0]
 800bb80:	6046      	str	r6, [r0, #4]
 800bb82:	300c      	adds	r0, #12
 800bb84:	60a0      	str	r0, [r4, #8]
 800bb86:	3268      	adds	r2, #104	; 0x68
 800bb88:	f7fd fc64 	bl	8009454 <memset>
 800bb8c:	0020      	movs	r0, r4
 800bb8e:	bd70      	pop	{r4, r5, r6, pc}

0800bb90 <__sfp_lock_acquire>:
 800bb90:	b510      	push	{r4, lr}
 800bb92:	4802      	ldr	r0, [pc, #8]	; (800bb9c <__sfp_lock_acquire+0xc>)
 800bb94:	f000 f8bd 	bl	800bd12 <__retarget_lock_acquire_recursive>
 800bb98:	bd10      	pop	{r4, pc}
 800bb9a:	46c0      	nop			; (mov r8, r8)
 800bb9c:	20000569 	.word	0x20000569

0800bba0 <__sfp_lock_release>:
 800bba0:	b510      	push	{r4, lr}
 800bba2:	4802      	ldr	r0, [pc, #8]	; (800bbac <__sfp_lock_release+0xc>)
 800bba4:	f000 f8b6 	bl	800bd14 <__retarget_lock_release_recursive>
 800bba8:	bd10      	pop	{r4, pc}
 800bbaa:	46c0      	nop			; (mov r8, r8)
 800bbac:	20000569 	.word	0x20000569

0800bbb0 <__sinit_lock_acquire>:
 800bbb0:	b510      	push	{r4, lr}
 800bbb2:	4802      	ldr	r0, [pc, #8]	; (800bbbc <__sinit_lock_acquire+0xc>)
 800bbb4:	f000 f8ad 	bl	800bd12 <__retarget_lock_acquire_recursive>
 800bbb8:	bd10      	pop	{r4, pc}
 800bbba:	46c0      	nop			; (mov r8, r8)
 800bbbc:	2000056a 	.word	0x2000056a

0800bbc0 <__sinit_lock_release>:
 800bbc0:	b510      	push	{r4, lr}
 800bbc2:	4802      	ldr	r0, [pc, #8]	; (800bbcc <__sinit_lock_release+0xc>)
 800bbc4:	f000 f8a6 	bl	800bd14 <__retarget_lock_release_recursive>
 800bbc8:	bd10      	pop	{r4, pc}
 800bbca:	46c0      	nop			; (mov r8, r8)
 800bbcc:	2000056a 	.word	0x2000056a

0800bbd0 <__sinit>:
 800bbd0:	b513      	push	{r0, r1, r4, lr}
 800bbd2:	0004      	movs	r4, r0
 800bbd4:	f7ff ffec 	bl	800bbb0 <__sinit_lock_acquire>
 800bbd8:	69a3      	ldr	r3, [r4, #24]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d002      	beq.n	800bbe4 <__sinit+0x14>
 800bbde:	f7ff ffef 	bl	800bbc0 <__sinit_lock_release>
 800bbe2:	bd13      	pop	{r0, r1, r4, pc}
 800bbe4:	64a3      	str	r3, [r4, #72]	; 0x48
 800bbe6:	64e3      	str	r3, [r4, #76]	; 0x4c
 800bbe8:	6523      	str	r3, [r4, #80]	; 0x50
 800bbea:	4b13      	ldr	r3, [pc, #76]	; (800bc38 <__sinit+0x68>)
 800bbec:	4a13      	ldr	r2, [pc, #76]	; (800bc3c <__sinit+0x6c>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	62a2      	str	r2, [r4, #40]	; 0x28
 800bbf2:	9301      	str	r3, [sp, #4]
 800bbf4:	42a3      	cmp	r3, r4
 800bbf6:	d101      	bne.n	800bbfc <__sinit+0x2c>
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	61a3      	str	r3, [r4, #24]
 800bbfc:	0020      	movs	r0, r4
 800bbfe:	f000 f81f 	bl	800bc40 <__sfp>
 800bc02:	6060      	str	r0, [r4, #4]
 800bc04:	0020      	movs	r0, r4
 800bc06:	f000 f81b 	bl	800bc40 <__sfp>
 800bc0a:	60a0      	str	r0, [r4, #8]
 800bc0c:	0020      	movs	r0, r4
 800bc0e:	f000 f817 	bl	800bc40 <__sfp>
 800bc12:	2200      	movs	r2, #0
 800bc14:	2104      	movs	r1, #4
 800bc16:	60e0      	str	r0, [r4, #12]
 800bc18:	6860      	ldr	r0, [r4, #4]
 800bc1a:	f7ff ff77 	bl	800bb0c <std>
 800bc1e:	2201      	movs	r2, #1
 800bc20:	2109      	movs	r1, #9
 800bc22:	68a0      	ldr	r0, [r4, #8]
 800bc24:	f7ff ff72 	bl	800bb0c <std>
 800bc28:	2202      	movs	r2, #2
 800bc2a:	2112      	movs	r1, #18
 800bc2c:	68e0      	ldr	r0, [r4, #12]
 800bc2e:	f7ff ff6d 	bl	800bb0c <std>
 800bc32:	2301      	movs	r3, #1
 800bc34:	61a3      	str	r3, [r4, #24]
 800bc36:	e7d2      	b.n	800bbde <__sinit+0xe>
 800bc38:	0800c394 	.word	0x0800c394
 800bc3c:	0800bb55 	.word	0x0800bb55

0800bc40 <__sfp>:
 800bc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc42:	0007      	movs	r7, r0
 800bc44:	f7ff ffa4 	bl	800bb90 <__sfp_lock_acquire>
 800bc48:	4b1f      	ldr	r3, [pc, #124]	; (800bcc8 <__sfp+0x88>)
 800bc4a:	681e      	ldr	r6, [r3, #0]
 800bc4c:	69b3      	ldr	r3, [r6, #24]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d102      	bne.n	800bc58 <__sfp+0x18>
 800bc52:	0030      	movs	r0, r6
 800bc54:	f7ff ffbc 	bl	800bbd0 <__sinit>
 800bc58:	3648      	adds	r6, #72	; 0x48
 800bc5a:	68b4      	ldr	r4, [r6, #8]
 800bc5c:	6873      	ldr	r3, [r6, #4]
 800bc5e:	3b01      	subs	r3, #1
 800bc60:	d504      	bpl.n	800bc6c <__sfp+0x2c>
 800bc62:	6833      	ldr	r3, [r6, #0]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d022      	beq.n	800bcae <__sfp+0x6e>
 800bc68:	6836      	ldr	r6, [r6, #0]
 800bc6a:	e7f6      	b.n	800bc5a <__sfp+0x1a>
 800bc6c:	220c      	movs	r2, #12
 800bc6e:	5ea5      	ldrsh	r5, [r4, r2]
 800bc70:	2d00      	cmp	r5, #0
 800bc72:	d11a      	bne.n	800bcaa <__sfp+0x6a>
 800bc74:	0020      	movs	r0, r4
 800bc76:	4b15      	ldr	r3, [pc, #84]	; (800bccc <__sfp+0x8c>)
 800bc78:	3058      	adds	r0, #88	; 0x58
 800bc7a:	60e3      	str	r3, [r4, #12]
 800bc7c:	6665      	str	r5, [r4, #100]	; 0x64
 800bc7e:	f000 f847 	bl	800bd10 <__retarget_lock_init_recursive>
 800bc82:	f7ff ff8d 	bl	800bba0 <__sfp_lock_release>
 800bc86:	0020      	movs	r0, r4
 800bc88:	2208      	movs	r2, #8
 800bc8a:	0029      	movs	r1, r5
 800bc8c:	6025      	str	r5, [r4, #0]
 800bc8e:	60a5      	str	r5, [r4, #8]
 800bc90:	6065      	str	r5, [r4, #4]
 800bc92:	6125      	str	r5, [r4, #16]
 800bc94:	6165      	str	r5, [r4, #20]
 800bc96:	61a5      	str	r5, [r4, #24]
 800bc98:	305c      	adds	r0, #92	; 0x5c
 800bc9a:	f7fd fbdb 	bl	8009454 <memset>
 800bc9e:	6365      	str	r5, [r4, #52]	; 0x34
 800bca0:	63a5      	str	r5, [r4, #56]	; 0x38
 800bca2:	64a5      	str	r5, [r4, #72]	; 0x48
 800bca4:	64e5      	str	r5, [r4, #76]	; 0x4c
 800bca6:	0020      	movs	r0, r4
 800bca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcaa:	3468      	adds	r4, #104	; 0x68
 800bcac:	e7d7      	b.n	800bc5e <__sfp+0x1e>
 800bcae:	2104      	movs	r1, #4
 800bcb0:	0038      	movs	r0, r7
 800bcb2:	f7ff ff57 	bl	800bb64 <__sfmoreglue>
 800bcb6:	1e04      	subs	r4, r0, #0
 800bcb8:	6030      	str	r0, [r6, #0]
 800bcba:	d1d5      	bne.n	800bc68 <__sfp+0x28>
 800bcbc:	f7ff ff70 	bl	800bba0 <__sfp_lock_release>
 800bcc0:	230c      	movs	r3, #12
 800bcc2:	603b      	str	r3, [r7, #0]
 800bcc4:	e7ef      	b.n	800bca6 <__sfp+0x66>
 800bcc6:	46c0      	nop			; (mov r8, r8)
 800bcc8:	0800c394 	.word	0x0800c394
 800bccc:	ffff0001 	.word	0xffff0001

0800bcd0 <_fwalk_reent>:
 800bcd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcd2:	0004      	movs	r4, r0
 800bcd4:	0006      	movs	r6, r0
 800bcd6:	2700      	movs	r7, #0
 800bcd8:	9101      	str	r1, [sp, #4]
 800bcda:	3448      	adds	r4, #72	; 0x48
 800bcdc:	6863      	ldr	r3, [r4, #4]
 800bcde:	68a5      	ldr	r5, [r4, #8]
 800bce0:	9300      	str	r3, [sp, #0]
 800bce2:	9b00      	ldr	r3, [sp, #0]
 800bce4:	3b01      	subs	r3, #1
 800bce6:	9300      	str	r3, [sp, #0]
 800bce8:	d504      	bpl.n	800bcf4 <_fwalk_reent+0x24>
 800bcea:	6824      	ldr	r4, [r4, #0]
 800bcec:	2c00      	cmp	r4, #0
 800bcee:	d1f5      	bne.n	800bcdc <_fwalk_reent+0xc>
 800bcf0:	0038      	movs	r0, r7
 800bcf2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bcf4:	89ab      	ldrh	r3, [r5, #12]
 800bcf6:	2b01      	cmp	r3, #1
 800bcf8:	d908      	bls.n	800bd0c <_fwalk_reent+0x3c>
 800bcfa:	220e      	movs	r2, #14
 800bcfc:	5eab      	ldrsh	r3, [r5, r2]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	d004      	beq.n	800bd0c <_fwalk_reent+0x3c>
 800bd02:	0029      	movs	r1, r5
 800bd04:	0030      	movs	r0, r6
 800bd06:	9b01      	ldr	r3, [sp, #4]
 800bd08:	4798      	blx	r3
 800bd0a:	4307      	orrs	r7, r0
 800bd0c:	3568      	adds	r5, #104	; 0x68
 800bd0e:	e7e8      	b.n	800bce2 <_fwalk_reent+0x12>

0800bd10 <__retarget_lock_init_recursive>:
 800bd10:	4770      	bx	lr

0800bd12 <__retarget_lock_acquire_recursive>:
 800bd12:	4770      	bx	lr

0800bd14 <__retarget_lock_release_recursive>:
 800bd14:	4770      	bx	lr
	...

0800bd18 <__swhatbuf_r>:
 800bd18:	b570      	push	{r4, r5, r6, lr}
 800bd1a:	000e      	movs	r6, r1
 800bd1c:	001d      	movs	r5, r3
 800bd1e:	230e      	movs	r3, #14
 800bd20:	5ec9      	ldrsh	r1, [r1, r3]
 800bd22:	0014      	movs	r4, r2
 800bd24:	b096      	sub	sp, #88	; 0x58
 800bd26:	2900      	cmp	r1, #0
 800bd28:	da08      	bge.n	800bd3c <__swhatbuf_r+0x24>
 800bd2a:	220c      	movs	r2, #12
 800bd2c:	5eb3      	ldrsh	r3, [r6, r2]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	602a      	str	r2, [r5, #0]
 800bd32:	061b      	lsls	r3, r3, #24
 800bd34:	d411      	bmi.n	800bd5a <__swhatbuf_r+0x42>
 800bd36:	2380      	movs	r3, #128	; 0x80
 800bd38:	00db      	lsls	r3, r3, #3
 800bd3a:	e00f      	b.n	800bd5c <__swhatbuf_r+0x44>
 800bd3c:	466a      	mov	r2, sp
 800bd3e:	f000 f913 	bl	800bf68 <_fstat_r>
 800bd42:	2800      	cmp	r0, #0
 800bd44:	dbf1      	blt.n	800bd2a <__swhatbuf_r+0x12>
 800bd46:	23f0      	movs	r3, #240	; 0xf0
 800bd48:	9901      	ldr	r1, [sp, #4]
 800bd4a:	021b      	lsls	r3, r3, #8
 800bd4c:	4019      	ands	r1, r3
 800bd4e:	4b05      	ldr	r3, [pc, #20]	; (800bd64 <__swhatbuf_r+0x4c>)
 800bd50:	18c9      	adds	r1, r1, r3
 800bd52:	424b      	negs	r3, r1
 800bd54:	4159      	adcs	r1, r3
 800bd56:	6029      	str	r1, [r5, #0]
 800bd58:	e7ed      	b.n	800bd36 <__swhatbuf_r+0x1e>
 800bd5a:	2340      	movs	r3, #64	; 0x40
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	6023      	str	r3, [r4, #0]
 800bd60:	b016      	add	sp, #88	; 0x58
 800bd62:	bd70      	pop	{r4, r5, r6, pc}
 800bd64:	ffffe000 	.word	0xffffe000

0800bd68 <__smakebuf_r>:
 800bd68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd6a:	2602      	movs	r6, #2
 800bd6c:	898b      	ldrh	r3, [r1, #12]
 800bd6e:	0005      	movs	r5, r0
 800bd70:	000c      	movs	r4, r1
 800bd72:	4233      	tst	r3, r6
 800bd74:	d006      	beq.n	800bd84 <__smakebuf_r+0x1c>
 800bd76:	0023      	movs	r3, r4
 800bd78:	3347      	adds	r3, #71	; 0x47
 800bd7a:	6023      	str	r3, [r4, #0]
 800bd7c:	6123      	str	r3, [r4, #16]
 800bd7e:	2301      	movs	r3, #1
 800bd80:	6163      	str	r3, [r4, #20]
 800bd82:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800bd84:	466a      	mov	r2, sp
 800bd86:	ab01      	add	r3, sp, #4
 800bd88:	f7ff ffc6 	bl	800bd18 <__swhatbuf_r>
 800bd8c:	9900      	ldr	r1, [sp, #0]
 800bd8e:	0007      	movs	r7, r0
 800bd90:	0028      	movs	r0, r5
 800bd92:	f7ff fad1 	bl	800b338 <_malloc_r>
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d108      	bne.n	800bdac <__smakebuf_r+0x44>
 800bd9a:	220c      	movs	r2, #12
 800bd9c:	5ea3      	ldrsh	r3, [r4, r2]
 800bd9e:	059a      	lsls	r2, r3, #22
 800bda0:	d4ef      	bmi.n	800bd82 <__smakebuf_r+0x1a>
 800bda2:	2203      	movs	r2, #3
 800bda4:	4393      	bics	r3, r2
 800bda6:	431e      	orrs	r6, r3
 800bda8:	81a6      	strh	r6, [r4, #12]
 800bdaa:	e7e4      	b.n	800bd76 <__smakebuf_r+0xe>
 800bdac:	4b0f      	ldr	r3, [pc, #60]	; (800bdec <__smakebuf_r+0x84>)
 800bdae:	62ab      	str	r3, [r5, #40]	; 0x28
 800bdb0:	2380      	movs	r3, #128	; 0x80
 800bdb2:	89a2      	ldrh	r2, [r4, #12]
 800bdb4:	6020      	str	r0, [r4, #0]
 800bdb6:	4313      	orrs	r3, r2
 800bdb8:	81a3      	strh	r3, [r4, #12]
 800bdba:	9b00      	ldr	r3, [sp, #0]
 800bdbc:	6120      	str	r0, [r4, #16]
 800bdbe:	6163      	str	r3, [r4, #20]
 800bdc0:	9b01      	ldr	r3, [sp, #4]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d00d      	beq.n	800bde2 <__smakebuf_r+0x7a>
 800bdc6:	0028      	movs	r0, r5
 800bdc8:	230e      	movs	r3, #14
 800bdca:	5ee1      	ldrsh	r1, [r4, r3]
 800bdcc:	f000 f8de 	bl	800bf8c <_isatty_r>
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	d006      	beq.n	800bde2 <__smakebuf_r+0x7a>
 800bdd4:	2203      	movs	r2, #3
 800bdd6:	89a3      	ldrh	r3, [r4, #12]
 800bdd8:	4393      	bics	r3, r2
 800bdda:	001a      	movs	r2, r3
 800bddc:	2301      	movs	r3, #1
 800bdde:	4313      	orrs	r3, r2
 800bde0:	81a3      	strh	r3, [r4, #12]
 800bde2:	89a0      	ldrh	r0, [r4, #12]
 800bde4:	4307      	orrs	r7, r0
 800bde6:	81a7      	strh	r7, [r4, #12]
 800bde8:	e7cb      	b.n	800bd82 <__smakebuf_r+0x1a>
 800bdea:	46c0      	nop			; (mov r8, r8)
 800bdec:	0800bb55 	.word	0x0800bb55

0800bdf0 <_raise_r>:
 800bdf0:	b570      	push	{r4, r5, r6, lr}
 800bdf2:	0004      	movs	r4, r0
 800bdf4:	000d      	movs	r5, r1
 800bdf6:	291f      	cmp	r1, #31
 800bdf8:	d904      	bls.n	800be04 <_raise_r+0x14>
 800bdfa:	2316      	movs	r3, #22
 800bdfc:	6003      	str	r3, [r0, #0]
 800bdfe:	2001      	movs	r0, #1
 800be00:	4240      	negs	r0, r0
 800be02:	bd70      	pop	{r4, r5, r6, pc}
 800be04:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800be06:	2b00      	cmp	r3, #0
 800be08:	d004      	beq.n	800be14 <_raise_r+0x24>
 800be0a:	008a      	lsls	r2, r1, #2
 800be0c:	189b      	adds	r3, r3, r2
 800be0e:	681a      	ldr	r2, [r3, #0]
 800be10:	2a00      	cmp	r2, #0
 800be12:	d108      	bne.n	800be26 <_raise_r+0x36>
 800be14:	0020      	movs	r0, r4
 800be16:	f000 f831 	bl	800be7c <_getpid_r>
 800be1a:	002a      	movs	r2, r5
 800be1c:	0001      	movs	r1, r0
 800be1e:	0020      	movs	r0, r4
 800be20:	f000 f81a 	bl	800be58 <_kill_r>
 800be24:	e7ed      	b.n	800be02 <_raise_r+0x12>
 800be26:	2000      	movs	r0, #0
 800be28:	2a01      	cmp	r2, #1
 800be2a:	d0ea      	beq.n	800be02 <_raise_r+0x12>
 800be2c:	1c51      	adds	r1, r2, #1
 800be2e:	d103      	bne.n	800be38 <_raise_r+0x48>
 800be30:	2316      	movs	r3, #22
 800be32:	3001      	adds	r0, #1
 800be34:	6023      	str	r3, [r4, #0]
 800be36:	e7e4      	b.n	800be02 <_raise_r+0x12>
 800be38:	2400      	movs	r4, #0
 800be3a:	0028      	movs	r0, r5
 800be3c:	601c      	str	r4, [r3, #0]
 800be3e:	4790      	blx	r2
 800be40:	0020      	movs	r0, r4
 800be42:	e7de      	b.n	800be02 <_raise_r+0x12>

0800be44 <raise>:
 800be44:	b510      	push	{r4, lr}
 800be46:	4b03      	ldr	r3, [pc, #12]	; (800be54 <raise+0x10>)
 800be48:	0001      	movs	r1, r0
 800be4a:	6818      	ldr	r0, [r3, #0]
 800be4c:	f7ff ffd0 	bl	800bdf0 <_raise_r>
 800be50:	bd10      	pop	{r4, pc}
 800be52:	46c0      	nop			; (mov r8, r8)
 800be54:	2000003c 	.word	0x2000003c

0800be58 <_kill_r>:
 800be58:	2300      	movs	r3, #0
 800be5a:	b570      	push	{r4, r5, r6, lr}
 800be5c:	4d06      	ldr	r5, [pc, #24]	; (800be78 <_kill_r+0x20>)
 800be5e:	0004      	movs	r4, r0
 800be60:	0008      	movs	r0, r1
 800be62:	0011      	movs	r1, r2
 800be64:	602b      	str	r3, [r5, #0]
 800be66:	f7f8 fd0b 	bl	8004880 <_kill>
 800be6a:	1c43      	adds	r3, r0, #1
 800be6c:	d103      	bne.n	800be76 <_kill_r+0x1e>
 800be6e:	682b      	ldr	r3, [r5, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d000      	beq.n	800be76 <_kill_r+0x1e>
 800be74:	6023      	str	r3, [r4, #0]
 800be76:	bd70      	pop	{r4, r5, r6, pc}
 800be78:	20000564 	.word	0x20000564

0800be7c <_getpid_r>:
 800be7c:	b510      	push	{r4, lr}
 800be7e:	f7f8 fcf9 	bl	8004874 <_getpid>
 800be82:	bd10      	pop	{r4, pc}

0800be84 <__sread>:
 800be84:	b570      	push	{r4, r5, r6, lr}
 800be86:	000c      	movs	r4, r1
 800be88:	250e      	movs	r5, #14
 800be8a:	5f49      	ldrsh	r1, [r1, r5]
 800be8c:	f000 f8a4 	bl	800bfd8 <_read_r>
 800be90:	2800      	cmp	r0, #0
 800be92:	db03      	blt.n	800be9c <__sread+0x18>
 800be94:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800be96:	181b      	adds	r3, r3, r0
 800be98:	6563      	str	r3, [r4, #84]	; 0x54
 800be9a:	bd70      	pop	{r4, r5, r6, pc}
 800be9c:	89a3      	ldrh	r3, [r4, #12]
 800be9e:	4a02      	ldr	r2, [pc, #8]	; (800bea8 <__sread+0x24>)
 800bea0:	4013      	ands	r3, r2
 800bea2:	81a3      	strh	r3, [r4, #12]
 800bea4:	e7f9      	b.n	800be9a <__sread+0x16>
 800bea6:	46c0      	nop			; (mov r8, r8)
 800bea8:	ffffefff 	.word	0xffffefff

0800beac <__swrite>:
 800beac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beae:	001f      	movs	r7, r3
 800beb0:	898b      	ldrh	r3, [r1, #12]
 800beb2:	0005      	movs	r5, r0
 800beb4:	000c      	movs	r4, r1
 800beb6:	0016      	movs	r6, r2
 800beb8:	05db      	lsls	r3, r3, #23
 800beba:	d505      	bpl.n	800bec8 <__swrite+0x1c>
 800bebc:	230e      	movs	r3, #14
 800bebe:	5ec9      	ldrsh	r1, [r1, r3]
 800bec0:	2200      	movs	r2, #0
 800bec2:	2302      	movs	r3, #2
 800bec4:	f000 f874 	bl	800bfb0 <_lseek_r>
 800bec8:	89a3      	ldrh	r3, [r4, #12]
 800beca:	4a05      	ldr	r2, [pc, #20]	; (800bee0 <__swrite+0x34>)
 800becc:	0028      	movs	r0, r5
 800bece:	4013      	ands	r3, r2
 800bed0:	81a3      	strh	r3, [r4, #12]
 800bed2:	0032      	movs	r2, r6
 800bed4:	230e      	movs	r3, #14
 800bed6:	5ee1      	ldrsh	r1, [r4, r3]
 800bed8:	003b      	movs	r3, r7
 800beda:	f000 f81f 	bl	800bf1c <_write_r>
 800bede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bee0:	ffffefff 	.word	0xffffefff

0800bee4 <__sseek>:
 800bee4:	b570      	push	{r4, r5, r6, lr}
 800bee6:	000c      	movs	r4, r1
 800bee8:	250e      	movs	r5, #14
 800beea:	5f49      	ldrsh	r1, [r1, r5]
 800beec:	f000 f860 	bl	800bfb0 <_lseek_r>
 800bef0:	89a3      	ldrh	r3, [r4, #12]
 800bef2:	1c42      	adds	r2, r0, #1
 800bef4:	d103      	bne.n	800befe <__sseek+0x1a>
 800bef6:	4a05      	ldr	r2, [pc, #20]	; (800bf0c <__sseek+0x28>)
 800bef8:	4013      	ands	r3, r2
 800befa:	81a3      	strh	r3, [r4, #12]
 800befc:	bd70      	pop	{r4, r5, r6, pc}
 800befe:	2280      	movs	r2, #128	; 0x80
 800bf00:	0152      	lsls	r2, r2, #5
 800bf02:	4313      	orrs	r3, r2
 800bf04:	81a3      	strh	r3, [r4, #12]
 800bf06:	6560      	str	r0, [r4, #84]	; 0x54
 800bf08:	e7f8      	b.n	800befc <__sseek+0x18>
 800bf0a:	46c0      	nop			; (mov r8, r8)
 800bf0c:	ffffefff 	.word	0xffffefff

0800bf10 <__sclose>:
 800bf10:	b510      	push	{r4, lr}
 800bf12:	230e      	movs	r3, #14
 800bf14:	5ec9      	ldrsh	r1, [r1, r3]
 800bf16:	f000 f815 	bl	800bf44 <_close_r>
 800bf1a:	bd10      	pop	{r4, pc}

0800bf1c <_write_r>:
 800bf1c:	b570      	push	{r4, r5, r6, lr}
 800bf1e:	0004      	movs	r4, r0
 800bf20:	0008      	movs	r0, r1
 800bf22:	0011      	movs	r1, r2
 800bf24:	001a      	movs	r2, r3
 800bf26:	2300      	movs	r3, #0
 800bf28:	4d05      	ldr	r5, [pc, #20]	; (800bf40 <_write_r+0x24>)
 800bf2a:	602b      	str	r3, [r5, #0]
 800bf2c:	f7f8 fce1 	bl	80048f2 <_write>
 800bf30:	1c43      	adds	r3, r0, #1
 800bf32:	d103      	bne.n	800bf3c <_write_r+0x20>
 800bf34:	682b      	ldr	r3, [r5, #0]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d000      	beq.n	800bf3c <_write_r+0x20>
 800bf3a:	6023      	str	r3, [r4, #0]
 800bf3c:	bd70      	pop	{r4, r5, r6, pc}
 800bf3e:	46c0      	nop			; (mov r8, r8)
 800bf40:	20000564 	.word	0x20000564

0800bf44 <_close_r>:
 800bf44:	2300      	movs	r3, #0
 800bf46:	b570      	push	{r4, r5, r6, lr}
 800bf48:	4d06      	ldr	r5, [pc, #24]	; (800bf64 <_close_r+0x20>)
 800bf4a:	0004      	movs	r4, r0
 800bf4c:	0008      	movs	r0, r1
 800bf4e:	602b      	str	r3, [r5, #0]
 800bf50:	f7f8 fceb 	bl	800492a <_close>
 800bf54:	1c43      	adds	r3, r0, #1
 800bf56:	d103      	bne.n	800bf60 <_close_r+0x1c>
 800bf58:	682b      	ldr	r3, [r5, #0]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d000      	beq.n	800bf60 <_close_r+0x1c>
 800bf5e:	6023      	str	r3, [r4, #0]
 800bf60:	bd70      	pop	{r4, r5, r6, pc}
 800bf62:	46c0      	nop			; (mov r8, r8)
 800bf64:	20000564 	.word	0x20000564

0800bf68 <_fstat_r>:
 800bf68:	2300      	movs	r3, #0
 800bf6a:	b570      	push	{r4, r5, r6, lr}
 800bf6c:	4d06      	ldr	r5, [pc, #24]	; (800bf88 <_fstat_r+0x20>)
 800bf6e:	0004      	movs	r4, r0
 800bf70:	0008      	movs	r0, r1
 800bf72:	0011      	movs	r1, r2
 800bf74:	602b      	str	r3, [r5, #0]
 800bf76:	f7f8 fce2 	bl	800493e <_fstat>
 800bf7a:	1c43      	adds	r3, r0, #1
 800bf7c:	d103      	bne.n	800bf86 <_fstat_r+0x1e>
 800bf7e:	682b      	ldr	r3, [r5, #0]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d000      	beq.n	800bf86 <_fstat_r+0x1e>
 800bf84:	6023      	str	r3, [r4, #0]
 800bf86:	bd70      	pop	{r4, r5, r6, pc}
 800bf88:	20000564 	.word	0x20000564

0800bf8c <_isatty_r>:
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	b570      	push	{r4, r5, r6, lr}
 800bf90:	4d06      	ldr	r5, [pc, #24]	; (800bfac <_isatty_r+0x20>)
 800bf92:	0004      	movs	r4, r0
 800bf94:	0008      	movs	r0, r1
 800bf96:	602b      	str	r3, [r5, #0]
 800bf98:	f7f8 fcdf 	bl	800495a <_isatty>
 800bf9c:	1c43      	adds	r3, r0, #1
 800bf9e:	d103      	bne.n	800bfa8 <_isatty_r+0x1c>
 800bfa0:	682b      	ldr	r3, [r5, #0]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d000      	beq.n	800bfa8 <_isatty_r+0x1c>
 800bfa6:	6023      	str	r3, [r4, #0]
 800bfa8:	bd70      	pop	{r4, r5, r6, pc}
 800bfaa:	46c0      	nop			; (mov r8, r8)
 800bfac:	20000564 	.word	0x20000564

0800bfb0 <_lseek_r>:
 800bfb0:	b570      	push	{r4, r5, r6, lr}
 800bfb2:	0004      	movs	r4, r0
 800bfb4:	0008      	movs	r0, r1
 800bfb6:	0011      	movs	r1, r2
 800bfb8:	001a      	movs	r2, r3
 800bfba:	2300      	movs	r3, #0
 800bfbc:	4d05      	ldr	r5, [pc, #20]	; (800bfd4 <_lseek_r+0x24>)
 800bfbe:	602b      	str	r3, [r5, #0]
 800bfc0:	f7f8 fcd4 	bl	800496c <_lseek>
 800bfc4:	1c43      	adds	r3, r0, #1
 800bfc6:	d103      	bne.n	800bfd0 <_lseek_r+0x20>
 800bfc8:	682b      	ldr	r3, [r5, #0]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d000      	beq.n	800bfd0 <_lseek_r+0x20>
 800bfce:	6023      	str	r3, [r4, #0]
 800bfd0:	bd70      	pop	{r4, r5, r6, pc}
 800bfd2:	46c0      	nop			; (mov r8, r8)
 800bfd4:	20000564 	.word	0x20000564

0800bfd8 <_read_r>:
 800bfd8:	b570      	push	{r4, r5, r6, lr}
 800bfda:	0004      	movs	r4, r0
 800bfdc:	0008      	movs	r0, r1
 800bfde:	0011      	movs	r1, r2
 800bfe0:	001a      	movs	r2, r3
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	4d05      	ldr	r5, [pc, #20]	; (800bffc <_read_r+0x24>)
 800bfe6:	602b      	str	r3, [r5, #0]
 800bfe8:	f7f8 fc66 	bl	80048b8 <_read>
 800bfec:	1c43      	adds	r3, r0, #1
 800bfee:	d103      	bne.n	800bff8 <_read_r+0x20>
 800bff0:	682b      	ldr	r3, [r5, #0]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d000      	beq.n	800bff8 <_read_r+0x20>
 800bff6:	6023      	str	r3, [r4, #0]
 800bff8:	bd70      	pop	{r4, r5, r6, pc}
 800bffa:	46c0      	nop			; (mov r8, r8)
 800bffc:	20000564 	.word	0x20000564

0800c000 <_init>:
 800c000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c002:	46c0      	nop			; (mov r8, r8)
 800c004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c006:	bc08      	pop	{r3}
 800c008:	469e      	mov	lr, r3
 800c00a:	4770      	bx	lr

0800c00c <_fini>:
 800c00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c00e:	46c0      	nop			; (mov r8, r8)
 800c010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c012:	bc08      	pop	{r3}
 800c014:	469e      	mov	lr, r3
 800c016:	4770      	bx	lr
